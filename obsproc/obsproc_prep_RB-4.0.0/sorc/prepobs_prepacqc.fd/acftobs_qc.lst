Page 1           Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

      1 ccccc
      2 c 2013-02-07  D. Keyser  -- Final changes to run on WCOSS: use formatted print statements
      3 c                           where previously unformatted print was > 80 characters; use GNU
      4 c                           standard call "date_and_time" instead of calls to "date" and
      5 c                           "time" to obtain system date and time to avoid ifort compiler
      6 c                           warning
      7 c 2014-07-18  D. Keyser  -- 
      8 c                    - Keep track of maximum value for number of flights calculated at some
      9 c                      point during the processing of subroutine acftobs_qc.  If, at the end
     10 c                      of acftobs_qc, this value is at least 90% of the allowed limit
     11 c                      ("maxflt", set in the main program), post a diagnostic warning message
     12 c                      to the production joblog file prior to exiting from acftobs_qc. 
     13 c                    - In subr. do_flt and do_reg, return (abnormally) immediately if
     14 c                      "maxflt" is exceeded rather than waiting to test for this at end of
     15 c                      do_flt and do_reg and then return (abnormally).  Prior to return
     16 c                      subtract 1 from number of flights so it will remain at "maxflt". The
     17 c                      immediate return avoids clobbering of memory in these cases.
     18 c                    - In subr. reorder, where any new flight exceeding "maxflt" replaces the
     19 c                      previous flight at index "maxflt" in the arrays to avoid an array
     20 c                      overflow (done in two places original NRL version), post a diagnostic
     21 c                      warning message to the production joblog file (found a third instance
     22 c                      where this needs to be done in subr, reorder - original NRL version
     23 c                      did not trap it and arrays limited to length "maxflt" would have
     24 c                      overflowed).
     25 c                    - If "maxflt" is exceeded in subr. dupchk (1 place possible) or in subr.
     26 c                      do_flt (2 places possible), the abnormal return back to subr.
     27 c                      acftobs_qc results in subr. acftobs_qc now continuing on but setting a
     28 c                      flag for "maxflt_exceeded".  Prior to this, subr. acftobs_qc itself
     29 c                      immediately performed an abnormal return  back to main program in such
     30 c                      cases resulting in no more NRL QC processing.  Now NRL QC processing
     31 c                      will continue on to the end of subr. acftobs_qc where the abnormal
     32 c                      return  back to the main program will be triggered by the
     33 c                      "maxflt_exceeded" flag.
     34 c                    - There is one, apparently rare, condition where "maxflt" could be
     35 c                      exceeded in subr. acft_obs itself (within logic which generates master
     36 c                      list of tail numbers and counts).  Since it can't be determined if
     37 c                      continuing on without processing (QC'ing) any more data would yield
     38 c                      acceptable results, the program now immediately stops with condition
     39 c                      code 98 and a diagnostic warning message is posted to the production
     40 c                      joblog file noting that "maxflt" needs to be increased.  Prior to this
     41 c                      it returned to the main program where it also immediately stopped with
     42 c                      condition code 98 (so no real change in what happens here, just where
     43 c                      it happens).
     44 c                    - Increased format width from I5 to I6 in all places where aircraft obs
     45 c                      index is listed out (since there now can be > 99999 reports).
     46 c 2016-12-09  D. Keyser  -- 
     47 c                    - Since "ACARS" as referred to here is not used and we earlier decided to
     48 c                      use this to provide a separate category for TAMDARs (for stratifying
     49 c                      statistics), all printout here changes the term "ACARS" to "TAMDAR".
     50 c                      In addition, all comments now refer to "TAMDAR" instead of "ACARS".
     51 c                    - Variables holding latitude and longitude data (including input
     52 c                      arguments "alat" and "alon") now double precision. XOB and YOB in
     53 c                      PREPBUFR file now scaled to 10**5 (was 10**2) to handle new v7 AMDAR
     54 c                      and MDCRS reports which have this higher precision.
     55 c                      BENEFIT: Retains exact precison here. Improves QC processing.
     56 c                         - Note: QC here can be improved further by changing logic in many
     57 c                                 places to account for the increased precision. This needs to

Page 2           Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

     58 c                                 be investigated.  For now, locations in code where this
     59 c                                 seems possible are noted by the spanning comments:
     60 c                      ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
     61 c                      ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
     62 c                         - The format for all print statements containing latitude and longitude
     63 c                           changed to print to 5 decimal places.
     64 c                         - Intrinsic function "ifix" replaced with "int" for cases where the
     65 c                           argument is now a real*8 lat or lon (else compiler error if "ifix"
     66 c                           operates on a real*8 argument).
     67 c
     68 c   BEST VIEWED WITH 94-CHARACTER WIDTH WINDOW
     69 ccccc
     70 c
     71 c ###################################################################
     72 c                            subroutine acftobs_qc
     73 c ###################################################################
     74 c
     75       subroutine acftobs_qc(max_reps,cdtg_an,numreps,krej
     76      x,    c_acftreg,c_acftid,itype,idt,idp,alon,alat,pres,ht_ft
     77      x,    ob_t,ob_q,ob_dir,ob_spd,t_prcn
     78      x,    xiv_t,xiv_q,xiv_d,xiv_s,ichk_t,ichk_q,ichk_d,ichk_s
     79      x,    nchk_t,nchk_q,nchk_d,nchk_s
     80      x,    indx,isave,in_bad,c_qc,csort
     81      x,    maxflt,kflight,creg_flt,cid_flt,cid_flt_old,l_newflt
     82      x,    nobs_flt,iobs_flt,ntot_flt,nrej_flt,ntot_flt_old,nrej_flt_old
     83      x,    creg_reg,nobs_reg,ntot_reg,nrej_reg,ntemp_reg,nwind_reg
     84      x,    nwhol_reg,creg_reg_tot,nobs_reg_tot,nwhol_reg_tot
     85      x,    nrej_reg_tot,ntemp_reg_tot,nwind_reg_tot,nrej_inv_tot
     86      x,    nrej_stk_tot,nrej_grc_tot,nrej_pos_tot,nrej_ord_tot
     87      x,    nrej_sus_tot,lead_t_tot,lead_d_tot,lead_s_tot,n_xiv_t
     88      x,    n_xiv_d,n_xiv_s,sum_xiv_t,sum_xiv_d,sum_xiv_s,sumabs_xiv_t
     89      x,    sumabs_xiv_d,sumabs_xiv_s,l_minus9c
     90      x,    l_last,l_first_date,l_operational,l_pc,l_ncep,*)
     91 c
     92 c This routine performs qc checks on the combined ACARS, AIREP, PIREP,
     93 c AMDAR and TAMDAR aircraft data.  To the extent possible, the data are
     94 c sorted into tracks and checked for consistency along the tracks.
     95 
     96 cxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     97 c For NCEP purposes NRL ACARS applies to TAMDAR - all references to
     98 c  ACARS are changed to TAMDAR in printout
     99 cxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    100 
    101 c Adapted from sortacrs--P.M. Pauley's original ACARS QC program
    102 c Most QC checks patterned after those developed by Bill Moninger
    103 c
    104 c Programmer: P.M. Pauley (12/22/97--modified 09/13/99)
    105 c                          version of 2/9/2000
    106 c
    107 c Input:  arrays containing observations 
    108 c
    109 c Output: (possibly re-ordered) arrays containing observations with qc flags set
    110 c
    111 c # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
    112 c
    113       implicit none
    114 c

Page 3           Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

    115 c Parameter statements
    116 c --------------------
    117       integer io8,io30,io31,io32,io33,io34,io35,io36,io37,io38
    118       parameter(io8 = 8)             ! i/o unit number for log file
    119 c
    120       parameter(io30 = 30)             ! i/o unit for duplicate check rejects
    121       parameter(io31 = 31)             ! i/o unit for spike check rejects
    122       parameter(io32 = 32)             ! i/o unit for invalid check rejects
    123       parameter(io33 = 33)             ! i/o unit for stuck check rejects
    124       parameter(io34 = 34)             ! i/o unit for gross check rejects
    125       parameter(io35 = 35)             ! i/o unit for position check rejects
    126       parameter(io36 = 36)             ! i/o unit for ordering check rejects
    127       parameter(io37 = 37)             ! i/o unit for suspect data check rejects
    128       parameter(io38 = 38)             ! i/o unit for reject list check rejects
    129 c     (If it is desirable to place all rejected reports in a single file, the
    130 c      numbers assigned in these parameter statements should be set equal so that
    131 c      the bad reports are all written to the bad data file.)
    132 c
    133 c      integer nbadlat,nbadwind
    134 c      parameter(nbadlat = 63)          ! # of acft with decimal lat/lons
    135 c      parameter(nbadwind = 198)        ! # of acft with flipped winds
    136 c
    137       integer nbadtemp,nblkwind,nblktemp
    138       parameter(nbadtemp = 59)         ! # of acft with temps in whole degrees
    139       parameter(nblkwind = 67)         ! # of acft blacklisted for wind errors
    140       parameter(nblktemp = 45)         ! # of acft blacklisted for temp errors
    141 c
    142       integer imiss
    143       real amiss
    144       parameter(imiss = 99 999)        ! integer missing value flag
    145       parameter(amiss = -9999.)        ! real missing value flag
    146 c
    147       character*8 cregmiss,cidmiss
    148       parameter(cregmiss = '        ') ! missing value flag for tail number
    149       parameter(cidmiss  = '9999-999') ! missing value flag for flight number
    150 c
    151       real ft2m
    152       parameter(ft2m = 3.28084)        ! conversion factor to convert ft to m
    153 c
    154       integer idt_near,idt_updn,idt_samflt
    155       parameter(idt_near = 1805)       ! time diff between "near" neighbors (was a0)
    156       parameter(idt_updn = 180)        ! time diff to check ascents/descents
    157       parameter(idt_samflt = 7200)     ! time diff allowed for same flight
    158 c
    159       real htdif_same         
    160       parameter(htdif_same = 100.)     ! height difference considered negligible
    161 c
    162       real htdif_1min         
    163       parameter(htdif_1min = 8000.)    ! maximum height difference allowed in one minute
    164 c
    165 c Declaration statements
    166 c ----------------------
    167       integer      max_reps            ! maximum number of input reports allowed
    168                                        ! (initialized by calling routine)
    169 cvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
    170 c replace above with this in event of future switch to dynamic memory allocation
    171 

Page 4           Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

    172 callocinteger      max_reps            ! original number of input reports obtained from
    173 calloc                                 ! first pass through to get total for array allocation
    174 c^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    175 
    176 c
    177 c     Internal QC flags
    178 c     -----------------
    179       character*11 c_qc(max_reps)
    180 c
    181 c     Legend for QC flags
    182 c     -------------------
    183 c     ( 1:1 ) info about reject
    184 c             'A'--altitude error
    185 c             'B'--report declared bad in decoder or aircraft id = XX999
    186 c             'd'--near duplicate
    187 c             'D'--exact duplicate
    188 c             'e'--encode error--reject report with missing winds
    189 c             'E'--encode error--report rejected
    190 c             'N'--duplicate check or stuck value check not performed
    191 c             'O'--isolated off-track point
    192 c             'p'--point closer to last rejected point than to current point
    193 c             'P'--unrealistic airspeed
    194 c             'r'--redundant report
    195 c             's'--suspect reports--too few reports to check
    196 c             'S'--suspect reports--too many rejects for flight
    197 c             't'--time error
    198 c             'v'--report failed bounce test
    199 c             'V'--unrealistic vertical speed
    200 c             'W'--waypoint error
    201 c             'X'--isolated minimum/maximum altitude
    202 c             '2'--second flight with same ident found
    203 c             '.'--good report
    204 c             '-'--not checked
    205 c
    206 c                                 'A'--anomalous
    207 c     ( 2:2 ) time             \  'B' or 'b'--bad
    208 c     ( 3:3 ) latitude          | 'E'--encode error
    209 c     ( 4:4 ) longitude         | 'I' or 'i'--inconsistent
    210 c     ( 5:5 ) pressure/altitude | 'K'--constant (stuck) values
    211 c     ( 6:6 ) temperature       | 'M'--missing
    212 c     ( 7:7 ) direction         | 'N'--not checked
    213 c     ( 8:8 ) speed             | 'R' or 'r'--rehabilitated [1]
    214 c     ( 9:9 ) moisture         /  'S'--suspect
    215 c                                 '-'--not checked
    216 c     					        '.'--passed checks
    217 c
    218 c     (10:10) black lists
    219 c             'C'--aircraft reports temperature in whole deg C
    220 c             'F'--aircraft reports flipped winds (not checked here)
    221 c             'L'--aircraft reports decimal lat/lon (not checked here)
    222 c             'T'--temperature blacklisted
    223 c             'W'--winds blacklisted
    224 c             'O'--both temperature and winds blacklisted
    225 c             '.'--passed black-list checks
    226 c
    227 c     (11:11) flight phase
    228 c             'a'--low-resolution ascent

Page 5           Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

    229 c             'A'--high-resolution ascent
    230 c             'd'--low-resolution descent
    231 c             'D'--high-resolution descent
    232 c             'I'--isolated report
    233 c             'L'--level flight
    234 c             'N'--time difference too great to permit check
    235 c             'U'--unknown
    236 c 
    237 c     [1] If altitude is read and pressure computed, c_qc(ii)(5:5) = 'R'
    238 c         If pressure is read and altitude computed, c_qc(ii)(5:5) = 'r'
    239 c
    240 c     Data arrays
    241 c     -----------
    242       character*10 cdtg_an             ! date time group for analysis
    243       integer      numreps_orig        ! original number of reports passed in (bad and good)
    244       integer      numreps             ! number of reports (deemped "good"
    245                                        !  reports after each QC step)
    246       integer      itype(max_reps)     ! type of aircraft data
    247       integer      idt(max_reps)       ! time in seconds to analysis time 
    248       integer      idp(max_reps)       ! surface pressure change at ob location
    249       character*8  c_acftreg(max_reps) ! aircraft registration (tail) number
    250       character*9  c_acftid(max_reps)  ! aircraft flight number
    251       real*8       alat(max_reps)      ! latitude
    252      $,            alon(max_reps)      ! longitude
    253       real         pres(max_reps)      ! pressure
    254      $,            ht_ft(max_reps)     ! height in feet
    255       real         t_prcn(max_reps)    ! temperature precision
    256       real         ob_t(max_reps)      ! temperature
    257      $,            ob_q(max_reps)      ! specific humidity
    258      $,            ob_dir(max_reps)    ! wind direction
    259      $,            ob_spd(max_reps)    ! wind speed
    260       real         xiv_t(max_reps)     ! temperature innovation (ob - bk)
    261      $,            xiv_q(max_reps)     ! specific humidity innovation (ob - bk)
    262      $,            xiv_d(max_reps)     ! wind direction innovation (ob - bk)
    263      $,            xiv_s(max_reps)     ! wind speed innovation (ob - bk)
    264       integer      ichk_t(max_reps)    ! NRL QC flag for temperature ob
    265      $,            ichk_q(max_reps)    ! NRL QC flag for specific humidity ob
    266      $,            ichk_d(max_reps)    ! NRL QC flag for wind direction ob
    267      $,            ichk_s(max_reps)    ! NRL QC flag for wind speed ob
    268       integer      nchk_t(max_reps)    ! NCEP QC flag for temperature ob
    269      $,            nchk_q(max_reps)    ! NCEP QC flag for specific humidity ob
    270      $,            nchk_d(max_reps)    ! NCEP QC flag for wind direction ob
    271      $,            nchk_s(max_reps)    ! NCEP QC flag for wind speed ob
    272       logical      l_minus9c(max_reps) ! true for mdcrs -9C temperatures
    273 c
    274 c     Arrays for mixed duplicates
    275 c     ---------------------------
    276       integer      maxflt              ! maximum number of flights in dataset
    277                                        !  (initialized by calling routine)
    278       integer      maxflt_exceeded     ! flag to indicate that maxflt has been exceeded (=1,
    279                                        !  else =0)
    280       character*6  cmaxflt             ! character form of maxflt for NCEP print statement
    281 c      character*9  c_air_id(max_reps)  ! airep flight id for mixed duplicate
    282 ccccdak     x,            c_acr_id(max_reps)  ! acars flight id for mixed duplicate
    283 c     x,            c_acr_id(max_reps)  ! tamdar flight id for mixed duplicate
    284 ccccdak      character*8  c_acr_reg(maxflt)   ! acars tail number for mixed duplicate
    285 c      character*8  c_acr_reg(maxflt)   ! tamdar tail number for mixed duplicate

Page 6           Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

    286 c      integer      idt_min(maxflt)     ! min time for flight segment
    287 c     $,            idt_max(maxflt)     ! max time for flight segment
    288 c
    289 c     Pointers
    290 c     --------
    291       integer      indx(max_reps)      ! pointer index for good reports
    292      $,            in_bad(max_reps)    ! pointer index for bad reports
    293      $,            isave(max_reps)     ! second pointer index
    294      $,            krej                ! counter for number of reports rejected
    295 c
    296 c     Blacklists
    297 c     ----------
    298       character*8  cbadtemp(nbadtemp)  ! acft reports temperature in whole deg C
    299 c     $,            cbadlat(nbadlat)    ! acft reports decimal lat/lon
    300 c     $,            cbadwind(nbadwind)  ! acft reports flipped winds
    301      $,            cblkwind(nblkwind)  ! winds blacklisted
    302      $,            cblktemp(nblktemp)  ! temperatures blacklisted
    303 c
    304 c     Flight statistics
    305 c     -----------------
    306       integer      kflight             ! number of flights in dataset
    307       integer      kflight_max         ! number of flights in dataset (maximum over course of
    308                                        !  processing)
    309       character*8  creg_flt(maxflt)    ! tail number for each flight
    310       character*9  cid_flt(maxflt)     ! flight id for each flight
    311      $,            cid_flt_old(maxflt) ! previous value of cid_flt
    312       integer      nobs_flt(maxflt)    ! number of reports per flight
    313      $,            iobs_flt(maxflt)    ! index for first report in each flight
    314      $,            ntot_flt(maxflt)    ! total number of reports per flight
    315      $,            nrej_flt(maxflt)    ! number of reports rejected per flight
    316      $,            ntot_flt_old(maxflt)! previous value of total number of reports per flight
    317      $,            nrej_flt_old(maxflt)! previous value of # of reports rejected per flight
    318 c
    319 c     Tail number statistics
    320 c     ----------------------
    321       integer      kreg                ! actual number of tail numbers in dataset
    322       integer      kreg_max            ! actual number of tail numbers in dataset (maximum
    323                                        !  over course of processing)
    324       character*8  creg_reg(maxflt)    ! tail numbers
    325       integer      nobs_reg(maxflt,5)  ! number of reports per tail number per type
    326       integer      ntot_reg(maxflt,5)  ! total number of reports rejected per tail number
    327       integer      nrej_reg(maxflt,5)  ! number of reports rejected per tail number
    328       integer      ntemp_reg(maxflt,5) ! number of reports w. rejected temp
    329       integer      nwind_reg(maxflt,5) ! number of reports w. rejected winds
    330       integer      nwhol_reg(maxflt,5) ! number of reports w. temp in whole deg
    331 c
    332       integer      kreg_tot            ! number of unique tail numbers
    333       integer      kreg_tot_max        ! number of unique tail numbers (maximum over course
    334                                        !  of processing)
    335       character*8  creg_reg_tot(maxflt)! master list of tail numbers
    336       integer      nobs_reg_tot(maxflt,5) ! number of reports per tail number
    337      $,            nwhol_reg_tot(maxflt,5)! number of temps in whole degs /tail number
    338      $,            nrej_reg_tot(maxflt,5) ! number of reports rejected per tail number
    339      $,            ntemp_reg_tot(maxflt,5)! number of temps rejected per tail number
    340      $,            nwind_reg_tot(maxflt,5)! number of winds rejected per tail number
    341      $,            nrej_inv_tot(maxflt,5) ! number of reports rejected in invalid
    342      $,            nrej_stk_tot(maxflt,5) ! number of reports rejected in stkchek

Page 7           Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

    343      $,            nrej_grc_tot(maxflt,5) ! number of reports rejected in grchek
    344      $,            nrej_pos_tot(maxflt,5) ! number of reports rejected in poschek
    345      $,            nrej_ord_tot(maxflt,5) ! number of reports rejected in ordchek
    346      $,            nrej_sus_tot(maxflt,5) ! number of reports rejected in suspect data check
    347       integer      lead_t_tot(maxflt,11,2)  ! distribution of temperature innovations
    348      $,            lead_d_tot(maxflt,11,2)  ! distribution of temperature innovations
    349      $,            lead_s_tot(maxflt,11,2)  ! distribution of temperature innovations
    350      $,            n_xiv_t(maxflt,2)    ! number of temperature innovations
    351      $,            n_xiv_d(maxflt,2)    ! number of wind direction innovations
    352      $,            n_xiv_s(maxflt,2)    ! number of wind speed innovations
    353       integer      mm                   ! do loop index--over tail numbers
    354       real         percent              ! percentage of obs rejected
    355       real         sum_xiv_t(maxflt,2)    ! sum of temperature innovations
    356      $,            sum_xiv_d(maxflt,2)    ! sum of wind direction innovations
    357      $,            sum_xiv_s(maxflt,2)    ! sum of wind speed innovations
    358      $,            sumabs_xiv_t(maxflt,2) ! sum of absolute value of temperature innovations
    359      $,            sumabs_xiv_d(maxflt,2) ! sum of absolute value of wind direction innovations
    360      $,            sumabs_xiv_s(maxflt,2) ! sum of absolute value of wind speed innovations
    361       logical      l_newflt(maxflt)       ! true if flight is new flight
    362 c
    363 c     Data counters
    364 c     -------------
    365       integer      kbadtot             ! total number of rejected reports
    366      $,            n_minus9C(5)        ! number of -9C temperatures rejected
    367 c
    368 c     Functions
    369 c     ---------
    370       character*16 c_insty_ob          ! function to convert integer instrument
    371                                        !   type to character instrument type
    372 c
    373       integer      insty_ob_fun        ! function to convert character
    374                                        !   instrument type to integer
    375 c
    376 c     Other variables
    377 c     ---------------
    378       integer      ii                  ! do loop index
    379      $,            kk                  ! do loop index
    380      $,            iob                 ! do loop index--over reports
    381      $,            len                 ! length of filename
    382 ccccdak      integer      knt_acars           ! number of acars reports
    383       integer      knt_acars           ! number of tamdar reports
    384      $,            knt_mdcrs           ! number of mdcrs reports
    385      $,            knt_man_airep       ! number of manual airep reports
    386      $,            knt_man_Yairep      ! number of manual YRXX airep reports
    387      $,            knt_airep           ! number of airep reports
    388      $,            knt_amdar           ! number of amdar reports
    389 c
    390 ccccdak      integer      i_acars             ! instrument type for acars
    391       integer      i_acars             ! instrument type for tamdar
    392 ccccdak     $,            i_acars_lvl         ! instrument type for acars--level flt
    393      $,            i_acars_lvl         ! instrument type for tamdar--level flt
    394 ccccdak     $,            i_acars_asc         ! instrument type for acars--ascent
    395      $,            i_acars_asc         ! instrument type for tamdar--ascent
    396 ccccdak     $,            i_acars_des         ! instrument type for acars--descent
    397      $,            i_acars_des         ! instrument type for tamdar--descent
    398      $,            i_mdcrs             ! instrument type for mdcrs
    399      $,            i_mdcrs_lvl         ! instrument type for mdcrs--level flt

Page 8           Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

    400      $,            i_mdcrs_asc         ! instrument type for mdcrs--ascent
    401      $,            i_mdcrs_des         ! instrument type for mdcrs--descent
    402      $,            i_man_airep         ! instrument type for manual aireps
    403      $,            i_man_Yairep        ! instrument type for manual aireps (YRXX)
    404      $,            i_airep             ! instrument type for airep
    405      $,            i_airep_lvl         ! instrument type for airep--level flt
    406      $,            i_airep_asc         ! instrument type for airep--ascent
    407      $,            i_airep_des         ! instrument type for airep--descent
    408      $,            i_amdar             ! instrument type for amdar
    409      $,            i_amdar_lvl         ! instrument type for amdar--level flt
    410      $,            i_amdar_asc         ! instrument type for amdar--ascent
    411      $,            i_amdar_des         ! instrument type for amdar--descent
    412      $,            kidt                ! relative time + 100 000 for sort
    413 c
    414       integer      iht_ft              ! integer form of flight level
    415      $,            ilat                ! integer form of latitude
    416      $,            ilon                ! integer form of longitude
    417 c     $,            kdup(maxflt)        ! number of mixed duplicates per id pair
    418 c
    419       integer      kdtg_an             ! integer form of date-time group
    420      $,            k_AMDAR_tot         ! total number of AMDAR reports
    421      $,            k_AIREP_tot         ! total number of AIREP reports
    422      $,            k_UAL_tot           ! total number of UAL AIREP reports
    423      $,            k_EU_tot            ! total number of EU AIREP reports
    424      $,            k_AU_tot            ! total number of AU AIREP reports
    425      $,            k_other_tot         ! total number of other AIREP reports
    426      $,            k_AIREP_good        ! number of good AIREP reports
    427      $,            k_YAIREP_good       ! number of good YRXX86 AIREP reports
    428      $,            k_UAL_good          ! number of good UAL AIREP reports
    429      $,            k_EU_good           ! number of good EU AIREP reports
    430      $,            k_AU_good           ! number of good AU AIREP reports
    431      $,            k_other_good        ! number of good other AIREP reports
    432       real         per_AIREP           ! percentage of good AIREP reports
    433      $,            per_UAL             ! percentage of good UAL AIREP reports
    434      $,            per_EU              ! percentage of good EU AIREP reports
    435      $,            per_AU              ! percentage of good AU AIREP reports
    436      $,            per_other           ! percentage of good other AIREP reports
    437 c
    438       integer      k_total             ! total number of aircraft reports
    439      $,            k_good              ! number of good aircraft reports
    440      $,            k_tot_mdcrs         ! total number of unspecified mdcrs reports
    441      $,            k_good_mdcrs        ! number of good unspecified mdcrs reports
    442      $,            k_tot_mdcrs_lvl     ! total number of level mdcrs reports
    443      $,            k_good_mdcrs_lvl    ! number of good level mdcrs reports
    444      $,            k_tot_mdcrs_asc     ! total number of ascent mdcrs reports
    445      $,            k_good_mdcrs_asc    ! number of good ascent mdcrs reports
    446      $,            k_tot_mdcrs_des     ! total number of descent mdcrs reports
    447      $,            k_good_mdcrs_des    ! number of good descent mdcrs reports
    448      $,            k_tot_amdar         ! total number of unspecified amdar reports
    449      $,            k_good_amdar        ! number of good unspecified amdar reports
    450      $,            k_tot_amdar_lvl     ! total number of level amdar reports
    451      $,            k_good_amdar_lvl    ! number of good level amdar reports
    452      $,            k_tot_amdar_asc     ! total number of ascent amdar reports
    453      $,            k_good_amdar_asc    ! number of good ascent amdar reports
    454      $,            k_tot_amdar_des     ! total number of descent amdar reports
    455      $,            k_good_amdar_des    ! number of good descent amdar reports
    456      $,            k_tot_airep         ! total number of unspecified airep reports

Page 9           Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

    457      $,            k_good_airep        ! number of good unspecified airep reports
    458      $,            k_tot_airep_lvl     ! total number of level airep reports
    459      $,            k_good_airep_lvl    ! number of good level airep reports
    460      $,            k_tot_airep_asc     ! total number of ascent airep reports
    461      $,            k_good_airep_asc    ! number of good ascent airep reports
    462      $,            k_tot_airep_des     ! total number of descent airep reports
    463      $,            k_good_airep_des    ! number of good descent airep reports
    464      $,            k_tot_man_airep     ! total number of man_airep reports
    465      $,            k_good_man_airep    ! number of good man_airep reports
    466 c
    467       character*6  c_ht_ft             ! character form of flight level
    468       character*4  c_type              ! character form of ob type
    469       character*5  c_lat               ! character form of latitude
    470       character*6  c_lon               ! character form of longitude
    471       character*7  c_idt               ! character form of relative time
    472       character*25 csort(max_reps)     ! variable used for sorting data 
    473 c
    474       character*200 c_path             ! path name for output files
    475       integer lpath                    ! length of c_path
    476 c
    477       character*200 infile30           ! file name for rejected duplicates
    478      $,            infile31            ! file name for rejected spike reports
    479      $,            infile32            ! file name for rejected invalid reports
    480      $,            infile33            ! file name for rejected stuck reports
    481      $,            infile34            ! file name for rejected gross errors
    482      $,            infile35            ! file name for rejected position errors
    483      $,            infile36            ! file name for rejected ordering errors
    484      $,            infile37            ! file name for rejected suspect data errors
    485      $,            infile38            ! file name for rejected reject list reports
    486      $,            logfile             ! file name for log file
    487 c
    488       logical      l_opn               ! true if file is already open
    489      $,            l_first             ! true first time subroutine is called
    490      $,            l_first_date        ! true for first date 
    491                                        !  (initialized by calling routine)
    492      $,            l_print             ! true for printing values
    493      $,            l_sort              ! true if data need to be sorted
    494      $,            l_flight            ! true if flight stats to be updated
    495      $,            l_found             ! true if tail numbers found on list
    496      $,            l_last              ! true if last time subroutine is called
    497                                        !  (initialized by calling routine)
    498      $,            l_pc                ! if true, set up path names for Pat's PC
    499                                        !  (initialized by calling routine)
    500      $,		   l_ncep	       ! if true, use NCEP preferences
    501                                        !  (initialized by calling routine)
    502 c
    503       logical      l_do_innov          ! compute innovation distribution if true
    504      $,            l_operational       ! run QC in operational mode if true
    505                                        !  (initialized by calling routine)
    506      $,            l_init              ! initialize counters if true
    507      $,            l_innov_miss        ! true if all innovations missing
    508 c
    509 c Data statements
    510 c ---------------
    511 cc
    512 cc     List of aircraft that report lat/lon in decimal instead of degrees,
    513 cc     minutes, tenths of minutes.  (NOTE:  this may ONLY be true at FSL)

Page 10          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

    514 cc     (from W. Moninger at FSL)
    515 cc     -------------------------------------------------------------------
    516 c       data cbadlat/'N000UA','N105UA','N106UA','N171UA','N172UA'
    517 c     A,    'N173UA','N174UA','N175UA','N176UA','N177UA','N178UA'
    518 c     B,    'N179UA','N180UA','N181UA','N182UA','N183UA','N184UA'
    519 c     C,    'N185UA','N186UA','N187UA','N188UA','N189UA','N190UA'
    520 c     D,    'N191UA','N192UA','N403UP','N404UP','N405UP','N406UP'
    521 c     E,    'N410UP','N414UP','N416UP','N417UP','N419UP','N421UP'
    522 c     F,    'N425UP','N426UP','N427UP','N429UP','N434UP','N641UA'
    523 c     G,    'N642UA','N643UA','N644UA','N645UA','N646UA','N647UA'
    524 c     H,    'N648UA','N649UA','N650UA','N651UA','N652UA','N653UA'
    525 c     I,    'N654UA','N655UA','N656UA','N657UA','N658UA','N659UA'
    526 c     J,    'N660UA','N661UA','N662UA','N663UA'/
    527 c
    528 c     List of aircraft that report temperature in degrees celsius,
    529 c     rather than in the expected tenths of degrees.
    530 c     (from W. Moninger at FSL)
    531 c     (Pseudo-id list derived from Oct 1998 data)
    532 c     (Pseudo-id list corrected from Sept 1999 data
    533 c      '35SYR4RA','5UUIR4BA','D5KYR5BA','ECOIR4BA' fixed)
    534 c     Check by tail number disabled in grchek after 1999100100--modified on 5/3/01 by PMP
    535 c     In 19-31 Oct 1999 dataset, the following aircraft were also  fixed:
    536 c      '2OZYR4JA','4QJYR4BA','CE5YR4BA','NH5YR3BA','PI1IR4ZA',
    537 c      'QJ5IR5BA','UUEYR3ZA','WSAIR3JA','XV2YR3RA','YITYR4ZA'
    538 c     -----------------------------------------------------------------------------------
    539       data cbadtemp/'N916UA',  'N917UA',  'N918UA',  'N919UA',  'N920UA'
    540      A,  'N921UA',  'N923UA',  'N924UA',  'N925UA',  'N926UA'
    541      B,  'N927UA',  'N928UA',  'N929UA',  'N930UA',  'N931UA'
    542      C,  'N932UA',  'N933UA',  'N934UA',  'N936UA',  'N937UA'
    543      D,  'N938UA',  'N940UA',  'N941UA',  'N942UA',  'N944UA'
    544      E,  'N945UA',  'N946UA',  'N947UA',  'N948UA',  'N949UA'
    545      F,  'N950UA',  'N951UA',  'N953UA',  'N954UA'
    546      G,  '034IR4RA','2OZYR4JA','4JPIR4RA','4QJYR4BA','A12YR4RA'
    547      H,  'CE5YR4BA','G5GIR5BA','KTQYR3BA','NH5YR3BA','O2KYR4ZA'
    548      J,  'PI1IR4ZA','QJ5IR5BA','QQZYR3ZA','RUMIR3ZA','TGPIR3JA'
    549      K,  'UUEYR3ZA','VAVIR3ZA','WSAIR3JA','XV2YR3RA','YITYR4ZA'
    550      L,  'ZZAYR4JA','35SYR4RA','5UUIR4BA','D5KYR5BA','ECOIR4BA'/
    551 cc
    552 cc     List of Delta MD88s to be flipped.
    553 cc     (from W. Moninger at FSL)
    554 cc     ----------------------------------
    555 c      data cbadwind/'N900DE','N900DL','N901DE','N901DL','N902DE'
    556 c     A,  'N902DL','N903DE','N903DL','N904DE','N904DL','N905DE','N905DL'
    557 c     B,  'N906DE','N906DL','N907DE','N907DL','N908DE','N908DL','N909DE'
    558 c     C,  'N909DL','N910DE','N910DL','N911DE','N911DL','N912DE','N912DL'
    559 c     D,  'N913DL','N914DE','N914DL','N915DE','N915DL','N916DE','N916DL'
    560 c     E,  'N917DE','N917DL','N918DE','N918DL','N919DE','N919DL','N920DE'
    561 c     F,  'N920DL','N921DE','N921DL','N922DE','N922DL','N923DE','N923DL'
    562 c     G,  'N924DE','N924DL','N925DE','N925DL','N926DE','N926DL','N927DE'
    563 c     H,  'N927DL','N928DE','N928DL','N929DE','N929DL','N930DE','N930DL'
    564 c     I,  'N931DE','N931DL','N932DE','N932DL','N933DE','N933DL','N934DE'
    565 c     J,  'N934DL','N935DE','N935DL','N936DE','N936DL','N937DE','N937DL'
    566 c     K,  'N938DE','N938DL','N939DE','N939DL','N940DE','N940DL','N941DE'
    567 c     L,  'N941DL','N942DE','N942DL','N943DE','N943DL','N944DE','N945DE'
    568 c     M,  'N945DL','N946DE','N946DL','N947DE','N947DL','N948DE','N948DL'
    569 c     N,  'N949DE','N949DL','N950DE','N950DL','N951DE','N951DL','N952DE'
    570 c     O,  'N952DL','N953DE','N953DL','N954DE','N954DL','N955DE','N955DL'

Page 11          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

    571 c     P,  'N956DE','N956DL','N957DE','N957DL','N958DE','N958DL','N959DE'
    572 c     Q,  'N959DL','N960DE','N960DL','N961DE','N961DL','N962DE','N962DL'
    573 c     R,  'N963DE','N963DL','N964DE','N964DL','N965DE','N965DL','N966DE'
    574 c     S,  'N966DL','N967DE','N967DL','N968DE','N968DL','N969DE','N969DL'
    575 c     T,  'N970DE','N970DL','N971DE','N971DL','N972DE','N972DL','N973DE'
    576 c     U,  'N973DL','N974DE','N974DL','N975DE','N975DL','N976DE','N976DL'
    577 c     V,  'N977DE','N977DL','N978DE','N978DL','N979DE','N979DL','N980DE'
    578 c     W,  'N980DL','N981DE','N981DL','N982DE','N982DL','N983DE','N983DL'
    579 c     X,  'N984DE','N984DL','N985DE','N985DL','N986DE','N986DL','N987DE'
    580 c     Y,  'N987DL','N988DE','N988DL','N989DE','N989DL','N990DE','N990DL'
    581 c     Z,  'N991DE','N991DL','N992DE','N992DL','N993DE','N993DL','N994DE'
    582 c     a,  'N994DL','N995DE','N995DL','N996DE','N996DL','N997DE','N997DL'
    583 c     b,  'N998DE','N998DL','N999DE','N999DL'/
    584 c
    585 c     Aircraft blacklisted for wind errors
    586 c     (from W. Moninger at FSL)
    587 c     ------------------------------------
    588       data cblkwind/'N508UA','N581UA','N586UA','N587UA','N902DL'
    589      A,    'N904DL','N908DL','N909DL','N910DL','N911DL','N912DL'
    590      B,    'N913DE','N913DL','N914DE','N914DL','N915DE','N915DL'
    591      C,    'N916DL','N917DE','N917DL','N918DE','N918DL','N919DE'
    592      D,    'N921DL','N922DL','N924DL','N926DL','N928DL','N929DL'
    593      E,    'N930DL','N931DL','N933DL','N934DL','N936DL','N938DL'
    594      F,    'N939DL','N940DL','N941DL','N942DL','N943DL','N944DL'
    595      G,    'N948DL','N949DL','N950DL','N951DL','N952DL','N953DL'
    596      H,    'N954DL','N955DL','N957DL','N958DL','N960DL','N964DL'
    597      I,    'N964DL','N966DL','N967DL','N968DL','N969DL','N970DL'
    598      J,    'N971DL','N972DL','N981DL','N983DL','N984DL','N985DL'
    599      K,    'N986DL','N?O970'/
    600 c
    601 c     Aircraft blacklisted for temperature errors
    602 c     (from W. Moninger at FSL)
    603 c     -------------------------------------------
    604       data cblktemp/'N508UA','N581UA','N585UA','N586UA','N587UA'
    605      A,    'N916UA','N917UA','N918UA','N919UA','N920UA','N921UA'
    606      B,    'N922UA','N923UA','N924UA','N925UA','N926UA','N927UA'
    607      C,    'N928UA','N929UA','N930UA','N931UA','N932UA','N933UA'
    608      D,    'N934UA','N935UA','N936UA','N937UA','N938DL','N938UA'
    609      E,    'N940UA','N941UA','N942UA','N944UA','N945UA','N946UA'
    610      F,    'N947UA','N948UA','N949UA','N950UA','N951UA','N952UA'
    611      G,    'N953UA','N954UA','N955UA','N985DL'/
    612 c
    613 c # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
    614 
    615 c Start subroutine.
    616 c -----------------
    617         write(*,*)
    618         write(*,*) '**********************'
    619         write(*,*) 'Welcome to acftobs_qc'
    620         call system('date')
    621         write(*,*) '**********************'
    622         write(*,*)
    623 
    624         numreps_orig = numreps  ! need to save numreps_orig for input to INDEXC later
    625 c
    626 c Set up path for output files
    627 c ----------------------------

Page 12          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

    628       if(l_pc) then
    629         l_init = .false.
    630         l_do_innov = .true.
    631 cc        c_path = 'c:\MyFiles\acft_data\acftqc_tfile\'    ! path for pc
    632         c_path = 'c:\MyFiles\acft_data\acftqc_tfile\\'    ! path for pc
    633         call slen(c_path,lpath)
    634 c
    635       elseif(.not.l_operational) then
    636         l_init = .true.
    637         l_do_innov = .false.
    638         call getenv('INNOVATIONS',c_path)
    639         call slen(c_path,lpath)
    640         c_path = c_path(1:lpath)//'acft/'        ! path for Origin
    641         call slen(c_path,lpath)
    642 c
    643       elseif(l_ncep) then 
    644 	l_init = .true. ! init counters for each run
    645 	l_operational = .false. ! extra printout/log files = yes
    646 	l_do_innov = .true. 
    647 	c_path = ' ' ! output will go to working directory
    648 	call slen(c_path,lpath)
    649 
    650 c Open log file for acftobs_qc.
    651 c -----------------------------
    652 c        open(io8,status='new')
    653 
    654       else
    655         l_init = .true.
    656         l_do_innov = .false.
    657       endif
    658 c
    659 c Test if log file is already open
    660 c --------------------------------
    661       print *, 'checking if io8 is open...'
    662 
    663       inquire(unit = io8,opened = l_opn)
    664       print *, 'done checking if io8 is open...',l_opn
    665 c
    666 c Open file if not already open
    667 c -----------------------------
    668       if(.not.l_opn) then
    669         if(lpath.gt.0) then
    670            logfile = c_path(1:lpath)//'acftqc_'//cdtg_an//'.log'
    671         else
    672            logfile = 'acftqc_'//cdtg_an//'.log'
    673         endif
    674         call slen(logfile,len)
    675         print *, 'trying to open io8 ', trim(logfile)
    676         open(unit = io8, file = logfile(1:len)
    677      $,      form = 'FORMATTED',status = 'UNKNOWN')
    678         print *, 'done trying to open io8'
    679 
    680       endif
    681 c
    682       write(io8,*)
    683       write(io8,*) 'Beginning acftobs_qc!'
    684 c

Page 13          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

    685 c Open individual files for rejected data if the assigned unit is not opened
    686 c (The io numbers may all be set equal to put all rejected data in same file.)
    687 c -----------------------------------------------------------------------------
    688       if(.not.l_operational) then
    689         inquire(unit = io30,opened = l_opn)
    690         if(.not.l_opn) then
    691           if(lpath.gt.0) then
    692              infile30 = c_path(1:lpath)//'acftqc_'//cdtg_an//'.dup'
    693           else
    694              infile30 = 'acftqc_'//cdtg_an//'.dup'
    695           endif
    696           call slen(infile30,len)
    697           open(unit = io30, file = infile30(1:len)
    698      $,        form = 'FORMATTED',status = 'UNKNOWN')
    699           write(io8,*)
    700           write(io8,*) infile30(1:len),' successfully opened'
    701         else
    702           write(io8,*)
    703           write(io8,*) infile30(1:len),' already open'
    704         endif
    705 c
    706         inquire(unit = io31,opened = l_opn)
    707         if(.not.l_opn) then
    708           if(lpath.gt.0) then
    709              infile31 = c_path(1:lpath)//'acftqc_'//cdtg_an//'.spk'
    710           else
    711              infile31 = 'acftqc_'//cdtg_an//'.spk'
    712           endif
    713           call slen(infile31,len)
    714           open(unit = io31, file = infile31(1:len)
    715      $,        form = 'FORMATTED',status = 'UNKNOWN')
    716           write(io8,*)
    717           write(io8,*) infile31(1:len),' successfully opened'
    718         else
    719           write(io8,*)
    720           write(io8,*) infile31(1:len),' already open'
    721         endif
    722 c
    723         inquire(unit = io32,opened = l_opn)
    724         if(.not.l_opn) then
    725           if(lpath.gt.0) then
    726              infile32 = c_path(1:lpath)//'acftqc_'//cdtg_an//'.inv'
    727           else
    728              infile32 = 'acftqc_'//cdtg_an//'.inv'
    729           endif
    730           call slen(infile32,len)
    731           open(unit = io32, file = infile32(1:len)
    732      $,        form = 'FORMATTED',status = 'UNKNOWN')
    733           write(io8,*)
    734           write(io8,*) infile32(1:len),' successfully opened'
    735         else
    736           write(io8,*)
    737           write(io8,*) infile32(1:len),' already open'
    738         endif
    739 c
    740         inquire(unit = io33,opened = l_opn)
    741         if(.not.l_opn) then

Page 14          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

    742           if(lpath.gt.0) then
    743              infile33 = c_path(1:lpath)//'acftqc_'//cdtg_an//'.stk'
    744           else
    745              infile33 = 'acftqc_'//cdtg_an//'.stk'
    746           endif
    747           call slen(infile33,len)
    748           open(unit = io33, file = infile33(1:len)
    749      $,        form = 'FORMATTED',status = 'UNKNOWN')
    750           write(io8,*)
    751           write(io8,*) infile33(1:len),' successfully opened'
    752         else
    753           write(io8,*)
    754           write(io8,*) infile33(1:len),' already open'
    755         endif
    756 c
    757         inquire(unit = io34,opened = l_opn)
    758         if(.not.l_opn) then
    759           if(lpath.gt.0) then
    760              infile34 = c_path(1:lpath)//'acftqc_'//cdtg_an//'.grc'
    761           else
    762              infile34 = 'acftqc_'//cdtg_an//'.grc'
    763           endif
    764           call slen(infile34,len)
    765           open(unit = io34, file = infile34(1:len)
    766      $,        form = 'FORMATTED',status = 'UNKNOWN')
    767           write(io8,*)
    768           write(io8,*) infile34(1:len),' successfully opened'
    769         else
    770           write(io8,*)
    771           write(io8,*) infile34(1:len),' already open'
    772         endif
    773 c
    774         inquire(unit = io35,opened = l_opn)
    775         if(.not.l_opn) then
    776           if(lpath.gt.0) then
    777              infile35 = c_path(1:lpath)//'acftqc_'//cdtg_an//'.inc'
    778           else
    779              infile35 = 'acftqc_'//cdtg_an//'.inc'
    780           endif
    781           call slen(infile35,len)
    782           open(unit = io35, file = infile35(1:len)
    783      $,        form = 'FORMATTED',status = 'UNKNOWN')
    784           write(io8,*)
    785           write(io8,*) infile35(1:len),' successfully opened'
    786         else
    787           write(io8,*)
    788           write(io8,*) infile35(1:len),' already open'
    789         endif
    790 c
    791         inquire(unit = io36,opened = l_opn)
    792         if(.not.l_opn) then
    793           if(lpath.gt.0) then
    794              infile36 = c_path(1:lpath)//'acftqc_'//cdtg_an//'.ord'
    795           else
    796              infile36 = 'acftqc_'//cdtg_an//'.ord'
    797           endif
    798           call slen(infile36,len)

Page 15          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

    799           open(unit = io36, file = infile36(1:len)
    800      $,        form = 'FORMATTED',status = 'UNKNOWN')
    801           write(io8,*)
    802           write(io8,*) infile36(1:len),' successfully opened'
    803         else
    804           write(io8,*)
    805           write(io8,*) infile36(1:len),' already open'
    806         endif
    807 c
    808         inquire(unit = io37,opened = l_opn)
    809         if(.not.l_opn) then
    810           if(lpath.gt.0) then
    811              infile37 = c_path(1:lpath)//'acftqc_'//cdtg_an//'.sus'
    812           else
    813              infile37 = 'acftqc_'//cdtg_an//'.sus'
    814           endif
    815           call slen(infile37,len)
    816           open(unit = io37, file = infile37(1:len)
    817      $,        form = 'FORMATTED',status = 'UNKNOWN')
    818           write(io8,*)
    819           write(io8,*) infile37(1:len),' successfully opened'
    820         else
    821           write(io8,*)
    822           write(io8,*) infile37(1:len),' already open'
    823         endif
    824 c
    825         inquire(unit = io38,opened = l_opn)
    826         if(.not.l_opn) then
    827           if(lpath.gt.0) then
    828              infile38 = c_path(1:lpath)//'acftqc_'//cdtg_an//'.lst'
    829           else
    830              infile38 = 'acftqc_'//cdtg_an//'.lst'
    831           endif
    832           call slen(infile38,len)
    833           open(unit = io38, file = infile38(1:len)
    834      $,        form = 'FORMATTED',status = 'UNKNOWN')
    835           write(io8,*)
    836           write(io8,*) infile38(1:len),' successfully opened'
    837         else
    838           write(io8,*)
    839           write(io8,*) infile38(1:len),' already open'
    840         endif
    841       endif
    842 c
    843 c Initialize arrays
    844 c -----------------
    845       do ii=1,max_reps
    846         csort(ii)   = 'zzzzzzzzzzzzzzzzzzzzzzzzz'
    847         indx(ii) = ii
    848       enddo
    849 c
    850       krej = 0
    851       maxflt_exceeded = 0
    852 c
    853       kreg = 0
    854       if(l_first_date) then
    855         kreg_tot = 0

Page 16          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

    856         creg_reg_tot = 'xxxxxxxx'
    857 c
    858         if(.not.l_operational) then
    859           nobs_reg_tot = 0
    860           nrej_reg_tot = 0
    861           nrej_inv_tot = 0
    862           nrej_stk_tot = 0
    863           nrej_grc_tot = 0
    864           nrej_pos_tot = 0
    865           nrej_ord_tot = 0
    866           nrej_sus_tot = 0
    867           nwhol_reg_tot = 0
    868           ntemp_reg_tot = 0
    869           nwind_reg_tot = 0
    870         endif
    871 c
    872       endif
    873       l_first_date = .false.
    874 c
    875       ntot_reg = 0
    876 c
    877 c Initialize aircraft data types
    878 c ------------------------------
    879       i_acars      = insty_ob_fun('acars')
    880       i_acars_lvl  = insty_ob_fun('acars_lvl') 
    881       i_acars_asc  = insty_ob_fun('acars_asc') 
    882       i_acars_des  = insty_ob_fun('acars_des') 
    883       i_mdcrs      = insty_ob_fun('mdcrs')
    884       i_mdcrs_lvl  = insty_ob_fun('mdcrs_lvl') 
    885       i_mdcrs_asc  = insty_ob_fun('mdcrs_asc') 
    886       i_mdcrs_des  = insty_ob_fun('mdcrs_des')
    887       i_man_airep  = insty_ob_fun('man-airep') 
    888       i_man_Yairep = insty_ob_fun('man-Yairep') 
    889       i_airep      = insty_ob_fun('airep')
    890       i_airep_lvl  = insty_ob_fun('airep_lvl')
    891       i_airep_asc  = insty_ob_fun('airep_asc')
    892       i_airep_des  = insty_ob_fun('airep_des')
    893       i_amdar      = insty_ob_fun('amdar')
    894       i_amdar_lvl  = insty_ob_fun('amdar_lvl')
    895       i_amdar_asc  = insty_ob_fun('amdar_asc')
    896       i_amdar_des  = insty_ob_fun('amdar_des')
    897 c
    898 c Output reports to log file if desired
    899 c -------------------------------------
    900       l_print = .false.
    901 c
    902       if(l_print) then
    903         write(io8,*) 
    904         write(io8,*) 'Reports before QC processing'
    905         write(io8,*) '----------------------------'
    906         call pr_workdata(max_reps,numreps,indx
    907      x,      alat,alon,pres,ht_ft,idt,idp,c_acftreg,c_acftid,itype        
    908      x,      t_prcn,ob_t,ob_q,ob_dir,ob_spd
    909      x,      xiv_t,xiv_q,xiv_d,xiv_s,ichk_t,ichk_q,ichk_d,ichk_s
    910      x,      cdtg_an,c_qc,csort,io8)        
    911       endif
    912 c

Page 17          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

    913 c Count reports by aircraft data type
    914 c -----------------------------------
    915       knt_acars = 0
    916       knt_mdcrs = 0
    917       knt_man_airep = 0
    918       knt_man_Yairep = 0
    919       knt_airep = 0
    920       knt_amdar = 0
    921 c
    922 c Form variable to sort--time + level + lat + lon + type
    923 c (first sort is to check for duplicates)
    924 c ------------------------------------------------------
    925       write(io8,*)
    926       write(io8,*) 'Forming variable to sort--time+level+lat+lon+type'
    927       write(io8,*) '-------------------------------------------------'
    928 c
    929       if(l_pc) call p_ddtg('Forming variable to sort',io8)
    930 c
    931       do ii=1,numreps
    932 c
    933         if(itype(ii).eq.i_acars.or.
    934      $     itype(ii).eq.i_acars_lvl.or.
    935      $     itype(ii).eq.i_acars_asc.or.
    936      $     itype(ii).eq.i_acars_des) then
    937 c
    938           knt_acars = knt_acars + 1
    939 c
    940         elseif(itype(ii).eq.i_mdcrs.or.
    941      $         itype(ii).eq.i_mdcrs_lvl.or.
    942      $         itype(ii).eq.i_mdcrs_asc.or.
    943      $         itype(ii).eq.i_mdcrs_des) then
    944 c
    945           knt_mdcrs = knt_mdcrs + 1
    946 c
    947         elseif(itype(ii).eq.i_man_airep) then
    948 c
    949           knt_man_airep = knt_man_airep + 1
    950 c
    951         elseif(itype(ii).eq.i_man_Yairep) then
    952 c
    953           knt_man_Yairep = knt_man_Yairep + 1
    954 c
    955         elseif(itype(ii).eq.i_airep.or.
    956      $         itype(ii).eq.i_airep_lvl.or.
    957      $         itype(ii).eq.i_airep_asc.or.
    958      $         itype(ii).eq.i_airep_des) then
    959 c
    960           knt_airep = knt_airep + 1
    961 c
    962         elseif(itype(ii).eq.i_amdar.or. 
    963      $         itype(ii).eq.i_amdar_lvl.or.
    964      $         itype(ii).eq.i_amdar_asc.or.
    965      $         itype(ii).eq.i_amdar_des) then
    966 c
    967           knt_amdar = knt_amdar + 1
    968         endif
    969 c

Page 18          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

    970         kidt = idt(ii) + 100 000
    971         if(kidt.ge.1 000 000)
    972      $    write(io8,*) 'kidt too large--',kidt
    973         write(c_idt,'(i6)') kidt
    974 c
    975         if(ht_ft(ii).eq.amiss) then
    976           c_ht_ft = '999999'
    977         else
    978           iht_ft = nint(ht_ft(ii)) + 100 000
    979          if(iht_ft.ge.200 000) then ! if nint(ht_ft(ii)) = 100,000 or greater
    980             write(io8,*)
    981             write(io8,*) 'iht_ft too large--',iht_ft
    982             write (io8,8001) ii,c_insty_ob(itype(ii))
    983      x,        c_acftreg(ii),c_acftid(ii)
    984      x,        idt(ii),alat(ii),alon(ii),pres(ii),ht_ft(ii)
    985      x,        t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
    986      x,        ob_q(ii),xiv_q(ii),ichk_q(ii)
    987      x,        ob_dir(ii),xiv_d(ii),ichk_d(ii)
    988      x,        ob_spd(ii),xiv_s(ii),ichk_s(ii),idp(ii)
    989  8001       format(i6,1x,a8,1x,a8,1x,a9,1x
    990      x,        i7,1x,2f11.5,1x,f8.1,1x,f7.0,1x
    991      x,        f5.2,4(2(1x,f8.2),1x,i5),1x,i4)
    992             iht_ft = imiss
    993           endif
    994 
    995           if(iht_ft.ge.0) then
    996             write(c_ht_ft,'(i6.6)') iht_ft
    997           else
    998             write(c_ht_ft,'(i6.5)') iht_ft
    999           endif
   1000         endif
   1001 c
   1002 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
   1003         if(alat(ii).eq.amiss) then
   1004           c_lat = '99999'
   1005         else
   1006           ilat = nint(alat(ii)*100.)
   1007           if(abs(ilat).ge.100 000) write(io8,*)'ilat too large--',ilat
   1008           write(c_lat,'(i5)') ilat
   1009         endif
   1010 c
   1011         if(alon(ii).eq.amiss) then
   1012           c_lon = '999999'
   1013         else
   1014           ilon = nint(alon(ii)*100.)
   1015           if(abs(ilon).ge.1 000 000) write(io8,*)'ilon too large--',ilon
   1016           write(c_lon,'(i6)') ilon
   1017         endif
   1018 c
   1019         c_type = c_insty_ob(itype(ii))
   1020 c
   1021         csort(ii) = c_idt(1:6)
   1022      $             //c_ht_ft(1:6)
   1023 cc     $             //c_ht_ft(1:5)
   1024      $             //c_lat(1:5)
   1025      $             //c_lon(1:6)
   1026      $             //c_type(1:2)

Page 19          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

   1027       enddo
   1028 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
   1029 c
   1030       write(io8,*)
   1031 ccccdak      write(io8,*) 'Number of raw acars reports      = ',knt_acars
   1032       write(io8,*) 'Number of raw tamdar reports     = ',knt_acars
   1033       write(io8,*) 'Number of raw mdcrs reports      = ',knt_mdcrs
   1034       write(io8,*) 'Number of raw man_airep reports  = ',knt_man_airep
   1035       write(io8,*) 'Number of raw man_Yairep reports = ',knt_man_Yairep
   1036       write(io8,*) 'Number of raw airep reports      = ',knt_airep
   1037       write(io8,*) 'Number of raw amdar reports      = ',knt_amdar
   1038 c
   1039 c Sort reports in file according to array csort
   1040 c ---------------------------------------------
   1041       write(*,*) 'Sorting reports by time first'
   1042       write(io8,*)
   1043       write(io8,*) 'Sorting reports by time first'
   1044       write(io8,*) '-----------------------------'
   1045 c
   1046       if(l_pc) call p_ddtg('Calling INDEXC for the first sort',io8)
   1047 c
   1048       call INDEXC(numreps_orig,csort,indx)
   1049 c
   1050 c     Output reports to log file if desired
   1051 c     -------------------------------------
   1052       l_print = .false.
   1053 c
   1054       if(l_print) then
   1055         write(io8,*) 
   1056         write(io8,*) 'Reports after first sort'
   1057         write(io8,*) '------------------------'
   1058         call pr_workdata(max_reps,numreps,indx
   1059      x,      alat,alon,pres,ht_ft,idt,idp,c_acftreg,c_acftid,itype        
   1060      x,      t_prcn,ob_t,ob_q,ob_dir,ob_spd
   1061      x,      xiv_t,xiv_q,xiv_d,xiv_s,ichk_t,ichk_q,ichk_d,ichk_s
   1062      x,      cdtg_an,c_qc,csort,io8)        
   1063       endif
   1064 c
   1065 c Perform first pass through data--duplicate removal
   1066 c --------------------------------------------------
   1067       write(*,*)'Beginning 1st pass through data--duplicate removal'
   1068       write(io8,*)
   1069       write(io8,*)'Beginning 1st pass through data--duplicate removal'
   1070       write(io8,*)'----------------------------------------------------'
   1071 c
   1072       if(l_pc) call p_ddtg('Calling dupchek_qc',io8)
   1073 c
   1074       call dupchek_qc(numreps,max_reps,maxflt,htdif_same

Page 20          Source Listing                  ACFTOBS_QC
2017-04-18 11:07 Entry Points                    acftobs_qc.f



ENTRY POINTS

  Name                   
                         
 acftobs_qc_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 153                        Label  3360                                                           3359                              
 198                        Label  1088                                                           1082                              
 199                        Label  1083                                                           1081                              
 298                        Label  1411                                                           1405                              
 299                        Label  1406                                                           1404                              
 3002                       Label  2322                                                           2313,2610                         
 398                        Label  1451                                                           1445                              
 399                        Label  1446                                                           1444                              
 53                         Label  1165                                                           1164                              
 8001                       Label  989                                                            982,1337                          
 ABS                        Func   1007                                 scalar                    1007,1015                         
 ACFTOBS_QC                 Subr   75                                                                                               
 ALAT                       Dummy  76       R(8)            8     1     0        ARG,INOUT        907,984,1003,1006,1059,1076,1131,1
                                                                                                  249,1301,1339,1384,1472,1489,1562,
                                                                                                  1579,1655,1672,1748,1766,1828,1842
                                                                                                  ,1866,1883,1957,1976,2050,2067,212
                                                                                                  7,2315,2612                       
 ALON                       Dummy  76       R(8)            8     1     0        ARG,INOUT        907,984,1011,1014,1059,1076,1131,1
                                                                                                  249,1301,1339,1384,1472,1489,1562,
                                                                                                  1579,1655,1672,1748,1766,1828,1842
                                                                                                  ,1866,1883,1957,1976,2050,2067,212
                                                                                                  7,2315,2612                       
 AMISS                      Param  143      R(4)            4           scalar                    975,1003,1011,1080,1208,1221,1251,
                                                                                                  1331,1404,1444,1492,1577,1670,1764
                                                                                                  ,1881,1974,2173,2186,2335,2340,234
                                                                                                  5,2350,2355,2628                  
 BENFORD_QC                 Subr   1221                                                           1221,2186                         
 CBADTEMP                   Local  298      CHAR            8     1     59                        539,1675                          
 CBLKTEMP                   Local  302      CHAR            8     1     45                        604,1676                          
 CBLKWIND                   Local  301      CHAR            8     1     67                        588,1676                          
 CDTG_AN                    Dummy  75       CHAR            10          scalar   ARG,INOUT        670,672,692,694,709,711,726,728,74
                                                                                                  3,745,760,762,777,779,794,796,811,
                                                                                                  813,828,830,910,1062,1075,1134,125
                                                                                                  2,1304,1387,1475,1493,1565,1577,16
                                                                                                  58,1670,1751,1765,1831,1869,1960,2
                                                                                                  053,2130,2213                     
 CIDMISS                    Param  147      CHAR            8           scalar                    1402,1442,1765,1844,1882          
 CID_FLT                    Dummy  81       CHAR            9     1     0        ARG,INOUT        1106,1263,1403,1443,1513,1604,1698
                                                                                                  ,1790,1908,2001,2092              
 CID_FLT_OLD                Dummy  81       CHAR            9     1     0        ARG,INOUT        1107,1264,1514,1605,1699,1791,1909
                                                                                                  ,2002,2093                        
 CMAXFLT                    Local  280      CHAR            6           scalar                    1169,1171,3363,3365               
 CREGMISS                   Param  147      CHAR            8           scalar                    1105,1262,1402,1442,1512,1603,1697
                                                                                                  ,1789,1907,2000,2091              

Page 21          Source Listing                  ACFTOBS_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CREG_FLT                   Dummy  81       CHAR            8     1     0        ARG,INOUT        1106,1263,1403,1443,1513,1604,1698
                                                                                                  ,1790,1908,1979,2001,2092         
 CREG_REG                   Dummy  83       CHAR            8     1     0        ARG,INOUT        1079,1108,1146,1178,1188,1189,1265
                                                                                                  ,1278,1279,1490,1515,1528,1529,154
                                                                                                  5,1546,1583,1606,1619,1620,1636,16
                                                                                                  37,1677,1700,1713,1714,1730,1731,1
                                                                                                  792,1805,1806,1886,1910,1923,1924,
                                                                                                  1940,1941,1980,2003,2016,2017,2033
                                                                                                  ,2034,2071,2094,2109,2110         
 CREG_REG_TOT               Dummy  84       CHAR            8     1     0        ARG,INOUT        856,1146,1178,1188,1222,1278,1528,
                                                                                                  1545,1619,1636,1713,1730,1805,1923
                                                                                                  ,1940,2016,2033,2109,2187,3002,303
                                                                                                  7,3072,3107,3142,3177,3212,3247,32
                                                                                                  82,3317                           
 CSORT                      Dummy  80       CHAR            25    1     0        ARG,INOUT        846,910,1021,1048,1062,1080,1105,1
                                                                                                  134,1251,1262,1304,1321,1322,1325,
                                                                                                  1356,1373,1387,1404,1433,1444,1475
                                                                                                  ,1492,1512,1565,1577,1603,1658,167
                                                                                                  0,1697,1751,1764,1789,1831,1869,18
                                                                                                  81,1907,1960,1974,2000,2053,2065,2
                                                                                                  091,2130,2280,2281,2428,2429,2442,
                                                                                                  2443,2454,2455,2466,2467,2478,2479
                                                                                                  ,2490,2491,2502,2503,2514,2515,252
                                                                                                  6,2527,2538,2539,2550,2551,2562,25
                                                                                                  63,2574,2575,2586,2587,2598,2599,2
                                                                                                  709,2710,2723,2724,2735,2736,2754,
                                                                                                  2755,2769,2770,2784,2785,2806,2807
                                                                                                  ,2821,2822,2836,2837,2858,2859,287
                                                                                                  3,2874,2888,2889,2909,2910,2924,29
                                                                                                  25,2939,2940                      
 C_ACFTID                   Dummy  76       CHAR            9     1     0        ARG,INOUT        907,983,1059,1075,1105,1131,1248,1
                                                                                                  262,1301,1338,1356,1384,1401,1441,
                                                                                                  1472,1488,1512,1562,1578,1603,1655
                                                                                                  ,1671,1697,1748,1765,1789,1828,184
                                                                                                  4,1866,1882,1907,1957,1975,2000,20
                                                                                                  50,2066,2091,2127,2259,2264,2269,2
                                                                                                  287,2292,2297,2314,2611           
 C_ACFTREG                  Dummy  76       CHAR            8     1     0        ARG,INOUT        907,983,1059,1075,1108,1131,1222,1
                                                                                                  248,1265,1301,1338,1384,1401,1441,
                                                                                                  1472,1488,1515,1562,1578,1606,1655
                                                                                                  ,1671,1700,1748,1765,1792,1828,184
                                                                                                  4,1866,1882,1910,1957,1975,2003,20
                                                                                                  50,2066,2094,2127,2187,2314,2611  
 C_HT_FT                    Local  467      CHAR            6           scalar                    976,996,998,1022,1332,1348,1350,13
                                                                                                  58                                
 C_IDT                      Local  471      CHAR            7           scalar                    973,1021,1329,1357                
 C_INSTY_OB                 Func   370      CHAR            16          scalar                    982,1019,1337,1354,2313,2610      
 C_LAT                      Local  469      CHAR            5           scalar                    1004,1008,1024                    
 C_LON                      Local  470      CHAR            6           scalar                    1012,1016,1025                    
 C_PATH                     Local  474      CHAR            200         scalar                    632,633,638,639,640,641,647,648,67
                                                                                                  0,692,709,726,743,760,777,794,811,
                                                                                                  828                               
 C_QC                       Dummy  80       CHAR            11    1     0        ARG,INOUT        910,1062,1075,1134,1209,1223,1248,
                                                                                                  1304,1387,1475,1488,1565,1578,1658
                                                                                                  ,1671,1751,1765,1831,1869,1882,196

Page 22          Source Listing                  ACFTOBS_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  0,1975,2053,2066,2130,2174,2188,23
                                                                                                  21,2618,2741,2792,2793,2844,2845  
 C_TYPE                     Local  468      CHAR            4           scalar                    1019,1026,1354,1359               
 DO_FLT                     Subr   1401                                                           1401,1441                         
 DUPCHEK_QC                 Subr   1074                                                           1074                              
 ERREXIT                    Subr   1175                                                           1175                              
 FT2M                       Param  151      R(4)            4           scalar                    1678                              
 GETENV                     Subr   638                                                            638                               
 GRCHEK_QC                  Subr   1670                                                           1670                              
 HTDIF_1MIN                 Param  162      R(4)            4           scalar                                                      
 HTDIF_SAME                 Param  159      R(4)            4           scalar                    1074,1882                         
 HT_FT                      Dummy  76       R(4)            4     1     0        ARG,INOUT        907,975,978,984,1059,1076,1131,124
                                                                                                  9,1301,1331,1334,1339,1384,1402,14
                                                                                                  42,1472,1489,1562,1579,1655,1672,1
                                                                                                  748,1766,1828,1842,1866,1883,1957,
                                                                                                  1976,2050,2067,2127,2316,2613     
 ICHK_D                     Dummy  78       I(4)            4     1     0        ARG,INOUT        909,987,1061,1078,1133,1251,1303,1
                                                                                                  342,1386,1474,1491,1564,1581,1657,
                                                                                                  1674,1750,1768,1830,1868,1885,1959
                                                                                                  ,1978,2052,2069,2129,2319,2616    
 ICHK_Q                     Dummy  78       I(4)            4     1     0        ARG,INOUT        909,986,1061,1078,1133,1250,1303,1
                                                                                                  341,1386,1474,1491,1564,1581,1657,
                                                                                                  1674,1750,1768,1830,1868,1885,1959
                                                                                                  ,1978,2052,2069,2129,2318,2615    
 ICHK_S                     Dummy  78       I(4)            4     1     0        ARG,INOUT        909,988,1061,1078,1133,1251,1303,1
                                                                                                  343,1386,1474,1491,1564,1581,1657,
                                                                                                  1674,1750,1768,1830,1868,1885,1959
                                                                                                  ,1978,2052,2069,2129,2320,2617    
 ICHK_T                     Dummy  78       I(4)            4     1     0        ARG,INOUT        909,985,1061,1078,1133,1250,1303,1
                                                                                                  340,1386,1474,1491,1564,1581,1657,
                                                                                                  1674,1750,1768,1830,1868,1885,1959
                                                                                                  ,1978,2052,2069,2129,2317,2614    
 IDP                        Dummy  76       I(4)            4     1     0        ARG,INOUT        907,988,1059,1131,1301,1343,1384,1
                                                                                                  472,1562,1655,1748,1828,1866,1957,
                                                                                                  2050,2127,2320,2617               
 IDT                        Dummy  76       I(4)            4     1     0        ARG,INOUT        907,970,984,1059,1078,1131,1250,13
                                                                                                  01,1327,1339,1384,1401,1441,1472,1
                                                                                                  491,1562,1581,1655,1674,1748,1768,
                                                                                                  1828,1842,1866,1885,1957,1978,2050
                                                                                                  ,2069,2127,2315,2612              
 IDT_NEAR                   Param  154      I(4)            4           scalar                    1844,1881,1974                    
 IDT_SAMFLT                 Param  154      I(4)            4           scalar                    1402,1442                         
 IDT_UPDN                   Param  154      I(4)            4           scalar                    1765,1882                         
 IHT_FT                     Local  414      I(4)            4           scalar                    978,979,981,992,995,996,998,1334,1
                                                                                                  335,1336,1344,1347,1348,1350      
 II                         Local  378      I(4)            4           scalar                    845,846,847,931,933,934,935,936,94
                                                                                                  0,941,942,943,947,951,955,956,957,
                                                                                                  958,962,963,964,965,970,975,978,98
                                                                                                  2,983,984,985,986,987,988,1003,100
                                                                                                  6,1011,1014,1019,1021,1145,1146,11
                                                                                                  48,1187,1188,1192,1193,1194,1277,1
                                                                                                  278,1282,1283,1317,1321,1322,1325,
                                                                                                  1327,1331,1334,1354,1356,1527,1528
                                                                                                  ,1532,1533,1544,1545,1547,1618,161
                                                                                                  9,1623,1624,1635,1636,1638,1639,16

Page 23          Source Listing                  ACFTOBS_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  40,1712,1713,1717,1718,1729,1730,1
                                                                                                  732,1733,1804,1805,1809,1810,1922,
                                                                                                  1923,1927,1928,1939,1940,1942,2015
                                                                                                  ,2016,2020,2021,2032,2033,2035,210
                                                                                                  8,2109,2111,2112,2235,2239,2240,22
                                                                                                  41,2242,2248,2249,2250,2251,2259,2
                                                                                                  264,2269,2280,2281,2287,2292,2297,
                                                                                                  2313,2314,2315,2316,2317,2318,2319
                                                                                                  ,2320,2321,2418,2422,2428,2429,243
                                                                                                  6,2442,2443,2448,2454,2455,2460,24
                                                                                                  66,2467,2472,2478,2479,2484,2490,2
                                                                                                  491,2496,2502,2503,2508,2514,2515,
                                                                                                  2520,2526,2527,2532,2538,2539,2544
                                                                                                  ,2550,2551,2556,2562,2563,2568,257
                                                                                                  4,2575,2580,2586,2587,2592,2598,25
                                                                                                  99,2610,2611,2612,2613,2614,2615,2
                                                                                                  616,2617,2618,2699,2703,2709,2710,
                                                                                                  2717,2723,2724,2729,2735,2736,2741
                                                                                                  ,2745,2746,2747,2748,2754,2755,276
                                                                                                  0,2761,2762,2763,2769,2770,2775,27
                                                                                                  76,2777,2778,2784,2785,2792,2793,2
                                                                                                  797,2798,2799,2800,2806,2807,2812,
                                                                                                  2813,2814,2815,2821,2822,2827,2828
                                                                                                  ,2829,2830,2836,2837,2844,2845,284
                                                                                                  9,2850,2851,2852,2858,2859,2864,28
                                                                                                  65,2866,2867,2873,2874,2879,2880,2
                                                                                                  881,2882,2888,2889,2900,2901,2902,
                                                                                                  2903,2909,2910,2915,2916,2917,2918
                                                                                                  ,2924,2925,2930,2931,2932,2933,293
                                                                                                  9,2940                            
 ILAT                       Local  415      I(4)            4           scalar                    1006,1007,1008                    
 ILON                       Local  416      I(4)            4           scalar                    1014,1015,1016                    
 IMISS                      Param  142      I(4)            4           scalar                    992,1080,1251,1344,1492,1764,1881,
                                                                                                  1974,2422,2703                    
 INDEXC                     Subr   1048                                                           1048,1373,1433                    
 INDX                       Dummy  80       I(4)            4     1     0        ARG,INOUT        847,906,1048,1058,1080,1104,1130,1
                                                                                                  208,1221,1251,1261,1300,1317,1373,
                                                                                                  1383,1402,1433,1442,1471,1492,1511
                                                                                                  ,1561,1577,1602,1654,1670,1696,174
                                                                                                  7,1764,1788,1827,1842,1865,1881,19
                                                                                                  06,1956,1974,1999,2049,2065,2090,2
                                                                                                  126,2173,2186                     
 INFILE30                   Local  477      CHAR            200         scalar                    692,694,696,697,700,703           
 INFILE31                   Local  478      CHAR            200         scalar                    709,711,713,714,717,720           
 INFILE32                   Local  479      CHAR            200         scalar                    726,728,730,731,734,737           
 INFILE33                   Local  480      CHAR            200         scalar                    743,745,747,748,751,754           
 INFILE34                   Local  481      CHAR            200         scalar                    760,762,764,765,768,771           
 INFILE35                   Local  482      CHAR            200         scalar                    777,779,781,782,785,788           
 INFILE36                   Local  483      CHAR            200         scalar                    794,796,798,799,802,805           
 INFILE37                   Local  484      CHAR            200         scalar                    811,813,815,816,819,822           
 INFILE38                   Local  485      CHAR            200         scalar                    828,830,832,833,836,839           
 INNOV_QC                   Subr   1208                                                           1208,2173                         
 INSTY_OB_FUN               Func   373      I(4)            4           scalar                    879,880,881,882,883,884,885,886,88
                                                                                                  7,888,889,890,891,892,893,894,895,
                                                                                                  896                               

Page 24          Source Listing                  ACFTOBS_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 INVALID_QC                 Subr   1488                                                           1488                              
 IN_BAD                     Dummy  80       I(4)            4     1     0        ARG,INOUT        1104,1261,1511,1602,1696,1788,1906
                                                                                                  ,1999,2090                        
 IO30                       Param  117      I(4)            4           scalar                    689,697,1080,3331                 
 IO31                       Param  117      I(4)            4           scalar                    706,714,1252,3332                 
 IO32                       Param  117      I(4)            4           scalar                    723,731,1492,3333                 
 IO33                       Param  117      I(4)            4           scalar                    740,748,1584,3334                 
 IO34                       Param  117      I(4)            4           scalar                    757,765,1676,3335                 
 IO35                       Param  117      I(4)            4           scalar                    774,782,1769,3336                 
 IO36                       Param  117      I(4)            4           scalar                    791,799,1888,3337                 
 IO37                       Param  117      I(4)            4           scalar                    808,816,1981,3338                 
 IO38                       Param  117      I(4)            4           scalar                    825,833,2072,3339                 
 IO8                        Param  117      I(4)            4           scalar                    663,676,682,683,699,700,702,703,71
                                                                                                  6,717,719,720,733,734,736,737,750,
                                                                                                  751,753,754,767,768,770,771,784,78
                                                                                                  5,787,788,801,802,804,805,818,819,
                                                                                                  821,822,835,836,838,839,903,904,90
                                                                                                  5,910,925,926,927,929,972,980,981,
                                                                                                  982,1007,1015,1030,1032,1033,1034,
                                                                                                  1035,1036,1037,1042,1043,1044,1046
                                                                                                  ,1055,1056,1057,1062,1068,1069,107
                                                                                                  0,1072,1080,1097,1105,1127,1128,11
                                                                                                  29,1134,1139,1206,1209,1219,1226,1
                                                                                                  242,1243,1244,1246,1251,1254,1262,
                                                                                                  1297,1298,1299,1304,1310,1311,1312
                                                                                                  ,1314,1328,1336,1337,1367,1368,136
                                                                                                  9,1371,1380,1381,1382,1387,1393,13
                                                                                                  94,1395,1397,1404,1427,1428,1429,1
                                                                                                  431,1437,1444,1468,1469,1470,1475,
                                                                                                  1482,1483,1484,1486,1492,1504,1512
                                                                                                  ,1558,1559,1560,1565,1571,1572,157
                                                                                                  3,1575,1584,1595,1603,1651,1652,16
                                                                                                  53,1658,1664,1665,1666,1668,1676,1
                                                                                                  689,1697,1744,1745,1746,1751,1758,
                                                                                                  1759,1760,1762,1769,1781,1789,1824
                                                                                                  ,1825,1826,1831,1836,1837,1838,184
                                                                                                  0,1844,1855,1862,1863,1864,1869,18
                                                                                                  75,1876,1877,1879,1888,1899,1907,1
                                                                                                  953,1954,1955,1960,1966,1967,1968,
                                                                                                  1972,1981,1992,2000,2046,2047,2048
                                                                                                  ,2053,2059,2060,2061,2063,2072,208
                                                                                                  3,2091,2123,2124,2125,2130,2171,21
                                                                                                  74,2184,2191,2203,2229,2231,2232,2
                                                                                                  313,2358,2359,2360,2361,2362,2363,
                                                                                                  2364,2365,2366,2367,2368,2369,2370
                                                                                                  ,2371,2372,2373,2374,2375,2376,237
                                                                                                  7,2378,2379,2414,2415,2416,2610,26
                                                                                                  31,2632,2633,2634,2635,2636,2640,2
                                                                                                  641,2642,2643,2644,2645,2646,2647,
                                                                                                  2648,2649,2650,2651,2652,2653,2654
                                                                                                  ,2655,2656,2657,2658,2659,2660,266
                                                                                                  1,2662,2663,2664,2948,2949,2950,29
                                                                                                  51,2952,2953,2954,2955,2956,2957,2
                                                                                                  958,2959,2960,2961,2962,2963,2964,
                                                                                                  2965,2966,2967,2968,2969,2970,2971

Page 25          Source Listing                  ACFTOBS_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  ,2972,2977,2978,2979,2980,2981,298
                                                                                                  4,3002,3012,3013,3014,3015,3016,30
                                                                                                  19,3037,3047,3048,3049,3050,3051,3
                                                                                                  054,3072,3082,3083,3084,3085,3086,
                                                                                                  3089,3107,3117,3118,3119,3120,3121
                                                                                                  ,3124,3142,3152,3153,3154,3155,315
                                                                                                  6,3159,3177,3187,3188,3189,3190,31
                                                                                                  91,3194,3212,3222,3223,3224,3225,3
                                                                                                  226,3229,3247,3257,3258,3259,3260,
                                                                                                  3261,3264,3282,3292,3293,3294,3295
                                                                                                  ,3296,3299,3317,3341              
 IOB                        Local  380      I(4)            4           scalar                    1316,1317,1337,1338,1339,1340,1341
                                                                                                  ,1342,1343                        
 IOBS_FLT                   Dummy  82       I(4)            4     1     0        ARG,INOUT        1107,1264,1404,1444,1514,1582,1605
                                                                                                  ,1699,1769,1791,1843,1887,1909,198
                                                                                                  0,2002,2093                       
 ISAVE                      Dummy  80       I(4)            4     1     0        ARG,INOUT        1842                              
 ITYPE                      Dummy  76       I(4)            4     1     0        ARG,INOUT        907,933,934,935,936,940,941,942,94
                                                                                                  3,947,951,955,956,957,958,962,963,
                                                                                                  964,965,982,1019,1059,1078,1105,11
                                                                                                  31,1222,1250,1262,1301,1337,1354,1
                                                                                                  384,1472,1491,1512,1562,1581,1603,
                                                                                                  1655,1674,1697,1748,1768,1789,1828
                                                                                                  ,1866,1885,1907,1957,1978,2000,205
                                                                                                  0,2069,2091,2127,2187,2239,2240,22
                                                                                                  41,2242,2248,2249,2250,2251,2313,2
                                                                                                  422,2436,2448,2460,2472,2484,2496,
                                                                                                  2508,2520,2532,2544,2556,2568,2580
                                                                                                  ,2592,2610,2703,2717,2729,2745,274
                                                                                                  6,2747,2748,2760,2761,2762,2763,27
                                                                                                  75,2776,2777,2778,2797,2798,2799,2
                                                                                                  800,2812,2813,2814,2815,2827,2828,
                                                                                                  2829,2830,2849,2850,2851,2852,2864
                                                                                                  ,2865,2866,2867,2879,2880,2881,288
                                                                                                  2,2900,2901,2902,2903,2915,2916,29
                                                                                                  17,2918,2930,2931,2932,2933       
 I_ACARS                    Local  391      I(4)            4           scalar                    879,933                           
 I_ACARS_ASC                Local  395      I(4)            4           scalar                    881,935                           
 I_ACARS_DES                Local  397      I(4)            4           scalar                    882,936                           
 I_ACARS_LVL                Local  393      I(4)            4           scalar                    880,934                           
 I_AIREP                    Local  404      I(4)            4           scalar                    889,955,2251,2532,2775,2827,2879,2
                                                                                                  930                               
 I_AIREP_ASC                Local  406      I(4)            4           scalar                    891,957,2249,2556,2777,2829,2881,2
                                                                                                  932                               
 I_AIREP_DES                Local  407      I(4)            4           scalar                    892,958,2250,2568,2778,2830,2882,2
                                                                                                  933                               
 I_AIREP_LVL                Local  405      I(4)            4           scalar                    890,956,2248,2544,2776,2828,2880,2
                                                                                                  931                               
 I_AMDAR                    Local  408      I(4)            4           scalar                    893,962,2242,2484,2760,2812,2864,2
                                                                                                  915                               
 I_AMDAR_ASC                Local  410      I(4)            4           scalar                    895,964,2240,2508,2762,2814,2866,2
                                                                                                  917                               
 I_AMDAR_DES                Local  411      I(4)            4           scalar                    896,965,2241,2520,2763,2815,2867,2
                                                                                                  918                               
 I_AMDAR_LVL                Local  409      I(4)            4           scalar                    894,963,2239,2496,2761,2813,2865,2

Page 26          Source Listing                  ACFTOBS_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  916                               
 I_MAN_AIREP                Local  402      I(4)            4           scalar                    887,947,2580,2717                 
 I_MAN_YAIREP               Local  403      I(4)            4           scalar                    888,951,2592,2729                 
 I_MDCRS                    Local  398      I(4)            4           scalar                    883,940,2436,2745,2797,2849,2900  
 I_MDCRS_ASC                Local  400      I(4)            4           scalar                    885,942,2460,2747,2799,2851,2902  
 I_MDCRS_DES                Local  401      I(4)            4           scalar                    886,943,2472,2748,2800,2852,2903  
 I_MDCRS_LVL                Local  399      I(4)            4           scalar                    884,941,2448,2746,2798,2850,2901  
 KBADTOT                    Local  365      I(4)            4           scalar                    1078,1103,1251,1260,1491,1510,1584
                                                                                                  ,1601,1676,1695,1769,1787,1887,190
                                                                                                  5,1981,1998,2072,2089             
 KDTG_AN                    Local  419      I(4)            4           scalar                    2213,2308,2605                    
 KFLIGHT                    Dummy  81       I(4)            4           scalar   ARG,INOUT        1106,1109,1228,1263,1266,1403,1412
                                                                                                  ,1443,1452,1494,1513,1516,1582,158
                                                                                                  5,1604,1607,1679,1698,1701,1769,17
                                                                                                  71,1790,1793,1843,1845,1887,1889,1
                                                                                                  908,1911,1979,1982,2001,2004,2073,
                                                                                                  2092,2095,2193                    
 KFLIGHT_MAX                Local  307      I(4)            4           scalar                    1109,1228,1266,1412,1452,1494,1516
                                                                                                  ,1585,1607,1679,1701,1771,1793,184
                                                                                                  5,1889,1911,1982,2004,2073,2095,21
                                                                                                  93,3348,3352,3359,3374            
 KIDT                       Local  412      I(4)            4           scalar                    970,971,972,973,1327,1328,1329    
 KK                         Local  379      I(4)            4           scalar                    2988,2989,2990,2991,2992,2993,2995
                                                                                                  ,2996,2997,2998,2999,3000,3002,300
                                                                                                  3,3004,3005,3006,3007,3008,3023,30
                                                                                                  24,3025,3026,3027,3028,3030,3031,3
                                                                                                  032,3033,3034,3035,3037,3038,3039,
                                                                                                  3040,3041,3042,3043,3058,3059,3060
                                                                                                  ,3061,3062,3063,3065,3066,3067,306
                                                                                                  8,3069,3070,3072,3073,3074,3075,30
                                                                                                  76,3077,3078,3093,3094,3095,3096,3
                                                                                                  097,3098,3100,3101,3102,3103,3104,
                                                                                                  3105,3107,3108,3109,3110,3111,3112
                                                                                                  ,3113,3128,3129,3130,3131,3132,313
                                                                                                  3,3135,3136,3137,3138,3139,3140,31
                                                                                                  42,3143,3144,3145,3146,3147,3148,3
                                                                                                  163,3164,3165,3166,3167,3168,3170,
                                                                                                  3171,3172,3173,3174,3175,3177,3178
                                                                                                  ,3179,3180,3181,3182,3183,3198,319
                                                                                                  9,3200,3201,3202,3203,3205,3206,32
                                                                                                  07,3208,3209,3210,3212,3213,3214,3
                                                                                                  215,3216,3217,3218,3233,3234,3235,
                                                                                                  3236,3237,3238,3240,3241,3242,3243
                                                                                                  ,3244,3245,3247,3248,3249,3250,325
                                                                                                  1,3252,3253,3268,3269,3270,3271,32
                                                                                                  72,3273,3275,3276,3277,3278,3279,3
                                                                                                  280,3282,3283,3284,3285,3286,3287,
                                                                                                  3288,3303,3304,3305,3306,3307,3308
                                                                                                  ,3310,3311,3312,3313,3314,3315,331
                                                                                                  7,3318,3319,3320,3321,3322,3323   
 KNT_ACARS                  Local  383      I(4)            4           scalar                    915,938,1032                      
 KNT_AIREP                  Local  387      I(4)            4           scalar                    919,960,1036                      
 KNT_AMDAR                  Local  388      I(4)            4           scalar                    920,967,1037                      
 KNT_MAN_AIREP              Local  385      I(4)            4           scalar                    917,949,1034                      
 KNT_MAN_YAIREP             Local  386      I(4)            4           scalar                    918,953,1035,2411,2594,2625,2626,2

Page 27          Source Listing                  ACFTOBS_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  634,2661,2696,2731,2969           
 KNT_MDCRS                  Local  384      I(4)            4           scalar                    916,945,1033                      
 KREG                       Local  321      I(4)            4           scalar                    853,1079,1089,1108,1110,1141,1186,
                                                                                                  1229,1265,1267,1276,1413,1453,1490
                                                                                                  ,1495,1515,1517,1526,1543,1583,158
                                                                                                  6,1606,1608,1617,1634,1677,1680,17
                                                                                                  00,1702,1711,1728,1772,1792,1794,1
                                                                                                  803,1846,1886,1890,1910,1912,1921,
                                                                                                  1938,1980,1983,2003,2005,2014,2031
                                                                                                  ,2071,2074,2094,2096,2107,2194    
 KREG_MAX                   Local  322      I(4)            4           scalar                    1089,1110,1229,1267,1413,1453,1495
                                                                                                  ,1517,1586,1608,1680,1702,1772,179
                                                                                                  4,1846,1890,1912,1983,2005,2074,20
                                                                                                  96,2194,3348                      
 KREG_TOT                   Local  332      I(4)            4           scalar                    855,1090,1111,1144,1145,1156,1157,
                                                                                                  1159,1178,1181,1187,1222,1230,1268
                                                                                                  ,1277,1414,1454,1496,1518,1527,154
                                                                                                  4,1587,1609,1618,1635,1681,1703,17
                                                                                                  12,1729,1773,1795,1804,1847,1891,1
                                                                                                  913,1922,1939,1984,2006,2015,2032,
                                                                                                  2075,2097,2108,2187,2195,2988,3023
                                                                                                  ,3058,3093,3128,3163,3198,3233,326
                                                                                                  8,3303                            
 KREG_TOT_MAX               Local  333      I(4)            4           scalar                    1090,1111,1230,1268,1414,1454,1496
                                                                                                  ,1518,1587,1609,1681,1703,1773,179
                                                                                                  5,1847,1891,1913,1984,2006,2075,20
                                                                                                  97,2195,3348                      
 KREJ                       Dummy  75       I(4)            4           scalar   ARG,INOUT        850,1104,1261,1511,1602,1696,1788,
                                                                                                  1906,1999,2090                    
 K_AIREP_GOOD               Local  426      I(4)            4           scalar                    2217,2283,2333,2369               
 K_AIREP_TOT                Local  421      I(4)            4           scalar                    2216,2253,2332,2333,2363          
 K_AMDAR_TOT                Local  420      I(4)            4           scalar                    2215,2244,2361                    
 K_AU_GOOD                  Local  430      I(4)            4           scalar                    2223,2298,2348,2372               
 K_AU_TOT                   Local  424      I(4)            4           scalar                    2222,2270,2347,2348,2366          
 K_EU_GOOD                  Local  429      I(4)            4           scalar                    2221,2293,2343,2371               
 K_EU_TOT                   Local  423      I(4)            4           scalar                    2220,2265,2342,2343,2365          
 K_GOOD                     Local  439      I(4)            4           scalar                    2384,2430,2663,2669,2711,2971     
 K_GOOD_AIREP               Local  457      I(4)            4           scalar                    2402,2540,2655,2687,2941,2963     
 K_GOOD_AIREP_ASC           Local  461      I(4)            4           scalar                    2406,2564,2657,2691,2838,2965     
 K_GOOD_AIREP_DES           Local  463      I(4)            4           scalar                    2408,2576,2658,2693,2890,2966     
 K_GOOD_AIREP_LVL           Local  459      I(4)            4           scalar                    2404,2552,2656,2689,2786,2964     
 K_GOOD_AMDAR               Local  449      I(4)            4           scalar                    2394,2492,2650,2679,2926,2958     
 K_GOOD_AMDAR_ASC           Local  453      I(4)            4           scalar                    2398,2516,2652,2683,2823,2960     
 K_GOOD_AMDAR_DES           Local  455      I(4)            4           scalar                    2400,2528,2653,2685,2875,2961     
 K_GOOD_AMDAR_LVL           Local  451      I(4)            4           scalar                    2396,2504,2651,2681,2771,2959     
 K_GOOD_MAN_AIREP           Local  465      I(4)            4           scalar                    2410,2588,2660,2695,2725,2968     
 K_GOOD_MDCRS               Local  441      I(4)            4           scalar                    2386,2444,2645,2671,2911,2953     
 K_GOOD_MDCRS_ASC           Local  445      I(4)            4           scalar                    2390,2468,2647,2675,2808,2955     
 K_GOOD_MDCRS_DES           Local  447      I(4)            4           scalar                    2392,2480,2648,2677,2860,2956     
 K_GOOD_MDCRS_LVL           Local  443      I(4)            4           scalar                    2388,2456,2646,2673,2756,2954     
 K_OTHER_GOOD               Local  431      I(4)            4           scalar                    2225,2303,2353,2373               
 K_OTHER_TOT                Local  425      I(4)            4           scalar                    2224,2275,2352,2353,2367          
 K_TOTAL                    Local  438      I(4)            4           scalar                    2383,2424,2663,2668,2705,2971     
 K_TOT_AIREP                Local  456      I(4)            4           scalar                    2401,2534,2655,2686,2935,2963     
 K_TOT_AIREP_ASC            Local  460      I(4)            4           scalar                    2405,2558,2657,2690,2832,2965     

Page 28          Source Listing                  ACFTOBS_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 K_TOT_AIREP_DES            Local  462      I(4)            4           scalar                    2407,2570,2658,2692,2884,2966     
 K_TOT_AIREP_LVL            Local  458      I(4)            4           scalar                    2403,2546,2656,2688,2780,2964     
 K_TOT_AMDAR                Local  448      I(4)            4           scalar                    2393,2486,2650,2678,2920,2958     
 K_TOT_AMDAR_ASC            Local  452      I(4)            4           scalar                    2397,2510,2652,2682,2817,2960     
 K_TOT_AMDAR_DES            Local  454      I(4)            4           scalar                    2399,2522,2653,2684,2869,2961     
 K_TOT_AMDAR_LVL            Local  450      I(4)            4           scalar                    2395,2498,2651,2680,2765,2959     
 K_TOT_MAN_AIREP            Local  464      I(4)            4           scalar                    2409,2582,2660,2694,2719,2968     
 K_TOT_MDCRS                Local  440      I(4)            4           scalar                    2385,2438,2645,2670,2905,2953     
 K_TOT_MDCRS_ASC            Local  444      I(4)            4           scalar                    2389,2462,2647,2674,2802,2955     
 K_TOT_MDCRS_DES            Local  446      I(4)            4           scalar                    2391,2474,2648,2676,2854,2956     
 K_TOT_MDCRS_LVL            Local  442      I(4)            4           scalar                    2387,2450,2646,2672,2750,2954     
 K_UAL_GOOD                 Local  428      I(4)            4           scalar                    2219,2288,2338,2370               
 K_UAL_TOT                  Local  422      I(4)            4           scalar                    2218,2260,2337,2338,2364          
 K_YAIREP_GOOD              Local  427      I(4)            4           scalar                    2412,2601,2626,2635,2661,2697,2737
                                                                                                  ,2969                             
 LEAD_D_TOT                 Dummy  87       I(4)            4     3     0        ARG,INOUT        1223,2188                         
 LEAD_S_TOT                 Dummy  87       I(4)            4     3     0        ARG,INOUT        1223,2188                         
 LEAD_T_TOT                 Dummy  87       I(4)            4     3     0        ARG,INOUT        1223,2188                         
 LEN                        Local  381      I(4)            4           scalar                    674,676,696,697,700,703,713,714,71
                                                                                                  7,720,730,731,734,737,747,748,751,
                                                                                                  754,764,765,768,771,781,782,785,78
                                                                                                  8,798,799,802,805,815,816,819,822,
                                                                                                  832,833,836,839                   
 LOGFILE                    Local  486      CHAR            200         scalar                    670,672,674,675,676               
 LPATH                      Local  475      I(4)            4           scalar                    633,639,640,641,648,669,670,691,69
                                                                                                  2,708,709,725,726,742,743,759,760,
                                                                                                  776,777,793,794,810,811,827,828   
 L_DO_INNOV                 Local  503      L(4)            4           scalar                    630,637,646,656,1204,1215,2169,218
                                                                                                  0                                 
 L_FIRST                    Local  489      L(4)            4           scalar                    1399,1401,1439,1441               
 L_FIRST_DATE               Dummy  90       L(4)            4           scalar   ARG,INOUT        854,873                           
 L_FLIGHT                   Local  494      L(4)            4           scalar                    1101,1104,1258,1261,1508,1511,1599
                                                                                                  ,1602,1693,1696,1785,1788,1903,190
                                                                                                  6,1996,1999,2087,2090             
 L_FOUND                    Local  495      L(4)            4           scalar                    1142,1149,1155                    
 L_INIT                     Local  506      L(4)            4           scalar                    629,636,644,655,1080,1209,1227,125
                                                                                                  2,1492,1584,1678,1770,1888,1981,20
                                                                                                  72,2174,2192                      
 L_INNOV_MISS               Local  507      L(4)            4           scalar                    1209,1217,2174,2182               
 L_LAST                     Dummy  90       L(4)            4           scalar   ARG,INOUT        1080,1227,2192                    
 L_MINUS9C                  Dummy  89       L(4)            4     1     0        ARG,INOUT        1493                              
 L_NCEP                     Dummy  90       L(4)            4           scalar   ARG,INOUT        643,1081,1584,2072,3340           
 L_NEWFLT                   Dummy  81       L(4)            4     1     0        ARG,INOUT        1108,1265,1515,1606,1700,1792,1910
                                                                                                  ,2003,2094                        
 L_OPERATIONAL              Dummy  90       L(4)            4           scalar   ARG,INOUT        635,645,688,858,1080,1147,1180,119
                                                                                                  1,1204,1216,1252,1281,1492,1531,15
                                                                                                  42,1584,1622,1633,1678,1716,1727,1
                                                                                                  770,1808,1888,1926,1937,1981,2019,
                                                                                                  2030,2072,2106,2169,2181,2976,3330
 L_OPN                      Local  488      L(4)            4           scalar                    663,664,668,689,690,706,707,723,72
                                                                                                  4,740,741,757,758,774,775,791,792,
                                                                                                  808,809,825,826                   
 L_PC                       Dummy  90       L(4)            4           scalar   ARG,INOUT        628,929,1046,1072,1097,1139,1206,1
                                                                                                  219,1246,1254,1314,1371,1397,1431,
                                                                                                  1437,1486,1504,1575,1595,1668,1689

Page 29          Source Listing                  ACFTOBS_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  ,1762,1781,1840,1855,1879,1899,197
                                                                                                  2,1992,2063,2083,2171,2184,2203   
 L_PRINT                    Local  492      L(4)            4           scalar                    900,902,1052,1054,1102,1105,1124,1
                                                                                                  126,1259,1262,1294,1296,1377,1379,
                                                                                                  1400,1404,1440,1444,1465,1467,1509
                                                                                                  ,1512,1555,1557,1600,1603,1648,165
                                                                                                  0,1694,1697,1741,1743,1786,1789,18
                                                                                                  21,1823,1859,1861,1904,1907,1950,1
                                                                                                  952,1997,2000,2043,2045,2088,2091,
                                                                                                  2120,2122,2226,2228,2312,2609     
 L_SORT                     Local  493      L(4)            4           scalar                    1404,1424,1444                    
 MAX                        Func   1110                                 scalar                    1110,1111,1228,1229,1230,1266,1267
                                                                                                  ,1268,1412,1413,1414,1452,1453,145
                                                                                                  4,1494,1495,1496,1516,1517,1518,15
                                                                                                  85,1586,1587,1607,1608,1609,1679,1
                                                                                                  680,1681,1701,1702,1703,1771,1772,
                                                                                                  1773,1793,1794,1795,1845,1846,1847
                                                                                                  ,1889,1890,1891,1911,1912,1913,198
                                                                                                  2,1983,1984,2004,2005,2006,2073,20
                                                                                                  74,2075,2095,2096,2097,2193,2194,2
                                                                                                  195,3348                          
 MAXFLT                     Dummy  81       I(4)            4           scalar   ARG,INOUT        309,310,311,312,313,314,315,316,31
                                                                                                  7,324,325,326,327,328,329,330,335,
                                                                                                  336,337,338,339,340,341,342,343,34
                                                                                                  4,345,346,347,348,349,350,351,352,
                                                                                                  355,356,357,358,359,360,361,1074,1
                                                                                                  106,1157,1164,1169,1222,1263,1403,
                                                                                                  1443,1490,1513,1582,1604,1677,1698
                                                                                                  ,1769,1790,1843,1887,1908,1979,200
                                                                                                  1,2071,2092,2187,3352,3359,3363   
 MAXFLT_EXCEEDED            Local  278      I(4)            4           scalar                    851,1087,1410,1450,3380           
 MAX_REPS                   Dummy  75       I(4)            4           scalar   ARG,INOUT        179,246,247,248,249,250,251,252,25
                                                                                                  3,254,255,256,257,258,259,260,261,
                                                                                                  262,263,264,265,266,267,268,269,27
                                                                                                  0,271,272,291,292,293,472,845,906,
                                                                                                  1058,1074,1104,1130,1208,1221,1248
                                                                                                  ,1261,1300,1383,1401,1441,1471,148
                                                                                                  8,1511,1561,1577,1602,1654,1670,16
                                                                                                  96,1747,1764,1788,1827,1842,1865,1
                                                                                                  881,1906,1956,1974,1999,2049,2065,
                                                                                                  2090,2126,2173,2186               
 MM                         Local  353      I(4)            4           scalar                    1141,1146,1148,1178,1181,1186,1188
                                                                                                  ,1189,1192,1193,1194,1197,1276,127
                                                                                                  8,1279,1282,1283,1286,1526,1528,15
                                                                                                  29,1532,1533,1536,1543,1545,1546,1
                                                                                                  547,1617,1619,1620,1623,1624,1627,
                                                                                                  1634,1636,1637,1638,1639,1640,1711
                                                                                                  ,1713,1714,1717,1718,1721,1728,173
                                                                                                  0,1731,1732,1733,1803,1805,1806,18
                                                                                                  09,1810,1813,1921,1923,1924,1927,1
                                                                                                  928,1931,1938,1940,1941,1942,2014,
                                                                                                  2016,2017,2020,2021,2024,2031,2033
                                                                                                  ,2034,2035,2107,2109,2110,2111,211
                                                                                                  2                                 
 NBADTEMP                   Param  137      I(4)            4           scalar                    298,1675                          

Page 30          Source Listing                  ACFTOBS_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 NBLKTEMP                   Param  137      I(4)            4           scalar                    302,1676                          
 NBLKWIND                   Param  137      I(4)            4           scalar                    301,1676                          
 NCHK_D                     Dummy  79       I(4)            4     1     0        ARG,INOUT        2070                              
 NCHK_Q                     Dummy  79       I(4)            4     1     0        ARG,INOUT        2070                              
 NCHK_S                     Dummy  79       I(4)            4     1     0        ARG,INOUT        2070                              
 NCHK_T                     Dummy  79       I(4)            4     1     0        ARG,INOUT        2070                              
 NINT                       Func   978                                  scalar                    978,1006,1014,1334                
 NOBS_FLT                   Dummy  82       I(4)            4     1     0        ARG,INOUT        1106,1263,1403,1443,1513,1582,1604
                                                                                                  ,1698,1769,1790,1843,1887,1908,197
                                                                                                  9,2001,2092                       
 NOBS_REG                   Dummy  83       I(4)            4     2     0        ARG,INOUT        1079,1108,1148,1181,1265,1515,1606
                                                                                                  ,1700,1792,1910,1980,2003,2094    
 NOBS_REG_TOT               Dummy  84       I(4)            4     2     0        ARG,INOUT        859,1148,1181,2989,2990,2991,2992,
                                                                                                  2993,2998,2999,3000,3003,3004,3005
                                                                                                  ,3033,3034,3035,3038,3039,3040,306
                                                                                                  8,3069,3070,3073,3074,3075,3103,31
                                                                                                  04,3105,3108,3109,3110,3138,3139,3
                                                                                                  140,3143,3144,3145,3173,3174,3175,
                                                                                                  3178,3179,3180,3208,3209,3210,3213
                                                                                                  ,3214,3215,3243,3244,3245,3248,324
                                                                                                  9,3250,3278,3279,3280,3283,3284,32
                                                                                                  85,3313,3314,3315,3318,3319,3320  
 NREJ_FLT                   Dummy  82       I(4)            4     1     0        ARG,INOUT        1107,1264,1404,1444,1514,1605,1699
                                                                                                  ,1791,1909,1980,2002,2093         
 NREJ_FLT_OLD               Dummy  82       I(4)            4     1     0        ARG,INOUT        1107,1264,1514,1605,1699,1791,1909
                                                                                                  ,2002,2093                        
 NREJ_GRC_TOT               Dummy  86       I(4)            4     2     0        ARG,INOUT        863,1717,3199,3200,3201,3202,3203,
                                                                                                  3205,3206,3207,3216,3217,3218     
 NREJ_INV_TOT               Dummy  85       I(4)            4     2     0        ARG,INOUT        861,1282,1532,3129,3130,3131,3132,
                                                                                                  3133,3135,3136,3137,3146,3147,3148
 NREJ_ORD_TOT               Dummy  86       I(4)            4     2     0        ARG,INOUT        865,1927,3269,3270,3271,3272,3273,
                                                                                                  3275,3276,3277,3286,3287,3288     
 NREJ_POS_TOT               Dummy  86       I(4)            4     2     0        ARG,INOUT        864,1809,3234,3235,3236,3237,3238,
                                                                                                  3240,3241,3242,3251,3252,3253     
 NREJ_REG                   Dummy  83       I(4)            4     2     0        ARG,INOUT        1079,1108,1194,1197,1265,1282,1283
                                                                                                  ,1286,1515,1532,1533,1536,1606,162
                                                                                                  3,1624,1627,1700,1717,1718,1721,17
                                                                                                  92,1809,1810,1813,1910,1927,1928,1
                                                                                                  931,2003,2020,2021,2024,2094      
 NREJ_REG_TOT               Dummy  85       I(4)            4     2     0        ARG,INOUT        860,1194,1283,1533,1624,1718,1810,
                                                                                                  1928,2021,2995,2996,2997,3006,3007
                                                                                                  ,3008                             
 NREJ_STK_TOT               Dummy  86       I(4)            4     2     0        ARG,INOUT        862,1623,3164,3165,3166,3167,3168,
                                                                                                  3170,3171,3172,3181,3182,3183     
 NREJ_SUS_TOT               Dummy  87       I(4)            4     2     0        ARG,INOUT        866,2020,3304,3305,3306,3307,3308,
                                                                                                  3310,3311,3312,3321,3322,3323     
 NTEMP_REG                  Dummy  83       I(4)            4     2     0        ARG,INOUT        1079,1192,1490,1547,1583,1639,2071
                                                                                                  ,2111                             
 NTEMP_REG_TOT              Dummy  85       I(4)            4     2     0        ARG,INOUT        868,1192,1547,1639,2111,3059,3060,
                                                                                                  3061,3062,3063,3065,3066,3067,3076
                                                                                                  ,3077,3078                        
 NTOT_FLT                   Dummy  82       I(4)            4     1     0        ARG,INOUT        1106,1263,1403,1443,1513,1604,1698
                                                                                                  ,1790,1887,1908,1979,2001,2092    
 NTOT_FLT_OLD               Dummy  82       I(4)            4     1     0        ARG,INOUT        1107,1264,1514,1605,1699,1791,1909
                                                                                                  ,2002,2093                        

Page 31          Source Listing                  ACFTOBS_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 NTOT_REG                   Dummy  83       I(4)            4     2     0        ARG,INOUT        875,1197,1286,1536,1627,1721,1813,
                                                                                                  1931,1981,2024                    
 NUMREPS                    Dummy  75       I(4)            4           scalar   ARG,INOUT        624,906,931,1058,1074,1104,1130,12
                                                                                                  08,1221,1248,1261,1300,1316,1383,1
                                                                                                  401,1441,1471,1488,1511,1561,1577,
                                                                                                  1602,1654,1670,1696,1747,1764,1788
                                                                                                  ,1827,1865,1881,1906,1956,1974,199
                                                                                                  9,2049,2065,2090,2126,2173,2186   
 NUMREPS_ORIG               Local  243      I(4)            4           scalar                    624,1048,1373,1433,2235,2418,2699 
 NWHOL_REG                  Dummy  84       I(4)            4     2     0        ARG,INOUT        1583,1638,1677,1732               
 NWHOL_REG_TOT              Dummy  84       I(4)            4     2     0        ARG,INOUT        867,1638,1732,3024,3025,3026,3027,
                                                                                                  3028,3030,3031,3032,3041,3042,3043
 NWIND_REG                  Dummy  83       I(4)            4     2     0        ARG,INOUT        1079,1193,1583,1640,1677,1733,1886
                                                                                                  ,1942,1980,2035,2071,2112         
 NWIND_REG_TOT              Dummy  85       I(4)            4     2     0        ARG,INOUT        869,1193,1640,1733,1942,2035,2112,
                                                                                                  3094,3095,3096,3097,3098,3100,3101
                                                                                                  ,3102,3111,3112,3113              
 N_MINUS9C                  Local  366      I(4)            4     1     5                         1491                              
 N_XIV_D                    Dummy  88       I(4)            4     2     0        ARG,INOUT        1224,2189                         
 N_XIV_S                    Dummy  88       I(4)            4     2     0        ARG,INOUT        1224,2189                         
 N_XIV_T                    Dummy  87       I(4)            4     2     0        ARG,INOUT        1224,2189                         
 OB_DIR                     Dummy  77       R(4)            4     1     0        ARG,INOUT        908,987,1060,1076,1132,1249,1302,1
                                                                                                  342,1385,1473,1489,1563,1579,1656,
                                                                                                  1672,1749,1766,1829,1867,1883,1958
                                                                                                  ,1976,2051,2067,2128,2319,2616    
 OB_Q                       Dummy  77       R(4)            4     1     0        ARG,INOUT        908,986,1060,1076,1132,1249,1302,1
                                                                                                  341,1385,1473,1489,1563,1579,1656,
                                                                                                  1672,1749,1766,1829,1867,1883,1958
                                                                                                  ,1976,2051,2067,2128,2318,2615    
 OB_SPD                     Dummy  77       R(4)            4     1     0        ARG,INOUT        908,988,1060,1076,1132,1249,1302,1
                                                                                                  343,1385,1473,1489,1563,1579,1656,
                                                                                                  1672,1749,1766,1829,1867,1883,1958
                                                                                                  ,1976,2051,2067,2128,2320,2617    
 OB_T                       Dummy  77       R(4)            4     1     0        ARG,INOUT        908,985,1060,1076,1132,1249,1302,1
                                                                                                  340,1385,1473,1489,1563,1579,1656,
                                                                                                  1672,1749,1766,1829,1867,1883,1958
                                                                                                  ,1976,2051,2067,2128,2317,2614    
 ORDCHEK_QC                 Subr   1881                                                           1881                              
 ORDDUP_QC                  Subr   1842                                                           1842                              
 PERCENT                    Local  354      R(4)            4           scalar                    2995,3008,3030,3043,3065,3078,3100
                                                                                                  ,3113,3135,3148,3170,3183,3205,321
                                                                                                  8,3240,3253,3275,3288,3310,3323   
 PER_AIREP                  Local  432      R(4)            4           scalar                    2333,2335,2375,2626,2628,2636     
 PER_AU                     Local  435      R(4)            4           scalar                    2348,2350,2378                    
 PER_EU                     Local  434      R(4)            4           scalar                    2343,2345,2377                    
 PER_OTHER                  Local  436      R(4)            4           scalar                    2353,2355,2379                    
 PER_UAL                    Local  433      R(4)            4           scalar                    2338,2340,2376                    
 POSCHEK_QC                 Subr   1764                                                           1764                              
 PRES                       Dummy  76       R(4)            4     1     0        ARG,INOUT        907,984,1059,1076,1131,1249,1301,1
                                                                                                  339,1384,1472,1489,1562,1579,1655,
                                                                                                  1672,1748,1766,1828,1866,1883,1957
                                                                                                  ,1976,2050,2067,2127,2316,2613    
 PR_WORKDATA                Subr   906                                                            906,1058,1130,1300,1383,1471,1561,
                                                                                                  1654,1747,1827,1865,1956,2049,2126
 P_DDTG                     Subr   929                                                            929,1046,1072,1097,1139,1206,1219,

Page 32          Source Listing                  ACFTOBS_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  1246,1254,1314,1371,1397,1431,1437
                                                                                                  ,1486,1504,1575,1595,1668,1689,176
                                                                                                  2,1781,1840,1855,1879,1899,1972,19
                                                                                                  92,2063,2083,2171,2184,2203       
 REJLIST_QC                 Subr   2065                                                           2065                              
 REORDER                    Subr   1104                                                           1104,1261,1511,1602,1696,1788,1906
                                                                                                  ,1999,2090                        
 SLEN                       Subr   633                                                            633,639,641,648,674,696,713,730,74
                                                                                                  7,764,781,798,815,832             
 SPIKE_QC                   Subr   1248                                                           1248                              
 STK_VAL_QC                 Subr   1577                                                           1577                              
 SUMABS_XIV_D               Dummy  89       R(4)            4     2     0        ARG,INOUT        1226,2191                         
 SUMABS_XIV_S               Dummy  89       R(4)            4     2     0        ARG,INOUT        1226,2191                         
 SUMABS_XIV_T               Dummy  88       R(4)            4     2     0        ARG,INOUT        1226,2191                         
 SUM_XIV_D                  Dummy  88       R(4)            4     2     0        ARG,INOUT        1225,2190                         
 SUM_XIV_S                  Dummy  88       R(4)            4     2     0        ARG,INOUT        1225,2190                         
 SUM_XIV_T                  Dummy  88       R(4)            4     2     0        ARG,INOUT        1225,2190                         
 SUSPECT_QC                 Subr   1974                                                           1974                              
 SYSTEM                     Subr   620                                                            620,1170,3364,3373                
 TRIM                       Func   675                                  scalar                    675                               
 T_PRCN                     Dummy  77       R(4)            4     1     0        ARG,INOUT        908,985,1060,1076,1132,1249,1302,1
                                                                                                  340,1385,1473,1489,1563,1579,1656,
                                                                                                  1672,1749,1766,1829,1867,1883,1958
                                                                                                  ,1976,2051,2067,2128,2317,2614    
 W3TAGE                     Subr   1174                                                           1174                              
 XIV_D                      Dummy  78       R(4)            4     1     0        ARG,INOUT        909,987,1061,1077,1133,1208,1221,1
                                                                                                  250,1303,1342,1386,1474,1490,1564,
                                                                                                  1580,1657,1673,1750,1767,1830,1868
                                                                                                  ,1884,1959,1977,2052,2068,2129,217
                                                                                                  3,2186,2319,2616                  
 XIV_Q                      Dummy  78       R(4)            4     1     0        ARG,INOUT        909,986,1061,1077,1133,1250,1303,1
                                                                                                  341,1386,1474,1490,1564,1580,1657,
                                                                                                  1673,1750,1767,1830,1868,1884,1959
                                                                                                  ,1977,2052,2068,2129,2318,2615    
 XIV_S                      Dummy  78       R(4)            4     1     0        ARG,INOUT        909,988,1061,1077,1133,1208,1221,1
                                                                                                  250,1303,1343,1386,1474,1490,1564,
                                                                                                  1580,1657,1673,1750,1767,1830,1868
                                                                                                  ,1884,1959,1977,2052,2068,2129,217
                                                                                                  3,2186,2320,2617                  
 XIV_T                      Dummy  78       R(4)            4     1     0        ARG,INOUT        909,985,1061,1077,1133,1208,1221,1
                                                                                                  250,1303,1340,1386,1474,1490,1564,
                                                                                                  1580,1657,1673,1750,1767,1830,1868
                                                                                                  ,1884,1959,1977,2052,2068,2129,217
                                                                                                  3,2186,2317,2614                  

Page 33          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

   1075      $,     c_acftreg,c_acftid,c_qc,cdtg_an
   1076      $,     alat,alon,pres,ht_ft,t_prcn,ob_t,ob_q,ob_dir,ob_spd
   1077      $,     xiv_t,xiv_q,xiv_d,xiv_s
   1078      $,     idt,itype,ichk_t,ichk_q,ichk_d,ichk_s,kbadtot 
   1079      $,     kreg,creg_reg,nobs_reg,nrej_reg,ntemp_reg,nwind_reg
   1080      $,     indx,csort,amiss,imiss,io8,io30,l_last,l_operational,l_init
   1081      $,     l_ncep,*199)
   1082       go to 198
   1083  199  continue
   1084       print *, '----------------------------------------------------'
   1085       print *, '~~~> maxflt_exceeded -- coming out of call to dupchk'
   1086       print *, '----------------------------------------------------'
   1087       maxflt_exceeded = 1
   1088  198  continue
   1089       kreg_max = kreg
   1090       kreg_tot_max = kreg_tot
   1091 cppppp
   1092 cc    print *, 'after call to dupchek_qc kreg, kreg_tot: ',
   1093 cc   $ kreg, kreg_tot
   1094 cc    print *, 'kreg_max, kreg_tot_max: ',kreg_max, kreg_tot_max
   1095 cppppp
   1096 c
   1097       if(l_pc) call p_ddtg('Back from dupchek_qc',io8)
   1098 c
   1099 c     Re-order index array to skip bad reports
   1100 c     ----------------------------------------
   1101       l_flight = .false.
   1102       l_print = .false.
   1103       if(kbadtot.gt.0) then 
   1104         call reorder(l_flight,numreps,max_reps,indx,krej,in_bad
   1105      $,          io8,l_print,cregmiss,csort,c_acftid,itype
   1106      $,          kflight,maxflt,cid_flt,creg_flt,nobs_flt,ntot_flt
   1107      $,          nrej_flt,iobs_flt,cid_flt_old,ntot_flt_old,nrej_flt_old
   1108      $,          kreg,creg_reg,nobs_reg,nrej_reg,c_acftreg,l_newflt)
   1109         kflight_max = kflight
   1110         kreg_max = max(kreg,kreg_max)
   1111         kreg_tot_max = max(kreg_tot,kreg_tot_max)
   1112 cppppp
   1113 cc    print *, 'after call 1 to reorder kreg, kflight, kreg_tot: ',
   1114 cc   $ kreg, kflight, kreg_tot
   1115 cc    print *, 'kreg_max, kflight_max, kreg_tot_max: ',
   1116 cc   $ kreg_max, kflight_max, kreg_tot_max
   1117 cppppp
   1118 
   1119 c
   1120       endif
   1121 c
   1122 c     Output reports to log file if desired
   1123 c     -------------------------------------
   1124       l_print = .false.
   1125 c
   1126       if(l_print) then
   1127         write(io8,*) 
   1128         write(io8,*) 'Reports after duplicate removal'
   1129         write(io8,*) '-------------------------------'
   1130         call pr_workdata(max_reps,numreps,indx
   1131      x,      alat,alon,pres,ht_ft,idt,idp,c_acftreg,c_acftid,itype        

Page 34          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

   1132      x,      t_prcn,ob_t,ob_q,ob_dir,ob_spd
   1133      x,      xiv_t,xiv_q,xiv_d,xiv_s,ichk_t,ichk_q,ichk_d,ichk_s
   1134      x,      cdtg_an,c_qc,csort,io8)        
   1135       endif
   1136 c
   1137 c Generate master list of tail numbers and counts
   1138 c -----------------------------------------------
   1139       if(l_pc) call p_ddtg('Setting up master list of tail numbers',io8)
   1140 c
   1141       do mm=1,kreg
   1142         l_found = .false.
   1143 c
   1144         if(kreg_tot.ne.0) then
   1145           do ii=1,kreg_tot
   1146             if(creg_reg(mm)(1:8).eq.creg_reg_tot(ii)(1:8)) then
   1147               if(.not.l_operational) then
   1148           nobs_reg_tot(ii,1:5) = nobs_reg_tot(ii,1:5) + nobs_reg(mm,1:5)
   1149                 l_found = .true.
   1150               endif
   1151             endif
   1152           enddo
   1153         endif
   1154 c
   1155         if(.not.l_found) then
   1156           kreg_tot = kreg_tot + 1
   1157           if(kreg_tot.gt.maxflt) then
   1158 c............................................................................................
   1159             write(*,*) 'WARNING: kreg_tot > maxflt--',kreg_tot
   1160 
   1161 c There are more flights in input file than "maxflt" -- stop abnormally with c. code 98
   1162 c  (can't be sure continuing on w/o processing any more data would turn out ok)
   1163 c --------------------------------------------------------------------------------------
   1164             print 53, maxflt
   1165    53 format(/' #####> WARNING: THERE ARE MORE THAN ',I6,' AIRCRAFT ',
   1166      + '"FLIGHTS" IN INPUT FILE -- MUST INCREASE SIZE OF PARAMETER ',
   1167      + 'NMAE "MAXFLT" - STOP 98'/)
   1168 
   1169             write(cmaxflt,'(i6)') maxflt
   1170           call system('[ -n "$jlogfile" ] && $DATA/postmsg'//
   1171      +     ' "$jlogfile" "***WARNING:'//cmaxflt//' AIRCRAFT "FLIGHT" '//
   1172      +     'LIMIT EXCEEDED IN PREPOBS_PREPACQC, STOP 98"')
   1173 
   1174             call w3tage('PREPOBS_PREPACQC')
   1175             call errexit(98)
   1176 c............................................................................................
   1177           endif
   1178           creg_reg_tot(kreg_tot)(1:8) = creg_reg(mm)(1:8)
   1179 c
   1180           if(.not.l_operational) then
   1181             nobs_reg_tot(kreg_tot,1:5) = nobs_reg(mm,1:5)
   1182           endif
   1183         endif
   1184       enddo
   1185 c
   1186       do mm=1,kreg
   1187         do ii=1,kreg_tot
   1188           if(creg_reg(mm)(1:8).eq.creg_reg_tot(ii)(1:8).and.

Page 35          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

   1189      $       creg_reg(mm).ne.'xxxxxxxx') then
   1190 c
   1191             if(.not.l_operational) then
   1192            ntemp_reg_tot(ii,1:5)=ntemp_reg_tot(ii,1:5)+ntemp_reg(mm,1:5)
   1193            nwind_reg_tot(ii,1:5)=nwind_reg_tot(ii,1:5)+nwind_reg(mm,1:5)
   1194               nrej_reg_tot(ii,1:5)=nrej_reg_tot(ii,1:5)+nrej_reg(mm,1:5)
   1195             endif
   1196 c
   1197             ntot_reg(mm,1:5)=ntot_reg(mm,1:5)+nrej_reg(mm,1:5)
   1198           endif
   1199         enddo
   1200       enddo
   1201 c
   1202 c Output innovation distributions
   1203 c -------------------------------
   1204       if(l_do_innov.and.(.not.l_operational)) then
   1205 c
   1206         if(l_pc) call p_ddtg('Calling innov_qc',io8)
   1207 c
   1208         call innov_qc(max_reps,numreps,indx,xiv_t,xiv_d,xiv_s,amiss,
   1209      $                c_qc,1,io8,l_init,l_innov_miss)
   1210       endif
   1211 c
   1212 c Examine first digit distribution for comparison with Benford's law
   1213 c Perform after duplicate check and before other QC checks
   1214 c ------------------------------------------------------------------
   1215       if(l_do_innov.and.
   1216      $   (.not.l_operational).and.
   1217      $   (.not.l_innov_miss)) then
   1218 c
   1219         if(l_pc) call p_ddtg('Calling benford_qc',io8)
   1220 c
   1221         call benford_qc(max_reps,numreps,indx,xiv_t,xiv_d,xiv_s,amiss,
   1222      $           c_acftreg,itype,maxflt,kreg_tot,creg_reg_tot,
   1223      $           c_qc,lead_t_tot,lead_d_tot,lead_s_tot,
   1224      $           n_xiv_t,n_xiv_d,n_xiv_s,
   1225      $           sum_xiv_t,sum_xiv_d,sum_xiv_s,
   1226      $           sumabs_xiv_t,sumabs_xiv_d,sumabs_xiv_s,1,io8
   1227      $,          l_init,l_last)
   1228         kflight_max = max(kflight,kflight_max)
   1229         kreg_max = max(kreg,kreg_max)
   1230         kreg_tot_max = max(kreg_tot,kreg_tot_max)
   1231 cppppp
   1232 cc    print *, 'after call 1 to benford_qc kreg, kflight, kreg_tot: ',
   1233 cc   $ kreg, kflight, kreg_tot
   1234 cc    print *, 'kreg_max, kflight_max, kreg_tot_max: ',
   1235 cc   $ kreg_max, kflight_max, kreg_tot_max
   1236 cppppp
   1237       endif
   1238 c
   1239 c Perform second pass through data--spike check
   1240 c ---------------------------------------------
   1241       write(*,*)'Beginning 2nd pass through data--spike check'
   1242       write(io8,*)
   1243       write(io8,*)'Beginning 2nd pass through data--spike check'
   1244       write(io8,*)'--------------------------------------------'
   1245 c

Page 36          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

   1246       if(l_pc) call p_ddtg('Calling spike_qc',io8)
   1247 c
   1248       call spike_qc(numreps,max_reps,c_acftreg,c_acftid,c_qc
   1249      $,     alat,alon,pres,ht_ft,t_prcn,ob_t,ob_q,ob_dir,ob_spd
   1250      $,     xiv_t,xiv_q,xiv_d,xiv_s,idt,itype,ichk_t,ichk_q
   1251      $,     ichk_d,ichk_s,kbadtot,indx,csort,amiss,imiss,io8
   1252      $,     io31,cdtg_an,l_operational,l_init)
   1253 c
   1254       if(l_pc) call p_ddtg('Back from spike_qc',io8)
   1255 c
   1256 c     Re-order index array to skip bad reports
   1257 c     ----------------------------------------
   1258       l_flight = .false.
   1259       l_print = .false.
   1260       if(kbadtot.gt.0) then 
   1261         call reorder(l_flight,numreps,max_reps,indx,krej,in_bad
   1262      $,          io8,l_print,cregmiss,csort,c_acftid,itype
   1263      $,          kflight,maxflt,cid_flt,creg_flt,nobs_flt,ntot_flt
   1264      $,          nrej_flt,iobs_flt,cid_flt_old,ntot_flt_old,nrej_flt_old
   1265      $,          kreg,creg_reg,nobs_reg,nrej_reg,c_acftreg,l_newflt)
   1266         kflight_max = max(kflight,kflight_max)
   1267         kreg_max = max(kreg,kreg_max)
   1268         kreg_tot_max = max(kreg_tot,kreg_tot_max)
   1269 cppppp
   1270 cc    print *, 'after call 2 to reorder kreg, kflight, kreg_tot: ',
   1271 cc   $ kreg, kflight, kreg_tot
   1272 cc    print *, 'kreg_max, kflight_max, kreg_tot_max: ',
   1273 cc   $ kreg_max, kflight_max, kreg_tot_max
   1274 cppppp
   1275 c
   1276         do mm=1,kreg
   1277           do ii=1,kreg_tot
   1278             if(creg_reg(mm)(1:8).eq.creg_reg_tot(ii)(1:8).and.
   1279      $         creg_reg(mm).ne.'xxxxxxxx') then
   1280 
   1281               if(.not.l_operational) then
   1282               nrej_inv_tot(ii,1:5)=nrej_inv_tot(ii,1:5)+nrej_reg(mm,1:5)
   1283               nrej_reg_tot(ii,1:5)=nrej_reg_tot(ii,1:5)+nrej_reg(mm,1:5)
   1284               endif
   1285 c
   1286               ntot_reg(mm,1:5)=ntot_reg(mm,1:5)+nrej_reg(mm,1:5)
   1287             endif
   1288           enddo
   1289         enddo
   1290       endif
   1291 c
   1292 c     Output reports to log file if desired
   1293 c     -------------------------------------
   1294       l_print = .false.
   1295 c
   1296       if(l_print) then
   1297         write(io8,*) 
   1298         write(io8,*) 'Reports after spike check'
   1299         write(io8,*) '-------------------------'
   1300         call pr_workdata(max_reps,numreps,indx
   1301      x,      alat,alon,pres,ht_ft,idt,idp,c_acftreg,c_acftid,itype        
   1302      x,      t_prcn,ob_t,ob_q,ob_dir,ob_spd

Page 37          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

   1303      x,      xiv_t,xiv_q,xiv_d,xiv_s,ichk_t,ichk_q,ichk_d,ichk_s
   1304      x,      cdtg_an,c_qc,csort,io8)        
   1305       endif
   1306 c
   1307 c Form variable to sort--flight number + time + level + type
   1308 c (second sort is to begin to form tracks)
   1309 c ----------------------------------------------------------
   1310       write(io8,*)
   1311       write(io8,*) 'Forming variable to sort--flight#+time+level+type'
   1312       write(io8,*) '-------------------------------------------------'
   1313 c
   1314       if(l_pc) call p_ddtg('Forming variable for second sort',io8)
   1315 c
   1316       do iob=1,numreps
   1317          ii = indx(iob)
   1318 c
   1319 c       Exclude previously rejected reports
   1320 c       -----------------------------------
   1321         if(csort(ii)(1:5).eq.'badob') then
   1322           csort(ii) = 'zzzzzzzzzzzzzzzzzzzzzzzzz'
   1323 c          write(io8,*) 'badob found for iob = ',iob,' ii = ',ii
   1324 c
   1325         elseif(csort(ii).ne.'zzzzzzzzzzzzzzzzzzzzzzzzz') then
   1326 c
   1327           kidt = idt(ii) + 100 000
   1328           if(kidt.ge.1 000 000) write(io8,*) 'kidt too large--',kidt
   1329           write(c_idt,'(i6)') kidt
   1330 c
   1331           if(ht_ft(ii).eq.amiss) then
   1332             c_ht_ft = '999999'
   1333           else
   1334             iht_ft = nint(ht_ft(ii)) + 100 000
   1335             if(iht_ft.ge.200 000) then ! if nint(ht_ft(iob)) = 100,000 or greater
   1336               write(io8,*) 'iht_ft too large--',iht_ft
   1337               write (io8,8001) iob,c_insty_ob(itype(iob))
   1338      x,          c_acftreg(iob),c_acftid(iob)
   1339      x,          idt(iob),alat(iob),alon(iob),pres(iob),ht_ft(iob)
   1340      x,          t_prcn(iob),ob_t(iob),xiv_t(iob),ichk_t(iob)
   1341      x,          ob_q(iob),xiv_q(iob),ichk_q(iob)
   1342      x,          ob_dir(iob),xiv_d(iob),ichk_d(iob)
   1343      x,          ob_spd(iob),xiv_s(iob),ichk_s(iob),idp(iob)
   1344               iht_ft = imiss
   1345             endif
   1346 
   1347             if(iht_ft.ge.0) then
   1348               write(c_ht_ft,'(i6.6)') iht_ft
   1349             else
   1350               write(c_ht_ft,'(i6.5)') iht_ft
   1351             endif
   1352           endif
   1353 c
   1354           c_type = c_insty_ob(itype(ii))
   1355 c
   1356           csort(ii) = c_acftid(ii)(1:9)
   1357      $              //c_idt(1:6)
   1358      $              //c_ht_ft(1:6)
   1359      $              //c_type(1:2)

Page 38          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

   1360      $              //'  '
   1361         endif
   1362       enddo
   1363 c
   1364 c Sort reports in file according to array csort
   1365 c ---------------------------------------------
   1366       write(*,*) 'Sorting reports by flight number first'
   1367       write(io8,*)
   1368       write(io8,*) 'Sorting reports by flight number first'
   1369       write(io8,*) '--------------------------------------'
   1370 c
   1371       if(l_pc) call p_ddtg('Calling INDEXC for second sort',io8)
   1372 c
   1373       call INDEXC(numreps_orig,csort,indx)
   1374 c
   1375 c     Output reports to log file if desired
   1376 c     -------------------------------------
   1377       l_print = .false.
   1378 c
   1379       if(l_print) then
   1380         write(io8,*) 
   1381         write(io8,*) 'Reports after second sort'
   1382         write(io8,*) '-------------------------'
   1383         call pr_workdata(max_reps,numreps,indx
   1384      x,      alat,alon,pres,ht_ft,idt,idp,c_acftreg,c_acftid,itype
   1385      x,      t_prcn,ob_t,ob_q,ob_dir,ob_spd
   1386      x,      xiv_t,xiv_q,xiv_d,xiv_s,ichk_t,ichk_q,ichk_d,ichk_s
   1387      x,      cdtg_an,c_qc,csort,io8)        
   1388       endif
   1389 c
   1390 c Determine starting index for each flight and number of reports per flight
   1391 c -------------------------------------------------------------------------
   1392       write(*,*) 'Determine starting index/length for each flight'
   1393       write(io8,*)
   1394       write(io8,*) 'Determine starting index/length for each flight'
   1395       write(io8,*) '-----------------------------------------------'
   1396 c
   1397       if(l_pc) call p_ddtg('Calling do_flt',io8)
   1398 c
   1399       l_first = .true.
   1400       l_print = .false.
   1401       call do_flt(l_first,numreps,max_reps,c_acftid,c_acftreg,idt,
   1402      $           ht_ft,cidmiss,cregmiss,indx,idt_samflt,
   1403      $           kflight,maxflt,cid_flt,creg_flt,nobs_flt,ntot_flt,
   1404      $           nrej_flt,iobs_flt,csort,l_sort,l_print,amiss,io8,*299)
   1405       go to 298
   1406  299  continue
   1407       print *, '-------------------------------------------------------'
   1408       print *, '~~~> maxflt_exceeded -- coming out of call #1 to do_flt'
   1409       print *, '-------------------------------------------------------'
   1410       maxflt_exceeded = 1
   1411  298  continue
   1412       kflight_max = max(kflight,kflight_max)
   1413       kreg_max = max(kreg,kreg_max)
   1414       kreg_tot_max = max(kreg_tot,kreg_tot_max)
   1415 cppppp
   1416 cc    print *, 'after call 1 to do_flt kreg, kflight, kreg_tot: ',

Page 39          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

   1417 cc   $ kreg, kflight, kreg_tot
   1418 cc    print *, 'kreg_max, kflight_max, kreg_tot_max: ',
   1419 cc   $ kreg_max, kflight_max, kreg_tot_max
   1420 cppppp
   1421 c
   1422 c     Re-sort if flight number with two tail numbers was found
   1423 c     --------------------------------------------------------
   1424       if(l_sort) then
   1425 c
   1426         write(*,*) 'Re-sorting reports by flight number first'
   1427         write(io8,*)
   1428         write(io8,*) 'Re-sorting reports by flight number first'
   1429         write(io8,*) '-----------------------------------------'
   1430 c
   1431         if(l_pc) call p_ddtg('Calling INDEXC to redo second sort',io8)
   1432 c
   1433       call INDEXC(numreps_orig,csort,indx)
   1434 c
   1435 c       Redo starting index for each flight and number of reports per flight
   1436 c       --------------------------------------------------------------------
   1437         if(l_pc) call p_ddtg('Calling do_flt after re-sort',io8)
   1438 c
   1439         l_first = .false.
   1440         l_print = .false.
   1441         call do_flt(l_first,numreps,max_reps,c_acftid,c_acftreg,idt,
   1442      $           ht_ft,cidmiss,cregmiss,indx,idt_samflt,
   1443      $           kflight,maxflt,cid_flt,creg_flt,nobs_flt,ntot_flt,
   1444      $           nrej_flt,iobs_flt,csort,l_sort,l_print,amiss,io8,*399)
   1445         go to 398
   1446  399    continue
   1447       print *, '-------------------------------------------------------'
   1448       print *, '~~~> maxflt_exceeded -- coming out of call #2 to do_flt'
   1449       print *, '-------------------------------------------------------'
   1450         maxflt_exceeded = 1
   1451  398    continue
   1452         kflight_max = max(kflight,kflight_max)
   1453         kreg_max = max(kreg,kreg_max)
   1454         kreg_tot_max = max(kreg_tot,kreg_tot_max)
   1455 cppppp
   1456 cc    print *, 'after call 2 to do_flt kreg, kflight, kreg_tot: ',
   1457 cc   $ kreg, kflight, kreg_tot
   1458 cc    print *, 'kreg_max, kflight_max, kreg_tot_max: ',
   1459 cc   $ kreg_max, kflight_max, kreg_tot_max
   1460 cppppp
   1461 c
   1462 c       Output reports to log file if desired
   1463 c       -------------------------------------
   1464 c DAK: may want to set l_print=F below to save time and space in prod runs
   1465         l_print = .true.
   1466 c
   1467         if(l_print) then
   1468           write(io8,*) 
   1469           write(io8,*) 'Reports after re-sort'
   1470           write(io8,*) '---------------------'
   1471           call pr_workdata(max_reps,numreps,indx
   1472      x,      alat,alon,pres,ht_ft,idt,idp,c_acftreg,c_acftid,itype        
   1473      x,      t_prcn,ob_t,ob_q,ob_dir,ob_spd

Page 40          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

   1474      x,      xiv_t,xiv_q,xiv_d,xiv_s,ichk_t,ichk_q,ichk_d,ichk_s
   1475      x,      cdtg_an,c_qc,csort,io8)        
   1476         endif
   1477       endif
   1478 c
   1479 c Perform third pass through data--invalid data check
   1480 c ---------------------------------------------------
   1481       write(*,*)'Beginning 3rd pass through data--invalid data check'
   1482       write(io8,*)
   1483       write(io8,*)'Beginning 3rd pass through data--invalid data check'
   1484       write(io8,*)'---------------------------------------------------'
   1485 c
   1486       if(l_pc) call p_ddtg('Calling invalid_qc',io8)
   1487 c
   1488       call invalid_qc(numreps,max_reps,c_acftreg,c_acftid,c_qc
   1489      $,     alat,alon,pres,ht_ft,t_prcn,ob_t,ob_q,ob_dir,ob_spd
   1490      $,     xiv_t,xiv_q,xiv_d,xiv_s,maxflt,kreg,creg_reg,ntemp_reg
   1491      $,     idt,itype,ichk_t,ichk_q,ichk_d,ichk_s,kbadtot,n_minus9C 
   1492      $,     indx,csort,amiss,imiss,io8,io32,l_operational,l_init
   1493      $,     cdtg_an,l_minus9c)
   1494       kflight_max = max(kflight,kflight_max)
   1495       kreg_max = max(kreg,kreg_max)
   1496       kreg_tot_max = max(kreg_tot,kreg_tot_max)
   1497 cppppp
   1498 cc    print *, 'after call to invalid_qc kreg, kflight, kreg_tot: ',
   1499 cc   $ kreg, kflight, kreg_tot
   1500 cc    print *, 'kreg_max, kflight_max, kreg_tot_max: ',
   1501 cc   $ kreg_max, kflight_max, kreg_tot_max
   1502 cppppp
   1503 c
   1504       if(l_pc) call p_ddtg('Back from invalid_qc',io8)
   1505 c
   1506 c     Re-order index array to skip bad reports
   1507 c     ----------------------------------------
   1508       l_flight = .true.
   1509       l_print = .true.
   1510       if(kbadtot.gt.0) then 
   1511         call reorder(l_flight,numreps,max_reps,indx,krej,in_bad
   1512      $,          io8,l_print,cregmiss,csort,c_acftid,itype
   1513      $,          kflight,maxflt,cid_flt,creg_flt,nobs_flt,ntot_flt
   1514      $,          nrej_flt,iobs_flt,cid_flt_old,ntot_flt_old,nrej_flt_old
   1515      $,          kreg,creg_reg,nobs_reg,nrej_reg,c_acftreg,l_newflt)
   1516         kflight_max = max(kflight,kflight_max)
   1517         kreg_max = max(kreg,kreg_max)
   1518         kreg_tot_max = max(kreg_tot,kreg_tot_max)
   1519 cppppp
   1520 cc    print *, 'after call 3 to reorder kreg, kflight, kreg_tot: ',
   1521 cc   $ kreg, kflight, kreg_tot
   1522 cc    print *, 'kreg_max, kflight_max, kreg_tot_max: ',
   1523 cc   $ kreg_max, kflight_max, kreg_tot_max
   1524 cppppp
   1525 c
   1526         do mm=1,kreg
   1527           do ii=1,kreg_tot
   1528             if(creg_reg(mm)(1:8).eq.creg_reg_tot(ii)(1:8).and.
   1529      $         creg_reg(mm).ne.'xxxxxxxx') then
   1530 

Page 41          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

   1531               if(.not.l_operational) then
   1532               nrej_inv_tot(ii,1:5)=nrej_inv_tot(ii,1:5)+nrej_reg(mm,1:5)
   1533               nrej_reg_tot(ii,1:5)=nrej_reg_tot(ii,1:5)+nrej_reg(mm,1:5)
   1534               endif
   1535 c
   1536               ntot_reg(mm,1:5)=ntot_reg(mm,1:5)+nrej_reg(mm,1:5)
   1537             endif
   1538           enddo
   1539         enddo
   1540       endif
   1541 c
   1542       if(.not.l_operational) then
   1543         do mm=1,kreg
   1544           do ii=1,kreg_tot
   1545             if(creg_reg(mm)(1:8).eq.creg_reg_tot(ii)(1:8).and.
   1546      $         creg_reg(mm).ne.'xxxxxxxx') then
   1547            ntemp_reg_tot(ii,1:5)=ntemp_reg_tot(ii,1:5)+ntemp_reg(mm,1:5)
   1548             endif
   1549           enddo
   1550         enddo
   1551       endif
   1552 c
   1553 c     Output reports to log file if desired
   1554 c     -------------------------------------
   1555       l_print = .false.
   1556 c
   1557       if(l_print) then
   1558         write(io8,*) 
   1559         write(io8,*) 'Reports after invalid data check'
   1560         write(io8,*) '--------------------------------'
   1561         call pr_workdata(max_reps,numreps,indx
   1562      x,      alat,alon,pres,ht_ft,idt,idp,c_acftreg,c_acftid,itype        
   1563      x,      t_prcn,ob_t,ob_q,ob_dir,ob_spd
   1564      x,      xiv_t,xiv_q,xiv_d,xiv_s,ichk_t,ichk_q,ichk_d,ichk_s
   1565      x,      cdtg_an,c_qc,csort,io8)        
   1566       endif
   1567 c
   1568 c Perform fourth pass through data--reports with stuck values
   1569 c ----------------------------------------------------------
   1570       write(*,*) 'Beginning 4th pass through data--stuck values'
   1571       write(io8,*)
   1572       write(io8,*) 'Beginning 4th pass through data--stuck values'
   1573       write(io8,*) '---------------------------------------------'
   1574 c
   1575       if(l_pc) call p_ddtg('Calling stk_val_qc',io8)
   1576 c
   1577       call stk_val_qc(numreps,max_reps,indx,csort,amiss,cdtg_an
   1578      $,          c_acftreg,c_acftid,c_qc
   1579      $,          alat,alon,pres,ht_ft,t_prcn,ob_t,ob_q,ob_dir,ob_spd
   1580      $,          xiv_t,xiv_q,xiv_d,xiv_s
   1581      $,          idt,itype,ichk_t,ichk_q,ichk_d,ichk_s
   1582      $,          kflight,maxflt,nobs_flt,iobs_flt
   1583      $,          kreg,creg_reg,nwhol_reg,ntemp_reg,nwind_reg
   1584      $,          kbadtot,io8,io33,l_operational,l_init,l_ncep)
   1585       kflight_max = max(kflight,kflight_max)
   1586       kreg_max = max(kreg,kreg_max)
   1587       kreg_tot_max = max(kreg_tot,kreg_tot_max)

Page 42          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

   1588 cppppp
   1589 cc    print *, 'after call to stk_val_qc kreg, kflight, kreg_tot: ',
   1590 cc   $ kreg, kflight, kreg_tot
   1591 cc    print *, 'kreg_max, kflight_max, kreg_tot_max: ',
   1592 cc   $ kreg_max, kflight_max, kreg_tot_max
   1593 cppppp
   1594 c
   1595       if(l_pc) call p_ddtg('Back from stk_val_qc',io8)
   1596 c
   1597 c     Re-order index array to skip bad reports
   1598 c     ----------------------------------------
   1599       l_flight = .true.
   1600       l_print = .true.
   1601       if(kbadtot.gt.0) then 
   1602         call reorder(l_flight,numreps,max_reps,indx,krej,in_bad
   1603      $,          io8,l_print,cregmiss,csort,c_acftid,itype
   1604      $,          kflight,maxflt,cid_flt,creg_flt,nobs_flt,ntot_flt
   1605      $,          nrej_flt,iobs_flt,cid_flt_old,ntot_flt_old,nrej_flt_old
   1606      $,          kreg,creg_reg,nobs_reg,nrej_reg,c_acftreg,l_newflt)
   1607         kflight_max = max(kflight,kflight_max)
   1608         kreg_max = max(kreg,kreg_max)
   1609         kreg_tot_max = max(kreg_tot,kreg_tot_max)
   1610 cppppp
   1611 cc    print *, 'after call 4 to reorder kreg, kflight, kreg_tot: ',
   1612 cc   $ kreg, kflight, kreg_tot
   1613 cc    print *, 'kreg_max, kflight_max, kreg_tot_max: ',
   1614 cc   $ kreg_max, kflight_max, kreg_tot_max
   1615 cppppp
   1616 c
   1617         do mm=1,kreg
   1618           do ii=1,kreg_tot
   1619             if(creg_reg(mm)(1:8).eq.creg_reg_tot(ii)(1:8).and.
   1620      $         creg_reg(mm).ne.'xxxxxxxx') then
   1621 c
   1622               if(.not.l_operational) then
   1623               nrej_stk_tot(ii,1:5)=nrej_stk_tot(ii,1:5)+nrej_reg(mm,1:5)
   1624               nrej_reg_tot(ii,1:5)=nrej_reg_tot(ii,1:5)+nrej_reg(mm,1:5)
   1625               endif
   1626 c
   1627               ntot_reg(mm,1:5)=ntot_reg(mm,1:5)+nrej_reg(mm,1:5)
   1628             endif
   1629           enddo
   1630         enddo
   1631       endif
   1632 c
   1633       if(.not.l_operational) then
   1634         do mm=1,kreg
   1635           do ii=1,kreg_tot
   1636             if(creg_reg(mm)(1:8).eq.creg_reg_tot(ii)(1:8).and.
   1637      $         creg_reg(mm).ne.'xxxxxxxx') then
   1638            nwhol_reg_tot(ii,1:5)=nwhol_reg_tot(ii,1:5)+nwhol_reg(mm,1:5)
   1639            ntemp_reg_tot(ii,1:5)=ntemp_reg_tot(ii,1:5)+ntemp_reg(mm,1:5)
   1640            nwind_reg_tot(ii,1:5)=nwind_reg_tot(ii,1:5)+nwind_reg(mm,1:5)
   1641             endif
   1642           enddo
   1643         enddo
   1644       endif

Page 43          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

   1645 c
   1646 c     Output reports to log file if desired
   1647 c     -------------------------------------
   1648       l_print = .false.
   1649 c
   1650       if(l_print) then
   1651         write(io8,*) 
   1652         write(io8,*) 'Reports after stuck value check'
   1653         write(io8,*) '-------------------------------'
   1654         call pr_workdata(max_reps,numreps,indx
   1655      x,      alat,alon,pres,ht_ft,idt,idp,c_acftreg,c_acftid,itype
   1656      x,      t_prcn,ob_t,ob_q,ob_dir,ob_spd
   1657      x,      xiv_t,xiv_q,xiv_d,xiv_s,ichk_t,ichk_q,ichk_d,ichk_s
   1658      x,      cdtg_an,c_qc,csort,io8)        
   1659       endif
   1660 c
   1661 c Perform fifth pass through data--gross checks
   1662 c ---------------------------------------------
   1663       write(*,*) 'Beginning 5th pass through data--gross checks'
   1664       write(io8,*)
   1665       write(io8,*) 'Beginning 5th pass through data--gross checks'
   1666       write(io8,*) '---------------------------------------------'
   1667 c
   1668       if(l_pc) call p_ddtg('Calling grchek_qc',io8)
   1669 c
   1670       call grchek_qc(numreps,max_reps,indx,csort,amiss,cdtg_an
   1671      $,          c_acftreg,c_acftid,c_qc
   1672      $,          alat,alon,pres,ht_ft,t_prcn,ob_t,ob_q,ob_dir,ob_spd
   1673      $,          xiv_t,xiv_q,xiv_d,xiv_s
   1674      $,          idt,itype,ichk_t,ichk_q,ichk_d,ichk_s
   1675      $,          cbadtemp,nbadtemp
   1676      $,          cblkwind,nblkwind,cblktemp,nblktemp,kbadtot,io8,io34
   1677      $,          maxflt,kreg,creg_reg,nwhol_reg,nwind_reg
   1678      $,          ft2m,l_operational,l_init)
   1679       kflight_max = max(kflight,kflight_max)
   1680       kreg_max = max(kreg,kreg_max)
   1681       kreg_tot_max = max(kreg_tot,kreg_tot_max)
   1682 cppppp
   1683 cc    print *, 'after call to grchek_qc kreg, kflight, kreg_tot: ',
   1684 cc   $ kreg, kflight, kreg_tot
   1685 cc    print *, 'kreg_max, kflight_max, kreg_tot_max: ',
   1686 cc   $ kreg_max, kflight_max, kreg_tot_max
   1687 cppppp
   1688 c
   1689       if(l_pc) call p_ddtg('Back from grchek_qc',io8)
   1690 c
   1691 c     Re-order index array to skip bad reports
   1692 c     ----------------------------------------
   1693       l_flight = .true.
   1694       l_print = .true.
   1695       if(kbadtot.gt.0) then 
   1696         call reorder(l_flight,numreps,max_reps,indx,krej,in_bad
   1697      $,          io8,l_print,cregmiss,csort,c_acftid,itype
   1698      $,          kflight,maxflt,cid_flt,creg_flt,nobs_flt,ntot_flt
   1699      $,          nrej_flt,iobs_flt,cid_flt_old,ntot_flt_old,nrej_flt_old
   1700      $,          kreg,creg_reg,nobs_reg,nrej_reg,c_acftreg,l_newflt)
   1701         kflight_max = max(kflight,kflight_max)

Page 44          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

   1702         kreg_max = max(kreg,kreg_max)
   1703         kreg_tot_max = max(kreg_tot,kreg_tot_max)
   1704 cppppp
   1705 cc    print *, 'after call 5 to reorder kreg, kflight, kreg_tot: ',
   1706 cc   $ kreg, kflight, kreg_tot
   1707 cc    print *, 'kreg_max, kflight_max, kreg_tot_max: ',
   1708 cc   $ kreg_max, kflight_max, kreg_tot_max
   1709 cppppp
   1710 c
   1711         do mm=1,kreg
   1712           do ii=1,kreg_tot
   1713             if(creg_reg(mm)(1:8).eq.creg_reg_tot(ii)(1:8).and.
   1714      $         creg_reg(mm).ne.'xxxxxxxx') then
   1715 
   1716               if(.not.l_operational) then
   1717               nrej_grc_tot(ii,1:5)=nrej_grc_tot(ii,1:5)+nrej_reg(mm,1:5)
   1718               nrej_reg_tot(ii,1:5)=nrej_reg_tot(ii,1:5)+nrej_reg(mm,1:5)
   1719               endif
   1720 c
   1721               ntot_reg(mm,1:5)=ntot_reg(mm,1:5)+nrej_reg(mm,1:5)
   1722             endif
   1723           enddo
   1724         enddo
   1725       endif
   1726 c
   1727       if(.not.l_operational) then
   1728         do mm=1,kreg
   1729           do ii=1,kreg_tot
   1730             if(creg_reg(mm)(1:8).eq.creg_reg_tot(ii)(1:8).and.
   1731      $         creg_reg(mm).ne.'xxxxxxxx') then
   1732            nwhol_reg_tot(ii,1:5)=nwhol_reg_tot(ii,1:5)+nwhol_reg(mm,1:5)
   1733            nwind_reg_tot(ii,1:5)=nwind_reg_tot(ii,1:5)+nwind_reg(mm,1:5)
   1734             endif
   1735           enddo
   1736         enddo
   1737       endif
   1738 c
   1739 c     Output reports to log file if desired
   1740 c     -------------------------------------
   1741       l_print = .false.
   1742 c
   1743       if(l_print) then
   1744         write(io8,*) 
   1745         write(io8,*) 'Reports after gross check'
   1746         write(io8,*) '-------------------------'
   1747         call pr_workdata(max_reps,numreps,indx
   1748      x,      alat,alon,pres,ht_ft,idt,idp,c_acftreg,c_acftid,itype        
   1749      x,      t_prcn,ob_t,ob_q,ob_dir,ob_spd
   1750      x,      xiv_t,xiv_q,xiv_d,xiv_s,ichk_t,ichk_q,ichk_d,ichk_s
   1751      x,      cdtg_an,c_qc,csort,io8)        
   1752       endif
   1753 c
   1754 c Perform six pass through data 
   1755 c Check for inconsistent altitudes or positions in duplicates
   1756 c -----------------------------------------------------------
   1757       write(*,*) 'Beginning 6th pass through data--inconsistent posn'
   1758       write(io8,*)

Page 45          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

   1759       write(io8,*) 'Beginning 6th pass through data--inconsistent posn'
   1760       write(io8,*) '--------------------------------------------------'
   1761 c
   1762       if(l_pc) call p_ddtg('Calling poschek_qc',io8)
   1763 c
   1764       call poschek_qc(numreps,max_reps,indx,csort,imiss,amiss
   1765      $,          idt_updn,c_acftreg,c_acftid,cidmiss,c_qc,cdtg_an
   1766      $,          alat,alon,pres,ht_ft,t_prcn,ob_t,ob_q,ob_dir,ob_spd
   1767      $,          xiv_t,xiv_q,xiv_d,xiv_s
   1768      $,          idt,itype,ichk_t,ichk_q,ichk_d,ichk_s
   1769      $,          kflight,maxflt,nobs_flt,iobs_flt,kbadtot,io8,io35
   1770      $,          l_operational,l_init)
   1771       kflight_max = max(kflight,kflight_max)
   1772       kreg_max = max(kreg,kreg_max)
   1773       kreg_tot_max = max(kreg_tot,kreg_tot_max)
   1774 cppppp
   1775 cc    print *, 'after call to poschek_qc kreg, kflight, kreg_tot: ',
   1776 cc   $ kreg, kflight, kreg_tot
   1777 cc    print *, 'kreg_max, kflight_max, kreg_tot_max: ',
   1778 cc   $ kreg_max, kflight_max, kreg_tot_max
   1779 cppppp
   1780 c
   1781       if(l_pc) call p_ddtg('Back from poschek_qc',io8)
   1782 c
   1783 c     Re-order index array to skip bad reports
   1784 c     ----------------------------------------
   1785       l_flight = .true.
   1786       l_print = .true.
   1787       if(kbadtot.gt.0) then  
   1788         call reorder(l_flight,numreps,max_reps,indx,krej,in_bad
   1789      $,          io8,l_print,cregmiss,csort,c_acftid,itype
   1790      $,          kflight,maxflt,cid_flt,creg_flt,nobs_flt,ntot_flt
   1791      $,          nrej_flt,iobs_flt,cid_flt_old,ntot_flt_old,nrej_flt_old
   1792      $,          kreg,creg_reg,nobs_reg,nrej_reg,c_acftreg,l_newflt)
   1793         kflight_max = max(kflight,kflight_max)
   1794         kreg_max = max(kreg,kreg_max)
   1795         kreg_tot_max = max(kreg_tot,kreg_tot_max)
   1796 cppppp
   1797 cc    print *, 'after call 6 to reorder kreg, kflight, kreg_tot: ',
   1798 cc   $ kreg, kflight, kreg_tot
   1799 cc    print *, 'kreg_max, kflight_max, kreg_tot_max: ',
   1800 cc   $ kreg_max, kflight_max, kreg_tot_max
   1801 cppppp
   1802 c
   1803         do mm=1,kreg
   1804           do ii=1,kreg_tot
   1805             if(creg_reg(mm)(1:8).eq.creg_reg_tot(ii)(1:8).and.
   1806      $         creg_reg(mm).ne.'xxxxxxxx') then
   1807 c
   1808               if(.not.l_operational) then
   1809               nrej_pos_tot(ii,1:5)=nrej_pos_tot(ii,1:5)+nrej_reg(mm,1:5)
   1810               nrej_reg_tot(ii,1:5)=nrej_reg_tot(ii,1:5)+nrej_reg(mm,1:5)
   1811               endif
   1812 c
   1813               ntot_reg(mm,1:5)=ntot_reg(mm,1:5)+nrej_reg(mm,1:5)
   1814             endif
   1815           enddo

Page 46          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

   1816         enddo
   1817       endif
   1818 c
   1819 c     Output reports to log file if desired
   1820 c     -------------------------------------
   1821       l_print = .false.
   1822 c
   1823       if(l_print) then
   1824         write(io8,*) 
   1825         write(io8,*) 'Reports after inconsistent position check'
   1826         write(io8,*) '-----------------------------------------'
   1827         call pr_workdata(max_reps,numreps,indx
   1828      x,      alat,alon,pres,ht_ft,idt,idp,c_acftreg,c_acftid,itype        
   1829      x,      t_prcn,ob_t,ob_q,ob_dir,ob_spd
   1830      x,      xiv_t,xiv_q,xiv_d,xiv_s,ichk_t,ichk_q,ichk_d,ichk_s
   1831      x,      cdtg_an,c_qc,csort,io8)        
   1832       endif
   1833 c
   1834 c Check ordering of near-duplicate reports
   1835 c ----------------------------------------
   1836       write(io8,*)
   1837       write(io8,*) 'Check ordering of near-duplicates'
   1838       write(io8,*) '---------------------------------'
   1839 c
   1840       if(l_pc) call p_ddtg('Calling orddup_qc',io8)
   1841 c
   1842       call orddup_qc(max_reps,indx,isave,ht_ft,idt,alat,alon
   1843      $,              kflight,maxflt,nobs_flt,iobs_flt
   1844      $,              c_acftreg,c_acftid,cidmiss,idt_near,io8)
   1845       kflight_max = max(kflight,kflight_max)
   1846       kreg_max = max(kreg,kreg_max)
   1847       kreg_tot_max = max(kreg_tot,kreg_tot_max)
   1848 cppppp
   1849 cc    print *, 'after call to orddup_qc kreg, kflight, kreg_tot: ',
   1850 cc   $ kreg, kflight, kreg_tot
   1851 cc    print *, 'kreg_max, kflight_max, kreg_tot_max: ',
   1852 cc   $ kreg_max, kflight_max, kreg_tot_max
   1853 cppppp
   1854 c
   1855       if(l_pc) call p_ddtg('Back from orddup_qc',io8)
   1856 c
   1857 c     Output reports to log file if desired
   1858 c     -------------------------------------
   1859       l_print = .false.
   1860 c
   1861       if(l_print) then
   1862         write(io8,*) 
   1863         write(io8,*) 'Reports after check of near-dup ordering'
   1864         write(io8,*) '----------------------------------------'
   1865         call pr_workdata(max_reps,numreps,indx
   1866      x,      alat,alon,pres,ht_ft,idt,idp,c_acftreg,c_acftid,itype        
   1867      x,      t_prcn,ob_t,ob_q,ob_dir,ob_spd
   1868      x,      xiv_t,xiv_q,xiv_d,xiv_s,ichk_t,ichk_q,ichk_d,ichk_s
   1869      x,      cdtg_an,c_qc,csort,io8)        
   1870         endif
   1871 c
   1872 c Perform seventh pass through data--check ordering of flights 

Page 47          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

   1873 c ------------------------------------------------------------
   1874       write(*,*) 'Beginning 7th pass through data--ordering check'
   1875       write(io8,*)
   1876       write(io8,*) 'Beginning 7th pass through data--ordering check'
   1877       write(io8,*) '-----------------------------------------------'
   1878 c
   1879       if(l_pc) call p_ddtg('Calling ordchek_qc',io8)
   1880 c
   1881       call ordchek_qc(numreps,max_reps,indx,csort,imiss,amiss,idt_near
   1882      $,          idt_updn,htdif_same,c_acftreg,c_acftid,cidmiss,c_qc
   1883      $,          alat,alon,pres,ht_ft,t_prcn,ob_t,ob_q,ob_dir,ob_spd
   1884      $,          xiv_t,xiv_q,xiv_d,xiv_s
   1885      $,          idt,itype,ichk_t,ichk_q,ichk_d,ichk_s
   1886      $,          kreg,creg_reg,nwind_reg
   1887      $,          kflight,maxflt,nobs_flt,ntot_flt,iobs_flt,kbadtot
   1888      $,          io8,io36,l_operational,l_init)
   1889       kflight_max = max(kflight,kflight_max)
   1890       kreg_max = max(kreg,kreg_max)
   1891       kreg_tot_max = max(kreg_tot,kreg_tot_max)
   1892 cppppp
   1893 cc    print *, 'after call to ordchek_qc kreg, kflight, kreg_tot: ',
   1894 cc   $ kreg, kflight, kreg_tot
   1895 cc    print *, 'kreg_max, kflight_max, kreg_tot_max: ',
   1896 cc   $ kreg_max, kflight_max, kreg_tot_max
   1897 cppppp
   1898 c
   1899       if(l_pc) call p_ddtg('Back from ordchek_qc',io8)
   1900 c
   1901 c     Re-order index array to skip bad reports
   1902 c     ----------------------------------------
   1903       l_flight = .true.
   1904       l_print = .true.
   1905       if(kbadtot.gt.0) then  
   1906         call reorder(l_flight,numreps,max_reps,indx,krej,in_bad
   1907      $,          io8,l_print,cregmiss,csort,c_acftid,itype
   1908      $,          kflight,maxflt,cid_flt,creg_flt,nobs_flt,ntot_flt
   1909      $,          nrej_flt,iobs_flt,cid_flt_old,ntot_flt_old,nrej_flt_old
   1910      $,          kreg,creg_reg,nobs_reg,nrej_reg,c_acftreg,l_newflt)
   1911         kflight_max = max(kflight,kflight_max)
   1912         kreg_max = max(kreg,kreg_max)
   1913         kreg_tot_max = max(kreg_tot,kreg_tot_max)
   1914 cppppp
   1915 cc    print *, 'after call 7 to reorder kreg, kflight, kreg_tot: ',
   1916 cc   $ kreg, kflight, kreg_tot
   1917 cc    print *, 'kreg_max, kflight_max, kreg_tot_max: ',
   1918 cc   $ kreg_max, kflight_max, kreg_tot_max
   1919 cppppp
   1920 c
   1921         do mm=1,kreg
   1922           do ii=1,kreg_tot
   1923             if(creg_reg(mm)(1:8).eq.creg_reg_tot(ii)(1:8).and.
   1924      $         creg_reg(mm).ne.'xxxxxxxx') then
   1925 c
   1926               if(.not.l_operational) then
   1927               nrej_ord_tot(ii,1:5)=nrej_ord_tot(ii,1:5)+nrej_reg(mm,1:5)
   1928               nrej_reg_tot(ii,1:5)=nrej_reg_tot(ii,1:5)+nrej_reg(mm,1:5)
   1929               endif

Page 48          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

   1930 c
   1931               ntot_reg(mm,1:5)=ntot_reg(mm,1:5)+nrej_reg(mm,1:5)
   1932             endif
   1933           enddo
   1934         enddo
   1935       endif
   1936 c
   1937       if(.not.l_operational) then
   1938         do mm=1,kreg
   1939           do ii=1,kreg_tot
   1940             if(creg_reg(mm)(1:8).eq.creg_reg_tot(ii)(1:8).and.
   1941      $         creg_reg(mm).ne.'xxxxxxxx') then
   1942            nwind_reg_tot(ii,1:5)=nwind_reg_tot(ii,1:5)+nwind_reg(mm,1:5)
   1943             endif
   1944           enddo
   1945         enddo
   1946       endif
   1947 c
   1948 c     Output reports to log file if desired
   1949 c     -------------------------------------
   1950       l_print = .false.
   1951 c
   1952       if(l_print) then
   1953         write(io8,*) 
   1954         write(io8,*) 'Reports after ordering check'
   1955         write(io8,*) '----------------------------'
   1956         call pr_workdata(max_reps,numreps,indx
   1957      x,      alat,alon,pres,ht_ft,idt,idp,c_acftreg,c_acftid,itype        
   1958      x,      t_prcn,ob_t,ob_q,ob_dir,ob_spd
   1959      x,      xiv_t,xiv_q,xiv_d,xiv_s,ichk_t,ichk_q,ichk_d,ichk_s
   1960      x,      cdtg_an,c_qc,csort,io8)        
   1961       endif
   1962 c
   1963 c Perform eighth pass through data--suspect data check
   1964 c ----------------------------------------------------
   1965       write(*,*) 'Beginning 8th pass through data--suspect check'
   1966       write(io8,*)
   1967       write(io8,*) 'Beginning 8th pass through data--suspect check'
   1968       write(io8,*) '----------------------------------------------'
   1969 c
   1970 c     Re-examine data flagged as suspect
   1971 c     ----------------------------------
   1972       if(l_pc) call p_ddtg('Calling suspect_qc',io8)
   1973 c
   1974       call suspect_qc(numreps,max_reps,indx,csort,imiss,idt_near,amiss
   1975      $,          c_acftreg,c_acftid,c_qc
   1976      $,          alat,alon,pres,ht_ft,t_prcn,ob_t,ob_q,ob_dir,ob_spd
   1977      $,          xiv_t,xiv_q,xiv_d,xiv_s
   1978      $,          idt,itype,ichk_t,ichk_q,ichk_d,ichk_s
   1979      $,          maxflt,kflight,creg_flt,nobs_flt,ntot_flt
   1980      $,          nrej_flt,iobs_flt,kreg,creg_reg,nobs_reg,nwind_reg
   1981      $,          ntot_reg,kbadtot,io8,io37,l_operational,l_init)
   1982       kflight_max = max(kflight,kflight_max)
   1983       kreg_max = max(kreg,kreg_max)
   1984       kreg_tot_max = max(kreg_tot,kreg_tot_max)
   1985 cppppp
   1986 cc    print *, 'after call to suspect_qc kreg, kflight, kreg_tot: ',

Page 49          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

   1987 cc   $ kreg, kflight, kreg_tot
   1988 cc    print *, 'kreg_max, kflight_max, kreg_tot_max: ',
   1989 cc   $ kreg_max, kflight_max, kreg_tot_max
   1990 cppppp
   1991 c
   1992       if(l_pc) call p_ddtg('Back from suspect_qc',io8)
   1993 c
   1994 c     Re-order index array to skip bad reports
   1995 c     ----------------------------------------
   1996       l_flight = .true.
   1997       l_print = .true.
   1998       if(kbadtot.gt.0) then 
   1999         call reorder(l_flight,numreps,max_reps,indx,krej,in_bad
   2000      $,          io8,l_print,cregmiss,csort,c_acftid,itype
   2001      $,          kflight,maxflt,cid_flt,creg_flt,nobs_flt,ntot_flt
   2002      $,          nrej_flt,iobs_flt,cid_flt_old,ntot_flt_old,nrej_flt_old
   2003      $,          kreg,creg_reg,nobs_reg,nrej_reg,c_acftreg,l_newflt)
   2004         kflight_max = max(kflight,kflight_max)
   2005         kreg_max = max(kreg,kreg_max)
   2006         kreg_tot_max = max(kreg_tot,kreg_tot_max)
   2007 cppppp
   2008 cc    print *, 'after call 8 to reorder kreg, kflight, kreg_tot: ',
   2009 cc   $ kreg, kflight, kreg_tot
   2010 cc    print *, 'kreg_max, kflight_max, kreg_tot_max: ',
   2011 cc   $ kreg_max, kflight_max, kreg_tot_max
   2012 cppppp
   2013 c
   2014         do mm=1,kreg
   2015           do ii=1,kreg_tot
   2016             if(creg_reg(mm)(1:8).eq.creg_reg_tot(ii)(1:8).and.
   2017      $         creg_reg(mm).ne.'xxxxxxxx') then
   2018 c
   2019               if(.not.l_operational) then
   2020               nrej_sus_tot(ii,1:5)=nrej_sus_tot(ii,1:5)+nrej_reg(mm,1:5)
   2021               nrej_reg_tot(ii,1:5)=nrej_reg_tot(ii,1:5)+nrej_reg(mm,1:5)
   2022               endif
   2023 c
   2024               ntot_reg(mm,1:5)=ntot_reg(mm,1:5)+nrej_reg(mm,1:5)
   2025             endif
   2026           enddo
   2027         enddo
   2028       endif
   2029 c
   2030       if(.not.l_operational) then
   2031         do mm=1,kreg
   2032           do ii=1,kreg_tot
   2033             if(creg_reg(mm)(1:8).eq.creg_reg_tot(ii)(1:8).and.
   2034      $         creg_reg(mm).ne.'xxxxxxxx') then
   2035            nwind_reg_tot(ii,1:5)=nwind_reg_tot(ii,1:5)+nwind_reg(mm,1:5)
   2036             endif
   2037           enddo
   2038         enddo
   2039       endif
   2040 c
   2041 c     Output reports to log file if desired
   2042 c     -------------------------------------
   2043       l_print = .false.

Page 50          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

   2044 c
   2045       if(l_print) then
   2046         write(io8,*) 
   2047         write(io8,*) 'Reports after suspect data check'
   2048         write(io8,*) '--------------------------------'
   2049         call pr_workdata(max_reps,numreps,indx
   2050      x,      alat,alon,pres,ht_ft,idt,idp,c_acftreg,c_acftid,itype        
   2051      x,      t_prcn,ob_t,ob_q,ob_dir,ob_spd
   2052      x,      xiv_t,xiv_q,xiv_d,xiv_s,ichk_t,ichk_q,ichk_d,ichk_s
   2053      x,      cdtg_an,c_qc,csort,io8)        
   2054       endif
   2055 c
   2056 c Perform ninth pass through data--reject list check
   2057 c --------------------------------------------------
   2058       write(*,*) 'Beginning 9th pass through data--reject list check'
   2059       write(io8,*)
   2060       write(io8,*) 'Beginning 9th pass through data--reject list check'
   2061       write(io8,*) '--------------------------------------------------'
   2062 c
   2063       if(l_pc) call p_ddtg('Calling rejlist_qc',io8)
   2064 c
   2065       call rejlist_qc(numreps,max_reps,indx,csort
   2066      $,          c_acftreg,c_acftid,c_qc
   2067      $,          alat,alon,pres,ht_ft,t_prcn,ob_t,ob_q,ob_dir,ob_spd
   2068      $,          xiv_t,xiv_q,xiv_d,xiv_s
   2069      $,          idt,itype,ichk_t,ichk_q,ichk_d,ichk_s
   2070      $,          nchk_t,nchk_q,nchk_d,nchk_s
   2071      $,          maxflt,kreg,creg_reg,nwind_reg,ntemp_reg
   2072      $,          kbadtot,io8,io38,l_operational,l_init,l_ncep)
   2073       kflight_max = max(kflight,kflight_max)
   2074       kreg_max = max(kreg,kreg_max)
   2075       kreg_tot_max = max(kreg_tot,kreg_tot_max)
   2076 cppppp
   2077 cc    print *, 'after call to rejlist_qc kreg, kflight, kreg_tot: ',
   2078 cc   $ kreg, kflight, kreg_tot
   2079 cc    print *, 'kreg_max, kflight_max, kreg_tot_max: ',
   2080 cc   $ kreg_max, kflight_max, kreg_tot_max
   2081 cppppp
   2082 c
   2083       if(l_pc) call p_ddtg('Back from rejlist_qc',io8)
   2084 c
   2085 c     Re-order index array to skip bad reports
   2086 c     ----------------------------------------
   2087       l_flight = .true.
   2088       l_print = .true.
   2089       if(kbadtot.gt.0) then 
   2090         call reorder(l_flight,numreps,max_reps,indx,krej,in_bad
   2091      $,          io8,l_print,cregmiss,csort,c_acftid,itype
   2092      $,          kflight,maxflt,cid_flt,creg_flt,nobs_flt,ntot_flt
   2093      $,          nrej_flt,iobs_flt,cid_flt_old,ntot_flt_old,nrej_flt_old
   2094      $,          kreg,creg_reg,nobs_reg,nrej_reg,c_acftreg,l_newflt)
   2095         kflight_max = max(kflight,kflight_max)
   2096         kreg_max = max(kreg,kreg_max)
   2097         kreg_tot_max = max(kreg_tot,kreg_tot_max)
   2098 cppppp
   2099 cc    print *, 'after call 9 to reorder kreg, kflight, kreg_tot: ',
   2100 cc   $ kreg, kflight, kreg_tot

Page 51          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

   2101 cc    print *, 'kreg_max, kflight_max, kreg_tot_max: ',
   2102 cc   $ kreg_max, kflight_max, kreg_tot_max
   2103 cppppp
   2104       endif
   2105 c
   2106       if(.not.l_operational) then
   2107         do mm=1,kreg
   2108           do ii=1,kreg_tot
   2109             if(creg_reg(mm)(1:8).eq.creg_reg_tot(ii)(1:8).and.
   2110      $         creg_reg(mm).ne.'xxxxxxxx') then
   2111            ntemp_reg_tot(ii,1:5)=ntemp_reg_tot(ii,1:5)+ntemp_reg(mm,1:5)
   2112            nwind_reg_tot(ii,1:5)=nwind_reg_tot(ii,1:5)+nwind_reg(mm,1:5)
   2113             endif
   2114           enddo
   2115         enddo
   2116       endif
   2117 c
   2118 c     Output reports to log file if desired
   2119 c     -------------------------------------
   2120       l_print = .false.
   2121 c
   2122       if(l_print) then
   2123         write(io8,*) 
   2124         write(io8,*) 'Reports after reject list check'
   2125         write(io8,*) '-------------------------------'
   2126         call pr_workdata(max_reps,numreps,indx
   2127      x,      alat,alon,pres,ht_ft,idt,idp,c_acftreg,c_acftid,itype        
   2128      x,      t_prcn,ob_t,ob_q,ob_dir,ob_spd
   2129      x,      xiv_t,xiv_q,xiv_d,xiv_s,ichk_t,ichk_q,ichk_d,ichk_s
   2130      x,      cdtg_an,c_qc,csort,io8)        
   2131       endif
   2132 c
   2133 c      write(io8,*) 
   2134 c      write(io8,*) 'Post-QC reports from HZMYCWBA,415IC1BA, or JHCWUURA'
   2135 c      write(io8,*) '---------------------------------------------------'
   2136 c      do iob = 1,max_reps
   2137 c        ii = iob
   2138 cc        if(c_acftreg(ii)(1:8).eq.'HZMYCWBA'.or.
   2139 cc     $     c_acftreg(ii)(1:8).eq.'415IC1BA'.or.
   2140 cc     $     c_acftreg(ii)(1:8).eq.'JHCWUURA') then
   2141 c        if(c_acftreg(ii)(1:8).eq.'HN3ICWBA'.or.
   2142 c     $     c_acftreg(ii)(1:8).eq.'JSYYCURA'.or.
   2143 c     $     c_acftreg(ii)(1:8).eq.'U5IICUZA'.or.
   2144 c     $     c_acftreg(ii)(1:8).eq.'415IC1BA'.or.
   2145 c     $     c_acftreg(ii)(1:8).eq.'OIIYC1ZA'.or.
   2146 c     $     c_acftreg(ii)(1:8).eq.'E5QYZFRA'.or.
   2147 c     $     c_acftreg(ii)(1:8).eq.'QNVYCWBA'.or.
   2148 c     $     c_acftreg(ii)(1:8).eq.'1ZUYC1RA'.or.
   2149 c     $     c_acftreg(ii)(1:8).eq.'1GUUIRRA'.or.
   2150 c     $     c_acftreg(ii)(1:8).eq.'JI0KEWJA') then
   2151 cc
   2152 c          write (io8,8011) iob,ii,c_insty_ob(itype(ii))
   2153 c     x,      c_acftreg(ii),c_acftid(ii)
   2154 c     x,      idt(ii),alat(ii),alon(ii),pres(ii),ht_ft(ii)
   2155 c     x,      t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
   2156 c     x,      ob_q(ii),xiv_q(ii),ichk_q(ii)
   2157 c     x,      ob_dir(ii),xiv_d(ii),ichk_d(ii)

Page 52          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

   2158 c     x,      ob_spd(ii),xiv_s(ii),ichk_s(ii),idp(ii)
   2159 c     x,      c_qc(ii),csort(ii)
   2160 c 8011     format(i5,1x,i6,1x,a8,1x,a8,1x,a9,1x
   2161 c     x,      i7,1x,2f11.5,1x,f8.1,1x,f7.0,1x
   2162 c     x,      f5.2,4(2(1x,f8.2),1x,i5),1x,i4
   2163 c     x,      1x,'!',a11,'!',1x,a25)
   2164 c        endif
   2165 c      enddo
   2166 c
   2167 c Output innovation distributions
   2168 c -------------------------------
   2169       if(l_do_innov.and.(.not.l_operational)) then
   2170 c
   2171         if(l_pc) call p_ddtg('Calling innov_qc',io8)
   2172 c
   2173         call innov_qc(max_reps,numreps,indx,xiv_t,xiv_d,xiv_s,amiss,
   2174      $                c_qc,2,io8,l_init,l_innov_miss)
   2175       endif
   2176 c
   2177 c Examine first digit distribution for comparison with Benford's law
   2178 c Perform after all QC checks
   2179 c ------------------------------------------------------------------
   2180       if(l_do_innov.and.
   2181      $   (.not.l_operational).and.
   2182      $   (.not.l_innov_miss)) then
   2183 c
   2184         if(l_pc) call p_ddtg('Calling benford_qc',io8)
   2185 c
   2186         call benford_qc(max_reps,numreps,indx,xiv_t,xiv_d,xiv_s,amiss,
   2187      $           c_acftreg,itype,maxflt,kreg_tot,creg_reg_tot,
   2188      $           c_qc,lead_t_tot,lead_d_tot,lead_s_tot,
   2189      $           n_xiv_t,n_xiv_d,n_xiv_s,
   2190      $           sum_xiv_t,sum_xiv_d,sum_xiv_s,
   2191      $           sumabs_xiv_t,sumabs_xiv_d,sumabs_xiv_s,2,io8
   2192      $,          l_init,l_last)
   2193         kflight_max = max(kflight,kflight_max)
   2194         kreg_max = max(kreg,kreg_max)
   2195         kreg_tot_max = max(kreg_tot,kreg_tot_max)
   2196 cppppp
   2197 cc    print *, 'after call 2 to benford_qc kreg, kflight, kreg_tot: ',
   2198 cc   $ kreg, kflight, kreg_tot
   2199 cc    print *, 'kreg_max, kflight_max, kreg_tot_max: ',
   2200 cc   $ kreg_max, kflight_max, kreg_tot_max
   2201 cppppp
   2202 c
   2203         if(l_pc) call p_ddtg('Back from benford_qc',io8)
   2204 c
   2205       endif
   2206 c
   2207 c Compute statistics for automated AIREPs
   2208 c ---------------------------------------
   2209 c (Additional AMDAR bulletins turned on Feb 10, 1999--automated AIREPs
   2210 c  are largely superfluous after that date.  Before then, Australian
   2211 c  and Asian AMDAR reports were only received as AIREPs.)
   2212 c --------------------------------------------------------------------
   2213       read(cdtg_an,'(i8)') kdtg_an
   2214 c

Page 53          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

   2215       k_AMDAR_tot = 0
   2216       k_AIREP_tot = 0
   2217       k_AIREP_good = 0
   2218       k_UAL_tot = 0
   2219       k_UAL_good = 0
   2220       k_EU_tot = 0
   2221       k_EU_good = 0
   2222       k_AU_tot = 0
   2223       k_AU_good = 0
   2224       k_other_tot = 0
   2225       k_other_good = 0
   2226       l_print = .true.
   2227 c
   2228       if(l_print) then
   2229         write(io8,*) 
   2230 ccccdak        write(io8,*) 'Unrejected re-encoded ACARS and AMDAR reports'
   2231         write(io8,*) 'Unrejected re-encoded TAMDAR and AMDAR reports'
   2232         write(io8,*) '---------------------------------------------'
   2233       endif
   2234 c
   2235       do ii=1,numreps_orig
   2236 c
   2237 c       Count the total number of AMDAR reports
   2238 c       ---------------------------------------
   2239         if(itype(ii).eq.i_amdar_lvl.or.
   2240      $     itype(ii).eq.i_amdar_asc.or.
   2241      $     itype(ii).eq.i_amdar_des.or.
   2242      $     itype(ii).eq.i_amdar) then
   2243 c
   2244           k_AMDAR_tot = k_AMDAR_tot + 1 
   2245 c
   2246 c       Count the total number of AIREP reports
   2247 c       ---------------------------------------
   2248         elseif(itype(ii).eq.i_airep_lvl.or.
   2249      $         itype(ii).eq.i_airep_asc.or.
   2250      $         itype(ii).eq.i_airep_des.or.
   2251      $         itype(ii).eq.i_airep) then
   2252 c
   2253           k_AIREP_tot = k_AIREP_tot + 1
   2254 c
   2255 c         Count the total number of UAL AIREPs
   2256 ccccdak         (Most of these are re-encoded ACARS)
   2257 c         (Most of these are re-encoded TAMDAR)
   2258 c         -------------------------------------
   2259           if(c_acftid(ii)(1:3).eq.'UAL') then
   2260             k_UAL_tot = k_UAL_tot + 1
   2261 c
   2262 c         Count the total number of EU AIREPs
   2263 c         -----------------------------------
   2264           elseif(c_acftid(ii)(1:2).eq.'EU') then
   2265             k_EU_tot = k_EU_tot + 1
   2266 c
   2267 c         Count the total number of AU AIREPs
   2268 c         -----------------------------------
   2269           elseif(c_acftid(ii)(1:2).eq.'AU') then
   2270             k_AU_tot = k_AU_tot + 1
   2271 c

Page 54          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

   2272 c         Count the total number of other AIREPs
   2273 c         --------------------------------------
   2274           else
   2275             k_other_tot = k_other_tot + 1
   2276           endif
   2277 c
   2278 c         Count the number of good AIREP reports
   2279 c         --------------------------------------
   2280           if(csort(ii)(1:5).ne.'zzzzz'.and.
   2281      $       csort(ii)(1:5).ne.'badob') then
   2282 c
   2283             k_AIREP_good = k_AIREP_good + 1
   2284 c
   2285 c           Count the number of good UAL AIREPs
   2286 c           -----------------------------------
   2287             if(c_acftid(ii)(1:3).eq.'UAL') then
   2288               k_UAL_good = k_UAL_good + 1
   2289 c
   2290 c           Count the number of good EU AIREPs
   2291 c           ----------------------------------
   2292             elseif(c_acftid(ii)(1:2).eq.'EU') then
   2293               k_EU_good = k_EU_good + 1
   2294 c
   2295 c           Count the number of good AU AIREPs
   2296 c           ----------------------------------
   2297             elseif(c_acftid(ii)(1:2).eq.'AU') then
   2298               k_AU_good = k_AU_good + 1
   2299 c
   2300 c           Count the number of good other AIREPs
   2301 c           -------------------------------------
   2302             else
   2303               k_other_good = k_other_good + 1
   2304             endif
   2305 c
   2306 c           Output data after the date the Australian AMDAR was turned on
   2307 c           -------------------------------------------------------------
   2308             if(kdtg_an.ge.19990210) then
   2309 c
   2310 c             Output reports if desired
   2311 c             -------------------------
   2312               if(l_print) then
   2313                 write(io8,3002) ii,c_insty_ob(itype(ii))
   2314      x,            c_acftreg(ii),c_acftid(ii)
   2315      x,            idt(ii),alat(ii),alon(ii)
   2316      x,            pres(ii),ht_ft(ii)
   2317      x,            t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
   2318      x,            ob_q(ii),xiv_q(ii),ichk_q(ii)
   2319      x,            ob_dir(ii),xiv_d(ii),ichk_d(ii)
   2320      x,            ob_spd(ii),xiv_s(ii),ichk_s(ii),idp(ii)
   2321      x,            c_qc(ii)
   2322  3002           format(i6,1x,a8,1x,a8,1x,a9,1x,i7,1x,2f11.5,1x,f8.1,1x
   2323      x,           f7.0,1x,f5.2,4(2(1x,f8.2),1x,i5),1x,i4,1x,'!',a11,'!')
   2324               endif
   2325             endif
   2326           endif
   2327         endif
   2328       enddo

Page 55          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

   2329 c
   2330 c     Compute and output statistics
   2331 c     -----------------------------
   2332       if(k_AIREP_tot.gt.0) then
   2333         per_AIREP = 100. * k_AIREP_good / k_AIREP_tot
   2334       else
   2335         per_AIREP = amiss
   2336       endif
   2337       if(k_UAL_tot.gt.0) then
   2338         per_UAL = 100. * k_UAL_good / k_UAL_tot
   2339       else
   2340         per_UAL = amiss
   2341       endif
   2342       if(k_EU_tot.gt.0) then
   2343         per_EU = 100. * k_EU_good / k_EU_tot
   2344       else
   2345         per_EU = amiss
   2346       endif
   2347       if(k_AU_tot.gt.0) then
   2348         per_AU = 100. * k_AU_good / k_AU_tot
   2349       else
   2350         per_AU = amiss
   2351       endif
   2352       if(k_other_tot.gt.0) then
   2353         per_other = 100. * k_other_good / k_other_tot
   2354       else
   2355         per_other = amiss
   2356       endif
   2357 c
   2358       write(io8,*)
   2359       write(io8,*) 'Counts for re-encoded AMDAR reports'
   2360       write(io8,*) '-----------------------------------'
   2361       write(io8,*) 'Total number of AMDARs              = ',k_AMDAR_tot
   2362       write(io8,*)
   2363       write(io8,*) 'Total number of AIREPs              = ',k_AIREP_tot
   2364       write(io8,*) '  Total number of UAL               = ',k_UAL_tot
   2365       write(io8,*) '  Total number of EU                = ',k_EU_tot
   2366       write(io8,*) '  Total number of AU                = ',k_AU_tot
   2367       write(io8,*) '  Total number of other             = ',k_other_tot
   2368       write(io8,*)
   2369       write(io8,*) 'Number of good AIREPs               = ',k_AIREP_good
   2370       write(io8,*) '  Number of UAL                     = ',k_UAL_good
   2371       write(io8,*) '  Number of EU                      = ',k_EU_good
   2372       write(io8,*) '  Number of AU                      = ',k_AU_good
   2373       write(io8,*) '  Number of other                   = ',k_other_good
   2374       write(io8,*)
   2375       write(io8,*) 'Percentage of good AIREPs           = ',per_AIREP
   2376       write(io8,*) '  Percentage of good UAL            = ',per_UAL
   2377       write(io8,*) '  Percentage of good EU             = ',per_EU
   2378       write(io8,*) '  Percentage of good AU             = ',per_AU
   2379       write(io8,*) '  Percentage of good other          = ',per_other
   2380 c
   2381 c Compute similar statistics for YRXX86 AIREPs--keypad reports
   2382 c ------------------------------------------------------------
   2383       k_total = 0
   2384       k_good = 0
   2385       k_tot_mdcrs = 0

Page 56          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

   2386       k_good_mdcrs = 0
   2387       k_tot_mdcrs_lvl = 0
   2388       k_good_mdcrs_lvl = 0
   2389       k_tot_mdcrs_asc = 0
   2390       k_good_mdcrs_asc = 0
   2391       k_tot_mdcrs_des = 0
   2392       k_good_mdcrs_des = 0
   2393       k_tot_amdar = 0
   2394       k_good_amdar = 0
   2395       k_tot_amdar_lvl = 0
   2396       k_good_amdar_lvl = 0
   2397       k_tot_amdar_asc = 0
   2398       k_good_amdar_asc = 0
   2399       k_tot_amdar_des = 0
   2400       k_good_amdar_des = 0
   2401       k_tot_airep = 0
   2402       k_good_airep = 0
   2403       k_tot_airep_lvl = 0
   2404       k_good_airep_lvl = 0
   2405       k_tot_airep_asc = 0
   2406       k_good_airep_asc = 0
   2407       k_tot_airep_des = 0
   2408       k_good_airep_des = 0
   2409       k_tot_man_airep = 0
   2410       k_good_man_airep = 0
   2411       knt_man_Yairep = 0
   2412       k_YAIREP_good = 0
   2413 c
   2414       write(io8,*) 
   2415       write(io8,*) 'Unrejected YRXX86 keypad AIREP reports'
   2416       write(io8,*) '--------------------------------------'
   2417 c
   2418       do ii=1,numreps_orig
   2419 c
   2420 c       Count the total number of aircraft obs
   2421 c       --------------------------------------
   2422         if(itype(ii).ne.imiss) then
   2423 c
   2424           k_total = k_total + 1
   2425 c
   2426 c         Count the total number of good aircraft obs
   2427 c         -------------------------------------------
   2428           if(csort(ii)(1:5).ne.'zzzzz'.and.
   2429      $       csort(ii)(1:5).ne.'badob') 
   2430      $      k_good = k_good + 1
   2431 c
   2432         endif
   2433 c
   2434 c       Count the total number of unspecified MDCRS reports
   2435 c       ---------------------------------------------------
   2436         if(itype(ii).eq.i_mdcrs) then
   2437 c
   2438           k_tot_mdcrs = k_tot_mdcrs + 1
   2439 c
   2440 c         Count the number of good unspecified MDCRS reports
   2441 c         --------------------------------------------------
   2442           if(csort(ii)(1:5).ne.'zzzzz'.and.

Page 57          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

   2443      $       csort(ii)(1:5).ne.'badob') 
   2444      $      k_good_mdcrs = k_good_mdcrs + 1
   2445 c
   2446 c       Count the total number of level MDCRS reports
   2447 c       ---------------------------------------------
   2448         elseif(itype(ii).eq.i_mdcrs_lvl) then
   2449 c
   2450           k_tot_mdcrs_lvl = k_tot_mdcrs_lvl + 1
   2451 c
   2452 c         Count the number of good level MDCRS reports
   2453 c         --------------------------------------------
   2454           if(csort(ii)(1:5).ne.'zzzzz'.and.
   2455      $       csort(ii)(1:5).ne.'badob') 
   2456      $      k_good_mdcrs_lvl = k_good_mdcrs_lvl + 1
   2457 c
   2458 c       Count the total number of ascent MDCRS reports
   2459 c       ----------------------------------------------
   2460         elseif(itype(ii).eq.i_mdcrs_asc) then
   2461 c
   2462           k_tot_mdcrs_asc = k_tot_mdcrs_asc + 1
   2463 c
   2464 c         Count the number of good ascent MDCRS reports
   2465 c         ---------------------------------------------
   2466           if(csort(ii)(1:5).ne.'zzzzz'.and.
   2467      $       csort(ii)(1:5).ne.'badob') 
   2468      $      k_good_mdcrs_asc = k_good_mdcrs_asc + 1
   2469 c
   2470 c       Count the total number of descent MDCRS reports
   2471 c       -----------------------------------------------
   2472         elseif(itype(ii).eq.i_mdcrs_des) then
   2473 c
   2474           k_tot_mdcrs_des = k_tot_mdcrs_des + 1
   2475 c
   2476 c         Count the number of good descent MDCRS reports
   2477 c         ----------------------------------------------
   2478           if(csort(ii)(1:5).ne.'zzzzz'.and.
   2479      $       csort(ii)(1:5).ne.'badob') 
   2480      $      k_good_mdcrs_des = k_good_mdcrs_des + 1
   2481 c
   2482 c       Count the total number of unspecified AMDAR reports
   2483 c       ---------------------------------------------------
   2484         elseif(itype(ii).eq.i_amdar) then
   2485 c
   2486           k_tot_amdar = k_tot_amdar + 1
   2487 c
   2488 c         Count the number of good unspecified AMDAR reports
   2489 c         --------------------------------------------------
   2490           if(csort(ii)(1:5).ne.'zzzzz'.and.
   2491      $       csort(ii)(1:5).ne.'badob') 
   2492      $      k_good_amdar = k_good_amdar + 1
   2493 c
   2494 c       Count the total number of level AMDAR reports
   2495 c       ---------------------------------------------
   2496         elseif(itype(ii).eq.i_amdar_lvl) then
   2497 c
   2498           k_tot_amdar_lvl = k_tot_amdar_lvl + 1
   2499 c

Page 58          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

   2500 c         Count the number of good level AMDAR reports
   2501 c         --------------------------------------------
   2502           if(csort(ii)(1:5).ne.'zzzzz'.and.
   2503      $       csort(ii)(1:5).ne.'badob') 
   2504      $      k_good_amdar_lvl = k_good_amdar_lvl + 1
   2505 c
   2506 c       Count the total number of ascent AMDAR reports
   2507 c       ----------------------------------------------
   2508         elseif(itype(ii).eq.i_amdar_asc) then
   2509 c
   2510           k_tot_amdar_asc = k_tot_amdar_asc + 1
   2511 c
   2512 c         Count the number of good ascent AMDAR reports
   2513 c         ---------------------------------------------
   2514           if(csort(ii)(1:5).ne.'zzzzz'.and.
   2515      $       csort(ii)(1:5).ne.'badob') 
   2516      $      k_good_amdar_asc = k_good_amdar_asc + 1
   2517 c
   2518 c       Count the total number of descent AMDAR reports
   2519 c       -----------------------------------------------
   2520         elseif(itype(ii).eq.i_amdar_des) then
   2521 c
   2522           k_tot_amdar_des = k_tot_amdar_des + 1
   2523 c
   2524 c         Count the number of good descent AMDAR reports
   2525 c         ----------------------------------------------
   2526           if(csort(ii)(1:5).ne.'zzzzz'.and.
   2527      $       csort(ii)(1:5).ne.'badob') 
   2528      $      k_good_amdar_des = k_good_amdar_des + 1
   2529 c
   2530 c       Count the total number of unspecified AIREP reports
   2531 c       ---------------------------------------------------
   2532         elseif(itype(ii).eq.i_airep) then
   2533 c
   2534           k_tot_airep = k_tot_airep + 1
   2535 c
   2536 c         Count the number of good unspecified AIREP reports
   2537 c         --------------------------------------------------
   2538           if(csort(ii)(1:5).ne.'zzzzz'.and.
   2539      $       csort(ii)(1:5).ne.'badob') 
   2540      $      k_good_airep = k_good_airep + 1
   2541 c
   2542 c       Count the total number of level AIREP reports
   2543 c       ---------------------------------------------
   2544         elseif(itype(ii).eq.i_airep_lvl) then
   2545 c
   2546           k_tot_airep_lvl = k_tot_airep_lvl + 1
   2547 c
   2548 c         Count the number of good level AIREP reports
   2549 c         --------------------------------------------
   2550           if(csort(ii)(1:5).ne.'zzzzz'.and.
   2551      $       csort(ii)(1:5).ne.'badob') 
   2552      $      k_good_airep_lvl = k_good_airep_lvl + 1
   2553 c
   2554 c       Count the total number of ascent AIREP reports
   2555 c       ----------------------------------------------
   2556         elseif(itype(ii).eq.i_airep_asc) then

Page 59          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

   2557 c
   2558           k_tot_airep_asc = k_tot_airep_asc + 1
   2559 c
   2560 c         Count the number of good ascent AIREP reports
   2561 c         ---------------------------------------------
   2562           if(csort(ii)(1:5).ne.'zzzzz'.and.
   2563      $       csort(ii)(1:5).ne.'badob') 
   2564      $      k_good_airep_asc = k_good_airep_asc + 1
   2565 c
   2566 c       Count the total number of descent AIREP reports
   2567 c       -----------------------------------------------
   2568         elseif(itype(ii).eq.i_airep_des) then
   2569 c
   2570           k_tot_airep_des = k_tot_airep_des + 1
   2571 c
   2572 c         Count the number of good descent AIREP reports
   2573 c         ----------------------------------------------
   2574           if(csort(ii)(1:5).ne.'zzzzz'.and.
   2575      $       csort(ii)(1:5).ne.'badob') 
   2576      $      k_good_airep_des = k_good_airep_des + 1      
   2577 c
   2578 c       Count the total number of manAIREP reports
   2579 c       -------------------------------------------
   2580         elseif(itype(ii).eq.i_man_airep) then
   2581 c
   2582           k_tot_man_airep = k_tot_man_airep + 1
   2583 c
   2584 c         Count the number of good manAIREP reports
   2585 c         -----------------------------------------
   2586           if(csort(ii)(1:5).ne.'zzzzz'.and.
   2587      $       csort(ii)(1:5).ne.'badob') 
   2588      $      k_good_man_airep = k_good_man_airep + 1
   2589 c
   2590 c       Count the total number of man-Yairep reports
   2591 c       --------------------------------------------
   2592         elseif(itype(ii).eq.i_man_Yairep) then
   2593 c
   2594           knt_man_Yairep = knt_man_Yairep + 1
   2595 c
   2596 c         Count the number of good man-Yairep reports
   2597 c         -------------------------------------------
   2598           if(csort(ii)(1:5).ne.'zzzzz'.and.
   2599      $       csort(ii)(1:5).ne.'badob') then
   2600 c
   2601             k_YAIREP_good = k_YAIREP_good + 1
   2602 c
   2603 c           Output data after the date the Tinker bulletins were turned on
   2604 c           --------------------------------------------------------------
   2605             if(kdtg_an.ge.20001001) then
   2606 c
   2607 c             Output reports if desired
   2608 c             -------------------------
   2609               if(l_print) then
   2610                 write(io8,3002) ii,c_insty_ob(itype(ii))
   2611      x,            c_acftreg(ii),c_acftid(ii)
   2612      x,            idt(ii),alat(ii),alon(ii)
   2613      x,            pres(ii),ht_ft(ii)

Page 60          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

   2614      x,            t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
   2615      x,            ob_q(ii),xiv_q(ii),ichk_q(ii)
   2616      x,            ob_dir(ii),xiv_d(ii),ichk_d(ii)
   2617      x,            ob_spd(ii),xiv_s(ii),ichk_s(ii),idp(ii)
   2618      x,            c_qc(ii)
   2619               endif
   2620             endif
   2621           endif
   2622         endif
   2623       enddo
   2624 c
   2625       if(knt_man_Yairep.gt.0) then
   2626         per_AIREP = 100. * k_YAIREP_good / knt_man_Yairep
   2627       else
   2628         per_AIREP = amiss
   2629       endif
   2630 c
   2631       write(io8,*)
   2632       write(io8,*) 'Counts for YRXX86 keypad AIREP reports'
   2633       write(io8,*) '--------------------------------------'
   2634       write(io8,*) 'Total number of man-Yaireps      = ',knt_man_Yairep
   2635       write(io8,*) 'Number of good man-Yaireps       = ',k_YAIREP_good
   2636       write(io8,*) 'Percentage of good man-Yaireps   = ',per_AIREP
   2637 c
   2638 c Output overall totals
   2639 c ---------------------
   2640       write(io8,*)
   2641       write(io8,*) ' Counts by specified data type'
   2642       write(io8,*) ' -----------------------------'
   2643       write(io8,*) ' Type      #Total     #Good'
   2644       write(io8,*) ' --------------------------'
   2645       write(io8,*) 'mdcrs    ',k_tot_mdcrs,k_good_mdcrs
   2646       write(io8,*) 'mdcrs_lvl',k_tot_mdcrs_lvl,k_good_mdcrs_lvl
   2647       write(io8,*) 'mdcrs_asc',k_tot_mdcrs_asc,k_good_mdcrs_asc
   2648       write(io8,*) 'mdcrs_des',k_tot_mdcrs_des,k_good_mdcrs_des
   2649       write(io8,*) ' --------------------------'
   2650       write(io8,*) 'amdar    ',k_tot_amdar,k_good_amdar
   2651       write(io8,*) 'amdar_lvl',k_tot_amdar_lvl,k_good_amdar_lvl
   2652       write(io8,*) 'amdar_asc',k_tot_amdar_asc,k_good_amdar_asc
   2653       write(io8,*) 'amdar_des',k_tot_amdar_des,k_good_amdar_des
   2654       write(io8,*) ' --------------------------'
   2655       write(io8,*) 'airep    ',k_tot_airep,k_good_airep
   2656       write(io8,*) 'airep_lvl',k_tot_airep_lvl,k_good_airep_lvl
   2657       write(io8,*) 'airep_asc',k_tot_airep_asc,k_good_airep_asc
   2658       write(io8,*) 'airep_des',k_tot_airep_des,k_good_airep_des
   2659       write(io8,*) ' --------------------------'
   2660       write(io8,*) 'man_airep',k_tot_man_airep,k_good_man_airep
   2661       write(io8,*) 'man-Yaire',knt_man_Yairep,k_YAIREP_good
   2662       write(io8,*) ' --------------------------'
   2663       write(io8,*) 'total    ',k_total,k_good
   2664       write(io8,*) ' --------------------------'
   2665 c
   2666 c Re-count totals using determined data type
   2667 c ------------------------------------------
   2668       k_total = 0
   2669       k_good = 0
   2670       k_tot_mdcrs = 0

Page 61          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

   2671       k_good_mdcrs = 0
   2672       k_tot_mdcrs_lvl = 0
   2673       k_good_mdcrs_lvl = 0
   2674       k_tot_mdcrs_asc = 0
   2675       k_good_mdcrs_asc = 0
   2676       k_tot_mdcrs_des = 0
   2677       k_good_mdcrs_des = 0
   2678       k_tot_amdar = 0
   2679       k_good_amdar = 0
   2680       k_tot_amdar_lvl = 0
   2681       k_good_amdar_lvl = 0
   2682       k_tot_amdar_asc = 0
   2683       k_good_amdar_asc = 0
   2684       k_tot_amdar_des = 0
   2685       k_good_amdar_des = 0
   2686       k_tot_airep = 0
   2687       k_good_airep = 0
   2688       k_tot_airep_lvl = 0
   2689       k_good_airep_lvl = 0
   2690       k_tot_airep_asc = 0
   2691       k_good_airep_asc = 0
   2692       k_tot_airep_des = 0
   2693       k_good_airep_des = 0
   2694       k_tot_man_airep = 0
   2695       k_good_man_airep = 0
   2696       knt_man_Yairep = 0
   2697       k_YAIREP_good = 0
   2698 c
   2699       do ii=1,numreps_orig
   2700 c
   2701 c       Count the total number of aircraft obs
   2702 c       --------------------------------------
   2703         if(itype(ii).ne.imiss) then
   2704 c
   2705           k_total = k_total + 1
   2706 c
   2707 c         Count the total number of good aircraft obs
   2708 c         -------------------------------------------
   2709           if(csort(ii)(1:5).ne.'zzzzz'.and.
   2710      $       csort(ii)(1:5).ne.'badob') 
   2711      $      k_good = k_good + 1
   2712 c
   2713         endif
   2714 c
   2715 c       Count the total number of manAIREP reports
   2716 c       -------------------------------------------
   2717         if(itype(ii).eq.i_man_airep) then
   2718 c
   2719           k_tot_man_airep = k_tot_man_airep + 1
   2720 c
   2721 c         Count the number of good manAIREP reports
   2722 c         -----------------------------------------
   2723           if(csort(ii)(1:5).ne.'zzzzz'.and.
   2724      $       csort(ii)(1:5).ne.'badob') 
   2725      $      k_good_man_airep = k_good_man_airep + 1
   2726 c
   2727 c       Count the total number of man-Yairep reports

Page 62          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

   2728 c       --------------------------------------------
   2729         elseif(itype(ii).eq.i_man_Yairep) then
   2730 c
   2731           knt_man_Yairep = knt_man_Yairep + 1
   2732 c
   2733 c         Count the number of good man-Yairep reports
   2734 c         -------------------------------------------
   2735           if(csort(ii)(1:5).ne.'zzzzz'.and.
   2736      $       csort(ii)(1:5).ne.'badob')
   2737      4      k_YAIREP_good = k_YAIREP_good + 1
   2738 c
   2739 c       Count the number of level reports
   2740 c       ---------------------------------
   2741         elseif(c_qc(ii)(11:11).eq.'L') then
   2742 c
   2743 c         Count the total number of level MDCRS reports
   2744 c         ---------------------------------------------
   2745           if(itype(ii).eq.i_mdcrs.or.
   2746      $       itype(ii).eq.i_mdcrs_lvl.or.
   2747      $       itype(ii).eq.i_mdcrs_asc.or.
   2748      $       itype(ii).eq.i_mdcrs_des) then
   2749 c
   2750             k_tot_mdcrs_lvl = k_tot_mdcrs_lvl + 1
   2751 c
   2752 c           Count the number of good level MDCRS reports
   2753 c           --------------------------------------------
   2754             if(csort(ii)(1:5).ne.'zzzzz'.and.
   2755      $         csort(ii)(1:5).ne.'badob') 
   2756      $        k_good_mdcrs_lvl = k_good_mdcrs_lvl + 1
   2757 c
   2758 c         Count the total number of level AMDAR reports
   2759 c         ---------------------------------------------
   2760           elseif(itype(ii).eq.i_amdar.or. 
   2761      $           itype(ii).eq.i_amdar_lvl.or.
   2762      $           itype(ii).eq.i_amdar_asc.or.
   2763      $           itype(ii).eq.i_amdar_des) then
   2764 c
   2765             k_tot_amdar_lvl = k_tot_amdar_lvl + 1
   2766 c
   2767 c           Count the number of good level AMDAR reports
   2768 c           --------------------------------------------
   2769             if(csort(ii)(1:5).ne.'zzzzz'.and.
   2770      $         csort(ii)(1:5).ne.'badob') 
   2771      $        k_good_amdar_lvl = k_good_amdar_lvl + 1
   2772 c
   2773 c         Count the total number of level AIREP reports
   2774 c         ---------------------------------------------
   2775           elseif(itype(ii).eq.i_airep.or.
   2776      $           itype(ii).eq.i_airep_lvl.or.
   2777      $           itype(ii).eq.i_airep_asc.or.
   2778      $           itype(ii).eq.i_airep_des) then
   2779 c
   2780             k_tot_airep_lvl = k_tot_airep_lvl + 1
   2781 c
   2782 c           Count the number of good level AIREP reports
   2783 c           --------------------------------------------
   2784             if(csort(ii)(1:5).ne.'zzzzz'.and.

Page 63          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

   2785      $         csort(ii)(1:5).ne.'badob') 
   2786      $        k_good_airep_lvl = k_good_airep_lvl + 1
   2787 c
   2788           endif
   2789 c
   2790 c       Count the number of ascent reports
   2791 c       ----------------------------------
   2792         elseif(c_qc(ii)(11:11).eq.'A'.or.
   2793      $         c_qc(ii)(11:11).eq.'a') then
   2794 c
   2795 c         Count the total number of ascent MDCRS reports
   2796 c         ----------------------------------------------
   2797           if(itype(ii).eq.i_mdcrs.or.
   2798      $       itype(ii).eq.i_mdcrs_lvl.or.
   2799      $       itype(ii).eq.i_mdcrs_asc.or.
   2800      $       itype(ii).eq.i_mdcrs_des) then
   2801 c
   2802             k_tot_mdcrs_asc = k_tot_mdcrs_asc + 1
   2803 c
   2804 c           Count the number of good ascent MDCRS reports
   2805 c           ---------------------------------------------
   2806             if(csort(ii)(1:5).ne.'zzzzz'.and.
   2807      $         csort(ii)(1:5).ne.'badob') 
   2808      $        k_good_mdcrs_asc = k_good_mdcrs_asc + 1
   2809 c
   2810 c         Count the total number of ascent AMDAR reports
   2811 c         ----------------------------------------------
   2812           elseif(itype(ii).eq.i_amdar.or. 
   2813      $           itype(ii).eq.i_amdar_lvl.or.
   2814      $           itype(ii).eq.i_amdar_asc.or.
   2815      $           itype(ii).eq.i_amdar_des) then
   2816 c
   2817             k_tot_amdar_asc = k_tot_amdar_asc + 1
   2818 c
   2819 c           Count the number of good ascent AMDAR reports
   2820 c           ---------------------------------------------
   2821             if(csort(ii)(1:5).ne.'zzzzz'.and.
   2822      $         csort(ii)(1:5).ne.'badob') 
   2823      $        k_good_amdar_asc = k_good_amdar_asc + 1
   2824 c
   2825 c         Count the total number of ascent AIREP reports
   2826 c         ----------------------------------------------
   2827           elseif(itype(ii).eq.i_airep.or.
   2828      $           itype(ii).eq.i_airep_lvl.or.
   2829      $           itype(ii).eq.i_airep_asc.or.
   2830      $           itype(ii).eq.i_airep_des) then
   2831 c
   2832             k_tot_airep_asc = k_tot_airep_asc + 1
   2833 c
   2834 c           Count the number of good ascent AIREP reports
   2835 c           ---------------------------------------------
   2836             if(csort(ii)(1:5).ne.'zzzzz'.and.
   2837      $         csort(ii)(1:5).ne.'badob') 
   2838      $        k_good_airep_asc = k_good_airep_asc + 1
   2839 c
   2840           endif
   2841 c

Page 64          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

   2842 c       Count the number of descent reports
   2843 c       -----------------------------------
   2844         elseif(c_qc(ii)(11:11).eq.'D'.or.
   2845      $         c_qc(ii)(11:11).eq.'d') then
   2846 c
   2847 c         Count the total number of descent MDCRS reports
   2848 c         -----------------------------------------------
   2849           if(itype(ii).eq.i_mdcrs.or.
   2850      $       itype(ii).eq.i_mdcrs_lvl.or.
   2851      $       itype(ii).eq.i_mdcrs_asc.or.
   2852      $       itype(ii).eq.i_mdcrs_des) then
   2853 c
   2854             k_tot_mdcrs_des = k_tot_mdcrs_des + 1
   2855 c
   2856 c           Count the number of good descent MDCRS reports
   2857 c           ----------------------------------------------
   2858             if(csort(ii)(1:5).ne.'zzzzz'.and.
   2859      $         csort(ii)(1:5).ne.'badob') 
   2860      $        k_good_mdcrs_des = k_good_mdcrs_des + 1
   2861 c
   2862 c         Count the total number of descent AMDAR reports
   2863 c         -----------------------------------------------
   2864           elseif(itype(ii).eq.i_amdar.or. 
   2865      $           itype(ii).eq.i_amdar_lvl.or.
   2866      $           itype(ii).eq.i_amdar_asc.or.
   2867      $           itype(ii).eq.i_amdar_des) then
   2868 c
   2869             k_tot_amdar_des = k_tot_amdar_des + 1
   2870 c
   2871 c           Count the number of good descent AMDAR reports
   2872 c           ----------------------------------------------
   2873             if(csort(ii)(1:5).ne.'zzzzz'.and.
   2874      $         csort(ii)(1:5).ne.'badob') 
   2875      $        k_good_amdar_des = k_good_amdar_des + 1
   2876 c
   2877 c         Count the total number of descent AIREP reports
   2878 c         -----------------------------------------------
   2879           elseif(itype(ii).eq.i_airep.or.
   2880      $           itype(ii).eq.i_airep_lvl.or.
   2881      $           itype(ii).eq.i_airep_asc.or.
   2882      $           itype(ii).eq.i_airep_des) then
   2883 c
   2884             k_tot_airep_des = k_tot_airep_des + 1
   2885 c
   2886 c           Count the number of good descent AIREP reports
   2887 c           ----------------------------------------------
   2888             if(csort(ii)(1:5).ne.'zzzzz'.and.
   2889      $         csort(ii)(1:5).ne.'badob') 
   2890      $        k_good_airep_des = k_good_airep_des + 1      
   2891 c
   2892           endif
   2893 c
   2894 c       Count the remaining reports
   2895 c       ---------------------------
   2896         else
   2897 c
   2898 c         Count the total number of other MDCRS reports

Page 65          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

   2899 c         ---------------------------------------------
   2900           if(itype(ii).eq.i_mdcrs.or.
   2901      $       itype(ii).eq.i_mdcrs_lvl.or.
   2902      $       itype(ii).eq.i_mdcrs_asc.or.
   2903      $       itype(ii).eq.i_mdcrs_des) then
   2904 c
   2905             k_tot_mdcrs = k_tot_mdcrs + 1
   2906 c
   2907 c           Count the number of good other MDCRS reports
   2908 c           --------------------------------------------
   2909             if(csort(ii)(1:5).ne.'zzzzz'.and.
   2910      $         csort(ii)(1:5).ne.'badob') 
   2911      $        k_good_mdcrs = k_good_mdcrs + 1
   2912 c
   2913 c         Count the total number of other AMDAR reports
   2914 c         ---------------------------------------------
   2915           elseif(itype(ii).eq.i_amdar.or. 
   2916      $           itype(ii).eq.i_amdar_lvl.or.
   2917      $           itype(ii).eq.i_amdar_asc.or.
   2918      $           itype(ii).eq.i_amdar_des) then
   2919 c
   2920             k_tot_amdar = k_tot_amdar + 1
   2921 c
   2922 c           Count the number of good other AMDAR reports
   2923 c           --------------------------------------------
   2924             if(csort(ii)(1:5).ne.'zzzzz'.and.
   2925      $         csort(ii)(1:5).ne.'badob') 
   2926      $        k_good_amdar = k_good_amdar + 1
   2927 c
   2928 c         Count the total number of other AIREP reports
   2929 c         ---------------------------------------------
   2930           elseif(itype(ii).eq.i_airep.or.
   2931      $           itype(ii).eq.i_airep_lvl.or.
   2932      $           itype(ii).eq.i_airep_asc.or.
   2933      $           itype(ii).eq.i_airep_des) then
   2934 c
   2935             k_tot_airep = k_tot_airep + 1
   2936 c
   2937 c           Count the number of good other AIREP reports
   2938 c           --------------------------------------------
   2939             if(csort(ii)(1:5).ne.'zzzzz'.and.
   2940      $         csort(ii)(1:5).ne.'badob') 
   2941      $        k_good_airep = k_good_airep + 1
   2942 c
   2943           endif
   2944 c
   2945         endif
   2946       enddo
   2947 c
   2948       write(io8,*)
   2949       write(io8,*) ' Counts by determined data type'
   2950       write(io8,*) ' ------------------------------'
   2951       write(io8,*) ' Type      #Total     #Good'
   2952       write(io8,*) ' --------------------------'
   2953       write(io8,*) 'mdcrs    ',k_tot_mdcrs,k_good_mdcrs
   2954       write(io8,*) 'mdcrs_lvl',k_tot_mdcrs_lvl,k_good_mdcrs_lvl
   2955       write(io8,*) 'mdcrs_asc',k_tot_mdcrs_asc,k_good_mdcrs_asc

Page 66          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

   2956       write(io8,*) 'mdcrs_des',k_tot_mdcrs_des,k_good_mdcrs_des
   2957       write(io8,*) ' --------------------------'
   2958       write(io8,*) 'amdar    ',k_tot_amdar,k_good_amdar
   2959       write(io8,*) 'amdar_lvl',k_tot_amdar_lvl,k_good_amdar_lvl
   2960       write(io8,*) 'amdar_asc',k_tot_amdar_asc,k_good_amdar_asc
   2961       write(io8,*) 'amdar_des',k_tot_amdar_des,k_good_amdar_des
   2962       write(io8,*) ' --------------------------'
   2963       write(io8,*) 'airep    ',k_tot_airep,k_good_airep
   2964       write(io8,*) 'airep_lvl',k_tot_airep_lvl,k_good_airep_lvl
   2965       write(io8,*) 'airep_asc',k_tot_airep_asc,k_good_airep_asc
   2966       write(io8,*) 'airep_des',k_tot_airep_des,k_good_airep_des
   2967       write(io8,*) ' --------------------------'
   2968       write(io8,*) 'man_airep',k_tot_man_airep,k_good_man_airep
   2969       write(io8,*) 'man-Yaire',knt_man_Yairep,k_YAIREP_good
   2970       write(io8,*) ' --------------------------'
   2971       write(io8,*) 'total    ',k_total,k_good
   2972       write(io8,*) ' --------------------------'
   2973 c
   2974 c Output totals for each flight
   2975 c -----------------------------
   2976       if(.not.l_operational) then
   2977         write(io8,*)
   2978         write(io8,*) 'Totals for tail#s with rejected reports'
   2979         write(io8,*) '---------------------------------------'
   2980         write(io8,'(27x,a12,22x,a8)')'Total Number','Rejected'
   2981         write(io8,'(a47,a43)')
   2982      $    '  kk  tail num  #Md    #Ac    #Am    #Ar    #Ma',
   2983      $    '    #Md    #Ac    #Am    #Ar    #Ma     %  '
   2984         write(io8,'(1x,a47,a43)')
   2985      $    '----- -------- ------ ------ ------ ------ ----',
   2986      $    '-- ------ ------ ------ ------ ------ -----'
   2987 c
   2988         do kk=1,kreg_tot
   2989           if(nobs_reg_tot(kk,1).ne.0.or.
   2990      $       nobs_reg_tot(kk,2).ne.0.or.
   2991      $       nobs_reg_tot(kk,3).ne.0.or.
   2992      $       nobs_reg_tot(kk,4).ne.0.or.
   2993      $       nobs_reg_tot(kk,5).ne.0) then
   2994 c
   2995             percent = (nrej_reg_tot(kk,1) + nrej_reg_tot(kk,2) 
   2996      $               + nrej_reg_tot(kk,3) + nrej_reg_tot(kk,4)
   2997      $               + nrej_reg_tot(kk,5)) * 100.0
   2998      $              / (nobs_reg_tot(kk,1) + nobs_reg_tot(kk,2) 
   2999      $               + nobs_reg_tot(kk,3) + nobs_reg_tot(kk,4)
   3000      $               + nobs_reg_tot(kk,5))
   3001 c
   3002             write(io8,'(i5,1x,a8,10(1x,i6),f6.1)') kk,creg_reg_tot(kk),
   3003      $        nobs_reg_tot(kk,1),nobs_reg_tot(kk,2),
   3004      $        nobs_reg_tot(kk,3),nobs_reg_tot(kk,4),
   3005      $        nobs_reg_tot(kk,5),
   3006      $        nrej_reg_tot(kk,1),nrej_reg_tot(kk,2),
   3007      $        nrej_reg_tot(kk,3),nrej_reg_tot(kk,4),
   3008      $        nrej_reg_tot(kk,5),percent
   3009           endif
   3010         enddo
   3011 c
   3012         write(io8,*)

Page 67          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

   3013         write(io8,*) 'Totals for tail#s with temp in whole degrees'
   3014         write(io8,*) '--------------------------------------------'
   3015         write(io8,'(27x,a12,22x,a8)')'Total Number','Rejected'
   3016         write(io8,'(a47,a43)')
   3017      $    '  kk  tail num  #Md    #Ac    #Am    #Ar    #Ma',
   3018      $    '    #Md    #Ac    #Am    #Ar    #Ma     %  '
   3019         write(io8,'(1x,a47,a43)')
   3020      $    '----- -------- ------ ------ ------ ------ ----',
   3021      $    '-- ------ ------ ------ ------ ------ -----'
   3022 c
   3023         do kk=1,kreg_tot
   3024           if(nwhol_reg_tot(kk,1).ne.0.or.
   3025      $       nwhol_reg_tot(kk,2).ne.0.or.
   3026      $       nwhol_reg_tot(kk,3).ne.0.or.
   3027      $       nwhol_reg_tot(kk,4).ne.0.or.
   3028      $       nwhol_reg_tot(kk,5).ne.0) then
   3029 c
   3030             percent = (nwhol_reg_tot(kk,1) + nwhol_reg_tot(kk,2) 
   3031      $              + nwhol_reg_tot(kk,3) + nwhol_reg_tot(kk,4)
   3032      $                + nwhol_reg_tot(kk,5)) * 100.0
   3033      $              / (nobs_reg_tot(kk,1) + nobs_reg_tot(kk,2) 
   3034      $               + nobs_reg_tot(kk,3) + nobs_reg_tot(kk,4)
   3035      $               + nobs_reg_tot(kk,5))
   3036 c 
   3037             write(io8,'(i5,1x,a8,10(1x,i6),f6.1)') kk,creg_reg_tot(kk),
   3038      $        nobs_reg_tot(kk,1),nobs_reg_tot(kk,2),
   3039      $        nobs_reg_tot(kk,3),nobs_reg_tot(kk,4),
   3040      $        nobs_reg_tot(kk,5),
   3041      $        nwhol_reg_tot(kk,1),nwhol_reg_tot(kk,2),
   3042      $        nwhol_reg_tot(kk,3),nwhol_reg_tot(kk,4),
   3043      $        nwhol_reg_tot(kk,5),percent
   3044           endif
   3045         enddo
   3046 c
   3047         write(io8,*)
   3048         write(io8,*) 'Totals for tail#s with rejected temperatures'
   3049         write(io8,*) '--------------------------------------------'
   3050         write(io8,'(27x,a12,22x,a8)')'Total Number','Rejected'
   3051         write(io8,'(a47,a43)')
   3052      $    '  kk  tail num  #Md    #Ac    #Am    #Ar    #Ma',
   3053      $    '    #Md    #Ac    #Am    #Ar    #Ma     %  '
   3054         write(io8,'(1x,a47,a43)')
   3055      $    '----- -------- ------ ------ ------ ------ ----',
   3056      $    '-- ------ ------ ------ ------ ------ -----'
   3057 c
   3058         do kk=1,kreg_tot
   3059           if(ntemp_reg_tot(kk,1).ne.0.or.
   3060      $       ntemp_reg_tot(kk,2).ne.0.or.
   3061      $       ntemp_reg_tot(kk,3).ne.0.or.
   3062      $       ntemp_reg_tot(kk,4).ne.0.or.
   3063      $       ntemp_reg_tot(kk,5).ne.0) then
   3064 c
   3065             percent = (ntemp_reg_tot(kk,1) + ntemp_reg_tot(kk,2) 
   3066      $               + ntemp_reg_tot(kk,3) + ntemp_reg_tot(kk,4)
   3067      $               + ntemp_reg_tot(kk,5)) *100.0
   3068      $              / (nobs_reg_tot(kk,1) + nobs_reg_tot(kk,2) 
   3069      $               + nobs_reg_tot(kk,3) + nobs_reg_tot(kk,4)

Page 68          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

   3070      $               + nobs_reg_tot(kk,5))
   3071 c 
   3072             write(io8,'(i5,1x,a8,10(1x,i6),f6.1)') kk,creg_reg_tot(kk),
   3073      $        nobs_reg_tot(kk,1),nobs_reg_tot(kk,2),
   3074      $        nobs_reg_tot(kk,3),nobs_reg_tot(kk,4),
   3075      $        nobs_reg_tot(kk,5),
   3076      $        ntemp_reg_tot(kk,1),ntemp_reg_tot(kk,2),
   3077      $        ntemp_reg_tot(kk,3),ntemp_reg_tot(kk,4),
   3078      $        ntemp_reg_tot(kk,5),percent
   3079           endif
   3080         enddo
   3081 c
   3082         write(io8,*)
   3083         write(io8,*) 'Totals for tail#s with rejected winds'
   3084         write(io8,*) '-------------------------------------'
   3085         write(io8,'(27x,a12,22x,a8)')'Total Number','Rejected'
   3086         write(io8,'(a47,a43)')
   3087      $    '  kk  tail num  #Md    #Ac    #Am    #Ar    #Ma',
   3088      $    '    #Md    #Ac    #Am    #Ar    #Ma     %  '
   3089         write(io8,'(1x,a47,a43)')
   3090      $    '----- -------- ------ ------ ------ ------ ----',
   3091      $    '-- ------ ------ ------ ------ ------ -----'
   3092 c
   3093         do kk=1,kreg_tot
   3094           if(nwind_reg_tot(kk,1).ne.0.or.
   3095      $       nwind_reg_tot(kk,2).ne.0.or.
   3096      $       nwind_reg_tot(kk,3).ne.0.or.
   3097      $       nwind_reg_tot(kk,4).ne.0.or.
   3098      $       nwind_reg_tot(kk,5).ne.0) then
   3099 c
   3100             percent = (nwind_reg_tot(kk,1) + nwind_reg_tot(kk,2) 
   3101      $               + nwind_reg_tot(kk,3) + nwind_reg_tot(kk,4)
   3102      $               + nwind_reg_tot(kk,5)) * 100.0
   3103      $              / (nobs_reg_tot(kk,1) + nobs_reg_tot(kk,2) 
   3104      $               + nobs_reg_tot(kk,3) + nobs_reg_tot(kk,4)
   3105      $               + nobs_reg_tot(kk,5))
   3106 c 
   3107             write(io8,'(i5,1x,a8,10(1x,i6),f6.1)') kk,creg_reg_tot(kk),
   3108      $        nobs_reg_tot(kk,1),nobs_reg_tot(kk,2),
   3109      $        nobs_reg_tot(kk,3),nobs_reg_tot(kk,4),
   3110      $        nobs_reg_tot(kk,5),
   3111      $        nwind_reg_tot(kk,1),nwind_reg_tot(kk,2),
   3112      $        nwind_reg_tot(kk,3),nwind_reg_tot(kk,4),
   3113      $        nwind_reg_tot(kk,5),percent
   3114           endif
   3115         enddo
   3116 c
   3117         write(io8,*)
   3118         write(io8,*) 'Totals for tail#s with invalid check errors'
   3119         write(io8,*) '-------------------------------------------'
   3120         write(io8,'(27x,a12,22x,a8)')'Total Number','Rejected'
   3121         write(io8,'(a47,a43)')
   3122      $    '  kk  tail num  #Md    #Ac    #Am    #Ar    #Ma',
   3123      $    '    #Md    #Ac    #Am    #Ar    #Ma     %  '
   3124         write(io8,'(1x,a47,a43)')
   3125      $    '----- -------- ------ ------ ------ ------ ----',
   3126      $    '-- ------ ------ ------ ------ ------ -----'

Page 69          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

   3127 c
   3128         do kk=1,kreg_tot
   3129           if(nrej_inv_tot(kk,1).ne.0.or.
   3130      $       nrej_inv_tot(kk,2).ne.0.or.
   3131      $       nrej_inv_tot(kk,3).ne.0.or.
   3132      $       nrej_inv_tot(kk,4).ne.0.or.
   3133      $       nrej_inv_tot(kk,5).ne.0) then
   3134 c
   3135             percent = (nrej_inv_tot(kk,1) + nrej_inv_tot(kk,2) 
   3136      $               + nrej_inv_tot(kk,3) + nrej_inv_tot(kk,4)
   3137      $               + nrej_inv_tot(kk,5)) * 100.0
   3138      $              / (nobs_reg_tot(kk,1) + nobs_reg_tot(kk,2) 
   3139      $               + nobs_reg_tot(kk,3) + nobs_reg_tot(kk,4)
   3140      $               + nobs_reg_tot(kk,5))
   3141 c
   3142             write(io8,'(i5,1x,a8,10(1x,i6),f6.1)') kk,creg_reg_tot(kk),
   3143      $        nobs_reg_tot(kk,1),nobs_reg_tot(kk,2),
   3144      $        nobs_reg_tot(kk,3),nobs_reg_tot(kk,4),
   3145      $        nobs_reg_tot(kk,5),
   3146      $        nrej_inv_tot(kk,1),nrej_inv_tot(kk,2),
   3147      $        nrej_inv_tot(kk,3),nrej_inv_tot(kk,4),
   3148      $        nrej_inv_tot(kk,5),percent
   3149           endif
   3150         enddo
   3151 c
   3152         write(io8,*)
   3153         write(io8,*) 'Totals for tail#s with stuck values'
   3154         write(io8,*) '-----------------------------------'
   3155         write(io8,'(27x,a12,22x,a8)')'Total Number','Rejected'
   3156         write(io8,'(a47,a43)')
   3157      $    '  kk  tail num  #Md    #Ac    #Am    #Ar    #Ma',
   3158      $    '    #Md    #Ac    #Am    #Ar    #Ma     %  '
   3159         write(io8,'(1x,a47,a43)')
   3160      $    '----- -------- ------ ------ ------ ------ ----',
   3161      $    '-- ------ ------ ------ ------ ------ -----'
   3162 c
   3163         do kk=1,kreg_tot
   3164           if(nrej_stk_tot(kk,1).ne.0.or.
   3165      $       nrej_stk_tot(kk,2).ne.0.or.
   3166      $       nrej_stk_tot(kk,3).ne.0.or.
   3167      $       nrej_stk_tot(kk,4).ne.0.or.
   3168      $       nrej_stk_tot(kk,5).ne.0) then
   3169 c
   3170             percent = (nrej_stk_tot(kk,1) + nrej_stk_tot(kk,2) 
   3171      $               + nrej_stk_tot(kk,3) + nrej_stk_tot(kk,4)
   3172      $               + nrej_stk_tot(kk,5)) * 100.0
   3173      $              / (nobs_reg_tot(kk,1) + nobs_reg_tot(kk,2) 
   3174      $               + nobs_reg_tot(kk,3) + nobs_reg_tot(kk,4)
   3175      $               + nobs_reg_tot(kk,5))
   3176 c 
   3177             write(io8,'(i5,1x,a8,10(1x,i6),f6.1)') kk,creg_reg_tot(kk),
   3178      $        nobs_reg_tot(kk,1),nobs_reg_tot(kk,2),
   3179      $        nobs_reg_tot(kk,3),nobs_reg_tot(kk,4),
   3180      $        nobs_reg_tot(kk,5),
   3181      $        nrej_stk_tot(kk,1),nrej_stk_tot(kk,2),
   3182      $        nrej_stk_tot(kk,3),nrej_stk_tot(kk,4),
   3183      $        nrej_stk_tot(kk,5),percent

Page 70          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

   3184           endif
   3185         enddo
   3186 c
   3187         write(io8,*)
   3188         write(io8,*) 'Totals for tail#s with gross check errors'
   3189         write(io8,*) '-----------------------------------------'
   3190         write(io8,'(27x,a12,22x,a8)')'Total Number','Rejected'
   3191         write(io8,'(a47,a43)')
   3192      $    '  kk  tail num  #Md    #Ac    #Am    #Ar    #Ma',
   3193      $    '    #Md    #Ac    #Am    #Ar    #Ma     %  '
   3194         write(io8,'(1x,a47,a43)')
   3195      $    '----- -------- ------ ------ ------ ------ ----',
   3196      $    '-- ------ ------ ------ ------ ------ -----'
   3197 c
   3198         do kk=1,kreg_tot
   3199           if(nrej_grc_tot(kk,1).ne.0.or.
   3200      $       nrej_grc_tot(kk,2).ne.0.or.
   3201      $       nrej_grc_tot(kk,3).ne.0.or.
   3202      $       nrej_grc_tot(kk,4).ne.0.or.
   3203      $       nrej_grc_tot(kk,5).ne.0) then
   3204 c
   3205             percent = (nrej_grc_tot(kk,1) + nrej_grc_tot(kk,2) 
   3206      $               + nrej_grc_tot(kk,3) + nrej_grc_tot(kk,4)
   3207      $               + nrej_grc_tot(kk,5)) * 100.0
   3208      $              / (nobs_reg_tot(kk,1) + nobs_reg_tot(kk,2) 
   3209      $               + nobs_reg_tot(kk,3) + nobs_reg_tot(kk,4)
   3210      $               + nobs_reg_tot(kk,5))
   3211 c
   3212             write(io8,'(i5,1x,a8,10(1x,i6),f6.1)') kk,creg_reg_tot(kk),
   3213      $        nobs_reg_tot(kk,1),nobs_reg_tot(kk,2),
   3214      $        nobs_reg_tot(kk,3),nobs_reg_tot(kk,4),
   3215      $        nobs_reg_tot(kk,5),
   3216      $        nrej_grc_tot(kk,1),nrej_grc_tot(kk,2),
   3217      $        nrej_grc_tot(kk,3),nrej_grc_tot(kk,4),
   3218      $        nrej_grc_tot(kk,5),percent
   3219           endif
   3220         enddo
   3221 c
   3222         write(io8,*)
   3223         write(io8,*) 'Totals for tail#s with position check errors'
   3224         write(io8,*) '--------------------------------------------'
   3225         write(io8,'(27x,a12,22x,a8)')'Total Number','Rejected'
   3226         write(io8,'(a47,a43)')
   3227      $    '  kk  tail num  #Md    #Ac    #Am    #Ar    #Ma',
   3228      $    '    #Md    #Ac    #Am    #Ar    #Ma     %  '
   3229         write(io8,'(1x,a47,a43)')
   3230      $    '----- -------- ------ ------ ------ ------ ----',
   3231      $    '-- ------ ------ ------ ------ ------ -----'
   3232 c
   3233         do kk=1,kreg_tot
   3234           if(nrej_pos_tot(kk,1).ne.0.or.
   3235      $       nrej_pos_tot(kk,2).ne.0.or.
   3236      $       nrej_pos_tot(kk,3).ne.0.or.
   3237      $       nrej_pos_tot(kk,4).ne.0.or.
   3238      $       nrej_pos_tot(kk,5).ne.0) then
   3239 c
   3240             percent = (nrej_pos_tot(kk,1) + nrej_pos_tot(kk,2) 

Page 71          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

   3241      $               + nrej_pos_tot(kk,3) + nrej_pos_tot(kk,4)
   3242      $               + nrej_pos_tot(kk,5)) * 100.0
   3243      $              / (nobs_reg_tot(kk,1) + nobs_reg_tot(kk,2) 
   3244      $               + nobs_reg_tot(kk,3) + nobs_reg_tot(kk,4)
   3245      $               + nobs_reg_tot(kk,5))
   3246 c 
   3247             write(io8,'(i5,1x,a8,10(1x,i6),f6.1)') kk,creg_reg_tot(kk),
   3248      $        nobs_reg_tot(kk,1),nobs_reg_tot(kk,2),
   3249      $        nobs_reg_tot(kk,3),nobs_reg_tot(kk,4),
   3250      $        nobs_reg_tot(kk,5),
   3251      $        nrej_pos_tot(kk,1),nrej_pos_tot(kk,2),
   3252      $        nrej_pos_tot(kk,3),nrej_pos_tot(kk,4),
   3253      $        nrej_pos_tot(kk,5),percent
   3254           endif
   3255         enddo
   3256 c
   3257         write(io8,*)
   3258         write(io8,*) 'Totals for tail#s with ordering check errors'
   3259         write(io8,*) '--------------------------------------------'
   3260         write(io8,'(27x,a12,22x,a8)')'Total Number','Rejected'
   3261         write(io8,'(a47,a43)')
   3262      $    '  kk  tail num  #Md    #Ac    #Am    #Ar    #Ma',
   3263      $    '    #Md    #Ac    #Am    #Ar    #Ma     %  '
   3264         write(io8,'(1x,a47,a43)')
   3265      $    '----- -------- ------ ------ ------ ------ ----',
   3266      $    '-- ------ ------ ------ ------ ------ -----'
   3267 c
   3268         do kk=1,kreg_tot
   3269           if(nrej_ord_tot(kk,1).ne.0.or.
   3270      $       nrej_ord_tot(kk,2).ne.0.or.
   3271      $       nrej_ord_tot(kk,3).ne.0.or.
   3272      $       nrej_ord_tot(kk,4).ne.0.or.
   3273      $       nrej_ord_tot(kk,5).ne.0) then
   3274 c
   3275             percent = (nrej_ord_tot(kk,1) + nrej_ord_tot(kk,2) 
   3276      $               + nrej_ord_tot(kk,3) + nrej_ord_tot(kk,4)
   3277      $               + nrej_ord_tot(kk,5)) * 100.0
   3278      $              / (nobs_reg_tot(kk,1) + nobs_reg_tot(kk,2) 
   3279      $               + nobs_reg_tot(kk,3) + nobs_reg_tot(kk,4)
   3280      $               + nobs_reg_tot(kk,5))
   3281 c 
   3282             write(io8,'(i5,1x,a8,10(1x,i6),f6.1)') kk,creg_reg_tot(kk),
   3283      $        nobs_reg_tot(kk,1),nobs_reg_tot(kk,2),
   3284      $        nobs_reg_tot(kk,3),nobs_reg_tot(kk,4),
   3285      $        nobs_reg_tot(kk,5),
   3286      $        nrej_ord_tot(kk,1),nrej_ord_tot(kk,2),
   3287      $        nrej_ord_tot(kk,3),nrej_ord_tot(kk,4),
   3288      $        nrej_ord_tot(kk,5),percent
   3289           endif
   3290         enddo
   3291 c
   3292         write(io8,*)
   3293         write(io8,*) 'Totals for tail#s with suspect check errors'
   3294         write(io8,*) '-------------------------------------------'
   3295         write(io8,'(27x,a12,22x,a8)')'Total Number','Rejected'
   3296         write(io8,'(a47,a43)')
   3297      $    '  kk  tail num  #Md    #Ac    #Am    #Ar    #Ma',

Page 72          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

   3298      $    '    #Md    #Ac    #Am    #Ar    #Ma     %  '
   3299         write(io8,'(1x,a47,a43)')
   3300      $    '----- -------- ------ ------ ------ ------ ----',
   3301      $    '-- ------ ------ ------ ------ ------ -----'
   3302 c
   3303         do kk=1,kreg_tot
   3304           if(nrej_sus_tot(kk,1).ne.0.or.
   3305      $       nrej_sus_tot(kk,2).ne.0.or.
   3306      $       nrej_sus_tot(kk,3).ne.0.or.
   3307      $       nrej_sus_tot(kk,4).ne.0.or.
   3308      $       nrej_sus_tot(kk,5).ne.0) then
   3309 c
   3310             percent = (nrej_sus_tot(kk,1) + nrej_sus_tot(kk,2) 
   3311      $               + nrej_sus_tot(kk,3) + nrej_sus_tot(kk,4)
   3312      $               + nrej_sus_tot(kk,5)) * 100.0
   3313      $              / (nobs_reg_tot(kk,1) + nobs_reg_tot(kk,2) 
   3314      $               + nobs_reg_tot(kk,3) + nobs_reg_tot(kk,4)
   3315      $               + nobs_reg_tot(kk,5))
   3316 c
   3317             write(io8,'(i5,1x,a8,10(1x,i6),f6.1)') kk,creg_reg_tot(kk),
   3318      $        nobs_reg_tot(kk,1),nobs_reg_tot(kk,2),
   3319      $        nobs_reg_tot(kk,3),nobs_reg_tot(kk,4),
   3320      $        nobs_reg_tot(kk,5),
   3321      $        nrej_sus_tot(kk,1),nrej_sus_tot(kk,2),
   3322      $        nrej_sus_tot(kk,3),nrej_sus_tot(kk,4),
   3323      $        nrej_sus_tot(kk,5),percent
   3324           endif
   3325         enddo
   3326       endif
   3327 c
   3328 c     Close files
   3329 c     -----------
   3330       if(.not.l_operational) then
   3331         close(io30)
   3332         close(io31)
   3333         close(io32)
   3334         close(io33)
   3335         close(io34)
   3336         close(io35)
   3337         close(io36)
   3338         close(io37)
   3339         close(io38)
   3340       elseif(l_ncep) then
   3341         close(io8)
   3342       endif
   3343 
   3344 cppppp
   3345 cc    print *, 'kreg_max, kflight_max, kreg_tot_max: ',
   3346 cc   $ kreg_max, kflight_max, kreg_tot_max
   3347 cppppp
   3348       kflight_max = max(kreg_max,kflight_max,kreg_tot_max)
   3349 cppppp
   3350 cc    print *, 'overall flight number max:', kflight_max
   3351 cppppp
   3352       if(kflight_max/.90.gt.maxflt .and. kflight_max.lt.maxflt ) then
   3353 
   3354 c If the maximum number of calculated flights at some point in this processing read in from

Page 73          Source Listing                  ACFTOBS_QC
2017-04-18 11:07                                 acftobs_qc.f

   3355 c  PREPBUFR file is at least 90% of the maximum number of flights allowed ("maxflt"), print
   3356 c  diagnostic warning message to production joblog file
   3357 c -----------------------------------------------------------------------------------------
   3358 
   3359         print 153, kflight_max,maxflt
   3360   153   format(/' #####> WARNING: THE MAX NUMBER OF CALCULATED ',
   3361      $   'AIRCRAFT FLIGHTS FROM INPUT FILE (',I6,') ARE > 90% OF UPPER',
   3362      $   ' LIMIT OF ',I6,' -- INCREASE SIZE OF "MAXFLT" SOON!'/)
   3363         write(cmaxflt,'(i6)') maxflt
   3364         call system('[ -n "$jlogfile" ] && $DATA/postmsg "$jlogfile" '//
   3365      +   '"***WARNING: HIT 90% OF '//cmaxflt//' AIRCRAFT FLIGHT LIMIT'//
   3366      +   ' IN PREPOBS_PREPACQC, INCREASE SIZE OF PARM MAXFLT"')
   3367       endif
   3368 
   3369 
   3370       write(*,*)
   3371       write(*,*) '********************'
   3372       write(*,*) 'acftobs_qc has ended'
   3373       call system('date')
   3374       write(*,*) '--> # flights = ',kflight_max
   3375       write(*,*) '********************'
   3376       write(*,*)
   3377 
   3378 c return 1 if  # flts > maxflt out of subr. do_flt, and subr. do_reg (latter transferred here
   3379 c  via subr. dupchek_qc)
   3380       if(maxflt_exceeded .gt. 0)  then
   3381          print *, '--------------------------------------------------'
   3382          print *, '~~~> maxflt_exceeded -- return 1 out of acftobs_qc'
   3383          print *, '--------------------------------------------------'
   3384          return 1
   3385       endif
   3386 
   3387       return
   3388 
   3389       end
   3390 c
   3391 c ###################################################################
   3392 c                            subroutine pr_workdata
   3393 c ###################################################################
   3394 c
   3395       subroutine pr_workdata(max_reps,numdo,indx
   3396      x,      alat,alon,pres,ht_ft,idt,idp,c_acftreg,c_acftid,itype        
   3397      x,      t_prcn,ob_t,ob_q,ob_dir,ob_spd
   3398      x,      xiv_t,xiv_q,xiv_d,xiv_s,ichk_t,ichk_q,ichk_d,ichk_s
   3399      x,      cdtg_an,c_qc,csort,io8)        
   3400 c
   3401 c Print work arrays
   3402 c
   3403       implicit none
   3404 c
   3405       integer      io8                 ! i/o unit number for log file
   3406       integer      ii,iob              ! do loop indices
   3407       integer      max_reps            ! maximum number of observations allowed
   3408      $,            numdo               ! number of reports to print
   3409       real*8       alat(max_reps)      ! latitude
   3410      $,            alon(max_reps)      ! longitude
   3411       real         pres(max_reps)      ! pressure

Page 74          Source Listing                  PR_WORKDATA
2017-04-18 11:07                                 acftobs_qc.f

   3412      $,            ht_ft(max_reps)     ! height in feet
   3413       integer      idt(max_reps)       ! time in seconds to analysis time
   3414       integer      idp(max_reps)       ! surface pressure change at ob location
   3415       character*8  c_acftreg(max_reps) ! acft registration (tail) number
   3416       character*9  c_acftid(max_reps)  ! acft flight number
   3417       integer      itype(max_reps)     ! instrument type 
   3418       real         t_prcn(max_reps)    ! temperature precision
   3419       real         ob_t(max_reps)      ! temperature
   3420      $,            ob_q(max_reps)      ! specific humidity
   3421      $,            ob_dir(max_reps)    ! wind direction
   3422      $,            ob_spd(max_reps)    ! wind speed
   3423       real         xiv_t(max_reps)     ! temperature innovation (ob - bk)
   3424      $,            xiv_q(max_reps)     ! specific humidity innovation (ob - bk)
   3425      $,            xiv_d(max_reps)     ! wind direction innovation (ob - bk)
   3426      $,            xiv_s(max_reps)     ! wind speed innovation (ob - bk)
   3427       integer      ichk_t(max_reps)    ! NRL quality control flag for temperature ob
   3428      $,            ichk_q(max_reps)    ! NRL quality control flag for specific humidity
   3429      $,            ichk_d(max_reps)    ! NRL quality control flag for wind direction
   3430      $,            ichk_s(max_reps)    ! NRL quality control flag for wind speed
   3431       integer      indx(max_reps)      ! pointer index for reports
   3432       character*10 cdtg_an             ! date time group for analysis
   3433       character*11 c_qc(max_reps)      ! quality control flags for reports
   3434       character*25 csort(max_reps)     ! variable used for sorting data 
   3435 c
   3436       character*16 c_insty_ob          ! function to convert integer instrument type 
   3437                                        !   to character instrument type
   3438 c
   3439       integer      ihr_an              ! hour of analysis time
   3440      $,            ihr                 ! ob hour
   3441      $,            imin                ! ob minute
   3442      $,            isec                ! ob second
   3443      $,            itime               ! ob minute/second
   3444 c
   3445       real*8       wlon                ! west longitude
   3446 c
   3447 c # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
   3448 c
   3449       write(io8,8030)
   3450  8030 format(' index type     tail num flight      time hh:mm:ss     '
   3451      $,'lat        lon   height  t-pr  temp ichk dir ichk spd ichk '
   3452      $,'humid ichk')
   3453 c
   3454       read(cdtg_an,'(8x,i2)') ihr_an
   3455 c
   3456       do iob = 1,numdo
   3457         ii = indx(iob)
   3458 c
   3459         ihr = idt(ii) / 3600
   3460         if(idt(ii).lt.0) then
   3461           itime = (abs(ihr)+1)*3600 + idt(ii)
   3462           ihr = ihr_an + ihr - 1
   3463           if(ihr.lt.0) ihr = ihr + 24
   3464         else
   3465           itime = idt(ii) - ihr*3600
   3466           ihr = ihr_an + ihr
   3467         endif
   3468 c

Page 75          Source Listing                  PR_WORKDATA
2017-04-18 11:07                                 acftobs_qc.f

   3469         imin = itime / 60
   3470         if(imin.eq.60) then
   3471           imin = 0
   3472           ihr = ihr + 1
   3473           itime = itime - 3600
   3474         endif
   3475 c
   3476         isec = itime - imin*60
   3477 c
   3478         if(alon(ii).gt.180.0) then
   3479           wlon = alon(ii) - 360.0
   3480         else
   3481           wlon = alon(ii)
   3482         endif
   3483 c
   3484 c        if(alon(ii).ge.300.0) then
   3485         write (io8,8001) ii,c_insty_ob(itype(ii))
   3486      x,      c_acftreg(ii),c_acftid(ii)
   3487      x,      idt(ii),ihr,imin,isec
   3488      x,      alat(ii),wlon,pres(ii),ht_ft(ii)
   3489      x,      t_prcn(ii),ob_t(ii),ichk_t(ii)
   3490      x,      ob_dir(ii),ichk_d(ii)
   3491      x,      ob_spd(ii),ichk_s(ii)
   3492      x,      ob_q(ii),ichk_q(ii)
   3493  8001   format(i6,1x,a8,1x,a8,1x,a9,1x
   3494      x,      i6,1x,i2,':',i2,':',i2,1x
   3495      x,      f9.5,1x,f10.5,1x,f6.1,1x,f6.0,1x
   3496      x,      f5.2,1x,f6.2,1x,i4,1x,f4.0,1x,i3,1x
   3497      x,      f5.1,1x,i3,1x,f6.2,1x,i3)
   3498 c        endif
   3499       enddo
   3500 c
   3501       return
   3502       end

Page 76          Source Listing                  PR_WORKDATA
2017-04-18 11:07 Entry Points                    acftobs_qc.f



ENTRY POINTS

  Name                    
                          
 pr_workdata_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 8001                       Label  3493                                                           3485                              
 8030                       Label  3450                                                           3449                              
 ABS                        Func   3461                                 scalar                    3461                              
 ALAT                       Dummy  3396     R(8)            8     1     0        ARG,INOUT        3488                              
 ALON                       Dummy  3396     R(8)            8     1     0        ARG,INOUT        3478,3479,3481                    
 CDTG_AN                    Dummy  3399     CHAR            10          scalar   ARG,INOUT        3454                              
 CSORT                      Dummy  3399     CHAR            25    1     0        ARG,INOUT                                          
 C_ACFTID                   Dummy  3396     CHAR            9     1     0        ARG,INOUT        3486                              
 C_ACFTREG                  Dummy  3396     CHAR            8     1     0        ARG,INOUT        3486                              
 C_INSTY_OB                 Func   3436     CHAR            16          scalar                    3485                              
 C_QC                       Dummy  3399     CHAR            11    1     0        ARG,INOUT                                          
 HT_FT                      Dummy  3396     R(4)            4     1     0        ARG,INOUT        3488                              
 ICHK_D                     Dummy  3398     I(4)            4     1     0        ARG,INOUT        3490                              
 ICHK_Q                     Dummy  3398     I(4)            4     1     0        ARG,INOUT        3492                              
 ICHK_S                     Dummy  3398     I(4)            4     1     0        ARG,INOUT        3491                              
 ICHK_T                     Dummy  3398     I(4)            4     1     0        ARG,INOUT        3489                              
 IDP                        Dummy  3396     I(4)            4     1     0        ARG,INOUT                                          
 IDT                        Dummy  3396     I(4)            4     1     0        ARG,INOUT        3459,3460,3461,3465,3487          
 IHR                        Local  3440     I(4)            4           scalar                    3459,3461,3462,3463,3465,3466,3472
                                                                                                  ,3487                             
 IHR_AN                     Local  3439     I(4)            4           scalar                    3454,3462,3466                    
 II                         Local  3406     I(4)            4           scalar                    3457,3459,3460,3461,3465,3478,3479
                                                                                                  ,3481,3485,3486,3487,3488,3489,349
                                                                                                  0,3491,3492                       
 IMIN                       Local  3441     I(4)            4           scalar                    3469,3470,3471,3476,3487          
 INDX                       Dummy  3395     I(4)            4     1     0        ARG,INOUT        3457                              
 IO8                        Dummy  3399     I(4)            4           scalar   ARG,INOUT        3449,3485                         
 IOB                        Local  3406     I(4)            4           scalar                    3456,3457                         
 ISEC                       Local  3442     I(4)            4           scalar                    3476,3487                         
 ITIME                      Local  3443     I(4)            4           scalar                    3461,3465,3469,3473,3476          
 ITYPE                      Dummy  3396     I(4)            4     1     0        ARG,INOUT        3485                              
 MAX_REPS                   Dummy  3395     I(4)            4           scalar   ARG,INOUT        3409,3410,3411,3412,3413,3414,3415
                                                                                                  ,3416,3417,3418,3419,3420,3421,342
                                                                                                  2,3423,3424,3425,3426,3427,3428,34
                                                                                                  29,3430,3431,3433,3434            
 NUMDO                      Dummy  3395     I(4)            4           scalar   ARG,INOUT        3456                              
 OB_DIR                     Dummy  3397     R(4)            4     1     0        ARG,INOUT        3490                              
 OB_Q                       Dummy  3397     R(4)            4     1     0        ARG,INOUT        3492                              
 OB_SPD                     Dummy  3397     R(4)            4     1     0        ARG,INOUT        3491                              
 OB_T                       Dummy  3397     R(4)            4     1     0        ARG,INOUT        3489                              
 PRES                       Dummy  3396     R(4)            4     1     0        ARG,INOUT        3488                              
 PR_WORKDATA                Subr   3395                                                                                             
 T_PRCN                     Dummy  3397     R(4)            4     1     0        ARG,INOUT        3489                              
 WLON                       Local  3445     R(8)            8           scalar                    3479,3481,3488                    

Page 77          Source Listing                  PR_WORKDATA
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 XIV_D                      Dummy  3398     R(4)            4     1     0        ARG,INOUT                                          
 XIV_Q                      Dummy  3398     R(4)            4     1     0        ARG,INOUT                                          
 XIV_S                      Dummy  3398     R(4)            4     1     0        ARG,INOUT                                          
 XIV_T                      Dummy  3398     R(4)            4     1     0        ARG,INOUT                                          

Page 78          Source Listing                  PR_WORKDATA
2017-04-18 11:07                                 acftobs_qc.f

   3503 c
   3504 c ###################################################################
   3505 c                            subroutine indexc
   3506 c ###################################################################
   3507 c
   3508 c$$$  subprogram documentation block
   3509 c                .      .    .                                       .
   3510 c subprogram:    indexc      general sort routine for character array
   3511 c   prgmmr: d. a. keyser     org: w/nmc22    date: 95-05-30
   3512 c
   3513 c abstract: uses efficient sort algorithm to produce index sort list
   3514 c   for a 25-character array.  does not rearrange the file.
   3515 c
   3516 c program history log:
   3517 c   93-06-05  r  kistler --- fortran version of c-program
   3518 c   93-07-15  p. julian ---- modified to sort 12-character array
   3519 c   94-08-25  d. a. keyser - modified to sort 16-character array
   3520 c   95-05-30  d. a. keyser - tests for < 2 elements in sort list,
   3521 c             if so returns without sorting (but fills indx array)
   3522 c   ??-??-??  p. m. pauley - size of carrin changed to character*24
   3523 c   10-11-15  s. m. bender - size of carrin changed to character*25
   3524 c
   3525 c usage:    call indexc(n,carrin,indx)
   3526 c   input argument list:
   3527 c     n        - size of array to be sorted
   3528 c     carrin   - 25-character array to be sorted
   3529 c
   3530 c   output argument list:
   3531 c     indx     - array of pointers giving sort order of carrin in
   3532 c              - ascending order {e.g., carrin(indx(i)) is sorted in
   3533 c              - ascending order for original i = 1, ... ,n}
   3534 c
   3535 c remarks: none.
   3536 c
   3537 c attributes:
   3538 c   language: Fortran 90
   3539 c   machine:  NCEP WCOSS
   3540 c
   3541 c$$$
   3542       subroutine indexc(n,carrin,indx)
   3543 c
   3544       implicit none
   3545 c
   3546       integer      n              ! dimension of array to be sorted
   3547      $,            j              ! do loop index, sort variable
   3548      $,            i              ! sort variable
   3549      $,            l              ! variable used to decide if sort is finished
   3550      $,            ir             !           "                 "
   3551       integer      indx(n)        ! pointer array
   3552      $,            indxt          ! pointer used in sort
   3553 c
   3554       character*25 carrin(n)      ! input array to be sorted
   3555      $,            cc             ! character variable used in sort
   3556 c
   3557 c # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
   3558 c
   3559       do 10  j = 1,n

Page 79          Source Listing                  INDEXC
2017-04-18 11:07                                 acftobs_qc.f

   3560          indx(j) = j
   3561    10 continue
   3562 c
   3563 c must be > 1 element in sort list, else return
   3564 c
   3565       if(n.le.1)  return
   3566 c
   3567       l = n/2 + 1
   3568       ir = n
   3569 c
   3570    33 continue
   3571       if(l.gt.1)  then
   3572          l = l - 1
   3573          indxt = indx(l)
   3574          cc = carrin(indxt)
   3575       else
   3576          indxt = indx(ir)
   3577          cc = carrin(indxt)
   3578          indx(ir) = indx(1)
   3579          ir = ir - 1
   3580          if(ir.eq.1)  then
   3581             indx(1) = indxt
   3582             return
   3583          end if
   3584       end if
   3585 c
   3586       i = l
   3587       j = l * 2
   3588 c
   3589    30 continue
   3590       if(j.le.ir)  then
   3591          if(j.lt.ir)  then
   3592             if(carrin(indx(j)).lt.carrin(indx(j+1)))  j = j + 1
   3593          end if
   3594          if(cc.lt.carrin(indx(j)))  then
   3595             indx(i) = indx(j)
   3596             i = j
   3597             j = j + i
   3598          else
   3599             j = ir + 1
   3600          endif
   3601       end if
   3602 c
   3603       if(j.le.ir)  go to 30
   3604       indx(i) = indxt
   3605       go to 33
   3606 c
   3607       end

Page 80          Source Listing                  INDEXC
2017-04-18 11:07 Entry Points                    acftobs_qc.f



ENTRY POINTS

  Name               
                     
 indexc_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 10                         Label  3561                                                           3559                              
 30                         Label  3589                                                           3603                              
 33                         Label  3570                                                           3605                              
 CARRIN                     Dummy  3542     CHAR            25    1     0        ARG,INOUT        3574,3577,3592,3594               
 CC                         Local  3555     CHAR            25          scalar                    3574,3577,3594                    
 I                          Local  3548     I(4)            4           scalar                    3586,3595,3596,3597,3604          
 INDEXC                     Subr   3542                                                                                             
 INDX                       Dummy  3542     I(4)            4     1     0        ARG,INOUT        3560,3573,3576,3578,3581,3592,3594
                                                                                                  ,3595,3604                        
 INDXT                      Local  3552     I(4)            4           scalar                    3573,3574,3576,3577,3581,3604     
 IR                         Local  3550     I(4)            4           scalar                    3568,3576,3578,3579,3580,3590,3591
                                                                                                  ,3599,3603                        
 J                          Local  3547     I(4)            4           scalar                    3559,3560,3587,3590,3591,3592,3594
                                                                                                  ,3595,3596,3597,3599,3603         
 L                          Local  3549     I(4)            4           scalar                    3567,3571,3572,3573,3586,3587     
 N                          Dummy  3542     I(4)            4           scalar   ARG,INOUT        3551,3554,3559,3565,3567,3568     

Page 81          Source Listing                  INDEXC
2017-04-18 11:07                                 acftobs_qc.f

   3608 c
   3609 c ###################################################################
   3610 c                            subroutine dupchek_qc
   3611 c ###################################################################
   3612 c
   3613       subroutine dupchek_qc(numreps,max_reps,maxflt,htdif_same
   3614      $,     c_acftreg,c_acftid,c_qc,cdtg_an
   3615      $,     alat,alon,pres,ht_ft,t_prcn,ob_t,ob_q,ob_dir,ob_spd
   3616      $,     xiv_t,xiv_q,xiv_d,xiv_s
   3617      $,     idt,itype,ichk_t,ichk_q,ichk_d,ichk_s,kbadtot 
   3618      $,     kreg,creg_reg,nobs_reg,nrej_reg,ntemp_reg,nwind_reg
   3619      $,     indx,csort,amiss,imiss,io8,io30,l_last,l_operational,l_init
   3620      $,     l_ncep,*)
   3621 c
   3622 c Remove duplicates from dataset
   3623 c
   3624 c Modified 8/15/01 (P.M. Pauley) to change time threshold to 90 seconds.
   3625 c 60 sec is required for AMDAR reports from different centers and for
   3626 c MDCRS-AIREP duplicates that use different rounding.  63 seconds was
   3627 c required to overcome an ISIS2000 error that led to a missing value
   3628 c for seconds being interpreted as 63.  Finally, 70 seconds is needed
   3629 c to catch position report duplicates.  The position reports can be
   3630 c up to 70 seconds out of sync with the ascent sounding data as a
   3631 c result of rounding error.
   3632 c
   3633       implicit none
   3634 c
   3635 c Declaration statements
   3636 c ----------------------
   3637       integer      max_reps            ! maximum number of reports
   3638 c
   3639       character*11 c_qc(max_reps)      ! internal qc flags
   3640 c
   3641 c     Data arrays
   3642 c     -----------
   3643       character*10 cdtg_an             ! date time group for analysis
   3644       integer      numreps             ! actual number of reports
   3645       integer      itype(max_reps)     ! type of aircraft data
   3646      $,            ktype               ! pointer for instrument type 
   3647       integer      idt(max_reps)       ! time in seconds to analysis time 
   3648       character*8  c_acftreg(max_reps) ! aircraft registration (tail) number
   3649       character*9  c_acftid(max_reps)  ! aircraft flight number
   3650       real*8       alat(max_reps)      ! latitude
   3651      $,            alon(max_reps)      ! longitude
   3652       real         pres(max_reps)      ! pressure
   3653      $,            ht_ft(max_reps)     ! height in feet
   3654       real         t_prcn(max_reps)    ! temperature precision
   3655       real         ob_t(max_reps)      ! temperature
   3656      $,            ob_q(max_reps)      ! specific humidity
   3657      $,            ob_dir(max_reps)    ! wind direction
   3658      $,            ob_spd(max_reps)    ! wind speed
   3659       real         xiv_t(max_reps)     ! temperature innovation (ob - bk)
   3660      $,            xiv_q(max_reps)     ! specific humidity innovation (ob - bk)
   3661      $,            xiv_d(max_reps)     ! wind direction innovation (ob - bk)
   3662      $,            xiv_s(max_reps)     ! wind speed innovation (ob - bk)
   3663       integer      ichk_t(max_reps)    ! NRL QC flag for temperature ob
   3664      $,            ichk_q(max_reps)    ! NRL QC flag for specific humidity ob

Page 82          Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   3665      $,            ichk_d(max_reps)    ! NRL QC flag for wind direction ob
   3666      $,            ichk_s(max_reps)    ! NRL QC flag for wind speed ob
   3667       character*25 csort(max_reps)     ! sort variable    
   3668 c
   3669 c     Arrays for mixed duplicates
   3670 c     ---------------------------
   3671       integer      maxflt               ! max number of flights allowed
   3672 c     x,            ndup                ! number of ids with mixed duplicates
   3673 c      character*9  c_air_id(maxflt)    ! airep flight id for mixed duplicate
   3674 ccccdak     x,            c_acr_id(maxflt)    ! acars flight id for mixed duplicate
   3675 c     x,            c_acr_id(maxflt)    ! tamdar flight id for mixed duplicate
   3676 ccccdak      character*8  c_acr_reg(maxflt)   ! acars tail number for mixed duplicate
   3677 c      character*8  c_acr_reg(maxflt)   ! tamdar tail number for mixed duplicate
   3678 c      integer      kdup(maxflt)        ! number of mixed duplicates per id pair
   3679 c     $,            idt_min(maxflt)     ! min time for flight segment
   3680 c     $,            idt_max(maxflt)     ! max time for flight segment
   3681 c
   3682 c     Pointers
   3683 c     --------
   3684       integer      indx(max_reps)      ! pointer index for good reports
   3685 c
   3686 c     Functions
   3687 c     ---------
   3688       character*16 c_insty_ob          ! function to convert integer instrument 
   3689                                        !   type to character instrument type
   3690       integer      insty_ob_fun        ! function to convert character
   3691                                        !   instrument type to integer
   3692 c
   3693 c     Other variables
   3694 c     ---------------
   3695       integer      io8                 ! i/o unit number for log file
   3696       integer      io30                ! i/o unit number for rejected dups
   3697 c
   3698       integer      imiss               ! integer missing value flag
   3699       real         amiss               ! real missing value flag
   3700 c
   3701       real         htdif_same          ! height difference considered negligible
   3702       integer      idt_dif             ! time difference (current - previous)
   3703      $,            difdir              ! difference between wind directions
   3704 c
   3705 c      integer      idt_samflt          ! time difference allowed for same flight
   3706 c     $,            min_idt,max_idt     ! limits on rel time allowed for same flight
   3707 c
   3708       integer      iob                 ! do loop index 
   3709      $,            ii                  ! index pointing to current report
   3710      $,            iim1                ! index pointing to previous report
   3711      $,            kkdup               ! do loop index 
   3712       integer      knt                 ! counter used to define indices
   3713      $,            knt0                !     "
   3714      $,            knt1                !     "
   3715       integer      isave               ! variable used to shuffle indices
   3716      $,            kbadtot             ! total number of rejected duplicates
   3717      $,            kbad(5,3)           ! counter for number of exact, near duplicates
   3718 c
   3719 ccccdak      integer      i_acars             ! instrument type for acars
   3720       integer      i_acars             ! instrument type for tamdar
   3721 ccccdak     $,            i_acars_lvl         ! instrument type for acars--level flt

Page 83          Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   3722      $,            i_acars_lvl         ! instrument type for tamdar--level flt
   3723 ccccdak     $,            i_acars_asc         ! instrument type for acars--ascent
   3724      $,            i_acars_asc         ! instrument type for tamdar--ascent
   3725 ccccdak     $,            i_acars_des         ! instrument type for acars--descent
   3726      $,            i_acars_des         ! instrument type for tamdar--descent
   3727      $,            i_mdcrs             ! instrument type for mdcrs
   3728      $,            i_mdcrs_lvl         ! instrument type for mdcrs--level flt
   3729      $,            i_mdcrs_asc         ! instrument type for mdcrs--ascent
   3730      $,            i_mdcrs_des         ! instrument type for mdcrs--descent
   3731      $,            i_man_airep         ! instrument type for manual aireps
   3732      $,            i_man_Yairep        ! instrument type for manual aireps (YRXX)
   3733      $,            i_airep             ! instrument type for airep
   3734      $,            i_airep_lvl         ! instrument type for airep--level flt
   3735      $,            i_airep_asc         ! instrument type for airep--ascent
   3736      $,            i_airep_des         ! instrument type for airep--descent
   3737      $,            i_amdar             ! instrument type for amdar
   3738      $,            i_amdar_lvl         ! instrument type for amdar--level flt
   3739      $,            i_amdar_asc         ! instrument type for amdar--ascent
   3740      $,            i_amdar_des         ! instrument type for amdar--descent
   3741 c
   3742       integer      n_exact             ! number of exact dups
   3743      $,            n_exact_sh          ! number of exact dups with short ids
   3744      $,            n_ex_sh_MaMa        !        --manAIREP-manAIREP
   3745      $,            n_ex_sh_MaAr        !        --manAIREP-AIREP
   3746      $,            n_ex_sh_MaMd        !        --manAIREP-MDCRS
   3747 ccccdak     $,            n_ex_sh_MaAc        !        --manAIREP-ACARS
   3748      $,            n_ex_sh_MaAc        !        --manAIREP-TAMDAR
   3749      $,            n_ex_sh_ArMa        !        --AIREP-manAIREP
   3750      $,            n_ex_sh_ArAr        !        --AIREP-AIREP
   3751      $,            n_exact_0ll         ! number of exact dups with zero lat/lon
   3752 ccccdak     $,            n_ex_0ll_AcAc       !        --ACARS-ACARS
   3753      $,            n_ex_0ll_AcAc       !        --TAMDAR-TAMDAR
   3754      $,            n_ex_0ll_MdMd       !        --MDCRS-MDCRS
   3755      $,            n_ex_0ll_MaMa       !        --manAIREP-manAIREP
   3756      $,            n_ex_0ll_MaAr       !        --manAIREP-AIREP
   3757 ccccdak     $,            n_exact_MdAc        ! number of exact dups--MDCRS-ACARS
   3758      $,            n_exact_MdAc        ! number of exact dups--MDCRS-TAMDAR
   3759 ccccdak     $,            n_exact_AcMa        ! number of exact dups--ACARS-manAIREP
   3760      $,            n_exact_AcMa        ! number of exact dups--TAMDAR-manAIREP
   3761 ccccdak     $,            n_exact_AcAr        ! number of exact dups--ACARS-AIREP
   3762      $,            n_exact_AcAr        ! number of exact dups--TAMDAR-AIREP
   3763      $,            n_exact_MdMa        ! number of exact dups--MDCRS-manAIREP
   3764      $,            n_exact_MdAr        ! number of exact dups--MDCRS-AIREP
   3765      $,            n_exact_AmAr        ! number of exact dups--AMDAR-AIREP
   3766      $,            n_exact_AmMa        ! number of exact dups--AMDAR-manAIREP
   3767      $,            n_exact_ArMa        ! number of exact dups--AIREP-manAIREP
   3768 ccccdak     $,            n_exact_AcAc        ! number of exact dups--ACARS-ACARS
   3769      $,            n_exact_AcAc        ! number of exact dups--TAMDAR-TAMDAR
   3770      $,            n_exact_MdMd        ! number of exact dups--MDCRS-MDCRS
   3771      $,            n_exact_ArAr        ! number of exact dups--AIREP-AIREP
   3772      $,            n_exact_MaMa        ! number of exact dups--manAIREP-manAIREP
   3773      $,            n_exact_AmAm        ! number of exact dups--AMDAR-AMDAR
   3774 c
   3775       integer      n_near              ! number of near dups
   3776      $,            n_near_sh           ! number of near dups with short ids
   3777      $,            n_nr_sh_MaMa        !        --manAIREP-manAIREP
   3778      $,            n_nr_sh_MaAr        !        --manAIREP-AIREP

Page 84          Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   3779      $,            n_nr_sh_MaMd        !        --manAIREP-MDCRS
   3780 ccccdak     $,            n_nr_sh_MaAc        !        --manAIREP-ACARS
   3781      $,            n_nr_sh_MaAc        !        --manAIREP-TAMDAR
   3782      $,            n_nr_sh_ArMa        !        --AIREP-manAIREP
   3783      $,            n_nr_sh_ArAr        !        --AIREP-AIREP
   3784      $,            n_near_0ll          ! number of near dups with zero lat/lon
   3785 ccccdak     $,            n_nr_0ll_AcAc       !        --ACARS-ACARS
   3786      $,            n_nr_0ll_AcAc       !        --TAMDAR-TAMDAR
   3787      $,            n_nr_0ll_MdMd       !        --MDCRS-MDCRS
   3788      $,            n_nr_0ll_MaAr       !        --manAIREP-AIREP
   3789      $,            n_nr_0ll_AmAr       !        --AMDAR-AIREP
   3790      $,            n_nr_0ll_MaMa       !        --manAIREP-manAIREP
   3791      $,            n_nr_0ll_MaMd       !        --manAIREP-MDCRS
   3792      $,            n_nr_0ll_MdMa       !        --MDCRS-manAIREP
   3793      $,            n_nr_0ll_MaAm       !        --manAIREP-AMDAR
   3794      $,            n_nr_0ll_AmMa       !        --AMDAR-manAIREP
   3795      $,            n_near_ws           ! number of near dups with missing winds
   3796      $,            n_nr_mswn_MaMa      !        --manAIREP-manAIREP
   3797      $,            n_nr_mswn_MaAr      !        --manAIREP-AIREP
   3798      $,            n_nr_mswn_MaAm      !        --manAIREP-AMDAR
   3799      $,            n_nr_mswn_ArMa      !        --AIREP-manAIREP
   3800      $,            n_nr_mswn_ArAr      !        --AIREP-AIREP
   3801 ccccdak     $,            n_nr_mswn_AcAc      !        --ACARS-ACARS
   3802      $,            n_nr_mswn_AcAc      !        --TAMDAR-TAMDAR
   3803      $,            n_nr_mswn_MdMd      !        --MDCRS-MDCRS
   3804 ccccdak     $,            n_nr_mswn_AcMd      !        --ACARS-MDCRS
   3805      $,            n_nr_mswn_AcMd      !        --TAMDAR-MDCRS
   3806 ccccdak     $,            n_nr_mswn_MdAc      !        --MDCRS-ACARS
   3807      $,            n_nr_mswn_MdAc      !        --MDCRS-TAMDAR
   3808      $,            n_nr_mswn_MdAm      !        --MDCRS-AMDAR
   3809      $,            n_nr_mswn_MdAr      !        --MDCRS-AIREP
   3810      $,            n_nr_mswn_MdMa      !        --MDCRS-manAIREP
   3811 ccccdak     $,            n_nr_mswn_ArAc      !        --AIREP-ACARS
   3812      $,            n_nr_mswn_ArAc      !        --AIREP-TAMDAR
   3813      $,            n_nr_mswn_ArMd      !        --AIREP-MDCRS
   3814 ccccdak     $,            n_nr_mswn_MaAc      !        --manAIREP-ACARS
   3815      $,            n_nr_mswn_MaAc      !        --manAIREP-TAMDAR
   3816      $,            n_nr_mswn_MaMd      !        --manAIREP-MDCRS
   3817      $,            n_nr_mswn_AmAm      !        --AMDAR-AMDAR
   3818      $,            n_nr_mswn_ArAm      !        --AIREP-AMDAR
   3819      $,            n_nr_mswn_AmAr      !        --AMDAR-AIREP
   3820 ccccdak     $,            n_nr_mswn_AcAm      !        --ACARS-AMDAR
   3821      $,            n_nr_mswn_AcAm      !        --TAMDAR-AMDAR
   3822      $,            n_near_ws_IT        ! number of near dups with missing winds
   3823                                        !   and with flight # beginning with 'IT'
   3824      $,            n_near_ws_EU        ! number of near dups with missing winds
   3825                                        !   and with flight # beginning with 'EU'
   3826      $,            n_near_0ws          ! number of near dups with zero winds
   3827      $,            n_near_0ws_ArAm     !        --AIREP-AMDAR
   3828      $,            n_near_0ws_AmAr     !        --AMDAR-AIREP
   3829      $,            n_near_0ws_AmAm     !        --AMDAR-AMDAR
   3830      $,            n_near_0ws_ArAr     !        --AIREP-AIREP
   3831      $,            n_near_0ws_MaMa     !        --manAIREP-manAIREP
   3832      $,            n_near_0ws_MaMd     !        --manAIREP-MDCRS
   3833      $,            n_near_0ws_MaAm     !        --manAIREP-AMDAR
   3834      $,            n_near_0ws_MaAr     !        --manAIREP-AIREP
   3835      $,            n_near_0ws_ArMd     !        --AIREP-MDCRS

Page 85          Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   3836      $,            n_near_0ws_MdMd     !        --MDCRS-MDCRS
   3837      $,            n_near_mst          ! number of near dups with missing temperature
   3838      $,            n_nr_mst_MaMa       !        --manAIREP-manAIREP
   3839      $,            n_nr_mst_MaAr       !        --manAIREP-AIREP
   3840      $,            n_nr_mst_MaAm       !        --manAIREP-AMDAR
   3841 ccccdak     $,            n_nr_mst_ArAc       !        --AIREP-ACARS
   3842      $,            n_nr_mst_ArAc       !        --AIREP-TAMDAR
   3843      $,            n_nr_mst_ArMd       !        --AIREP-MDCRS
   3844 ccccdak     $,            n_nr_mst_MaAc       !        --manAIREP-ACARS
   3845      $,            n_nr_mst_MaAc       !        --manAIREP-TAMDAR
   3846      $,            n_nr_mst_MaMd       !        --manAIREP-MDCRS
   3847      $,            n_nr_mst_MdMd       !        --MDCRS-MDCRS
   3848      $,            n_nr_mst_ArMa       !        --manAIREP-AIREP
   3849      $,            n_nr_mst_AmAm       !        --AMDAR-AMDAR
   3850      $,            n_nr_mst_ArAr       !        --AIREP-AIREP
   3851      $,            n_nr_mst_AmAr       !        --AMDAR-AIREP
   3852      $,            n_nr_mst_ArAm       !        --AIREP-AMDAR
   3853 ccccdak     $,            n_near_MdAc         ! number of near dups--MDCRS-ACARS
   3854      $,            n_near_MdAc         ! number of near dups--MDCRS-TAMDAR
   3855 ccccdak     $,            n_near_AcAr         ! number of near dups--ACARS-AIREP
   3856      $,            n_near_AcAr         ! number of near dups--TAMDAR-AIREP
   3857      $,            n_near_MdAr         ! number of near dups--MDCRS-AIREP
   3858      $,            n_near_AmAr         ! number of near dups--AMDAR-AIREP
   3859 ccccdak     $,            n_near_AcMa         ! number of near dups--ACARS-manAIREP
   3860      $,            n_near_AcMa         ! number of near dups--TAMDAR-manAIREP
   3861      $,            n_near_MdMa         ! number of near dups--MDCRS-manAIREP
   3862      $,            n_near_ArMa         ! number of near dups--AIREP-manAIREP
   3863      $,            n_near_AmMa         ! number of near dups--AIREP-manAIREP
   3864 ccccdak     $,            n_near_AcAc         ! number of near dups--ACARS-ACARS
   3865      $,            n_near_AcAc         ! number of near dups--TAMDAR-TAMDAR
   3866      $,            n_near_MdMd         ! number of near dups--MDCRS-MDCRS
   3867      $,            n_near_ArAr         ! number of near dups--AIREP-AIREP
   3868      $,            n_near_MaMa         ! number of near dups--manAIREP-manAIREP
   3869      $,            n_near_AmAm         ! number of near dups--AMDAR-AMDAR
   3870      $,            n_near_negpos       ! number of near dups with neg/pos altitude
   3871 c
   3872 ccccdak      integer      n_slow_MdAc         ! number of low-wind dups--MDCRS-ACARS
   3873       integer      n_slow_MdAc         ! number of low-wind dups--MDCRS-TAMDAR
   3874 ccccdak     $,            n_slow_AcAr         ! number of low-wind dups--ACARS-AIREP
   3875      $,            n_slow_AcAr         ! number of low-wind dups--TAMDAR-AIREP
   3876      $,            n_slow_MdAr         ! number of low-wind dups--MDCRS-AIREP
   3877      $,            n_slow_AmAr         ! number of low-wind dups--AMDAR-AIREP
   3878      $,            n_slow_ArMa         ! number of low-wind dups--AIREP-manAIREP
   3879 ccccdak     $,            n_slow_AcAc         ! number of low-wind dups--ACARS-ACARS
   3880      $,            n_slow_AcAc         ! number of low-wind dups--TAMDAR-TAMDAR
   3881      $,            n_slow_MdMd         ! number of low-wind dups--MDCRS-MDCRS
   3882      $,            n_slow_ArAr         ! number of low-wind dups--AIREP-AIREP
   3883      $,            n_slow_MaMa         ! number of low-wind dups--manAIREP-manAIREP
   3884      $,            n_slow_AmAm         ! number of low-wind dups--AMDAR-AMDAR
   3885 c
   3886       integer      n_bad_encode        ! number of bad-encode dups
   3887 c
   3888       integer      n_ex_bad_roll_Md    ! number of exact bad roll angle dups--MDCRS-MDCRS
   3889       integer      n_ex_bad_roll_Am    ! number of exact bad roll angle dups--AMDAR-AMDAR
   3890       integer      n_nr_bad_roll_Md    ! number of near bad roll angle dups--MDCRS-MDCRS
   3891       integer      n_nr_bad_roll_Am    ! number of near bad roll angle dups--AMDAR-AMDAR
   3892       integer      n_nr_posrep         ! number of position report dups--MDCRS-MDCRS

Page 86          Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   3893 c
   3894       integer      n_xx999_Ar          ! number of aireps with missing id
   3895      $,            n_xx999_Ma          ! number of manual aireps with missing id
   3896      $,            n_sh_Ar             ! number of aireps with short id
   3897      $,            n_sh_Ma             ! number of manual aireps with short id
   3898      $,            n_00_Md             ! number of mdcrs with rounded position
   3899      $,            n_0000_Md           ! number of mdcrs with rounded position (0,0 deg)
   3900 ccccdak     $,            n_00_Ac             ! number of acars with rounded position
   3901      $,            n_00_Ac             ! number of tamdar with rounded position
   3902 ccccdak     $,            n_0000_Ac           ! number of acars with rounded position (0,0 deg)
   3903      $,            n_0000_Ac           ! number of tamdar with rounded position (0,0 deg)
   3904      $,            n_00_Ar             ! number of aireps with rounded position
   3905      $,            n_0000_Ar           ! number of aireps with rounded position (0,0 deg)
   3906      $,            n_00_Ma             ! number of manual aireps with rounded position
   3907      $,            n_0000_Ma           ! number of manual aireps with rounded pos (0,0 deg)
   3908      $,            n_00_Am             ! number of amdar with rounded position
   3909      $,            n_0000_Am           ! number of amdar with rounded position (0,0 deg)
   3910 c
   3911       integer      n_lat               ! latitude index
   3912      $,            n_lon               ! longitude index
   3913      $,            n_area_Md(19,37)    ! number of mdcrs reports by area
   3914 ccccdak     $,            n_area_Ac(19,37)    ! number of acars reports by area
   3915      $,            n_area_Ac(19,37)    ! number of tamdar reports by area
   3916      $,            n_area_Ar(19,37)    ! number of airep reports by area
   3917      $,            n_area_Ma(19,37)    ! number of manual airep reports by area
   3918      $,            n_area_Am(19,37)    ! number of amdar reports by area
   3919      $,            n_time_Md(24)       ! number of mdcrs reports by time
   3920 ccccdak     $,            n_time_Ac(24)       ! number of acars reports by time
   3921      $,            n_time_Ac(24)       ! number of tamdar reports by time
   3922      $,            n_time_Ar(24)       ! number of airep reports by time
   3923      $,            n_time_Ma(24)       ! number of manual airep reports by time
   3924      $,            n_time_Am(24)       ! number of amdar reports by time
   3925      $,            n_lev_Md(53)        ! number of mdcrs reports by level
   3926 ccccdak     $,            n_lev_Ac(53)        ! number of acars reports by level
   3927      $,            n_lev_Ac(53)        ! number of tamdar reports by level
   3928      $,            n_lev_Ar(53)        ! number of airep reports by level
   3929      $,            n_lev_Ma(53)        ! number of manual airep reports by level
   3930      $,            n_lev_Am(53)        ! number of amdar reports by level
   3931      $,            klev                ! index for level
   3932      $,            n_temp_Md(36,13)    ! number of mdcrs reports by temp, alt
   3933 ccccdak     $,            n_temp_Ac(36,13)    ! number of acars reports by temp, alt
   3934      $,            n_temp_Ac(36,13)    ! number of tamdar reports by temp, alt
   3935      $,            n_temp_Ar(36,13)    ! number of airep reports by temp, alt
   3936      $,            n_temp_Ma(36,13)    ! number of manual airep reports by temp, alt
   3937      $,            n_temp_Am(36,13)    ! number of amdar reports by temp, alt
   3938      $,            ktemp               ! index for temperature
   3939      $,            kalt                ! index for altitude
   3940      $,            n_wspd_Md(40,13)    ! number of mdcrs reports by wspd, alt
   3941 ccccdak     $,            n_wspd_Ac(40,13)    ! number of acars reports by wspd, alt
   3942      $,            n_wspd_Ac(40,13)    ! number of tamdar reports by wspd, alt
   3943      $,            n_wspd_Ar(40,13)    ! number of airep reports by wspd, alt
   3944      $,            n_wspd_Ma(40,13)    ! number of manual airep reports by wspd, alt
   3945      $,            n_wspd_Am(40,13)    ! number of amdar reports by wspd, alt
   3946      $,            kwspd               ! index for windspeed
   3947 c
   3948 ccccdak      integer      nrep_Ac             ! number of acars reports considered
   3949       integer      nrep_Ac             ! number of tamdar reports considered

Page 87          Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   3950      $,            nrep_Md             ! number of mdcrs reports considered
   3951      $,            nrep_Ma             ! number of manual airep reports considered
   3952      $,            nrep_Ar             ! number of airep reports considered
   3953      $,            nrep_Am             ! number of amdar reports considered
   3954 ccccdak     $,            nbad_Ac             ! number of bad acars
   3955      $,            nbad_Ac             ! number of bad tamdar
   3956      $,            nbad_Md             ! number of bad mdcrs
   3957      $,            nbad_Ma             ! number of bad manual aireps
   3958      $,            nbad_Ar             ! number of bad aireps
   3959      $,            nbad_Am             ! number of bad amdar 
   3960 ccccdak     $,            ndup_Ac             ! number of duplicate acars 
   3961      $,            ndup_Ac             ! number of duplicate tamdar 
   3962      $,            ndup_Md             ! number of duplicate mdcrs
   3963      $,            ndup_Ma             ! number of duplicate manual aireps
   3964      $,            ndup_Ar             ! number of duplicate aireps
   3965      $,            ndup_Am             ! number of duplicate amdar
   3966 c
   3967       integer      kk                  ! index pointing to current flight
   3968 c     $,            kk1                 ! index pointing to current flight
   3969 c     $,            kmap                ! number of re-mapped flight ids
   3970      $,            ihr_an              ! hour of analysis
   3971      $,            ihr_ob              ! hour of observation
   3972 c
   3973 c     Tail number statistics
   3974 c     ----------------------
   3975       integer      kreg                ! actual number of tail#s in dataset
   3976      $,            mm                  ! index pointing to current tail number
   3977       character*8  creg_reg(maxflt)    ! tail numbers
   3978       integer      nobs_reg(maxflt,5)  ! number of reports per tail# per type
   3979       integer      nrej_reg(maxflt,5)  ! number of reports rejected per tail#
   3980       integer      ntemp_reg(maxflt,5) ! number of reports w. rejected temp
   3981       integer      nwind_reg(maxflt,5) ! number of reports w. rejected winds
   3982 c
   3983 c     Switches
   3984 c     --------
   3985       logical      l_print             ! print values if true
   3986      $,            l_ii_sh             ! true if ii rep has short id
   3987      $,            l_iim1_sh           ! true if iim1 rep has short id
   3988      $,            l_ii_0lat           ! true if ii rep has zero latitude 
   3989      $,            l_iim1_0lat         ! true if iim1 rep has zero latitude
   3990      $,            l_ii_0lon           ! true if ii rep has zero latitude 
   3991      $,            l_iim1_0lon         ! true if iim1 rep has zero latitude
   3992 ccccdak     $,            l_ii_acars          ! true if ii rep is type acars
   3993      $,            l_ii_acars          ! true if ii rep is type tamdar
   3994 ccccdak     $,            l_iim1_acars        ! true if iim1 rep is type acars
   3995      $,            l_iim1_acars        ! true if iim1 rep is type tamdar
   3996      $,            l_ii_mdcrs          ! true if ii rep is type mdcrs
   3997      $,            l_iim1_mdcrs        ! true if iim1 rep is type mdcrs
   3998      $,            l_ii_airep          ! true if ii rep is type airep
   3999      $,            l_iim1_airep        ! true if iim1 rep is type airep
   4000      $,            l_ii_man            ! true if ii rep is type manual airep
   4001      $,            l_iim1_man          ! true if iim1 rep is type manual airep
   4002      $,            l_ii_amdar          ! true if ii rep is type amdar
   4003      $,            l_iim1_amdar        ! true if iim1 rep is type amdar
   4004      $,            l_last              ! true if last time subroutine is called
   4005      $,            l_save_dups         ! save dups if true
   4006      $,            l_operational       ! run QC in operational mode if true

Page 88          Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   4007      $,            l_init              ! initialize counters if true
   4008 c     $,            l_ual_all           ! true if all remapped ids are UAL acft
   4009      $,            l_ncep              ! run QC w/ NCEP preferences if true
   4010 c
   4011       data l_save_dups/ .false. /
   4012 c
   4013 c # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
   4014 c
   4015 c Initialize variables
   4016 c --------------------
   4017 c      ndup = 0
   4018       nrej_reg = 0
   4019       ntemp_reg = 0
   4020       nwind_reg = 0
   4021 c
   4022 c Initialize aircraft data types
   4023 c ------------------------------
   4024       i_acars      = insty_ob_fun('acars')
   4025       i_acars_lvl  = insty_ob_fun('acars_lvl') 
   4026       i_acars_asc  = insty_ob_fun('acars_asc') 
   4027       i_acars_des  = insty_ob_fun('acars_des') 
   4028       i_mdcrs      = insty_ob_fun('mdcrs')
   4029       i_mdcrs_lvl  = insty_ob_fun('mdcrs_lvl') 
   4030       i_mdcrs_asc  = insty_ob_fun('mdcrs_asc') 
   4031       i_mdcrs_des  = insty_ob_fun('mdcrs_des')
   4032       i_man_airep  = insty_ob_fun('man-airep') 
   4033       i_man_Yairep = insty_ob_fun('man-Yairep') 
   4034       i_airep      = insty_ob_fun('airep')
   4035       i_airep_lvl  = insty_ob_fun('airep_lvl')
   4036       i_airep_asc  = insty_ob_fun('airep_asc')
   4037       i_airep_des  = insty_ob_fun('airep_des')
   4038       i_amdar      = insty_ob_fun('amdar')
   4039       i_amdar_lvl  = insty_ob_fun('amdar_lvl')
   4040       i_amdar_asc  = insty_ob_fun('amdar_asc')
   4041       i_amdar_des  = insty_ob_fun('amdar_des')
   4042 c
   4043 c Initialize counters
   4044 c -------------------
   4045       if(l_init) then
   4046 c
   4047         n_exact = 0
   4048         n_exact_sh = 0
   4049         n_ex_sh_MaMa = 0
   4050         n_ex_sh_MaAr = 0
   4051         n_ex_sh_MaMd = 0
   4052         n_ex_sh_MaAc = 0
   4053         n_ex_sh_ArMa = 0
   4054         n_ex_sh_ArAr = 0
   4055         n_exact_0ll = 0
   4056         n_ex_0ll_AcAc = 0
   4057         n_ex_0ll_MdMd = 0
   4058         n_ex_0ll_MaMa = 0
   4059         n_ex_0ll_MaAr = 0
   4060         n_exact_MdAc = 0
   4061         n_exact_AcMa = 0
   4062         n_exact_AcAr = 0
   4063         n_exact_MdMa = 0

Page 89          Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   4064         n_exact_MdAr = 0
   4065         n_exact_AmAr = 0
   4066         n_exact_AmMa = 0
   4067         n_exact_ArMa = 0
   4068         n_exact_AcAc = 0
   4069         n_exact_MdMd = 0
   4070         n_exact_ArAr = 0
   4071         n_exact_MaMa = 0
   4072         n_exact_AmAm = 0
   4073 c
   4074         n_near = 0
   4075         n_near_sh = 0
   4076         n_nr_sh_MaMa = 0
   4077         n_nr_sh_MaAr = 0
   4078         n_nr_sh_MaMd = 0
   4079         n_nr_sh_MaAc = 0
   4080         n_nr_sh_ArMa = 0
   4081         n_nr_sh_ArAr = 0
   4082         n_near_0ll = 0
   4083         n_nr_0ll_AcAc = 0
   4084         n_nr_0ll_MdMd = 0
   4085         n_nr_0ll_MaAr = 0
   4086         n_nr_0ll_AmAr = 0
   4087         n_nr_0ll_MaMa = 0
   4088         n_nr_0ll_MaMd = 0
   4089         n_nr_0ll_MdMa = 0
   4090         n_nr_0ll_MaAm = 0
   4091         n_nr_0ll_AmMa = 0
   4092         n_near_ws = 0
   4093         n_nr_mswn_MaMa = 0
   4094         n_nr_mswn_MaAr = 0
   4095         n_nr_mswn_MaAm = 0
   4096         n_nr_mswn_ArMa = 0
   4097         n_nr_mswn_ArAr = 0
   4098         n_nr_mswn_AcAc = 0
   4099         n_nr_mswn_MdMd = 0
   4100         n_nr_mswn_AcMd = 0
   4101         n_nr_mswn_MdAc = 0
   4102         n_nr_mswn_MdAm = 0
   4103         n_nr_mswn_MdAr = 0
   4104         n_nr_mswn_MdMa = 0
   4105         n_nr_mswn_ArAc = 0
   4106         n_nr_mswn_ArMd = 0
   4107         n_nr_mswn_MaAc = 0
   4108         n_nr_mswn_MaMd = 0
   4109         n_nr_mswn_AmAm = 0
   4110         n_nr_mswn_ArAm = 0
   4111         n_nr_mswn_AmAr = 0
   4112         n_nr_mswn_AcAm = 0
   4113         n_near_ws_IT = 0
   4114         n_near_ws_EU = 0
   4115         n_near_0ws = 0
   4116         n_near_0ws_ArAm = 0
   4117         n_near_0ws_AmAr = 0
   4118         n_near_0ws_AmAm = 0
   4119         n_near_0ws_ArAr = 0
   4120         n_near_0ws_MaMa = 0

Page 90          Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   4121         n_near_0ws_MaMd = 0
   4122         n_near_0ws_MaAm = 0
   4123         n_near_0ws_MaAr = 0
   4124         n_near_0ws_ArMd = 0
   4125         n_near_0ws_MdMd = 0
   4126         n_near_mst = 0
   4127         n_nr_mst_MaMa = 0
   4128         n_nr_mst_MaAr = 0
   4129         n_nr_mst_MaAm = 0
   4130         n_nr_mst_ArAc = 0
   4131         n_nr_mst_ArMd = 0
   4132         n_nr_mst_MaAc = 0
   4133         n_nr_mst_MaMd = 0
   4134         n_nr_mst_MdMd = 0
   4135         n_nr_mst_ArMa = 0
   4136         n_nr_mst_AmAm = 0
   4137         n_nr_mst_ArAr = 0
   4138         n_nr_mst_AmAr = 0
   4139         n_nr_mst_ArAm = 0
   4140         n_near_MdAc = 0
   4141         n_near_AcAr = 0
   4142         n_near_MdAr = 0
   4143         n_near_AmAr = 0
   4144         n_near_AcMa = 0
   4145         n_near_MdMa = 0
   4146         n_near_ArMa = 0
   4147         n_near_AmMa = 0
   4148         n_near_AcAc = 0
   4149         n_near_MdMd = 0
   4150         n_near_ArAr = 0
   4151         n_near_MaMa = 0
   4152         n_near_AmAm = 0
   4153         n_near_negpos = 0
   4154         n_slow_MdAc = 0
   4155         n_slow_AcAr = 0
   4156         n_slow_MdAr = 0
   4157         n_slow_AmAr = 0
   4158         n_slow_ArMa = 0
   4159         n_slow_AcAc = 0
   4160         n_slow_MdMd = 0
   4161         n_slow_ArAr = 0
   4162         n_slow_MaMa = 0
   4163         n_slow_AmAm = 0
   4164 c
   4165         n_bad_encode = 0
   4166 c
   4167         n_ex_bad_roll_Md = 0
   4168         n_ex_bad_roll_Am = 0
   4169         n_nr_bad_roll_Md = 0
   4170         n_nr_bad_roll_Am = 0
   4171         n_nr_posrep = 0
   4172 c
   4173         n_xx999_Ar = 0
   4174         n_xx999_Ma = 0
   4175         n_sh_Ar = 0
   4176         n_sh_Ma = 0
   4177         n_00_Md = 0

Page 91          Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   4178         n_0000_Md = 0
   4179         n_00_Ac = 0
   4180         n_0000_Ac = 0
   4181         n_00_Ar = 0
   4182         n_0000_Ar = 0
   4183         n_00_Ma = 0
   4184         n_0000_Ma = 0
   4185         n_00_Am = 0
   4186         n_0000_Am = 0
   4187 c
   4188         n_area_Md = 0
   4189         n_area_Ac = 0
   4190         n_area_Ar = 0
   4191         n_area_Ma = 0
   4192         n_area_Am = 0
   4193 c
   4194         n_time_Md = 0
   4195         n_time_Ac = 0
   4196         n_time_Ar = 0
   4197         n_time_Ma = 0
   4198         n_time_Am = 0
   4199 c
   4200         n_lev_Md = 0
   4201         n_lev_Ac = 0
   4202         n_lev_Ar = 0
   4203         n_lev_Ma = 0
   4204         n_lev_Am = 0
   4205 c
   4206         n_temp_Md = 0
   4207         n_temp_Ac = 0
   4208         n_temp_Ar = 0
   4209         n_temp_Ma = 0
   4210         n_temp_Am = 0
   4211 c
   4212         n_wspd_Md = 0
   4213         n_wspd_Ac = 0
   4214         n_wspd_Ar = 0
   4215         n_wspd_Ma = 0
   4216         n_wspd_Am = 0
   4217 c
   4218         nrep_Ac = 0
   4219         nrep_Md = 0
   4220         nrep_Ma = 0
   4221         nrep_Ar = 0
   4222         nrep_Am = 0
   4223         nbad_Ac = 0
   4224         nbad_Md = 0
   4225         nbad_Ma = 0
   4226         nbad_Ar = 0
   4227         nbad_Am = 0
   4228         ndup_Ac = 0
   4229         ndup_Md = 0
   4230         ndup_Ma = 0
   4231         ndup_Ar = 0
   4232         ndup_Am = 0
   4233       endif
   4234 c

Page 92          Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   4235       read(cdtg_an,'(8x,i2)') ihr_an
   4236 c
   4237 c Begin loop over reports
   4238 c -----------------------
   4239       do iob = 1,numreps
   4240 c
   4241 c Initialize indices
   4242 c ------------------
   4243         ii   = indx(iob)
   4244         knt0 = iob
   4245         knt  = iob
   4246         if(iob.gt.1) then
   4247           iim1 = indx(iob-1)
   4248         else
   4249           iim1 = 0
   4250         endif
   4251 c
   4252         if(iob.eq.1.and.c_qc(ii)(1:1).eq.'-') c_qc(ii)(1:1) = 'N'
   4253 c
   4254 c Set ktype
   4255 c ---------
   4256         if(itype(ii).eq.i_mdcrs_lvl.or.
   4257      $     itype(ii).eq.i_mdcrs_asc.or.
   4258      $     itype(ii).eq.i_mdcrs_des.or.
   4259      $     itype(ii).eq.i_mdcrs) then 
   4260           ktype = 1
   4261 c
   4262         elseif(itype(ii).eq.i_acars_lvl.or.
   4263      $         itype(ii).eq.i_acars_asc.or.
   4264      $         itype(ii).eq.i_acars_des.or.
   4265      $         itype(ii).eq.i_acars) then 
   4266           ktype = 2
   4267 c
   4268         elseif(itype(ii).eq.i_amdar_lvl.or.
   4269      $         itype(ii).eq.i_amdar_asc.or.
   4270      $         itype(ii).eq.i_amdar_des.or.
   4271      $         itype(ii).eq.i_amdar) then 
   4272           ktype = 3
   4273 c
   4274         elseif(itype(ii).eq.i_airep_lvl.or.
   4275      $         itype(ii).eq.i_airep_asc.or.
   4276      $         itype(ii).eq.i_airep_des.or.
   4277      $         itype(ii).eq.i_airep) then
   4278           ktype = 4
   4279 c
   4280         elseif(itype(ii).eq.i_man_airep.or.
   4281      $         itype(ii).eq.i_man_Yairep) then
   4282           ktype = 5
   4283         endif
   4284 c
   4285 c       Examine the data distribution
   4286 c       -----------------------------
   4287 c
   4288 c       Count UA reports with short ids
   4289 c       -------------------------------
   4290         if(c_acftid(ii)(1:2).eq.'UA'.and.
   4291      $     c_acftid(ii)(3:3).ne.'L'.and.

Page 93          Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   4292      $     ktype.eq.4)then 
   4293           n_sh_Ar = n_sh_Ar + 1
   4294 c
   4295         elseif(c_acftid(ii)(1:2).eq.'UA'.and.
   4296      $         c_acftid(ii)(3:3).ne.'L'.and.
   4297      $         ktype.eq.5) then 
   4298           n_sh_Ma = n_sh_Ma + 1
   4299         endif
   4300 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
   4301 c
   4302 c       Count reports with lat and lon in whole degrees
   4303 c       (Count positions of 0.0 lat and 0.0 lon separately)
   4304 c       ---------------------------------------------------
   4305         if((abs(alat(ii)-float(int(alat(ii)))).lt.0.001).and.
   4306      $     (abs(alon(ii)-float(int(alon(ii)))).lt.0.001)) then
   4307 c
   4308           if(ktype.eq.1) then 
   4309             if(abs(alat(ii)).lt.0.001.and.
   4310      $         abs(alon(ii)).lt.0.001) then
   4311               n_0000_Md = n_0000_Md + 1
   4312             else 
   4313               n_00_Md = n_00_Md + 1
   4314             endif
   4315           elseif(ktype.eq.2) then 
   4316             if(abs(alat(ii)).lt.0.001.and.
   4317      $         abs(alon(ii)).lt.0.001) then
   4318               n_0000_Ac = n_0000_Ac + 1
   4319             else 
   4320               n_00_Ac = n_00_Ac + 1
   4321             endif
   4322           elseif(ktype.eq.3) then 
   4323             if(abs(alat(ii)).lt.0.001.and.
   4324      $         abs(alon(ii)).lt.0.001) then
   4325               n_0000_Am = n_0000_Am + 1
   4326             else 
   4327               n_00_Am = n_00_Am + 1
   4328             endif
   4329           elseif(ktype.eq.4) then
   4330             if(abs(alat(ii)).lt.0.001.and.
   4331      $         abs(alon(ii)).lt.0.001) then
   4332               n_0000_Ar = n_0000_Ar + 1
   4333             else 
   4334               n_00_Ar = n_00_Ar + 1
   4335             endif
   4336           elseif(ktype.eq.5) then
   4337             if(abs(alat(ii)).lt.0.001.and.
   4338      $         abs(alon(ii)).lt.0.001) then
   4339               n_0000_Ma = n_0000_Ma + 1
   4340             else 
   4341               n_00_Ma = n_00_Ma + 1
   4342             endif
   4343           endif
   4344         endif
   4345 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
   4346 c
   4347 c       Count reports by geographic area
   4348 c       --------------------------------

Page 94          Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   4349         n_lat = int(alat(ii))/10 + 10
   4350         n_lon = int(alon(ii))/10 + 1
   4351 c
   4352         if(ktype.eq.1) then 
   4353           n_area_Md(n_lat,n_lon) = n_area_Md(n_lat,n_lon) + 1
   4354 c
   4355         elseif(ktype.eq.2) then 
   4356           n_area_Ac(n_lat,n_lon) = n_area_Ac(n_lat,n_lon) + 1
   4357 c
   4358         elseif(ktype.eq.3) then 
   4359           n_area_Am(n_lat,n_lon) = n_area_Am(n_lat,n_lon) + 1
   4360 c
   4361         elseif(ktype.eq.4) then
   4362           n_area_Ar(n_lat,n_lon) = n_area_Ar(n_lat,n_lon) + 1
   4363 c
   4364         elseif(ktype.eq.5) then
   4365           n_area_Ma(n_lat,n_lon) = n_area_Ma(n_lat,n_lon) + 1
   4366         endif
   4367 c
   4368 c       Count reports by time
   4369 c       ---------------------
   4370         ihr_ob = idt(ii) + ihr_an * 3600
   4371         if(ihr_ob.lt.0) then
   4372           ihr_ob = (24 * 3600) + ihr_ob
   4373         endif
   4374         ihr_ob = ihr_ob / 3600
   4375         if(ihr_ob.lt.0.or.ihr_ob.gt.23) then
   4376           if(l_ncep) then
   4377 ! DAK - NCEP runs centered at 21z (NDAS/RAP), 22z (RAP) and 23z (RAP) have many obs with
   4378 !       ihr_ob > 23 since obs at the tail end of the time window radius move into the next
   4379 !       day - so, if ihr_ob is 24-29, change to 00-05 to avoid array overflow here
   4380             if(ihr_ob.gt.23.and.ihr_ob.le.29) ihr_ob = ihr_ob - 24
   4381           else
   4382             write(io8,*) 'Bad ihr_ob = ',ihr_ob, ihr_an, idt(ii), ii,
   4383      $       iob, c_acftid(ii), alat(ii), alon(ii), ht_ft(ii)
   4384           endif
   4385         endif
   4386 c
   4387         if(ktype.eq.1) then 
   4388           n_time_Md(ihr_ob+1) = n_time_Md(ihr_ob+1) + 1
   4389 c
   4390         elseif(ktype.eq.2) then 
   4391           n_time_Ac(ihr_ob+1) = n_time_Ac(ihr_ob+1) + 1
   4392 c
   4393         elseif(ktype.eq.3) then 
   4394           n_time_Am(ihr_ob+1) = n_time_Am(ihr_ob+1) + 1
   4395 c
   4396         elseif(ktype.eq.4) then
   4397           n_time_Ar(ihr_ob+1) = n_time_Ar(ihr_ob+1) + 1
   4398 c
   4399         elseif(ktype.eq.5) then
   4400           n_time_Ma(ihr_ob+1) = n_time_Ma(ihr_ob+1) + 1
   4401         endif
   4402 c
   4403 c       Count reports by level, temperature, and windspeed
   4404 c       --------------------------------------------------
   4405         if(ht_ft(ii).lt.0) then

Page 95          Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   4406           klev = 53
   4407         elseif(ht_ft(ii).gt.50 000) then
   4408           klev = 52
   4409         else
   4410           klev = ifix(ht_ft(ii)+500.) / 1000 + 1
   4411         endif
   4412 c
   4413         if(ht_ft(ii).lt.0) then
   4414           kalt = 13
   4415         elseif(ht_ft(ii).gt.50 000) then
   4416           kalt = 12
   4417         else
   4418           kalt = ifix(ht_ft(ii)) / 5000 + 1
   4419         endif
   4420 c
   4421         if(ob_t(ii).eq.amiss) then
   4422           ktemp = 36
   4423         elseif(ob_t(ii).lt.173.16) then
   4424           ktemp = 35 
   4425         elseif(ob_t(ii).gt.333.16) then
   4426           ktemp = 34
   4427         else
   4428           ktemp = (ob_t(ii)-173.16) / 5 + 1
   4429         endif
   4430 c
   4431         if(ob_spd(ii).eq.amiss) then
   4432           kwspd = 40
   4433         elseif(ob_spd(ii).lt.0) then
   4434           kwspd = 39 
   4435         elseif(ob_spd(ii).gt.180) then
   4436           kwspd = 38
   4437         else
   4438           kwspd = ob_spd(ii) / 5 + 1
   4439         endif
   4440 c
   4441         if(ktype.eq.1) then 
   4442           n_lev_Md(klev) = n_lev_Md(klev) + 1
   4443           n_temp_Md(ktemp,kalt) = n_temp_Md(ktemp,kalt) + 1
   4444           n_wspd_Md(kwspd,kalt) = n_wspd_Md(kwspd,kalt) + 1
   4445 c
   4446         elseif(ktype.eq.2) then 
   4447           n_lev_Ac(klev) = n_lev_Ac(klev) + 1
   4448           n_temp_Ac(ktemp,kalt) = n_temp_Ac(ktemp,kalt) + 1
   4449           n_wspd_Ac(kwspd,kalt) = n_wspd_Ac(kwspd,kalt) + 1
   4450 c
   4451         elseif(ktype.eq.3) then 
   4452           n_lev_Am(klev) = n_lev_Am(klev) + 1
   4453           n_temp_Am(ktemp,kalt) = n_temp_Am(ktemp,kalt) + 1
   4454           n_wspd_Am(kwspd,kalt) = n_wspd_Am(kwspd,kalt) + 1
   4455 c
   4456         elseif(ktype.eq.4) then
   4457           n_lev_Ar(klev) = n_lev_Ar(klev) + 1
   4458           n_temp_Ar(ktemp,kalt) = n_temp_Ar(ktemp,kalt) + 1
   4459           n_wspd_Ar(kwspd,kalt) = n_wspd_Ar(kwspd,kalt) + 1
   4460 c
   4461         elseif(ktype.eq.5) then
   4462           n_lev_Ma(klev) = n_lev_Ma(klev) + 1

Page 96          Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   4463           n_temp_Ma(ktemp,kalt) = n_temp_Ma(ktemp,kalt) + 1
   4464           n_wspd_Ma(kwspd,kalt) = n_wspd_Ma(kwspd,kalt) + 1
   4465         endif
   4466 c
   4467 c       Count reports with missing ids
   4468 c       ------------------------------
   4469         if(c_acftid(ii)(1:5).eq.'XX999'.or.
   4470      $     c_acftid(ii)(1:4).eq.'////') then
   4471 c
   4472           if(ktype.eq.4) then 
   4473             n_xx999_Ar = n_xx999_Ar + 1
   4474 c
   4475           elseif(ktype.eq.5) then
   4476             n_xx999_Ma = n_xx999_Ma + 1
   4477           endif
   4478 c
   4479         endif
   4480 c
   4481 c Check for duplicates--uses algorithm like P. Phoebus's airepd
   4482 c Checks tail number, date-time, lat/lon, flight level, temp, winds
   4483 c -----------------------------------------------------------------
   4484 c        idt_dif = idt(ii) - idt(iim1)
   4485 c
   4486         idt_dif = 0
   4487         kkdup = 0
   4488 c
   4489 c       Repeat check for all reports within 90 sec
   4490 c       (90 sec used to check for dups with position reports--8/15/01)
   4491 c       --------------------------------------------------------------
   4492 c        do while(idt_dif.eq.0.and.
   4493 c
   4494         do while(idt_dif.le.90.and.
   4495      $           idt_dif.ne.imiss.and.
   4496      $           iim1.ne.0)
   4497 c
   4498 c         Initialize print switch
   4499 c         -----------------------
   4500           l_print = .false.
   4501 c
   4502 c         Compute index for previous report
   4503 c         ---------------------------------
   4504           knt = knt - 1
   4505  10       if(knt.gt.0) then
   4506             iim1 = indx(knt)
   4507             knt1 = knt
   4508             if(c_qc(iim1)(1:1).eq.'D'.or.
   4509      $         c_qc(iim1)(1:1).eq.'d'.or.
   4510      $         c_qc(iim1)(1:1).eq.'e'.or.
   4511      $         c_qc(iim1)(1:1).eq.'E'.or.
   4512      $         c_qc(iim1)(1:1).eq.'B') then
   4513               knt = knt - 1
   4514               goto 10
   4515             endif
   4516           else
   4517             iim1 = 0
   4518             knt1 = 0
   4519           endif

Page 97          Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   4520 c
   4521 c         Perform check only for valid iim1
   4522 c         ---------------------------------
   4523           if(iim1.ne.0) then
   4524 c
   4525 c           Compute time difference between reports
   4526 c           (Allow a time difference of up to 60 sec--
   4527 c            dups may have a time difference of 1 min)
   4528 c           (changed to 90 sec--6/5/01)
   4529 c           ------------------------------------------
   4530             idt_dif = idt(ii) - idt(iim1)
   4531 c
   4532             kkdup = kkdup + 1          
   4533 c
   4534 c           Set up logical variables used in testing for duplicates
   4535 c           -------------------------------------------------------
   4536 c
   4537 c           iim1 report has short id?
   4538 c           -------------------------
   4539             l_iim1_sh = .false.
   4540             if(itype(iim1).eq.i_man_airep.or.
   4541      $         itype(iim1).eq.i_man_Yairep) then
   4542 c
   4543               if(c_acftid(iim1)(1:8).eq.c_acftid(ii)(1:8)) then
   4544                 l_iim1_sh = .false.
   4545               elseif(c_acftid(ii)(1:3).eq.'UAL') then
   4546                 if(c_acftid(iim1)(1:2).eq.'UA'.and. 
   4547      $             c_acftid(iim1)(3:3).ne.'L') then
   4548                   l_iim1_sh = .true.
   4549                 else
   4550                   l_iim1_sh = .false.
   4551                 endif
   4552               elseif(c_acftid(iim1)(1:6).eq.c_acftid(ii)(1:6).and. 
   4553      $               c_acftid(ii)  (7:7).ne.' '.and.
   4554      $               c_acftid(iim1)(7:7).eq.' ') then
   4555                 l_iim1_sh = .true.
   4556               elseif(c_acftid(iim1)(1:6).eq.
   4557      $               c_acftid(ii)(2:7)) then 
   4558                 l_iim1_sh = .true.
   4559               elseif(c_acftid(iim1)(1:6).eq.
   4560      $               c_acftid(ii)(1:2)//c_acftid(ii)(4:7)) then 
   4561                 l_iim1_sh = .true.
   4562               elseif(c_acftid(iim1)(1:6).eq.
   4563      $               c_acftid(ii)(1:3)//c_acftid(ii)(5:7)) then 
   4564                 l_iim1_sh = .true.
   4565               endif
   4566             endif
   4567 c
   4568 c           ii report has short id?
   4569 c           -----------------------
   4570             l_ii_sh = .false.
   4571             if(itype(ii).eq.i_man_airep.or.
   4572      $         itype(ii).eq.i_man_Yairep) then
   4573 c
   4574               if(c_acftid(iim1)(1:8).eq.c_acftid(ii)(1:8)) then
   4575                 l_ii_sh = .false.
   4576               elseif(c_acftid(iim1)(1:3).eq.'UAL') then

Page 98          Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   4577                 if(c_acftid(ii)(1:2).eq.'UA'.and. 
   4578      $             c_acftid(ii)(3:3).ne.'L') then
   4579                   l_ii_sh = .true.
   4580                 else
   4581                   l_ii_sh = .false.
   4582                 endif
   4583               elseif(c_acftid(iim1)(1:6).eq.c_acftid(ii)(1:6).and. 
   4584      $               c_acftid(iim1)(7:7).ne.' '.and.
   4585      $               c_acftid(ii)  (7:7).eq.' ') then
   4586                 l_ii_sh = .true.
   4587               elseif(c_acftid(ii)(1:6).eq.
   4588      $               c_acftid(iim1)(2:7)) then 
   4589                 l_ii_sh = .true.
   4590               elseif(c_acftid(ii)(1:6).eq.
   4591      $               c_acftid(iim1)(1:2)//c_acftid(iim1)(4:7)) then 
   4592                 l_ii_sh = .true.
   4593               elseif(c_acftid(ii)(1:6).eq.
   4594      $               c_acftid(iim1)(1:3)//c_acftid(iim1)(5:7)) then
   4595                 l_ii_sh = .true.
   4596               endif
   4597             endif
   4598 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
   4599 c
   4600 c           iim1 report has zero latitude?
   4601 c           ------------------------------
   4602             l_iim1_0lat = .false.
   4603             if(abs(alat(iim1)).lt.0.001.and.
   4604      $         alat(ii).gt.0.125.and.
   4605      $         alat(ii).lt.359.875)
   4606      $        l_iim1_0lat = .true.
   4607 c
   4608 c           ii report has zero latitude?
   4609 c           ----------------------------
   4610             l_ii_0lat = .false.
   4611             if(abs(alat(ii)).lt.0.001.and.
   4612      $         alat(iim1).gt.0.125.and.
   4613      $         alat(iim1).lt.359.875)
   4614      $        l_ii_0lat = .true.
   4615 c
   4616 c           iim1 report has zero longitude?
   4617 c           -------------------------------
   4618             l_iim1_0lon = .false.
   4619             if(abs(alon(iim1)).lt.0.001.and.
   4620      $         alon(ii).gt.0.125.and.
   4621      $         alon(ii).lt.359.875)
   4622      $        l_iim1_0lon = .true.
   4623 c
   4624 c           ii report has zero longitude?
   4625 c           -----------------------------
   4626             l_ii_0lon = .false.
   4627             if(abs(alon(ii)).lt.0.001.and.
   4628      $         alon(iim1).gt.0.125.and.
   4629      $         alon(iim1).lt.359.875)
   4630      $        l_ii_0lon = .true.
   4631 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
   4632 c
   4633 ccccdak           iim1 report is ACARS?

Page 99          Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   4634 c           iim1 report is TAMDAR?
   4635 c           ----------------------
   4636             l_iim1_acars = .false.
   4637             if(itype(iim1).eq.i_acars.or.
   4638      $         itype(iim1).eq.i_acars_lvl.or.
   4639      $         itype(iim1).eq.i_acars_des.or.
   4640      $         itype(iim1).eq.i_acars_asc) l_iim1_acars = .true.
   4641 c
   4642 ccccdak           ii report is ACARS?
   4643 c           ii report is TAMDAR?
   4644 c           --------------------
   4645             l_ii_acars = .false.
   4646             if(itype(ii).eq.i_acars.or.
   4647      $         itype(ii).eq.i_acars_lvl.or.
   4648      $         itype(ii).eq.i_acars_des.or.
   4649      $         itype(ii).eq.i_acars_asc) l_ii_acars = .true.
   4650 c
   4651 c           iim1 report is MDCRS?
   4652 c           ---------------------
   4653             l_iim1_mdcrs = .false.
   4654             if(itype(iim1).eq.i_mdcrs.or.
   4655      $         itype(iim1).eq.i_mdcrs_lvl.or.
   4656      $         itype(iim1).eq.i_mdcrs_des.or.
   4657      $         itype(iim1).eq.i_mdcrs_asc) l_iim1_mdcrs = .true.
   4658 c
   4659 c           ii report is MDCRS?
   4660 c           -------------------
   4661             l_ii_mdcrs = .false.
   4662             if(itype(ii).eq.i_mdcrs.or.
   4663      $         itype(ii).eq.i_mdcrs_lvl.or.
   4664      $         itype(ii).eq.i_mdcrs_des.or.
   4665      $         itype(ii).eq.i_mdcrs_asc) l_ii_mdcrs = .true.
   4666 c
   4667 c           iim1 report is AIREP?
   4668 c           ---------------------
   4669             l_iim1_airep = .false.
   4670             if(itype(iim1).eq.i_airep.or.
   4671      $         itype(iim1).eq.i_airep_lvl.or.
   4672      $         itype(iim1).eq.i_airep_des.or.
   4673      $         itype(iim1).eq.i_airep_asc) l_iim1_airep = .true.
   4674 c
   4675 c           ii report is AIREP?
   4676 c           -------------------
   4677             l_ii_airep = .false.
   4678             if(itype(ii).eq.i_airep.or.
   4679      $         itype(ii).eq.i_airep_lvl.or.
   4680      $         itype(ii).eq.i_airep_des.or.
   4681      $         itype(ii).eq.i_airep_asc) l_ii_airep = .true.
   4682 c
   4683 c           iim1 report is manual AIREP?
   4684 c           ----------------------------
   4685             l_iim1_man = .false.
   4686             if(itype(iim1).eq.i_man_airep.or.
   4687      $         itype(iim1).eq.i_man_Yairep) l_iim1_man = .true.
   4688 c
   4689 c           ii report is manual AIREP?
   4690 c           --------------------------

Page 100         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   4691             l_ii_man = .false.
   4692             if(itype(ii).eq.i_man_airep.or.
   4693      $         itype(ii).eq.i_man_Yairep) l_ii_man = .true.
   4694 c
   4695 c           iim1 report is AMDAR?
   4696 c           ---------------------
   4697             l_iim1_amdar = .false.
   4698             if(itype(iim1).eq.i_amdar.or.
   4699      $         itype(iim1).eq.i_amdar_lvl.or.
   4700      $         itype(iim1).eq.i_amdar_des.or.
   4701      $         itype(iim1).eq.i_amdar_asc) l_iim1_amdar = .true.
   4702 c
   4703 c           ii report is AMDAR?
   4704 c           -------------------
   4705             l_ii_amdar = .false.
   4706             if(itype(ii).eq.i_amdar.or.
   4707      $         itype(ii).eq.i_amdar_lvl.or.
   4708      $         itype(ii).eq.i_amdar_des.or.
   4709      $         itype(ii).eq.i_amdar_asc) l_ii_amdar = .true.
   4710 c
   4711 c           Compute magnitude of direction difference
   4712 c           (constrain to be less than 180 deg
   4713 c           -----------------------------------------
   4714             if(ob_dir(ii).eq.amiss.or.
   4715      $         ob_dir(iim1).eq.amiss) then
   4716               difdir = amiss
   4717             else
   4718               difdir = abs(ob_dir(iim1)-ob_dir(ii))
   4719               if(difdir.gt.180) difdir = 360. - difdir
   4720             endif
   4721 c
   4722 c           Check if report is exact dup (qc flag = 'D')
   4723 c           --------------------------------------------
   4724             if(idt_dif.eq.0) then
   4725 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
   4726               if((abs(alat(iim1)-alat(ii)).lt.0.015.or.
   4727      $            l_iim1_0lat.or.l_ii_0lat).and.
   4728      $           (abs(alon(iim1)-alon(ii)).lt.0.015.or.
   4729      $            l_iim1_0lon.or.l_ii_0lon).and.
   4730 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
   4731      $           (abs(pres(iim1)-pres(ii)).lt.0.05.or.
   4732      $            abs(ht_ft(iim1)-ht_ft(ii)).lt.0.5).and.
   4733      $           abs(ob_t(iim1)-ob_t(ii)).lt.0.05.and.
   4734      $           ((abs(difdir).lt.2.5).or.
   4735      $            (ob_dir(iim1).eq.amiss.and.ob_dir(ii).eq.amiss)).and.
   4736      $           abs(ob_spd(iim1)-ob_spd(ii)).lt.0.05) then
   4737 c
   4738 c               If exact dup found, decide which report to keep:
   4739 ccccdak                 Choose MDCRS over ACARS
   4740 c                 Choose MDCRS over TAMDAR
   4741 ccccdak                 Choose ACARS/MDCRS over AIREP
   4742 c                 Choose TAMDAR or MDCRS over AIREP
   4743 c                 Choose AMDAR over AIREP
   4744 c                 Choose automated over manual AIREP
   4745 c                 Choose 7-char flight number over 6-char flight number
   4746 c                 Choose present over missing flight/tail number
   4747 c                 Choose non-zero over zero lat or lon

Page 101         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   4748 c               -------------------------------------------------------
   4749 c
   4750 c               Keep ob ii
   4751 c               ----------
   4752                 if((l_ii_mdcrs.and.l_iim1_acars).or.
   4753      $             (l_ii_acars.and.l_iim1_airep).or.
   4754      $             (l_ii_mdcrs.and.l_iim1_airep).or.
   4755      $             (l_ii_amdar.and.l_iim1_airep).or.
   4756      $             (l_ii_mdcrs.and.l_iim1_man  ).or.
   4757      $             (l_ii_acars.and.l_iim1_man  ).or.
   4758      $             (l_ii_amdar.and.l_iim1_man  ).or.
   4759      $             (l_ii_airep.and.l_iim1_man  ).or.
   4760      $             l_iim1_sh.or.
   4761      $             l_iim1_0lat.or.
   4762      $             l_iim1_0lon) then
   4763 c
   4764                   if(c_qc(iim1)(1:1).eq.'-'.or.
   4765      $               c_qc(iim1)(1:1).eq.'.'.or.
   4766      $               c_qc(iim1)(1:1).eq.'N')  
   4767      $               c_qc(iim1)(1:1) = 'D'
   4768 c
   4769                   if(c_qc(ii)(1:1).eq.'-') c_qc(ii)(1:1) = '.'
   4770 c
   4771 c                 Count rejects by category
   4772 c                 -------------------------
   4773                   n_exact = n_exact + 1
   4774 c
   4775                   if(l_iim1_sh) then
   4776                     n_exact_sh = n_exact_sh + 1
   4777                     l_print = .true.
   4778                     if(l_print) then
   4779                       write(io8,*)
   4780                       write(io8,*)'Exact dup found with short id--'
   4781      $,                            ii
   4782                     endif
   4783                     if(l_iim1_man.and.l_ii_man) then
   4784                       n_ex_sh_MaMa = n_ex_sh_MaMa + 1
   4785                       if(l_print) 
   4786      $                  write(io8,*) 'manAIREP-manAIREP dup'
   4787                     elseif(l_iim1_man.and.l_ii_airep) then 
   4788                       n_ex_sh_MaAr = n_ex_sh_MaAr + 1
   4789                       if(l_print) write(io8,*) 'manAIREP-AIREP dup'
   4790                     elseif(l_iim1_man.and.l_ii_mdcrs) then 
   4791                       n_ex_sh_MaMd = n_ex_sh_MaMd + 1
   4792                       if(l_print) write(io8,*) 'manAIREP-MDCRS dup'
   4793                     elseif(l_iim1_man.and.l_ii_acars) then 
   4794                       n_ex_sh_MaAc = n_ex_sh_MaAc + 1
   4795 ccccdak                      if(l_print) write(io8,*) 'manAIREP-ACARS dup'
   4796                       if(l_print) write(io8,*) 'manAIREP-TAMDAR dup'
   4797                     elseif(l_ii_man.and.l_iim1_airep) then 
   4798                       n_ex_sh_ArMa = n_ex_sh_ArMa + 1
   4799                       if(l_print) write(io8,*) 'AIREP-manAIREP dup'
   4800                     elseif(l_iim1_airep.and.l_ii_airep) then 
   4801                       n_ex_sh_ArAr = n_ex_sh_ArAr + 1
   4802                       if(l_print) write(io8,*) 'AIREP-AIREP dup'
   4803                     else
   4804                       l_print = .true.

Page 102         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   4805                       if(l_print) then
   4806                         write(io8,*)
   4807                         write(io8,*)'Uncategorized short-id dup'
   4808                       endif
   4809                     endif
   4810 c
   4811                   elseif(l_iim1_0lat.or.l_iim1_0lon) then
   4812                     n_exact_0ll = n_exact_0ll + 1
   4813                     l_print = .false.
   4814                     if(l_print) then
   4815                       write(io8,*)
   4816                       write(io8,*) 'Exact dup found with 0l/l--',ii
   4817                     endif
   4818                     if(l_iim1_acars.and.l_ii_acars) then
   4819                       n_ex_0ll_AcAc = n_ex_0ll_AcAc + 1
   4820 ccccdak                      if(l_print) write(io8,*) 'ACARS-ACARS dup'
   4821                       if(l_print) write(io8,*) 'TAMDAR-TAMDAR dup'
   4822                     elseif(l_iim1_mdcrs.and.l_ii_mdcrs) then
   4823                       n_ex_0ll_MdMd = n_ex_0ll_MdMd + 1
   4824                       if(l_print) write(io8,*) 'MDCRS-MDCRS dup'
   4825                     elseif(l_iim1_man.and.l_ii_man) then
   4826                       n_ex_0ll_MaMa = n_ex_0ll_MaMa + 1
   4827                       if(l_print) 
   4828      $                  write(io8,*) 'manAIREP-manAIREP dup'
   4829                     elseif(l_iim1_man.and.l_ii_airep) then
   4830                       n_ex_0ll_MaAr = n_ex_0ll_MaAr + 1
   4831                       if(l_print) write(io8,*) 'manAIREP-AIREP dup'
   4832                     else
   4833                       l_print = .true.
   4834                       if(l_print) then
   4835                         write(io8,*)
   4836                         write(io8,*) 'Uncategorized exact 0l/l dup'
   4837                       endif
   4838                     endif
   4839 c
   4840                   elseif(l_ii_mdcrs.and.l_iim1_acars) then
   4841                     n_exact_MdAc = n_exact_MdAc + 1
   4842                     l_print = .false.
   4843                     if(l_print) then
   4844                       write(io8,*)
   4845 ccccdak                      write(io8,*) 'MDCRS-ACARS exact dup found--'
   4846                       write(io8,*) 'MDCRS-TAMDAR exact dup found--'
   4847      x,                             ii
   4848                     endif
   4849 c
   4850                   elseif(l_ii_acars.and.l_iim1_man) then
   4851                     n_exact_AcMa = n_exact_AcMa + 1
   4852                     l_print = .false.
   4853                     if(l_print) then
   4854                       write(io8,*)
   4855 ccccdak                      write(io8,*) 'ACARS-manAIREP exact dup--',ii
   4856                       write(io8,*) 'TAMDAR-manAIREP exact dup--',ii
   4857                     endif
   4858 c
   4859                   elseif(l_ii_acars.and.l_iim1_airep) then
   4860                     n_exact_AcAr = n_exact_AcAr + 1
   4861                     l_print = .false.

Page 103         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   4862                     if(l_print) then
   4863                       write(io8,*)
   4864 ccccdak                      write(io8,*) 'ACARS-AIREP exact dup--',ii
   4865                       write(io8,*) 'TAMDAR-AIREP exact dup--',ii
   4866                     endif
   4867 c
   4868                   elseif(l_ii_mdcrs.and.l_iim1_man) then
   4869                     n_exact_MdMa = n_exact_MdMa + 1
   4870                     l_print = .false.
   4871                     if(l_print) then
   4872                       write(io8,*)
   4873                       write(io8,*) 'MDCRS-manAIREP exact dup--',ii
   4874                     endif
   4875 c
   4876                   elseif(l_ii_mdcrs.and.l_iim1_airep) then
   4877                     n_exact_MdAr = n_exact_MdAr + 1
   4878                     l_print = .false.
   4879                     if(l_print) then
   4880                       write(io8,*)
   4881                       write(io8,*) 'MDCRS-AIREP exact dup found--',ii
   4882                     endif
   4883 c
   4884                   elseif(l_ii_amdar.and.l_iim1_airep) then
   4885                     n_exact_AmAr = n_exact_AmAr + 1
   4886                     l_print = .false.
   4887                     if(l_print) then
   4888                       write(io8,*)
   4889                       write(io8,*) 'AMDAR-AIREP exact dup found--'
   4890      $,                             ii
   4891                     endif
   4892 c
   4893                   elseif(l_ii_amdar.and.l_iim1_man) then
   4894                     n_exact_AmMa = n_exact_AmMa + 1
   4895                     l_print = .false.
   4896                     if(l_print) then
   4897                       write(io8,*)
   4898                       write(io8,*) 'AMDAR-manAIREP exact dup--',ii
   4899                     endif
   4900 c
   4901                   elseif(l_ii_airep.and.l_iim1_man) then
   4902                     n_exact_ArMa = n_exact_ArMa + 1
   4903                     l_print = .false.
   4904                     if(l_print) then
   4905                       write(io8,*)
   4906                       write(io8,*) 'AIREP-manAIREP exact dup--',ii
   4907                     endif
   4908 c
   4909                   else
   4910                     l_print = .true.
   4911                     if(l_print) then
   4912                       write(io8,*)
   4913                       write(io8,*) 'Uncategorized exact dup-1-',ii
   4914                     endif
   4915                   endif
   4916 c
   4917 c               Keep ob iim1
   4918 c               ------------

Page 104         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   4919                 elseif((l_iim1_mdcrs.and.l_ii_acars).or.
   4920      $                 (l_iim1_acars.and.l_ii_airep).or.
   4921      $                 (l_iim1_mdcrs.and.l_ii_airep).or.
   4922      $                 (l_iim1_amdar.and.l_ii_airep).or.
   4923      $                 (l_iim1_mdcrs.and.l_ii_man  ).or.
   4924      $                 (l_iim1_acars.and.l_ii_man  ).or.
   4925      $                 (l_iim1_amdar.and.l_ii_man  ).or.
   4926      $                 (l_iim1_airep.and.l_ii_man  ).or.
   4927      $                 l_ii_sh.or.
   4928      $                 l_ii_0lat.or.
   4929      $                 l_ii_0lon) then
   4930 c
   4931                   indx(knt1) = ii
   4932                   indx(knt0) = iim1
   4933                   isave = ii
   4934                   ii = iim1
   4935                   iim1 = isave
   4936 c
   4937                   if(c_qc(iim1)(1:1).eq.'-'.or.
   4938      $               c_qc(iim1)(1:1).eq.'.'.or.
   4939      $               c_qc(iim1)(1:1).eq.'N') 
   4940      $               c_qc(iim1)(1:1) = 'D'
   4941 c
   4942                   if(c_qc(ii)(1:1).eq.'-') c_qc(ii)(1:1) = '.'
   4943 c
   4944 c                 Count rejects by category
   4945 c                 -------------------------
   4946                   n_exact = n_exact + 1
   4947 c
   4948                   if(l_ii_sh) then
   4949                     n_exact_sh = n_exact_sh + 1
   4950                     l_print = .true.
   4951                     if(l_print) then
   4952                       write(io8,*)
   4953                       write(io8,*) 'Exact dup with short id--',ii
   4954                     endif
   4955                     if(l_ii_man.and.l_iim1_man) then
   4956                       n_ex_sh_MaMa = n_ex_sh_MaMa + 1
   4957                       if(l_print) 
   4958      $                  write(io8,*) 'manAIREP-manAIREP dup'
   4959                     elseif(l_ii_man.and.l_iim1_airep) then 
   4960                       n_ex_sh_MaAr = n_ex_sh_MaAr + 1
   4961                       if(l_print) write(io8,*) 'manAIREP-AIREP dup'
   4962                     elseif(l_ii_man.and.l_iim1_mdcrs) then 
   4963                       n_ex_sh_MaMd = n_ex_sh_MaMd + 1
   4964                       if(l_print) write(io8,*) 'manAIREP-MDCRS dup'
   4965                     elseif(l_ii_man.and.l_iim1_acars) then 
   4966                       n_ex_sh_MaAc = n_ex_sh_MaAc + 1
   4967 ccccdak                      if(l_print) write(io8,*) 'manAIREP-ACARS dup'
   4968                       if(l_print) write(io8,*) 'manAIREP-TAMDAR dup'
   4969                     elseif(l_iim1_man.and.l_ii_airep) then 
   4970                       n_ex_sh_ArMa = n_ex_sh_ArMa + 1
   4971                       if(l_print) write(io8,*) 'AIREP-manAIREP dup'
   4972                     elseif(l_ii_airep.and.l_iim1_airep) then 
   4973                       n_ex_sh_ArAr = n_ex_sh_ArAr + 1
   4974                       if(l_print) write(io8,*) 'AIREP-AIREP dup'
   4975                     else

Page 105         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   4976                       l_print = .true.
   4977                       if(l_print) then
   4978                         write(io8,*)
   4979                         write(io8,*)'Uncategorized short-id dup'
   4980                       endif
   4981                     endif
   4982 c
   4983                   elseif(l_ii_0lat.or.l_ii_0lon) then
   4984                     n_exact_0ll = n_exact_0ll + 1
   4985                     l_print = .false.
   4986                     if(l_print) then
   4987                       write(io8,*)
   4988                       write(io8,*) 'Exact dup found with 0l/l--',ii
   4989                     endif
   4990                     if(l_iim1_acars.and.l_ii_acars) then
   4991                       n_ex_0ll_AcAc = n_ex_0ll_AcAc + 1
   4992 ccccdak                      if(l_print) write(io8,*) 'ACARS-ACARS dup'
   4993                       if(l_print) write(io8,*) 'TAMDAR-TAMDAR dup'
   4994                     elseif(l_iim1_mdcrs.and.l_ii_mdcrs) then
   4995                       n_ex_0ll_MdMd = n_ex_0ll_MdMd + 1
   4996                       if(l_print) write(io8,*) 'MDCRS-MDCRS dup'
   4997                     elseif(l_iim1_man.and.l_ii_man) then
   4998                       n_ex_0ll_MaMa = n_ex_0ll_MaMa + 1
   4999                       if(l_print) 
   5000      $                  write(io8,*) 'manAIREP-manAIREP dup'
   5001                       elseif(l_iim1_man.and.l_ii_airep) then
   5002                       n_ex_0ll_MaAr = n_ex_0ll_MaAr + 1
   5003                       if(l_print) write(io8,*) 'manAIREP-AIREP dup'
   5004                     else
   5005                       l_print = .true.
   5006                       if(l_print) then
   5007                         write(io8,*)
   5008                         write(io8,*) 'Uncategorized exact 0l/l dup'
   5009                       endif
   5010                     endif
   5011 c
   5012                   elseif(l_iim1_mdcrs.and.l_ii_acars) then
   5013                     n_exact_MdAc = n_exact_MdAc + 1
   5014                     l_print = .false.
   5015                     if(l_print) then
   5016                       write(io8,*)
   5017 ccccdak                      write(io8,*) 'MDCRS-ACARS exact dup found--'
   5018                       write(io8,*) 'MDCRS-TAMDAR exact dup found--'
   5019      $,                             ii
   5020                     endif
   5021 c
   5022                   elseif(l_iim1_acars.and.l_ii_man) then
   5023                     n_exact_AcMa = n_exact_AcMa + 1
   5024                     l_print = .false.
   5025                     if(l_print) then
   5026                       write(io8,*)
   5027 ccccdak                      write(io8,*) 'ACARS-manAIREP exact dup--',ii
   5028                       write(io8,*) 'TAMDAR-manAIREP exact dup--',ii
   5029                     endif
   5030 c
   5031                   elseif(l_iim1_acars.and.l_ii_airep) then
   5032                     n_exact_AcAr = n_exact_AcAr + 1

Page 106         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   5033                     l_print = .false.
   5034                     if(l_print) then
   5035                       write(io8,*)
   5036 ccccdak                      write(io8,*) 'ACARS-AIREP exact dup--',ii
   5037                       write(io8,*) 'TAMDAR-AIREP exact dup--',ii
   5038                     endif
   5039 c
   5040                   elseif(l_iim1_mdcrs.and.l_ii_man) then
   5041                     n_exact_MdMa = n_exact_MdMa + 1
   5042                     l_print = .false.
   5043                     if(l_print) then
   5044                       write(io8,*)
   5045                       write(io8,*) 'MDCRS-manAIREP exact dup--',ii
   5046                     endif
   5047 c
   5048                   elseif(l_iim1_mdcrs.and.l_ii_airep) then
   5049                     n_exact_MdAr = n_exact_MdAr + 1
   5050                     l_print = .false.
   5051                     if(l_print) then
   5052                       write(io8,*)
   5053                       write(io8,*) 'MDCRS-AIREP exact dup found--',ii
   5054                     endif
   5055 c
   5056                   elseif(l_iim1_amdar.and.l_ii_airep) then
   5057                     n_exact_AmAr = n_exact_AmAr + 1
   5058                     l_print = .false.
   5059                     if(l_print) then
   5060                       write(io8,*)
   5061                       write(io8,*) 'AMDAR-AIREP exact dup found--'
   5062      $,                             ii
   5063                     endif
   5064 c
   5065                   elseif(l_iim1_amdar.and.l_ii_man) then
   5066                     n_exact_AmMa = n_exact_AmMa + 1
   5067                     l_print = .false.
   5068                     if(l_print) then
   5069                       write(io8,*)
   5070                       write(io8,*) 'AMDAR-manAIREP exact dup--',ii
   5071                     endif
   5072 c
   5073                   elseif(l_iim1_airep.and.l_ii_man) then
   5074                     n_exact_ArMa = n_exact_ArMa + 1
   5075                     l_print = .false.
   5076                     if(l_print) then
   5077                       write(io8,*)
   5078                       write(io8,*) 'AIREP-manAIREP exact dup--',ii
   5079                     endif
   5080 c
   5081                   else
   5082                     l_print = .true.
   5083                     if(l_print) then
   5084                       write(io8,*)
   5085                       write(io8,*) 'Uncategorized exact dup-2-',ii
   5086                     endif
   5087                   endif
   5088 c
   5089 c               Duplicate pair doesn't fall in any of the above categories

Page 107         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   5090 c               Keep ob ii
   5091 c               ----------------------------------------------------------
   5092                 else
   5093 c
   5094                   if(c_qc(iim1)(1:1).eq.'-'.or.
   5095      $               c_qc(iim1)(1:1).eq.'.'.or.
   5096      $               c_qc(iim1)(1:1).eq.'N') 
   5097      $               c_qc(iim1)(1:1) = 'D'
   5098 c
   5099                   if(c_qc(ii)(1:1).eq.'-') c_qc(ii)(1:1) = '.'
   5100 c
   5101 c                 Count rejects by category
   5102 c                 -------------------------
   5103                   n_exact = n_exact + 1
   5104 c
   5105                   if(l_ii_acars.and.l_iim1_acars) then
   5106                     n_exact_AcAc = n_exact_AcAc + 1
   5107                     l_print = .false.
   5108                     if(l_print) then
   5109                       write(io8,*)
   5110 ccccdak                      write(io8,*) 'ACARS-ACARS exact dup found--'
   5111                       write(io8,*) 'TAMDAR-TAMDAR exact dup found--'
   5112      $,                             ii
   5113                     endif
   5114 c
   5115                   elseif(l_ii_mdcrs.and.l_iim1_mdcrs) then
   5116                     if(ichk_s(ii).eq.-10) then
   5117                       n_ex_bad_roll_Md = n_ex_bad_roll_Md + 1
   5118                       l_print = .false.
   5119                       if(l_print) then
   5120                         write(io8,*)
   5121                         write(io8,*) 'Bad roll qc ii--MdMd exact'
   5122                       endif
   5123                       ichk_t(ii) = ichk_t(iim1)
   5124                       ichk_q(ii) = ichk_q(iim1)
   5125                       ichk_d(ii) = ichk_d(iim1)
   5126                       ichk_s(ii) = ichk_s(iim1)
   5127 c
   5128                     elseif(ichk_s(iim1).eq.-10) then
   5129                       n_ex_bad_roll_Md = n_ex_bad_roll_Md + 1
   5130                       l_print = .false.
   5131                       if(l_print) then
   5132                         write(io8,*)
   5133                         write(io8,*)'Bad roll qc iim1--MdMd exact'
   5134                       endif
   5135 c
   5136                     else
   5137                       n_exact_MdMd = n_exact_MdMd + 1
   5138                       l_print = .false.
   5139                       if(l_print) then
   5140                         write(io8,*)
   5141                         write(io8,*) 'MDCRS-MDCRS exact dup--',ii,iim1
   5142                         write(io8,*) 'c_qc =..',c_qc(ii),'..',c_qc(iim1)
   5143                       endif
   5144                     endif
   5145 c
   5146                   elseif(l_ii_amdar.and.l_iim1_amdar) then

Page 108         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   5147                     if(ichk_s(ii).eq.-10) then
   5148                       n_ex_bad_roll_Am = n_ex_bad_roll_Am + 1
   5149                       l_print = .false.
   5150                       if(l_print) then
   5151                         write(io8,*)
   5152                         write(io8,*) 'Bad roll qc ii--AmAm exact'
   5153                       endif
   5154                       ichk_t(ii) = ichk_t(iim1)
   5155                       ichk_q(ii) = ichk_q(iim1)
   5156                       ichk_d(ii) = ichk_d(iim1)
   5157                       ichk_s(ii) = ichk_s(iim1)
   5158 c
   5159                     elseif(ichk_s(iim1).eq.-10) then
   5160                       n_ex_bad_roll_Am = n_ex_bad_roll_Am + 1
   5161                       l_print = .false.
   5162                       if(l_print) then
   5163                         write(io8,*)
   5164                         write(io8,*)'Bad roll qc iim1--AmAm exact'
   5165                       endif
   5166 c
   5167                     else
   5168                       n_exact_AmAm = n_exact_AmAm + 1
   5169                       l_print = .false.
   5170                       if(l_print) then
   5171                         write(io8,*)
   5172                         write(io8,*) 'AMDAR-AMDAR exact dup--',ii,iim1
   5173                         write(io8,*) 'c_qc =..',c_qc(ii),'..',c_qc(iim1)
   5174                       endif
   5175                     endif
   5176 c
   5177                   elseif(l_ii_airep.and.l_iim1_airep) then
   5178                     n_exact_ArAr = n_exact_ArAr + 1
   5179                     l_print = .false.
   5180                     if(l_print) then
   5181                       write(io8,*)
   5182                       write(io8,*) 'AIREP-AIREP exact dup found--'
   5183      $,                             ii
   5184                     endif
   5185 c
   5186                   elseif(l_ii_man.and.l_iim1_man) then
   5187                     n_exact_MaMa = n_exact_MaMa + 1
   5188                     l_print = .false.
   5189                     if(l_print) then
   5190                       write(io8,*)
   5191                       write(io8,*) 'manAIREP-manAIREP exact dup--'
   5192      $,                             ii
   5193                     endif
   5194 c
   5195                   else
   5196                     l_print = .true.
   5197                     if(l_print) then
   5198                       write(io8,*)
   5199                       write(io8,*) 'Uncategorized exact dup-3-',ii
   5200                     endif
   5201                   endif
   5202                 endif
   5203               endif

Page 109         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   5204             endif
   5205 c
   5206 c           Check if report is a near dup (qc flag = 'd')
   5207 c           Most near dups came in different formats with different units/precision
   5208 c           -----------------------------------------------------------------------
   5209 c
   5210 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
   5211 c           First exclude reports that are too far apart--set c_qc to '.'
   5212 c           -------------------------------------------------------------
   5213             if((abs(alat(iim1)-alat(ii)).lt.0.125.or.
   5214      $          ( (l_iim1_0lat.or.l_ii_0lat).and.
   5215      $            (c_acftid(ii).eq.c_acftid(iim1).or.
   5216      $             l_ii_man.or.l_iim1_man) )).and.
   5217      $         (abs(alon(iim1)-alon(ii)).lt.0.125.or.
   5218      $          ( (l_iim1_0lon.or.l_ii_0lon).and.
   5219      $            (c_acftid(ii).eq.c_acftid(iim1).or.
   5220      $             l_ii_man.or.l_iim1_man) ))) then
   5221 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
   5222 c
   5223 c             Time threshold changed to 90 sec to look for position reports (8/15/01)
   5224 c             -----------------------------------------------------------------------
   5225               if((idt_dif.ge.0.and.idt_dif.le.90).and.
   5226      $           c_qc(iim1)(1:1).ne.'D'.and.
   5227 c
   5228 c                 AMDAR-AIREP dups below 25,000'
   5229 c
   5230      $           ((ht_ft(ii).lt.25000..and.
   5231      $             ifix(ht_ft(iim1)).eq.-ifix(ht_ft(ii)).and.
   5232      $             ((( (l_ii_amdar.and.l_iim1_airep).or.
   5233      $                 (l_ii_airep.and.l_iim1_amdar) ).and.
   5234      $                  c_acftid(ii).eq.c_acftid(iim1) ).or.            ! new
   5235      $                l_ii_amdar.and.l_iim1_man.or.
   5236      $                l_ii_man.and.l_iim1_amdar ).or.
   5237 c
   5238 c                  high-res dups below 25,000'
   5239 c
   5240      $              abs(ht_ft(iim1)-ht_ft(ii)).lt.
   5241      $                  htdif_same/4.+0.5).or.
   5242 c
   5243 c                  MDCRS cross-type dups below 25,000'
   5244 c
   5245      $            (ht_ft(ii).lt.25000..and.
   5246      $             ((l_ii_mdcrs.and.(.not.l_iim1_mdcrs)).or.            ! new
   5247      $              (l_iim1_mdcrs.and.(.not.l_ii_mdcrs)).or.            ! new
   5248      $              (l_ii_mdcrs.and.                                    ! new on 6/5/01
   5249      $               (itype(ii  ).ne.i_mdcrs.and.                       !  "
   5250      $                itype(iim1).eq.i_mdcrs).and.                      !  "
   5251      $               c_acftid(ii).eq.c_acftid(iim1)).or.                !  "
   5252      $              (l_iim1_mdcrs.and.                                  !  "
   5253      $               (itype(iim1).ne.i_mdcrs.and.                       !  "
   5254      $                itype(ii  ).eq.i_mdcrs).and.                      !  "
   5255      $                c_acftid(ii).eq.c_acftid(iim1)).or.               !  "
   5256      $              (l_ii_acars.and.(.not.l_iim1_acars)).or.            ! new
   5257      $              (l_iim1_acars.and.(.not.l_ii_acars)).or.            ! new
   5258      $              (l_ii_man.and.(.not.l_iim1_man)).or.                ! new
   5259      $              (l_iim1_man.and.(.not.l_ii_man)).or.                ! new
   5260      $              (((l_ii_amdar.and.l_iim1_amdar).or.                 ! new

Page 110         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   5261      $                (l_ii_airep.and.l_iim1_amdar).or.                 ! new
   5262      $                (l_iim1_airep.and.l_ii_amdar)).and.               ! new
   5263      $               c_acftid(ii).eq.c_acftid(iim1))).and.              ! new
   5264      $             abs(ht_ft(iim1)-ht_ft(ii)).lt.htdif_same+0.5).or.
   5265 c
   5266 c                  dups above 25,000'
   5267 c
   5268      $            (ht_ft(ii).gt.24999.5.and.
   5269      $             abs(ht_ft(iim1)-ht_ft(ii)).lt.htdif_same+0.5)).and.
   5270 c
   5271 c                 other criteria
   5272 c
   5273      $           (abs(ob_t(iim1)-ob_t(ii)).lt.1.25.or.
   5274      $            (ob_t(iim1).eq.amiss.and.ob_t(ii).ne.amiss).or.
   5275      $            (ob_t(iim1).ne.amiss.and.ob_t(ii).eq.amiss)).and.
   5276 c
   5277      $           (abs(difdir).lt.10.5.or.
   5278      $            (ob_dir(iim1).eq.amiss.and.ob_dir(ii).eq.amiss).or.
   5279      $            (ob_dir(iim1).eq.amiss.and.ob_dir(ii).ne.amiss).or.
   5280      $            (ob_dir(iim1).ne.amiss.and.ob_dir(ii).eq.amiss).or.
   5281      $            (ob_spd(iim1).eq.amiss.and.ob_spd(ii).ne.amiss).or.
   5282      $            (ob_spd(iim1).ne.amiss.and.ob_spd(ii).eq.amiss).or.
   5283      $            (ob_dir(iim1).lt.0.5.and.ob_dir(ii).lt.0.5).or.
   5284      $            (ob_dir(iim1).lt.0.5.and.difdir.gt.10.5).or.
   5285      $            (difdir.gt.10.5.and.ob_dir(ii).lt.0.5)).and.
   5286 c
   5287      $           (abs(ob_spd(iim1)-ob_spd(ii)).lt.1.25.or.
   5288      $            (ob_spd(iim1).eq.amiss.and.ob_spd(ii).eq.amiss).or.
   5289      $            (ob_spd(iim1).eq.amiss.and.ob_spd(ii).ne.amiss).or.
   5290      $            (ob_spd(iim1).ne.amiss.and.ob_spd(ii).eq.amiss).or.
   5291      $            (ob_dir(iim1).eq.amiss.and.ob_dir(ii).eq.amiss).or.
   5292      $            (ob_dir(iim1).eq.amiss.and.ob_dir(ii).ne.amiss).or.
   5293      $            (ob_dir(iim1).ne.amiss.and.ob_dir(ii).eq.amiss).or.
   5294      $            (ob_spd(iim1).lt.0.05.and.ob_spd(ii).lt.0.05).or.
   5295      $            (ob_spd(iim1).lt.0.05.and.ob_spd(ii).gt.1.25).or.
   5296      $            (ob_spd(iim1).gt.1.25.and.ob_spd(ii).lt.0.05))) then
   5297 c
   5298 c               Count duplicates where one has neg and the other pos altitude
   5299 c               -------------------------------------------------------------
   5300                 if(abs(abs(ht_ft(iim1))-abs(ht_ft(ii))).lt.0.5.and.
   5301      $             abs(ht_ft(iim1)-ht_ft(ii)).gt.0.5) then
   5302                   n_near_negpos = n_near_negpos + 1
   5303 c
   5304                   l_print = .false.
   5305                   if(l_print) then
   5306                     write(io8,*)
   5307                     write(io8,*) 'Neg-pos altitude dup found'
   5308                   endif
   5309                 endif
   5310 c
   5311 c               If near dup found, decide which report to keep
   5312 ccccdak                 Choose MDCRS over ACARS
   5313 c                 Choose MDCRS over TAMDAR
   5314 c                 Choose reports with flight phase over no reported flight phase
   5315 ccccdak                 Choose ACARS/MDCRS over AIREP/manual AIREP
   5316 c                 Choose TAMDAR or MDCRS over AIREP/manual AIREP
   5317 c                 Choose AMDAR over AIREP/manual AIREP

Page 111         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   5318 c                 Choose automated over manual AIREP
   5319 c                 Choose 7-char flight number over 6-char flight number
   5320 c                 Choose present over missing flight/tail number
   5321 c                 Choose present over missing/zero wind speed or direction
   5322 c                 Choose non-zero over zero lat or lon
   5323 c               ----------------------------------------------------------------
   5324 c
   5325 c               Keep ob ii
   5326 c               ----------
   5327                 if( ( ( ((l_ii_mdcrs.and.l_iim1_acars).or.
   5328      $                   (l_ii_mdcrs.and.l_iim1_mdcrs.and.
   5329      $                    .not.(itype(ii).eq.i_mdcrs.and.
   5330      $                          itype(iim1).ne.i_mdcrs)).or.
   5331      $                   (l_ii_acars.and.l_iim1_acars).or.
   5332      $                   (l_ii_amdar.and.l_iim1_amdar).or.              ! new
   5333      $                   (l_ii_amdar.and.l_iim1_airep)).and.            ! new
   5334      $                  c_acftreg(ii).eq.c_acftreg(iim1) ).and.
   5335 c
   5336 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
   5337      $                 ((abs(alat(iim1)-alat(ii)).lt.0.025.and.
   5338      $                   abs(alon(iim1)-alon(ii)).lt.0.025.and.
   5339 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
   5340      $                   abs(ob_t(iim1)-ob_t(ii)).lt.0.65.and.
   5341      $                   ((abs(difdir).lt.5.5).or.
   5342      $                    (ob_dir(ii).eq.amiss.and.
   5343      $                     ob_dir(iim1).eq.amiss).or.
   5344      $                    (ob_dir(ii).ne.amiss.and.
   5345      $                     ob_dir(iim1).eq.amiss).or.
   5346      $                    (ob_spd(ii).ne.amiss.and.
   5347      $                     ob_spd(iim1).eq.amiss).or.
   5348      $                    (ob_dir(ii).gt.10.5.and.
   5349      $                     ob_dir(iim1).lt.0.5)).and.
   5350      $                   ((abs(ob_spd(iim1)-ob_spd(ii)).lt.0.55).or.
   5351      $                    (ob_spd(ii).eq.amiss.and.
   5352      $                     ob_spd(iim1).eq.amiss).or.
   5353      $                    (ob_spd(ii).ne.amiss.and.
   5354      $                     ob_spd(iim1).eq.amiss).or.
   5355      $                    (ob_dir(ii).eq.amiss.and.
   5356      $                     ob_dir(iim1).eq.amiss).or.
   5357      $                    (ob_dir(ii).ne.amiss.and.
   5358      $                     ob_dir(iim1).eq.amiss).or.
   5359      $                    (ob_spd(ii).gt.1.25.and.
   5360      $                     ob_spd(iim1).lt.0.05)) ).or.
   5361 c
   5362 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
   5363      $                  (abs(alat(iim1)-alat(ii)).lt.0.055.and.
   5364      $                   abs(alon(iim1)-alon(ii)).lt.0.055.and.
   5365 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
   5366      $                   abs(ht_ft(iim1)-ht_ft(ii)).lt.15.5.and.
   5367      $                   idt_dif.le.30.and.
   5368      $                   abs(ob_t(iim1)-ob_t(ii)).lt.1.25.and.
   5369      $                   ((abs(difdir).lt.10.5).or.
   5370      $                    (ob_dir(ii).eq.amiss.and.
   5371      $                     ob_dir(iim1).eq.amiss).or.
   5372      $                    (ob_dir(ii).ne.amiss.and.
   5373      $                     ob_dir(iim1).eq.amiss).or.
   5374      $                    (ob_spd(ii).ne.amiss.and.

Page 112         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   5375      $                     ob_spd(iim1).eq.amiss).or.
   5376      $                    (ob_dir(ii).gt.10.5.and.
   5377      $                     ob_dir(iim1).lt.0.5)).and.
   5378      $                   ((abs(ob_spd(iim1)-ob_spd(ii)).lt.1.25).or.
   5379      $                    (ob_spd(ii).eq.amiss.and.
   5380      $                     ob_spd(iim1).eq.amiss).or.
   5381      $                    (ob_spd(ii).ne.amiss.and.
   5382      $                     ob_spd(iim1).eq.amiss).or.
   5383      $                    (ob_dir(ii).eq.amiss.and.
   5384      $                     ob_dir(iim1).eq.amiss).or.
   5385      $                    (ob_dir(ii).ne.amiss.and.
   5386      $                     ob_dir(iim1).eq.amiss).or.
   5387      $                    (ob_spd(ii).gt.1.25.and.
   5388      $                     ob_spd(iim1).lt.0.05)) ))).or.
   5389 c
   5390      $             (l_ii_airep.and.l_iim1_man).or.
   5391 c
   5392      $             (l_ii_acars.and.l_iim1_airep).or.
   5393      $             (l_ii_mdcrs.and.l_iim1_airep).or. 
   5394 c
   5395      $             (l_ii_acars.and.l_iim1_man).or.
   5396      $             (l_ii_mdcrs.and.l_iim1_man).or.
   5397 c
   5398      $             (l_ii_amdar.and.l_iim1_man).or.
   5399 c
   5400      $             ((itype(ii).eq.i_mdcrs_lvl.or.
   5401      $               itype(ii).eq.i_mdcrs_asc.or.
   5402      $               itype(ii).eq.i_mdcrs_des).and.
   5403      $              itype(iim1).eq.i_mdcrs).or.
   5404 c
   5405      $             l_iim1_sh.or.
   5406 c
   5407 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
   5408      $             (l_iim1_0lat.and.abs(alat(ii)).gt.0.125).or.
   5409 c
   5410      $             (l_iim1_0lon.and.
   5411      $              (alon(ii).gt.0.125.and.alon(ii).lt.359.875)).or.
   5412 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
   5413 c
   5414      $             (ob_t(ii).ne.amiss.and.ob_t(iim1).eq.amiss).or.
   5415 c
   5416      $             (.not.(l_ii_mdcrs.and.l_iim1_acars).and.
   5417      $              .not.(l_ii_mdcrs.and.l_iim1_mdcrs).and.
   5418      $              .not.(l_ii_acars.and.l_iim1_acars).and.
   5419      $            ((ob_spd(ii).ne.amiss.and.ob_spd(iim1).eq.amiss).or.
   5420      $             (ob_dir(ii).ne.amiss.and.ob_dir(iim1).eq.amiss).or.
   5421      $             (((ob_spd(ii).gt.1.25.and.ob_spd(iim1).lt.0.05).or.
   5422      $                (difdir.gt.10.5.and.ob_dir(iim1).lt.0.5)).and.
   5423      $               c_acftid(ii).eq.c_acftid(iim1)))) ) then
   5424 c
   5425                   if(c_qc(iim1)(1:1).eq.'-'.or.
   5426      $               c_qc(iim1)(1:1).eq.'.'.or.
   5427      $               c_qc(iim1)(1:1).eq.'N') 
   5428      $               c_qc(iim1)(1:1) = 'd'
   5429 c
   5430                   if(c_qc(ii)(1:1).eq.'-') c_qc(ii)(1:1) = '.'
   5431 c

Page 113         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   5432 c                 Count rejects by category
   5433 c                 -------------------------
   5434                   n_near = n_near + 1
   5435 c
   5436                   if(l_iim1_sh) then
   5437                     n_near_sh = n_near_sh + 1
   5438                     l_print = .true.
   5439                     if(l_print) then
   5440                       write(io8,*)
   5441                       write(io8,*) 'Near dup found with short id--'
   5442      $,                             ii
   5443                     endif
   5444                     if(l_iim1_man.and.l_ii_man) then
   5445                       n_nr_sh_MaMa = n_nr_sh_MaMa + 1
   5446                       if(l_print) 
   5447      $                  write(io8,*) 'manAIREP-manAIREP dup'
   5448                     elseif(l_iim1_man.and.l_ii_airep) then 
   5449                       n_nr_sh_MaAr = n_nr_sh_MaAr + 1
   5450                       if(l_print) write(io8,*) 'manAIREP-AIREP dup'
   5451                     elseif(l_iim1_man.and.l_ii_mdcrs) then 
   5452                       n_nr_sh_MaMd = n_nr_sh_MaMd + 1
   5453                       if(l_print) write(io8,*) 'manAIREP-MDCRS dup'
   5454                     elseif(l_iim1_man.and.l_ii_acars) then 
   5455                       n_nr_sh_MaAc = n_nr_sh_MaAc + 1
   5456 ccccdak                      if(l_print) write(io8,*) 'manAIREP-ACARS dup'
   5457                       if(l_print) write(io8,*) 'manAIREP-TAMDAR dup'
   5458                     elseif(l_ii_man.and.l_iim1_airep) then 
   5459                       n_nr_sh_ArMa = n_nr_sh_ArMa + 1
   5460                       if(l_print) write(io8,*) 'AIREP-manAIREP dup'
   5461                     elseif(l_iim1_airep.and.l_ii_airep) then 
   5462                       n_nr_sh_ArAr = n_nr_sh_ArAr + 1
   5463                       if(l_print) write(io8,*) 'AIREP-AIREP dup'
   5464                     else
   5465                       l_print = .true.
   5466                       if(l_print) then
   5467                         write(io8,*)
   5468                         write(io8,*) 'Uncategorized short-id dup'
   5469                       endif
   5470                     endif
   5471 c
   5472 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
   5473                   elseif(((l_iim1_0lat.and.
   5474      $                     abs(alat(ii)).gt.0.125).or.
   5475      $                    (l_iim1_0lon.and.
   5476      $                     (alon(ii).gt.0.125.and.
   5477      $                      alon(ii).lt.359.875))).and.
   5478 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
   5479      $                   (c_acftid(ii).eq.c_acftid(iim1).or.
   5480      $                    l_ii_man.or.l_iim1_man)) then
   5481                     n_near_0ll = n_near_0ll + 1
   5482                     l_print = .false.
   5483                     if(l_print) then
   5484                       write(io8,*)
   5485                       write(io8,*) 'Near dup found with 0l/l--',ii
   5486                     endif
   5487                     if(l_iim1_acars.and.l_ii_acars) then
   5488                       n_nr_0ll_AcAc = n_nr_0ll_AcAc + 1

Page 114         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   5489 ccccdak                      if(l_print) write(io8,*) 'ACARS-ACARS dup'
   5490                       if(l_print) write(io8,*) 'TAMDAR-TAMDAR dup'
   5491                     elseif(l_iim1_mdcrs.and.l_ii_mdcrs) then
   5492                       n_nr_0ll_MdMd = n_nr_0ll_MdMd + 1
   5493                       if(l_print) write(io8,*) 'MDCRS-MDCRS dup'
   5494                     elseif(l_iim1_man.and.l_ii_airep) then
   5495                       n_nr_0ll_MaAr = n_nr_0ll_MaAr + 1
   5496                       if(l_print) write(io8,*) 'manAIREP-AIREP dup'
   5497                     elseif(l_iim1_amdar.and.l_ii_airep) then
   5498                       n_nr_0ll_AmAr = n_nr_0ll_AmAr + 1
   5499                       if(l_print) write(io8,*) 'AMDAR-AIREP dup'
   5500                     elseif(l_iim1_man.and.l_ii_man) then
   5501                       n_nr_0ll_MaMa = n_nr_0ll_MaMa + 1
   5502                       if(l_print) write(io8,*) 'manAIREP-manAIREP dup'
   5503                     elseif(l_iim1_man.and.l_ii_mdcrs) then
   5504                       n_nr_0ll_MaMd = n_nr_0ll_MaMd + 1
   5505                       if(l_print) write(io8,*) 'manAIREP-MDCRS dup'
   5506                     elseif(l_iim1_mdcrs.and.l_ii_man) then
   5507                       n_nr_0ll_MdMa = n_nr_0ll_MdMa + 1
   5508                       if(l_print) write(io8,*) 'MDCRS-manAIREP dup'
   5509                     elseif(l_iim1_man.and.l_ii_amdar) then
   5510                       n_nr_0ll_MaAm = n_nr_0ll_MaAm + 1
   5511                       if(l_print) write(io8,*) 'manAIREP-AMDAR dup'
   5512                     elseif(l_iim1_amdar.and.l_ii_man) then
   5513                       n_nr_0ll_AmMa = n_nr_0ll_AmMa + 1
   5514                       if(l_print) write(io8,*) 'AMDAR-manAIREP dup'
   5515                     else
   5516                       l_print = .true.
   5517                       if(l_print) then
   5518                         write(io8,*)
   5519                         write(io8,*) 'Uncategorized near 0l/l dup'
   5520                       endif
   5521                     endif
   5522 c
   5523                   elseif(ob_t(ii).ne.amiss.and.
   5524      $                   ob_t(iim1).eq.amiss) then
   5525                     n_near_mst = n_near_mst + 1
   5526                     l_print = .false.
   5527                     if(l_print) then
   5528                       write(io8,*)
   5529                       write(io8,*) 'Near dup found with msg temp--'
   5530      $,                             ii
   5531                     endif
   5532                     if(l_iim1_man.and.l_ii_man) then
   5533                       n_nr_mst_MaMa = n_nr_mst_MaMa + 1
   5534                       if(l_print) 
   5535      $                  write(io8,*) 'manAIREP-manAIREP dup'
   5536                     elseif(l_iim1_man.and.l_ii_airep) then
   5537                       n_nr_mst_MaAr = n_nr_mst_MaAr + 1
   5538                       if(l_print) write(io8,*) 'manAIREP-AIREP dup'
   5539                     elseif(l_iim1_man.and.l_ii_amdar) then
   5540                       n_nr_mst_MaAm = n_nr_mst_MaAm + 1
   5541                       if(l_print) write(io8,*) 'manAIREP-AMDAR dup'
   5542                     elseif(l_iim1_airep.and.l_ii_acars) then
   5543                       n_nr_mst_ArAc = n_nr_mst_ArAc + 1
   5544 ccccdak                      if(l_print) write(io8,*) 'AIREP-ACARS dup'
   5545                       if(l_print) write(io8,*) 'AIREP-TAMDAR dup'

Page 115         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   5546                     elseif(l_iim1_airep.and.l_ii_mdcrs) then
   5547                       n_nr_mst_ArMd = n_nr_mst_ArMd + 1
   5548                       if(l_print) write(io8,*) 'AIREP-MDCRS dup'
   5549                     elseif(l_iim1_man.and.l_ii_acars) then
   5550                       n_nr_mst_MaAc = n_nr_mst_MaAc + 1
   5551 ccccdak                      if(l_print) write(io8,*) 'manAIREP-ACARS dup'
   5552                       if(l_print) write(io8,*) 'manAIREP-TAMDAR dup'
   5553                     elseif(l_iim1_man.and.l_ii_mdcrs) then
   5554                       n_nr_mst_MaMd = n_nr_mst_MaMd + 1
   5555                       if(l_print) write(io8,*) 'manAIREP-MDCRS dup'
   5556                     elseif(l_iim1_mdcrs.and.l_ii_mdcrs) then
   5557                       n_nr_mst_MdMd = n_nr_mst_MdMd + 1
   5558                       if(l_print) write(io8,*) 'MDCRS-MDCRS dup'
   5559                     elseif(l_iim1_airep.and.l_ii_man) then
   5560                       n_nr_mst_ArMa = n_nr_mst_ArMa + 1
   5561                       if(l_print) write(io8,*) 'AIREP-manAIREP dup'
   5562                     elseif(l_iim1_amdar.and.l_ii_amdar) then
   5563                       n_nr_mst_AmAm = n_nr_mst_AmAm + 1
   5564                       if(l_print) write(io8,*) 'AMDAR-AMDAR dup'
   5565                     elseif(l_iim1_airep.and.l_ii_airep) then
   5566                       n_nr_mst_ArAr = n_nr_mst_ArAr + 1
   5567                       if(l_print) write(io8,*) 'AIREP-AIREP dup'
   5568                     elseif(l_iim1_airep.and.l_ii_amdar) then
   5569                       n_nr_mst_ArAm = n_nr_mst_ArAm + 1
   5570                       if(l_print) write(io8,*) 'AIREP-AMDAR dup'
   5571                     elseif(l_iim1_amdar.and.l_ii_airep) then
   5572                       n_nr_mst_AmAr = n_nr_mst_AmAr + 1
   5573                       if(l_print) write(io8,*) 'AMDAR-AIREP dup'
   5574                     else
   5575                       l_print = .true.
   5576                       if(l_print) then
   5577                         write(io8,*)
   5578                         write(io8,*) 'Uncategorized msg-temp dup'
   5579                       endif
   5580                     endif
   5581 c
   5582                   elseif((ob_spd(ii).ne.amiss.and.
   5583      $                    ob_spd(iim1).eq.amiss).or.
   5584      $                   (ob_dir(ii).ne.amiss.and.
   5585      $                    ob_dir(iim1).eq.amiss)) then
   5586                     n_near_ws = n_near_ws + 1
   5587                     l_print = .false.
   5588                     if(c_acftid(ii)(1:2).eq.'IT') then 
   5589                       n_near_ws_IT = n_near_ws_IT + 1
   5590                       l_print = .false.
   5591                     elseif(c_acftid(ii)(1:2).eq.'EU') then 
   5592                       n_near_ws_EU = n_near_ws_EU + 1
   5593                       l_print = .false.
   5594                     endif
   5595                     if(l_print) then
   5596                       write(io8,*)
   5597                       write(io8,*) 'Near dup with msg winds--',ii
   5598                     endif
   5599                     if(l_iim1_man.and.l_ii_man) then
   5600                       n_nr_mswn_MaMa = n_nr_mswn_MaMa + 1
   5601                       if(l_print) 
   5602      $                  write(io8,*) 'manAIREP-manAIREP dup'

Page 116         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   5603                     elseif(l_iim1_man.and.l_ii_airep) then 
   5604                       n_nr_mswn_MaAr = n_nr_mswn_MaAr + 1
   5605                       if(l_print) write(io8,*) 'manAIREP-AIREP dup'
   5606                     elseif(l_iim1_man.and.l_ii_amdar) then 
   5607                       n_nr_mswn_MaAm = n_nr_mswn_MaAm + 1
   5608                       if(l_print) write(io8,*) 'manAIREP-AMDAR dup'
   5609                     elseif(l_ii_man.and.l_iim1_airep) then 
   5610                       n_nr_mswn_ArMa = n_nr_mswn_ArMa + 1
   5611                       if(l_print) write(io8,*) 'AIREP-manAIREP dup'
   5612                     elseif(l_iim1_airep.and.l_ii_airep) then 
   5613                       n_nr_mswn_ArAr = n_nr_mswn_ArAr + 1
   5614                       if(l_print) write(io8,*) 'AIREP-AIREP dup'
   5615                     elseif(l_iim1_acars.and.l_ii_acars) then
   5616                       n_nr_mswn_AcAc = n_nr_mswn_AcAc + 1
   5617 ccccdak                      if(l_print) write(io8,*) 'ACARS-ACARS dup'
   5618                       if(l_print) write(io8,*) 'TAMDAR-TAMDAR dup'
   5619                     elseif(l_iim1_mdcrs.and.l_ii_mdcrs) then
   5620                       n_nr_mswn_MdMd = n_nr_mswn_MdMd + 1
   5621                       if(l_print) write(io8,*) 'MDCRS-MDCRS dup'
   5622                     elseif(l_iim1_acars.and.l_ii_mdcrs) then
   5623                       n_nr_mswn_AcMd = n_nr_mswn_AcMd + 1
   5624 ccccdak                      if(l_print) write(io8,*) 'ACARS-MDCRS dup'
   5625                       if(l_print) write(io8,*) 'TAMDAR-MDCRS dup'
   5626                     elseif(l_iim1_mdcrs.and.l_ii_acars) then
   5627                       n_nr_mswn_MdAc = n_nr_mswn_MdAc + 1
   5628 ccccdak                      if(l_print) write(io8,*) 'MDCRS-ACARS dup'
   5629                       if(l_print) write(io8,*) 'MDCRS-TAMDAR dup'
   5630                     elseif(l_iim1_mdcrs.and.l_ii_amdar) then
   5631                       n_nr_mswn_MdAm = n_nr_mswn_MdAm + 1
   5632                       if(l_print) write(io8,*) 'MDCRS-AMDAR dup'
   5633                     elseif(l_iim1_mdcrs.and.l_ii_airep) then
   5634                       n_nr_mswn_MdAr = n_nr_mswn_MdAr + 1
   5635                       if(l_print) write(io8,*) 'MDCRS-AIREP dup'
   5636                     elseif(l_iim1_mdcrs.and.l_ii_man) then
   5637                       n_nr_mswn_MdMa = n_nr_mswn_MdMa + 1
   5638                       if(l_print) write(io8,*) 'MDCRS-manAIREP dup'
   5639                     elseif(l_iim1_airep.and.l_ii_acars) then
   5640                       n_nr_mswn_ArAc = n_nr_mswn_ArAc + 1
   5641 ccccdak                      if(l_print) write(io8,*) 'AIREP-ACARS dup'
   5642                       if(l_print) write(io8,*) 'AIREP-TAMDAR dup'
   5643                     elseif(l_iim1_airep.and.l_ii_mdcrs) then
   5644                       n_nr_mswn_ArMd = n_nr_mswn_ArMd + 1
   5645                       if(l_print) write(io8,*) 'AIREP-MDCRS dup'
   5646                     elseif(l_iim1_man.and.l_ii_acars) then
   5647                       n_nr_mswn_MaAc = n_nr_mswn_MaAc + 1
   5648 ccccdak                      if(l_print) write(io8,*) 'manAIREP-ACARS dup'
   5649                       if(l_print) write(io8,*) 'manAIREP-TAMDAR dup'
   5650                     elseif(l_iim1_man.and.l_ii_mdcrs) then
   5651                       n_nr_mswn_MaMd = n_nr_mswn_MaMd + 1
   5652                       if(l_print) write(io8,*) 'manAIREP-MDCRS dup'
   5653                     elseif(l_iim1_amdar.and.l_ii_amdar) then
   5654                       n_nr_mswn_AmAm = n_nr_mswn_AmAm + 1
   5655                       if(l_print) write(io8,*) 'AMDAR-AMDAR dup'
   5656                     elseif(l_iim1_airep.and.l_ii_amdar) then
   5657                       n_nr_mswn_ArAm = n_nr_mswn_ArAm + 1
   5658                       if(l_print) write(io8,*) 'AIREP-AMDAR dup'
   5659                     elseif(l_iim1_amdar.and.l_ii_airep) then

Page 117         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   5660                       n_nr_mswn_AmAr = n_nr_mswn_AmAr + 1
   5661                       if(l_print) write(io8,*) 'AMDAR-AIREP dup'
   5662                     elseif(l_iim1_acars.and.l_ii_amdar) then
   5663                       n_nr_mswn_AcAm = n_nr_mswn_AcAm + 1
   5664 ccccdak                      if(l_print) write(io8,*) 'ACARS-AMDAR dup'
   5665                       if(l_print) write(io8,*) 'TAMDAR-AMDAR dup'
   5666                     else
   5667                       l_print = .true.
   5668                       if(l_print) then
   5669                         write(io8,*)
   5670                         write(io8,*) 'Uncategorized msg-wind dup'
   5671                       endif
   5672                     endif
   5673 c
   5674                   elseif((ob_spd(ii).gt.1.25.and.
   5675      $                    ob_spd(iim1).lt.0.05).or.
   5676      $                   (ob_dir(ii).gt.10.5.and.
   5677      $                    difdir.gt.10.5.and.
   5678      $                    ob_dir(iim1).lt.0.5)) then
   5679                     n_near_0ws = n_near_0ws + 1
   5680                     l_print = .false.
   5681                     if(l_print) then
   5682                       write(io8,*)
   5683                       write(io8,*) 'Near dup found with 0 winds-1-'
   5684      $,                             ii
   5685                     endif
   5686                     if(l_iim1_airep.and.l_ii_amdar) then
   5687                       n_near_0ws_ArAm = n_near_0ws_ArAm + 1
   5688                       if(l_print) write(io8,*) 'AIREP-AMDAR dup'
   5689                     elseif(l_iim1_amdar.and.l_ii_airep) then
   5690                       n_near_0ws_AmAr = n_near_0ws_AmAr + 1
   5691                       if(l_print) write(io8,*) 'AMDAR-AIREP dup'
   5692                     elseif(l_iim1_amdar.and.l_ii_amdar) then
   5693                       n_near_0ws_AmAm = n_near_0ws_AmAm + 1
   5694                       if(l_print) write(io8,*) 'AMDAR-AMDAR dup'
   5695                     elseif(l_iim1_airep.and.l_ii_airep) then
   5696                       n_near_0ws_ArAr = n_near_0ws_ArAr + 1
   5697                       if(l_print) write(io8,*) 'AIREP-AIREP dup'
   5698                     elseif(l_iim1_man.and.l_ii_man) then
   5699                       n_near_0ws_MaMa = n_near_0ws_MaMa + 1
   5700                       if(l_print) 
   5701      $                  write(io8,*) 'manAIREP-manAIREP dup'
   5702                     elseif(l_iim1_man.and.l_ii_mdcrs) then
   5703                       n_near_0ws_MaMd = n_near_0ws_MaMd + 1
   5704                       if(l_print) 
   5705      $                  write(io8,*) 'manAIREP-MDCRS dup'
   5706                     elseif(l_iim1_man.and.l_ii_amdar) then
   5707                       n_near_0ws_MaAm = n_near_0ws_MaAm + 1
   5708                       if(l_print) 
   5709      $                  write(io8,*) 'manAIREP-AMDAR dup'
   5710                     elseif(l_iim1_man.and.l_ii_airep) then
   5711                       n_near_0ws_MaAr = n_near_0ws_MaAr + 1
   5712                       if(l_print) 
   5713      $                  write(io8,*) 'manAIREP-AIREP dup'
   5714                     elseif(l_iim1_airep.and.l_ii_mdcrs) then
   5715                       n_near_0ws_ArMd = n_near_0ws_ArMd + 1
   5716                       if(l_print) 

Page 118         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   5717      $                  write(io8,*) 'AIREP-MDCRS dup'
   5718                     elseif(l_iim1_mdcrs.and.l_ii_mdcrs) then
   5719                       n_near_0ws_MdMd = n_near_0ws_MdMd + 1
   5720                       if(l_print) 
   5721      $                  write(io8,*) 'MDCRS-MDCRS dup'
   5722                     else
   5723                       l_print = .true.
   5724                       if(l_print) then
   5725                         write(io8,*)
   5726                         write(io8,*)'Uncategorized zero-wind dup'
   5727                         write(io8,*) '  dir difference = ',difdir
   5728                       endif
   5729                     endif
   5730 c
   5731                   elseif(l_ii_mdcrs.and.l_iim1_acars) then
   5732                     n_near_MdAc = n_near_MdAc + 1
   5733                     l_print = .false.
   5734                     if(l_print) then
   5735                       write(io8,*)
   5736 ccccdak                      write(io8,*) 'MDCRS-ACARS near dup found--',ii
   5737                       write(io8,*) 'MDCRS-TAMDAR near dup found--',ii
   5738                     endif
   5739 c
   5740                   elseif(l_ii_mdcrs.and.l_iim1_mdcrs) then
   5741                     if(itype(iim1).eq.i_mdcrs.and.
   5742      $                 itype(ii  ).ne.i_mdcrs) then
   5743                       n_nr_posrep = n_nr_posrep + 1
   5744                       l_print = .false.
   5745                       if(l_print) then
   5746                         write(io8,*)
   5747                         write(io8,*) 'MDCRS position report dup-1-',ii
   5748                       endif
   5749 c
   5750                     elseif(ichk_s(ii  ).eq.-10.and.
   5751      $                     ichk_s(iim1).ne.-10) then
   5752                       n_nr_bad_roll_Md = n_nr_bad_roll_Md + 1
   5753                       l_print = .false.                                  !!!!
   5754                       if(l_print) then
   5755                         write(io8,*)
   5756                         write(io8,*) 'Bad roll qc ii--MdMd near'
   5757                       endif
   5758                       ichk_t(ii) = ichk_t(iim1)
   5759                       ichk_q(ii) = ichk_q(iim1)
   5760                       ichk_d(ii) = ichk_d(iim1)
   5761                       ichk_s(ii) = ichk_s(iim1)
   5762 c
   5763                     elseif(ichk_s(iim1).eq.-10.and.
   5764      $                     ichk_s(ii  ).ne.-10) then
   5765                       n_nr_bad_roll_Md = n_nr_bad_roll_Md + 1
   5766                       l_print = .false.                                  !!!!
   5767                       if(l_print) then
   5768                         write(io8,*)
   5769                         write(io8,*) 'Bad roll qc iim1--MdMd near'
   5770                       endif
   5771 c
   5772                     else
   5773                       n_near_MdMd = n_near_MdMd + 1

Page 119         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   5774                       l_print = .false.
   5775                       if(l_print) then
   5776                         write(io8,*)
   5777                         write(io8,*) 'MDCRS-MDCRS near dup found--',ii
   5778                       endif
   5779                     endif
   5780 c
   5781                   elseif(l_ii_acars.and.l_iim1_acars) then
   5782                     n_near_AcAc = n_near_AcAc + 1
   5783                     l_print = .false.
   5784                     if(l_print) then
   5785                       write(io8,*)
   5786 ccccdak                      write(io8,*) 'ACARS-ACARS near dup found--',ii
   5787                       write(io8,*) 'TAMDAR-TAMDAR near dup found--',ii
   5788                     endif
   5789 c
   5790                   elseif(l_ii_acars.and.l_iim1_airep) then
   5791                     n_near_AcAr = n_near_AcAr + 1
   5792                     l_print = .false.
   5793                     if(l_print) then
   5794                       write(io8,*)
   5795 ccccdak                      write(io8,*) 'ACARS-AIREP near dup found--',ii
   5796                       write(io8,*) 'TAMDAR-AIREP near dup found--',ii
   5797                     endif
   5798 c
   5799                   elseif(l_ii_mdcrs.and.l_iim1_airep) then
   5800                     n_near_MdAr = n_near_MdAr + 1
   5801                     l_print = .false.
   5802                     if(l_print) then
   5803                       write(io8,*)
   5804                       write(io8,*) 'MDCRS-AIREP near dup found--',ii
   5805                     endif
   5806 c
   5807                   elseif(l_ii_amdar.and.l_iim1_amdar) then
   5808                     if(ichk_s(ii  ).eq.-10.and.
   5809      $                 ichk_s(iim1).ne.-10) then
   5810                       n_nr_bad_roll_Am = n_nr_bad_roll_Am + 1
   5811                       l_print = .false.                                  !!!!
   5812                       if(l_print) then
   5813                         write(io8,*)
   5814                         write(io8,*) 'Bad roll qc ii--AmAm near'
   5815                       endif
   5816                       ichk_t(ii) = ichk_t(iim1)
   5817                       ichk_q(ii) = ichk_q(iim1)
   5818                       ichk_d(ii) = ichk_d(iim1)
   5819                       ichk_s(ii) = ichk_s(iim1)
   5820 c
   5821                     elseif(ichk_s(iim1).eq.-10.and.
   5822      $                     ichk_s(ii  ).ne.-10) then
   5823                       n_nr_bad_roll_Am = n_nr_bad_roll_Am + 1
   5824                       l_print = .false.                                  !!!!
   5825                       if(l_print) then
   5826                         write(io8,*)
   5827                         write(io8,*) 'Bad roll qc iim1--AmAm near'
   5828                       endif
   5829 c
   5830                     else

Page 120         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   5831                       n_near_AmAm = n_near_AmAm + 1
   5832                       l_print = .false.
   5833                       if(l_print) then
   5834                         write(io8,*)
   5835                         write(io8,*) 'AMDAR-AMDAR near dup found--',ii
   5836                       endif
   5837                     endif
   5838 c
   5839                   elseif(l_ii_amdar.and.l_iim1_airep) then
   5840                     n_near_AmAr = n_near_AmAr + 1
   5841                     l_print = .false.
   5842                     if(l_print) then
   5843                       write(io8,*)
   5844                       write(io8,*) 'AMDAR-AIREP near dup found--',ii
   5845                     endif
   5846 c
   5847                   elseif(l_ii_acars.and.l_iim1_man) then
   5848                     n_near_AcMa = n_near_AcMa + 1
   5849                     l_print = .false.
   5850                     if(l_print) then
   5851                       write(io8,*)
   5852 ccccdak                      write(io8,*) 'ACARS-manAIREP near dup--',ii
   5853                       write(io8,*) 'TAMDAR-manAIREP near dup--',ii
   5854                     endif
   5855 c
   5856                   elseif(l_ii_mdcrs.and.l_iim1_man) then
   5857                     n_near_MdMa = n_near_MdMa + 1
   5858                     l_print = .false.
   5859                     if(l_print) then
   5860                       write(io8,*)
   5861                       write(io8,*) 'MDCRS-manAIREP near dup--',ii
   5862                     endif
   5863 c
   5864                   elseif(l_ii_airep.and.l_iim1_man) then
   5865                     n_near_ArMa = n_near_ArMa + 1
   5866                     l_print = .false.
   5867                     if(l_print) then
   5868                       write(io8,*)
   5869                       write(io8,*) 'AIREP-manAIREP near dup--',ii
   5870                     endif
   5871 c
   5872                   elseif(l_ii_amdar.and.l_iim1_man) then
   5873                     n_near_AmMa = n_near_AmMa + 1
   5874                     l_print = .false.
   5875                     if(l_print) then
   5876                       write(io8,*)
   5877                       write(io8,*) 'AMDAR-manAIREP near dup--',ii
   5878                     endif
   5879 c
   5880                   else
   5881                     l_print = .true.
   5882                     if(l_print) then
   5883                       write(io8,*)
   5884                       write(io8,*) 'Uncategorized near dup-1-',ii,
   5885      $                             ' difdir = ',difdir
   5886                     endif
   5887                   endif

Page 121         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   5888 c
   5889 c               Keep ob iim1
   5890 c               ------------
   5891                 elseif( ( ( ((l_iim1_mdcrs.and.l_ii_acars).or.
   5892      $                       (itype(ii).eq.i_mdcrs.and.
   5893      $                        itype(iim1).ne.i_mdcrs).or.
   5894      $                       (l_iim1_amdar.and.l_ii_airep)).and.
   5895      $                      c_acftreg(ii).eq.c_acftreg(iim1)).and.
   5896 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
   5897 c
   5898      $                     ((abs(alat(iim1)-alat(ii)).lt.0.025.and.
   5899      $                       abs(alon(iim1)-alon(ii)).lt.0.025.and.
   5900 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
   5901      $                       abs(ob_t(iim1)-ob_t(ii)).lt.0.65.and.
   5902      $                       ((abs(difdir).lt.5.5).or.
   5903      $                        (ob_dir(ii).eq.amiss.and.
   5904      $                         ob_dir(iim1).eq.amiss).or.
   5905      $                        (ob_dir(ii).eq.amiss.and.
   5906      $                         ob_dir(iim1).ne.amiss).or.
   5907      $                        (ob_spd(ii).eq.amiss.and.
   5908      $                         ob_spd(iim1).ne.amiss).or.
   5909      $                        (ob_dir(iim1).gt.10.5.and.
   5910      $                         ob_dir(ii).lt.0.5)).and.
   5911      $                    ((abs(ob_spd(iim1)-ob_spd(ii)).lt.0.55 ).or.
   5912      $                        (ob_spd(ii).eq.amiss.and.
   5913      $                         ob_spd(iim1).eq.amiss).or.
   5914      $                        (ob_spd(ii).eq.amiss.and.
   5915      $                         ob_spd(iim1).ne.amiss).or.
   5916      $                        (ob_dir(ii).eq.amiss.and.
   5917      $                         ob_dir(iim1).eq.amiss).or.
   5918      $                        (ob_dir(ii).eq.amiss.and.
   5919      $                         ob_dir(iim1).ne.amiss).or.
   5920      $                        (ob_spd(iim1).gt.1.25.and.
   5921      $                         ob_spd(ii).lt.0.05)) ).or.
   5922 c
   5923 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
   5924      $                      (abs(alat(iim1)-alat(ii)).lt.0.055.and.
   5925      $                       abs(alon(iim1)-alon(ii)).lt.0.055.and.
   5926 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
   5927      $                       abs(ht_ft(iim1)-ht_ft(ii)).lt.15.5.and.
   5928      $                       idt_dif.le.30.and.
   5929      $                       abs(ob_t(iim1)-ob_t(ii)).lt.1.25.and.
   5930      $                       ((abs(difdir).lt.10.5).or.
   5931      $                        (ob_dir(ii).eq.amiss.and.
   5932      $                         ob_dir(iim1).eq.amiss).or.
   5933      $                        (ob_dir(ii).eq.amiss.and.
   5934      $                         ob_dir(iim1).ne.amiss).or.
   5935      $                        (ob_spd(ii).eq.amiss.and.
   5936      $                         ob_spd(iim1).ne.amiss).or.
   5937      $                        (ob_dir(iim1).gt.10.5.and.
   5938      $                         ob_dir(ii).lt.0.5)).and.
   5939      $                    ((abs(ob_spd(iim1)-ob_spd(ii)).lt.1.25 ).or.
   5940      $                        (ob_spd(ii).eq.amiss.and.
   5941      $                         ob_spd(iim1).eq.amiss).or.
   5942      $                        (ob_spd(ii).eq.amiss.and.
   5943      $                         ob_spd(iim1).ne.amiss).or.
   5944      $                        (ob_dir(ii).eq.amiss.and.

Page 122         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   5945      $                         ob_dir(iim1).ne.amiss).or.
   5946      $                        (ob_dir(ii).eq.amiss.and.
   5947      $                         ob_dir(iim1).eq.amiss).or.
   5948      $                        (ob_spd(iim1).gt.1.25.and.
   5949      $                         ob_spd(ii).lt.0.05)) ))).or.
   5950 c
   5951      $                 (l_iim1_airep.and.l_ii_man).or.
   5952 c
   5953      $                 (l_iim1_acars.and.l_ii_airep).or.
   5954      $                 (l_iim1_mdcrs.and.l_ii_airep).or. 
   5955 c
   5956      $                 (l_iim1_acars.and.l_ii_man).or.
   5957      $                 (l_iim1_mdcrs.and.l_ii_man).or.
   5958 c
   5959      $                 (l_iim1_amdar.and.l_ii_man).or.
   5960 c
   5961      $                 ((itype(iim1).eq.i_mdcrs_lvl.or.
   5962      $                   itype(iim1).eq.i_mdcrs_asc.or.
   5963      $                   itype(iim1).eq.i_mdcrs_des).and.
   5964      $                  itype(ii).eq.i_mdcrs).or.
   5965 c
   5966      $                 l_ii_sh.or.
   5967 c
   5968 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
   5969      $                 (l_ii_0lat.and.abs(alat(ii)).gt.0.125).or.
   5970 c
   5971      $                 (l_ii_0lon.and.
   5972      $                (alon(ii).gt.0.125.and.alon(ii).lt.359.875)).or.
   5973 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
   5974 c
   5975      $                 (ob_t(iim1).ne.amiss.and.ob_t(ii).eq.amiss).or.
   5976 c
   5977      $                 (.not.(l_ii_mdcrs.and.l_iim1_acars).and.
   5978      $                  .not.(l_ii_mdcrs.and.l_iim1_mdcrs).and.
   5979      $                  .not.(l_ii_acars.and.l_iim1_acars).and.
   5980      $                ((ob_spd(iim1).ne.amiss.and.
   5981      $                  ob_spd(ii).eq.amiss).or.
   5982      $                 (ob_dir(iim1).ne.amiss.and.
   5983      $                  ob_dir(ii).eq.amiss).or.
   5984      $                 (((ob_spd(iim1).gt.1.25.and.
   5985      $                    ob_spd(ii).lt.0.05).or.
   5986      $                  (difdir.gt.10.5.and.ob_dir(ii).lt.0.5)).and.
   5987      $                  (c_acftid(ii).eq.c_acftid(iim1)) )) )) then
   5988 c
   5989                   indx(knt1) = ii
   5990                   indx(knt0) = iim1
   5991                   isave = ii
   5992                   ii = iim1
   5993                   iim1 = isave
   5994 c
   5995                   if(c_qc(iim1)(1:1).eq.'-'.or.
   5996      $               c_qc(iim1)(1:1).eq.'.'.or.
   5997      $               c_qc(iim1)(1:1).eq.'N') 
   5998      $               c_qc(iim1)(1:1) = 'd'
   5999 c
   6000                   if(c_qc(ii)(1:1).eq.'-') c_qc(ii)(1:1) = '.'
   6001 c

Page 123         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   6002 c                 Count rejects by category
   6003 c                 -------------------------
   6004                   n_near = n_near + 1
   6005 c
   6006                   if(l_ii_sh) then
   6007                     n_near_sh = n_near_sh + 1
   6008                     l_print = .true.
   6009                     if(l_print) then
   6010                       write(io8,*)
   6011                       write(io8,*) 'Near dup found with short id--'
   6012      $,                             ii
   6013                     endif
   6014                     if(l_ii_man.and.l_iim1_man) then
   6015                       n_nr_sh_MaMa = n_nr_sh_MaMa + 1
   6016                       if(l_print) 
   6017      $                  write(io8,*) 'manAIREP-manAIREP dup'
   6018                     elseif(l_ii_man.and.l_iim1_airep) then 
   6019                       n_nr_sh_MaAr = n_nr_sh_MaAr + 1
   6020                       if(l_print) write(io8,*) 'manAIREP-AIREP dup'
   6021                     elseif(l_ii_man.and.l_iim1_mdcrs) then 
   6022                       n_nr_sh_MaMd = n_nr_sh_MaMd + 1
   6023                       if(l_print) write(io8,*) 'manAIREP-MDCRS dup'
   6024                     elseif(l_ii_man.and.l_iim1_acars) then 
   6025                       n_nr_sh_MaAc = n_nr_sh_MaAc + 1
   6026 ccccdak                      if(l_print) write(io8,*) 'manAIREP-ACARS dup'
   6027                       if(l_print) write(io8,*) 'manAIREP-TAMDAR dup'
   6028                     elseif(l_iim1_man.and.l_ii_airep) then 
   6029                       n_nr_sh_ArMa = n_nr_sh_ArMa + 1
   6030                       if(l_print) write(io8,*) 'AIREP-manAIREP dup'
   6031                     elseif(l_ii_airep.and.l_iim1_airep) then 
   6032                       n_nr_sh_ArAr = n_nr_sh_ArAr + 1
   6033                       if(l_print) write(io8,*) 'AIREP-AIREP dup'
   6034                     else
   6035                       l_print = .true.
   6036                       if(l_print) then
   6037                         write(io8,*)
   6038                         write(io8,*) 'Uncategorized short-id dup'
   6039                       endif
   6040                     endif
   6041 c
   6042 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
   6043                   elseif(((l_ii_0lat.and.abs(alat(ii)).gt.0.125).or.
   6044      $                    (l_ii_0lon.and.
   6045      $                     (alon(ii).gt.0.125.and.
   6046      $                      alon(ii).lt.359.875))).and.
   6047 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
   6048      $                   (c_acftid(ii).eq.c_acftid(iim1).or.
   6049      $                  l_ii_man.or.l_iim1_man)) then
   6050                     n_near_0ll = n_near_0ll + 1
   6051                     l_print = .false.
   6052                     if(l_print) then
   6053                       write(io8,*)
   6054                       write(io8,*) 'Near dup found with 0l/l--',ii
   6055                     endif
   6056                     if(l_iim1_acars.and.l_ii_acars) then
   6057                       n_nr_0ll_AcAc = n_nr_0ll_AcAc + 1
   6058 ccccdak                      if(l_print) write(io8,*) 'ACARS-ACARS dup'

Page 124         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   6059                       if(l_print) write(io8,*) 'TAMDAR-TAMDAR dup'
   6060                     elseif(l_iim1_mdcrs.and.l_ii_mdcrs) then
   6061                       n_nr_0ll_MdMd = n_nr_0ll_MdMd + 1
   6062                       if(l_print) write(io8,*) 'MDCRS-MDCRS dup'
   6063                     elseif(l_ii_man.and.l_iim1_airep) then
   6064                       n_nr_0ll_MaAr = n_nr_0ll_MaAr + 1
   6065                       if(l_print) write(io8,*) 'manAIREP-AIREP dup'
   6066                     elseif(l_ii_amdar.and.l_iim1_airep) then
   6067                       n_nr_0ll_AmAr = n_nr_0ll_AmAr + 1
   6068                       if(l_print) write(io8,*) 'AMDAR-AIREP dup'
   6069                     elseif(l_ii_man.and.l_iim1_man) then
   6070                       n_nr_0ll_MaMa = n_nr_0ll_MaMa + 1
   6071                       if(l_print) write(io8,*) 'manAIREP-manAIREP dup'
   6072                     elseif(l_ii_man.and.l_iim1_mdcrs) then
   6073                       n_nr_0ll_MaMd = n_nr_0ll_MaMd + 1
   6074                       if(l_print) write(io8,*) 'manAIREP-MDCRS dup'
   6075                     elseif(l_ii_mdcrs.and.l_iim1_man) then
   6076                       n_nr_0ll_MdMa = n_nr_0ll_MdMa + 1
   6077                       if(l_print) write(io8,*) 'MDCRS-manAIREP dup'
   6078                     elseif(l_ii_man.and.l_iim1_amdar) then
   6079                       n_nr_0ll_MaAm = n_nr_0ll_MaAm + 1
   6080                       if(l_print) write(io8,*) 'manAIREP-AMDAR dup'
   6081                     elseif(l_ii_amdar.and.l_iim1_man) then
   6082                       n_nr_0ll_AmMa = n_nr_0ll_AmMa + 1
   6083                       if(l_print) write(io8,*) 'AMDAR-manAIREP dup'
   6084                     else
   6085                       l_print = .true.
   6086                       if(l_print) then
   6087                         write(io8,*)
   6088                         write(io8,*) 'Uncategorized near 0l/l dup'
   6089                       endif
   6090                     endif
   6091 c
   6092                   elseif(ob_t(ii).ne.amiss.and.
   6093      $                   ob_t(iim1).eq.amiss) then
   6094                     n_near_mst = n_near_mst + 1
   6095                     l_print = .false.
   6096                     if(l_print) then
   6097                       write(io8,*)
   6098                       write(io8,*) 'Near dup found with msg temp--'
   6099      $,                             ii
   6100                     endif
   6101                     if(l_ii_man.and.l_iim1_man) then
   6102                       n_nr_mst_MaMa = n_nr_mst_MaMa + 1
   6103                       if(l_print) 
   6104      $                  write(io8,*) 'manAIREP-manAIREP dup'
   6105                     elseif(l_ii_man.and.l_iim1_airep) then
   6106                       n_nr_mst_MaAr = n_nr_mst_MaAr + 1
   6107                       if(l_print) write(io8,*) 'manAIREP-AIREP dup'
   6108                     elseif(l_ii_man.and.l_iim1_amdar) then
   6109                       n_nr_mst_MaAm = n_nr_mst_MaAm + 1
   6110                       if(l_print) write(io8,*) 'manAIREP-AMDAR dup'
   6111                     elseif(l_ii_airep.and.l_iim1_acars) then
   6112                       n_nr_mst_ArAc = n_nr_mst_ArAc + 1
   6113 ccccdak                      if(l_print) write(io8,*) 'AIREP-ACARS dup'
   6114                       if(l_print) write(io8,*) 'AIREP-TAMDAR dup'
   6115                     elseif(l_ii_airep.and.l_iim1_mdcrs) then

Page 125         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   6116                       n_nr_mst_ArMd = n_nr_mst_ArMd + 1
   6117                       if(l_print) write(io8,*) 'AIREP-MDCRS dup'
   6118                     elseif(l_ii_man.and.l_iim1_acars) then
   6119                       n_nr_mst_MaAc = n_nr_mst_MaAc + 1
   6120 ccccdak                      if(l_print) write(io8,*) 'manAIREP-ACARS dup'
   6121                       if(l_print) write(io8,*) 'manAIREP-TAMDAR dup'
   6122                     elseif(l_ii_man.and.l_iim1_mdcrs) then
   6123                       n_nr_mst_MaMd = n_nr_mst_MaMd + 1
   6124                       if(l_print) write(io8,*) 'manAIREP-MDCRS dup'
   6125                     elseif(l_ii_mdcrs.and.l_iim1_mdcrs) then
   6126                       n_nr_mst_MdMd = n_nr_mst_MdMd + 1
   6127                       if(l_print) write(io8,*) 'manAIREP-MDCRS dup'
   6128                     elseif(l_iim1_man.and.l_ii_airep) then
   6129                       n_nr_mst_ArMa = n_nr_mst_ArMa + 1
   6130                       if(l_print) write(io8,*) 'AIREP-manAIREP dup'
   6131                     elseif(l_ii_amdar.and.l_iim1_amdar) then
   6132                       n_nr_mst_AmAm = n_nr_mst_AmAm + 1
   6133                       if(l_print) write(io8,*) 'AMDAR-AMDAR dup'
   6134                     elseif(l_ii_airep.and.l_iim1_airep) then
   6135                       n_nr_mst_ArAr = n_nr_mst_ArAr + 1
   6136                       if(l_print) write(io8,*) 'AIREP-AIREP dup'
   6137                     elseif(l_ii_amdar.and.l_iim1_airep) then
   6138                       n_nr_mst_AmAr = n_nr_mst_AmAr + 1
   6139                       if(l_print) write(io8,*) 'AMDAR-AIREP dup'
   6140                     elseif(l_ii_airep.and.l_iim1_amdar) then
   6141                       n_nr_mst_ArAm = n_nr_mst_ArAm + 1
   6142                       if(l_print) write(io8,*) 'AIREP-AMDAR dup'
   6143                     else
   6144                       l_print = .true.
   6145                       if(l_print) then
   6146                         write(io8,*)
   6147                         write(io8,*) 'Uncategorized msg-temp dup'
   6148                       endif
   6149                     endif
   6150 c
   6151                   elseif((ob_spd(ii).ne.amiss.and.
   6152      $                    ob_spd(iim1).eq.amiss).or.
   6153      $                   (ob_dir(ii).ne.amiss.and.
   6154      $                    ob_dir(iim1).eq.amiss)) then
   6155                     n_near_ws = n_near_ws + 1
   6156                     l_print = .false.
   6157                     if(c_acftid(iim1)(1:2).eq.'IT') then 
   6158                       n_near_ws_IT = n_near_ws_IT + 1
   6159                       l_print = .false.
   6160                     elseif(c_acftid(iim1)(1:2).eq.'EU') then 
   6161                       n_near_ws_EU = n_near_ws_EU + 1
   6162                       l_print = .false.
   6163                     endif
   6164                     if(l_print) then
   6165                       write(io8,*)
   6166                       write(io8,*) 'Near dup with msg winds--',ii
   6167                     endif
   6168                     if(l_ii_man.and.l_iim1_man) then
   6169                       n_nr_mswn_MaMa = n_nr_mswn_MaMa + 1
   6170                       if(l_print) 
   6171      $                  write(io8,*) 'manAIREP-manAIREP dup'
   6172                     elseif(l_ii_man.and.l_iim1_airep) then 

Page 126         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   6173                       n_nr_mswn_MaAr = n_nr_mswn_MaAr + 1
   6174                       if(l_print) write(io8,*) 'manAIREP-AIREP dup'
   6175                     elseif(l_ii_man.and.l_iim1_amdar) then 
   6176                       n_nr_mswn_MaAm = n_nr_mswn_MaAm + 1
   6177                       if(l_print) write(io8,*) 'manAIREP-AMDAR dup'
   6178                     elseif(l_iim1_man.and.l_ii_airep) then 
   6179                       n_nr_mswn_ArMa = n_nr_mswn_ArMa + 1
   6180                       if(l_print) write(io8,*) 'AIREP-manAIREP dup'
   6181                     elseif(l_ii_airep.and.l_iim1_airep) then 
   6182                       n_nr_mswn_ArAr = n_nr_mswn_ArAr + 1
   6183                       if(l_print) write(io8,*) 'AIREP-AIREP dup'
   6184                     elseif(l_ii_acars.and.l_iim1_acars) then
   6185                       n_nr_mswn_AcAc = n_nr_mswn_AcAc + 1
   6186 ccccdak                      if(l_print) write(io8,*) 'ACARS-ACARS dup'
   6187                       if(l_print) write(io8,*) 'TAMDAR-TAMDAR dup'
   6188                     elseif(l_ii_mdcrs.and.l_iim1_mdcrs) then
   6189                       n_nr_mswn_MdMd = n_nr_mswn_MdMd + 1
   6190                       if(l_print) write(io8,*) 'MDCRS-MDCRS dup'
   6191                     elseif(l_ii_acars.and.l_iim1_mdcrs) then
   6192                       n_nr_mswn_AcMd = n_nr_mswn_AcMd + 1
   6193 ccccdak                      if(l_print) write(io8,*) 'ACARS-MDCRS dup'
   6194                       if(l_print) write(io8,*) 'TAMDAR-MDCRS dup'
   6195                     elseif(l_ii_mdcrs.and.l_iim1_acars) then
   6196                       n_nr_mswn_MdAc = n_nr_mswn_MdAc + 1
   6197 ccccdak                      if(l_print) write(io8,*) 'MDCRS-ACARS dup'
   6198                       if(l_print) write(io8,*) 'MDCRS-TAMDAR dup'
   6199                     elseif(l_ii_mdcrs.and.l_iim1_amdar) then
   6200                       n_nr_mswn_MdAm = n_nr_mswn_MdAm + 1
   6201                       if(l_print) write(io8,*) 'MDCRS-AMDAR dup'
   6202                     elseif(l_ii_mdcrs.and.l_iim1_airep) then
   6203                       n_nr_mswn_MdAr = n_nr_mswn_MdAr + 1
   6204                       if(l_print) write(io8,*) 'MDCRS-AIREP dup'
   6205                     elseif(l_ii_mdcrs.and.l_iim1_man) then
   6206                       n_nr_mswn_MdMa = n_nr_mswn_MdMa + 1
   6207                       if(l_print) write(io8,*) 'MDCRS-manAIREP dup'
   6208                     elseif(l_ii_airep.and.l_iim1_acars) then
   6209                       n_nr_mswn_ArAc = n_nr_mswn_ArAc + 1
   6210 ccccdak                      if(l_print) write(io8,*) 'AIREP-ACARS dup'
   6211                       if(l_print) write(io8,*) 'AIREP-TAMDAR dup'
   6212                     elseif(l_ii_airep.and.l_iim1_mdcrs) then
   6213                       n_nr_mswn_ArMd = n_nr_mswn_ArMd + 1
   6214                       if(l_print) write(io8,*) 'AIREP-MDCRS dup'
   6215                     elseif(l_ii_man.and.l_iim1_acars) then
   6216                       n_nr_mswn_MaAc = n_nr_mswn_MaAc + 1
   6217 ccccdak                      if(l_print) write(io8,*) 'manAIREP-ACARS dup'
   6218                       if(l_print) write(io8,*) 'manAIREP-TAMDAR dup'
   6219                     elseif(l_ii_man.and.l_iim1_mdcrs) then
   6220                       n_nr_mswn_MaMd = n_nr_mswn_MaMd + 1
   6221                       if(l_print) write(io8,*) 'manAIREP-MDCRS dup'
   6222                     elseif(l_ii_amdar.and.l_iim1_amdar) then
   6223                       n_nr_mswn_AmAm = n_nr_mswn_AmAm + 1
   6224                       if(l_print) write(io8,*) 'AMDAR-AMDAR dup'
   6225                     elseif(l_ii_airep.and.l_iim1_amdar) then
   6226                       n_nr_mswn_ArAm = n_nr_mswn_ArAm + 1
   6227                       if(l_print) write(io8,*) 'AIREP-AMDAR dup'
   6228                     elseif(l_ii_amdar.and.l_iim1_airep) then
   6229                       n_nr_mswn_AmAr = n_nr_mswn_AmAr + 1

Page 127         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   6230                       if(l_print) write(io8,*) 'AMDAR-AIREP dup'
   6231                     elseif(l_ii_acars.and.l_iim1_amdar) then
   6232                       n_nr_mswn_AcAm = n_nr_mswn_AcAm + 1
   6233 ccccdak                      if(l_print) write(io8,*) 'ACARS-AMDAR dup'
   6234                       if(l_print) write(io8,*) 'TAMDAR-AMDAR dup'
   6235                     else
   6236                       l_print = .true.
   6237                       if(l_print) then
   6238                         write(io8,*)
   6239                         write(io8,*) 'Uncategorized msg-wind dup'
   6240                       endif
   6241                     endif
   6242 c
   6243                   elseif((ob_spd(ii).gt.1.25.and.
   6244      $                    ob_spd(iim1).lt.0.05).or.
   6245      $                   (ob_dir(ii).gt.10.5.and.
   6246      $                    difdir.gt.10.5.and.
   6247      $                    ob_dir(iim1).lt.0.5)) then
   6248                     n_near_0ws = n_near_0ws + 1
   6249                     l_print = .false.
   6250                     if(l_print) then
   6251                       write(io8,*)
   6252                       write(io8,*) 'Near dup found with 0 winds-2-'
   6253      $,                             ii
   6254                     endif
   6255                     if(l_ii_airep.and.l_iim1_amdar) then
   6256                       n_near_0ws_ArAm = n_near_0ws_ArAm + 1
   6257                       if(l_print) write(io8,*) 'AIREP-AMDAR dup'
   6258                     elseif(l_ii_amdar.and.l_iim1_airep) then
   6259                       n_near_0ws_AmAr = n_near_0ws_AmAr + 1
   6260                       if(l_print) write(io8,*) 'AMDAR-AIREP dup'
   6261                     elseif(l_ii_amdar.and.l_iim1_amdar) then
   6262                       n_near_0ws_AmAm = n_near_0ws_AmAm + 1
   6263                       if(l_print) write(io8,*) 'AMDAR-AMDAR dup'
   6264                     elseif(l_ii_airep.and.l_iim1_airep) then
   6265                       n_near_0ws_ArAr = n_near_0ws_ArAr + 1
   6266                       if(l_print) write(io8,*) 'AIREP-AIREP dup'
   6267                     elseif(l_ii_man.and.l_iim1_man) then
   6268                       n_near_0ws_MaMa = n_near_0ws_MaMa + 1
   6269                       if(l_print) 
   6270      $                  write(io8,*) 'manAIREP-manAIREP dup'
   6271                     elseif(l_ii_man.and.l_iim1_mdcrs) then
   6272                       n_near_0ws_MaMd = n_near_0ws_MaMd + 1
   6273                       if(l_print) 
   6274      $                  write(io8,*) 'manAIREP-MDCRS dup'
   6275                     elseif(l_ii_man.and.l_iim1_amdar) then
   6276                       n_near_0ws_MaAm = n_near_0ws_MaAm + 1
   6277                       if(l_print) 
   6278      $                  write(io8,*) 'manAIREP-AMDAR dup'
   6279                     elseif(l_ii_man.and.l_iim1_airep) then
   6280                       n_near_0ws_MaAr = n_near_0ws_MaAr + 1
   6281                       if(l_print) 
   6282      $                  write(io8,*) 'manAIREP-AIREP dup'
   6283                     elseif(l_ii_airep.and.l_iim1_mdcrs) then
   6284                       n_near_0ws_ArMd = n_near_0ws_ArMd + 1
   6285                       if(l_print) 
   6286      $                  write(io8,*) 'AIREP-MDCRS dup'

Page 128         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   6287                     elseif(l_ii_mdcrs.and.l_iim1_mdcrs) then
   6288                       n_near_0ws_MdMd = n_near_0ws_MdMd + 1
   6289                       if(l_print) 
   6290      $                  write(io8,*) 'MDCRS-MDCRS dup'
   6291                     else
   6292                       l_print = .true.
   6293                       if(l_print) then
   6294                         write(io8,*)
   6295                         write(io8,*)'Uncategorized zero-wind dup'
   6296                         write(io8,*) '  dir difference = ',difdir
   6297                       endif
   6298                     endif
   6299 c
   6300                   elseif(l_iim1_mdcrs.and.l_ii_acars) then
   6301                     n_near_MdAc = n_near_MdAc + 1
   6302                     l_print = .false.
   6303                     if(l_print) then
   6304                       write(io8,*)
   6305 ccccdak                      write(io8,*) 'MDCRS-ACARS near dup found--',ii
   6306                       write(io8,*) 'MDCRS-TAMDAR near dup found--',ii
   6307                     endif
   6308 c
   6309                   elseif(itype(iim1).eq.i_mdcrs.and.
   6310      $                   itype(ii  ).ne.i_mdcrs) then
   6311                       n_nr_posrep = n_nr_posrep + 1
   6312                       l_print = .false.
   6313                       if(l_print) then
   6314                         write(io8,*)
   6315                         write(io8,*) 'MDCRS position report dup-2-',ii
   6316                       endif
   6317 c
   6318                   elseif(l_iim1_acars.and.l_ii_airep) then
   6319                     n_near_AcAr = n_near_AcAr + 1
   6320                     l_print = .false.
   6321                     if(l_print) then
   6322                       write(io8,*)
   6323 ccccdak                      write(io8,*) 'ACARS-AIREP near dup found--',ii
   6324                       write(io8,*) 'TAMDAR-AIREP near dup found--',ii
   6325                     endif
   6326 c
   6327                   elseif(l_iim1_mdcrs.and.l_ii_airep) then
   6328                     n_near_MdAr = n_near_MdAr + 1
   6329                     l_print = .false.
   6330                     if(l_print) then
   6331                       write(io8,*)
   6332                       write(io8,*) 'MDCRS-AIREP near dup found--',ii
   6333                     endif
   6334 c
   6335                   elseif(l_iim1_amdar.and.l_ii_airep) then
   6336                     n_near_AmAr = n_near_AmAr + 1
   6337                     l_print = .false.
   6338                     if(l_print) then
   6339                       write(io8,*)
   6340                       write(io8,*) 'AMDAR-AIREP near dup found--',ii
   6341                     endif
   6342 c
   6343                   elseif(l_iim1_acars.and.l_ii_man) then

Page 129         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   6344                     n_near_AcMa = n_near_AcMa + 1
   6345                     l_print = .false.
   6346                     if(l_print) then
   6347                       write(io8,*)
   6348 ccccdak                      write(io8,*) 'ACARS-manAIREP near dup--',ii
   6349                       write(io8,*) 'TAMDAR-manAIREP near dup--',ii
   6350                     endif
   6351 c
   6352                   elseif(l_iim1_mdcrs.and.l_ii_man) then
   6353                     n_near_MdMa = n_near_MdMa + 1
   6354                     l_print = .false.
   6355                     if(l_print) then
   6356                       write(io8,*)
   6357                       write(io8,*) 'MDCRS-manAIREP near dup--',ii
   6358                     endif
   6359 c
   6360                   elseif(l_iim1_airep.and.l_ii_man) then
   6361                     n_near_ArMa = n_near_ArMa + 1
   6362                     l_print = .false.
   6363                     if(l_print) then
   6364                       write(io8,*)
   6365                       write(io8,*) 'AIREP-manAIREP near dup--',ii
   6366                     endif
   6367 c
   6368                   elseif(l_iim1_amdar.and.l_ii_man) then
   6369                     n_near_AmMa = n_near_AmMa + 1
   6370                     l_print = .false.
   6371                     if(l_print) then
   6372                       write(io8,*)
   6373                       write(io8,*) 'AMDAR-manAIREP near dup--',ii
   6374                     endif
   6375 c
   6376                   else
   6377                     l_print = .true.
   6378                     if(l_print) then
   6379                       write(io8,*)
   6380                       write(io8,*) 'Uncategorized near dup-2-',ii,
   6381      $                             ' difdir = ',difdir
   6382                     endif
   6383                   endif
   6384 c
   6385 ccccdak               Exclude other MDCRS-ACARS, MDCRS-AIREP, ACARS-AIREP, MDCRS-MDCRS
   6386 ccccdak                 or ACARS-ACARS duplicates
   6387 c               Exclude other MDCRS-TAMDAR, MDCRS-AIREP, TAMDAR-AIREP, MDCRS-MDCRS
   6388 c                 or TAMDAR-TAMDAR duplicates
   6389 c               ----------------------------------------------------------------
   6390                 elseif( (l_iim1_mdcrs.and.l_ii_acars).or.
   6391      $                  (l_ii_mdcrs.and.l_iim1_acars).or.
   6392      $                  (l_ii_mdcrs.and.l_iim1_mdcrs).or.
   6393      $                  (l_ii_acars.and.l_iim1_acars).or.
   6394      $                  (l_ii_amdar.and.l_iim1_amdar).or. 
   6395      $                  (l_ii_amdar.and.l_iim1_airep).or.
   6396      $                  (l_ii_airep.and.l_iim1_amdar) ) then 
   6397 c
   6398 c               Duplicate pair doesn't fall in any of the above categories
   6399 c                 but ids are equal
   6400 c               Keep ob ii

Page 130         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   6401 c               ----------------------------------------------------------
   6402                 elseif((c_acftid(ii).eq.c_acftid(iim1)).or.
   6403      $                 (l_ii_man.and.l_iim1_man).or.
   6404      $                 (l_ii_amdar.and.l_ii_amdar.and.
   6405      $                  c_acftid(ii)(1:6).eq.c_acftid(iim1)(1:6)))then
   6406 c
   6407                   if(c_qc(iim1)(1:1).eq.'-'.or.
   6408      $               c_qc(iim1)(1:1).eq.'.'.or.
   6409      $               c_qc(iim1)(1:1).eq.'N') 
   6410      $               c_qc(iim1)(1:1) = 'd'
   6411 c
   6412                   if(c_qc(ii)(1:1).eq.'-') c_qc(ii)(1:1) = '.'
   6413 c
   6414 c                 Count rejects by category
   6415 c                 -------------------------
   6416                   n_near = n_near + 1
   6417 c
   6418                   if(l_ii_airep.and.l_iim1_airep) then
   6419                     n_near_ArAr = n_near_ArAr + 1
   6420                     l_print = .false.
   6421                     if(l_print) then
   6422                       write(io8,*)
   6423                       write(io8,*) 'AIREP-AIREP near dup found--',ii
   6424                     endif
   6425 c
   6426                   elseif(l_ii_man.and.l_iim1_man) then
   6427                     n_near_MaMa = n_near_MaMa + 1
   6428                     l_print = .false.
   6429                     if(l_print) then
   6430                       write(io8,*)
   6431                       write(io8,*) 'manAIREP-manAIREP near dup--',ii
   6432                     endif
   6433 c
   6434                   elseif(l_ii_amdar.and.l_iim1_amdar) then
   6435                     n_near_AmAm = n_near_AmAm + 1
   6436                     if(c_acftid(ii).eq.c_acftid(iim1)) then
   6437                       l_print = .false.
   6438                     else
   6439                       l_print = .false.
   6440                     endif
   6441                     if(l_print) then
   6442                       write(io8,*)
   6443                       write(io8,*) 'AMDAR-AMDAR near dup found--',ii
   6444                     endif
   6445 c
   6446                   else
   6447                     l_print = .true.
   6448                     if(l_print) then
   6449                       write(io8,*)
   6450                       write(io8,*) 'Uncategorized near dup-3-',ii
   6451                     endif
   6452                   endif
   6453 c
   6454 c               Duplicate pair doesn't fall in any of the above categories
   6455 c               Flag to log file but don't reject
   6456 c               ----------------------------------------------------------
   6457                 elseif(c_acftid(ii).eq.c_acftid(iim1)) then

Page 131         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   6458                   l_print = .true.
   6459                   if(l_print) then
   6460                     write(io8,*)
   6461                     write(io8,*) 'Leftover near duplicate found',ii
   6462                   endif
   6463                 endif
   6464 c
   6465 c             Check if report is a low-windspeed dup not previously caught
   6466 c             (These are typically near-surface observations)
   6467 c             ------------------------------------------------------------
   6468               elseif(idt_dif.ge.0.and.idt_dif.le.90.and.
   6469      $               c_qc(iim1)(1:1).ne.'D'.and.
   6470 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
   6471      $               abs(alat(iim1)-alat(ii)).lt.0.035.and.
   6472      $               abs(alon(iim1)-alon(ii)).lt.0.035.and.
   6473 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
   6474 c     $               abs(ht_ft(iim1)-ht_ft(ii)).lt.50.5.and.
   6475      $               abs(ht_ft(iim1)-ht_ft(ii)).lt.25.5.and.
   6476      $               (c_acftid(ii).eq.c_acftid(iim1).or.
   6477      $                l_ii_sh.or.l_iim1_sh).and.
   6478 c     $               abs(ob_t(iim1)-ob_t(ii)).lt.2.05.and.
   6479      $               abs(ob_t(iim1)-ob_t(ii)).lt.1.25.and.
   6480      $               ((ob_spd(iim1).lt.25.05.and.
   6481      $                 ob_spd(ii).lt.25.05.and.
   6482      $                 abs(ob_spd(iim1)-ob_spd(ii)).lt.2.05.and.
   6483      $                 ((abs(difdir).lt.10.5).or.
   6484      $                  (ob_dir(ii).eq.amiss.and.
   6485      $                   ob_dir(iim1).eq.amiss))).or.
   6486      $                (ob_spd(iim1).lt.15.05.and.
   6487      $                 ob_spd(ii).lt.15.05.and.
   6488      $                 abs(ob_spd(iim1)-ob_spd(ii)).lt.3.55.and.
   6489      $                 ((abs(difdir).lt.15.5).or.
   6490      $                  (ob_dir(ii).eq.amiss.and.
   6491      $                   ob_dir(iim1).eq.amiss))).or.
   6492      $                (ob_spd(iim1).lt.10.05.and.
   6493      $                 ob_spd(ii).lt.10.05.and.
   6494      $                 abs(ob_spd(iim1)-ob_spd(ii)).lt.5.05.and.
   6495      $                 ((abs(difdir).lt.25.5).or.
   6496      $                  (ob_dir(ii).eq.amiss.and.
   6497      $                   ob_dir(iim1).eq.amiss))).or.
   6498      $                (ob_spd(iim1).lt.5.05.and.
   6499      $                 ob_spd(ii).lt.5.05.and.
   6500      $                 ((abs(difdir).lt.45.5).or.
   6501      $                  (ob_dir(ii).eq.amiss.and.
   6502      $                   ob_dir(iim1).eq.amiss))).or.
   6503      $                (ob_spd(iim1).lt.3.65.and.
   6504      $                 ob_spd(ii).lt.3.65).or.
   6505      $             (ob_spd(iim1).eq.amiss.and.ob_spd(ii).ne.amiss).or.
   6506      $             (ob_spd(iim1).ne.amiss.and.ob_spd(ii).eq.amiss).or.
   6507      $             (ob_dir(iim1).eq.amiss.and.ob_dir(ii).ne.amiss).or.
   6508      $                (ob_dir(iim1).ne.amiss.and.ob_dir(ii).eq.amiss))
   6509      $                 ) then
   6510 c
   6511 c               If near dup found, decide which report to keep
   6512 ccccdak                 Choose MDCRS over ACARS
   6513 c                 Choose MDCRS over TAMDAR
   6514 ccccdak                 Choose ACARS/MDCRS over AIREP/manual AIREP

Page 132         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   6515 c                 Choose TAMDAR or MDCRS over AIREP/manual AIREP
   6516 c                 Choose AMDAR over AIREP/manual AIREP
   6517 c                 Choose automated over manual AIREP
   6518 c                 Choose 7-char flight number over 6-char flight number
   6519 c                 Choose present over missing flight/tail number
   6520 c                 Choose present over missing wind speed
   6521 c                 Choose non-zero over zero lat or lon
   6522 c               -------------------------------------------------------
   6523 c
   6524 c               Keep ob ii
   6525 c               ----------
   6526                 if((l_ii_mdcrs.and.l_iim1_acars).or.
   6527      $             (l_ii_mdcrs.and.l_iim1_airep).or. 
   6528      $             (l_ii_mdcrs.and.l_iim1_man).or.
   6529      $             (l_ii_mdcrs.and.l_iim1_mdcrs.and.
   6530      $              ichk_s(ii).ne.-10).or.
   6531      $             (l_ii_acars.and.l_iim1_airep).or.
   6532      $             (l_ii_acars.and.l_iim1_man).or.
   6533      $             (l_ii_acars.and.l_iim1_acars).or.
   6534      $             (l_ii_amdar.and.l_iim1_airep).or.
   6535      $             (l_ii_amdar.and.l_iim1_man).or.
   6536      $             (l_ii_amdar.and.l_iim1_amdar).or.
   6537      $             (l_ii_airep.and.l_iim1_man).or.
   6538      $             (l_ii_airep.and.l_iim1_airep).or.
   6539      $             (l_ii_man.and.l_iim1_man).or.
   6540      $             l_iim1_sh.or.
   6541      $             (ob_spd(ii).ne.amiss.and.ob_spd(iim1).eq.amiss).or.
   6542      $             (ob_dir(ii).ne.amiss.and.ob_dir(iim1).eq.amiss) 
   6543      $             )then
   6544 c
   6545                   if(c_qc(iim1)(1:1).eq.'-'.or.
   6546      $               c_qc(iim1)(1:1).eq.'.'.or.
   6547      $               c_qc(iim1)(1:1).eq.'N') 
   6548      $               c_qc(iim1)(1:1) = 'd'
   6549 c
   6550                   if(c_qc(ii)(1:1).eq.'-') c_qc(ii)(1:1) = '.'
   6551 c
   6552 c                 Count rejects by category
   6553 c                 -------------------------
   6554                   n_near = n_near + 1
   6555 c
   6556                   if(l_iim1_sh) then
   6557                     n_near_sh = n_near_sh + 1
   6558                     l_print = .true.
   6559                     if(l_print) then
   6560                       write(io8,*)
   6561                       write(io8,*)'Low-wind dup found with short id'
   6562                     endif
   6563                     if(l_iim1_man.and.l_ii_man) then
   6564                       n_nr_sh_MaMa = n_nr_sh_MaMa + 1
   6565                       if(l_print) 
   6566      $                  write(io8,*) 'manAIREP-manAIREP dup'
   6567                     elseif(l_iim1_man.and.l_ii_airep) then 
   6568                       n_nr_sh_MaAr = n_nr_sh_MaAr + 1
   6569                       if(l_print) write(io8,*) 'manAIREP-AIREP dup'
   6570                     elseif(l_iim1_man.and.l_ii_mdcrs) then 
   6571                       n_nr_sh_MaMd = n_nr_sh_MaMd + 1

Page 133         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   6572                       if(l_print) write(io8,*) 'manAIREP-MDCRS dup'
   6573                     elseif(l_iim1_man.and.l_ii_acars) then 
   6574                       n_nr_sh_MaAc = n_nr_sh_MaAc + 1
   6575 ccccdak                      if(l_print) write(io8,*) 'manAIREP-ACARS dup'
   6576                       if(l_print) write(io8,*) 'manAIREP-TAMDAR dup'
   6577                     elseif(l_ii_man.and.l_iim1_airep) then 
   6578                       n_nr_sh_ArMa = n_nr_sh_ArMa + 1
   6579                       if(l_print) write(io8,*) 'AIREP-manAIREP dup'
   6580                     elseif(l_iim1_airep.and.l_ii_airep) then 
   6581                       n_nr_sh_ArAr = n_nr_sh_ArAr + 1
   6582                       if(l_print) write(io8,*) 'AIREP-AIREP dup'
   6583                     else
   6584                       l_print = .true.
   6585                       if(l_print) then
   6586                         write(io8,*)
   6587                         write(io8,*) 'Uncat. low-wind short-id dup'
   6588                       endif
   6589                     endif
   6590 c
   6591                   elseif((ob_spd(ii).ne.amiss.and.
   6592      $                    ob_spd(iim1).eq.amiss).or.
   6593      $                   (ob_dir(ii).ne.amiss.and.
   6594      $                    ob_dir(iim1).eq.amiss)) then
   6595                     n_near_ws = n_near_ws + 1
   6596                     l_print = .false.
   6597                     if(c_acftid(ii)(1:2).eq.'IT') then 
   6598                       n_near_ws_IT = n_near_ws_IT + 1
   6599                       l_print = .false.
   6600                     elseif(c_acftid(ii)(1:2).eq.'EU') then 
   6601                       n_near_ws_EU = n_near_ws_EU + 1
   6602                       l_print = .false.
   6603                     endif
   6604                     if(l_print) then
   6605                       write(io8,*)
   6606                       write(io8,*)'Low-wind dup found with msg wind'
   6607                     endif
   6608                     if(l_iim1_man.and.l_ii_man) then
   6609                       n_nr_mswn_MaMa = n_nr_mswn_MaMa + 1
   6610                       if(l_print) 
   6611      $                  write(io8,*) 'manAIREP-manAIREP dup'
   6612                     elseif(l_iim1_man.and.l_ii_airep) then 
   6613                       n_nr_mswn_MaAr = n_nr_mswn_MaAr + 1
   6614                       if(l_print) write(io8,*) 'manAIREP-AIREP dup'
   6615                     elseif(l_iim1_man.and.l_ii_amdar) then 
   6616                       n_nr_mswn_MaAm = n_nr_mswn_MaAm + 1
   6617                       if(l_print) write(io8,*) 'manAIREP-AMDAR dup'
   6618                     elseif(l_ii_man.and.l_iim1_airep) then 
   6619                       n_nr_mswn_ArMa = n_nr_mswn_ArMa + 1
   6620                       if(l_print) write(io8,*) 'AIREP-manAIREP dup'
   6621                     elseif(l_iim1_airep.and.l_ii_airep) then 
   6622                       n_nr_mswn_ArAr = n_nr_mswn_ArAr + 1
   6623                       if(l_print) write(io8,*) 'AIREP-AIREP dup'
   6624                     elseif(l_iim1_acars.and.l_ii_acars) then
   6625                       n_nr_mswn_AcAc = n_nr_mswn_AcAc + 1
   6626 ccccdak                      if(l_print) write(io8,*) 'ACARS-ACARS dup'
   6627                       if(l_print) write(io8,*) 'TAMDAR-TAMDAR dup'
   6628                     elseif(l_iim1_mdcrs.and.l_ii_mdcrs) then

Page 134         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   6629                       n_nr_mswn_MdMd = n_nr_mswn_MdMd + 1
   6630                       if(l_print) write(io8,*) 'MDCRS-MDCRS dup'
   6631                     elseif(l_iim1_acars.and.l_ii_mdcrs) then
   6632                       n_nr_mswn_AcMd = n_nr_mswn_AcMd + 1
   6633 ccccdak                      if(l_print) write(io8,*) 'ACARS-MDCRS dup'
   6634                       if(l_print) write(io8,*) 'TAMDAR-MDCRS dup'
   6635                     elseif(l_iim1_mdcrs.and.l_ii_acars) then
   6636                       n_nr_mswn_MdAc = n_nr_mswn_MdAc + 1
   6637 ccccdak                      if(l_print) write(io8,*) 'MDCRS-ACARS dup'
   6638                       if(l_print) write(io8,*) 'MDCRS-TAMDAR dup'
   6639                     elseif(l_iim1_mdcrs.and.l_ii_amdar) then
   6640                       n_nr_mswn_MdAm = n_nr_mswn_MdAm + 1
   6641                       if(l_print) write(io8,*) 'MDCRS-AMDAR dup'
   6642                     elseif(l_iim1_mdcrs.and.l_ii_airep) then
   6643                       n_nr_mswn_MdAr = n_nr_mswn_MdAr + 1
   6644                       if(l_print) write(io8,*) 'MDCRS-AIREP dup'
   6645                     elseif(l_iim1_mdcrs.and.l_ii_man) then
   6646                       n_nr_mswn_MdMa = n_nr_mswn_MdMa + 1
   6647                       if(l_print) write(io8,*) 'MDCRS-manAIREP dup'
   6648                     elseif(l_iim1_airep.and.l_ii_acars) then
   6649                       n_nr_mswn_ArAc = n_nr_mswn_ArAc + 1
   6650 ccccdak                      if(l_print) write(io8,*) 'AIREP-ACARS dup'
   6651                       if(l_print) write(io8,*) 'AIREP-TAMDAR dup'
   6652                     elseif(l_iim1_airep.and.l_ii_mdcrs) then
   6653                       n_nr_mswn_ArMd = n_nr_mswn_ArMd + 1
   6654                       if(l_print) write(io8,*) 'AIREP-MDCRS dup'
   6655                     elseif(l_iim1_man.and.l_ii_acars) then
   6656                       n_nr_mswn_MaAc = n_nr_mswn_MaAc + 1
   6657 ccccdak                      if(l_print) write(io8,*) 'manAIREP-ACARS dup'
   6658                       if(l_print) write(io8,*) 'manAIREP-TAMDAR dup'
   6659                     elseif(l_iim1_man.and.l_ii_mdcrs) then
   6660                       n_nr_mswn_MaMd = n_nr_mswn_MaMd + 1
   6661                       if(l_print) write(io8,*) 'manAIREP-MDCRS dup'
   6662                     elseif(l_iim1_amdar.and.l_ii_amdar) then
   6663                       n_nr_mswn_AmAm = n_nr_mswn_AmAm + 1
   6664                       if(l_print) write(io8,*) 'AMDAR-AMDAR dup'
   6665                     elseif(l_iim1_airep.and.l_ii_amdar) then
   6666                       n_nr_mswn_ArAm = n_nr_mswn_ArAm + 1
   6667                       if(l_print) write(io8,*) 'AIREP-AMDAR dup'
   6668                     elseif(l_iim1_amdar.and.l_ii_airep) then
   6669                       n_nr_mswn_AmAr = n_nr_mswn_AmAr + 1
   6670                       if(l_print) write(io8,*) 'AMDAR-AIREP dup'
   6671                     elseif(l_iim1_acars.and.l_ii_amdar) then
   6672                       n_nr_mswn_AcAm = n_nr_mswn_AcAm + 1
   6673 ccccdak                      if(l_print) write(io8,*) 'ACARS-AMDAR dup'
   6674                       if(l_print) write(io8,*) 'TAMDAR-AMDAR dup'
   6675                     else
   6676                       l_print = .true.
   6677                       if(l_print) then
   6678                         write(io8,*)
   6679                         write(io8,*) 'Uncat. low-wind msg-wind dup'
   6680                       endif
   6681                     endif
   6682 c
   6683                   elseif(l_ii_mdcrs.and.l_iim1_acars) then
   6684                     n_slow_MdAc = n_slow_MdAc + 1
   6685                     l_print = .false.

Page 135         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   6686                     if(l_print) then
   6687                       write(io8,*)
   6688 ccccdak                      write(io8,*) 'MDCRS-ACARS low-wind dup found'
   6689                       write(io8,*) 'MDCRS-TAMDAR low-wind dup found'
   6690                     endif
   6691 c
   6692                   elseif(l_ii_mdcrs.and.l_iim1_airep) then
   6693                     n_slow_MdAr = n_slow_MdAr + 1
   6694                     l_print = .false.
   6695                     if(l_print) then
   6696                       write(io8,*)
   6697                       write(io8,*) 'MDCRS-AIREP low-wind dup found'
   6698                     endif
   6699 c
   6700                   elseif(l_ii_mdcrs.and.l_iim1_mdcrs) then
   6701                     if(ichk_s(iim1).eq.-10) then
   6702                       n_nr_bad_roll_Md = n_nr_bad_roll_Md + 1
   6703                       l_print = .false.
   6704                       if(l_print) then
   6705                         write(io8,*)
   6706                         write(io8,*)'MDCRS-MDCRS bad roll qc lw dup'
   6707                       endif
   6708                     else
   6709                       n_slow_MdMd = n_slow_MdMd + 1
   6710                       l_print = .false.
   6711                       if(l_print) then
   6712                         write(io8,*)
   6713                         write(io8,*)'MDCRS-MDCRS low-wind dup found'
   6714                       endif
   6715                     endif
   6716 c
   6717                   elseif(l_ii_acars.and.l_iim1_airep) then
   6718                     n_slow_AcAr = n_slow_AcAr + 1
   6719                     l_print = .false.
   6720                     if(l_print) then
   6721                       write(io8,*)
   6722 ccccdak                      write(io8,*) 'ACARS-AIREP low-wind dup found'
   6723                       write(io8,*) 'TAMDAR-AIREP low-wind dup found'
   6724                     endif
   6725 c
   6726                   elseif(l_ii_acars.and.l_iim1_acars) then
   6727                     n_slow_AcAc = n_slow_AcAc + 1
   6728                     l_print = .false.
   6729                     if(l_print) then
   6730                       write(io8,*)
   6731 ccccdak                      write(io8,*) 'ACARS-ACARS low-wind dup found'
   6732                       write(io8,*) 'TAMDAR-TAMDAR low-wind dup found'
   6733                     endif
   6734 c
   6735                   elseif(l_ii_amdar.and.l_iim1_airep) then
   6736                     n_slow_AmAr = n_slow_AmAr + 1
   6737                     l_print = .false.
   6738                     if(l_print) then
   6739                       write(io8,*)
   6740                       write(io8,*) 'AMDAR-AIREP low-wind dup found'
   6741                     endif
   6742 c

Page 136         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   6743                   elseif(l_ii_amdar.and.l_iim1_amdar) then
   6744                     if(ichk_s(iim1).eq.-10) then
   6745                       n_nr_bad_roll_Am = n_nr_bad_roll_Am + 1
   6746                       l_print = .false.
   6747                       if(l_print) then
   6748                         write(io8,*)
   6749                         write(io8,*)'AMDAR-AMDAR bad roll qc lw dup'
   6750                       endif
   6751                     else
   6752                       n_slow_AmAm = n_slow_AmAm + 1
   6753                       l_print = .false.
   6754                       if(l_print) then
   6755                         write(io8,*)
   6756                         write(io8,*) 'AMDAR-AMDAR low-wind dup found'
   6757                       endif
   6758                     endif
   6759 c
   6760                   elseif(l_ii_airep.and.l_iim1_man) then
   6761                     n_slow_ArMa = n_slow_ArMa + 1
   6762                     l_print = .false.
   6763                     if(l_print) then
   6764                       write(io8,*)
   6765                       write(io8,*) 'AIREP-manAIREP low-wind dup'
   6766                     endif
   6767 c
   6768                   elseif(l_ii_airep.and.l_iim1_airep) then
   6769                     n_slow_ArAr = n_slow_ArAr + 1
   6770                     l_print = .false.
   6771                     if(l_print) then
   6772                       write(io8,*)
   6773                       write(io8,*) 'AIREP-AIREP low-wind dup found'
   6774                     endif
   6775 c
   6776                   elseif(l_ii_man.and.l_iim1_man) then
   6777                     n_slow_MaMa = n_slow_MaMa + 1
   6778                     l_print = .false.
   6779                     if(l_print) then
   6780                       write(io8,*)
   6781                       write(io8,*)'manAIREP-manAIREP low-wind dup'
   6782                     endif
   6783 c
   6784                   else
   6785                     l_print = .true.
   6786                     if(l_print) then
   6787                       write(io8,*)
   6788                       write(io8,*) 'Uncategorized low-wind dup-1-'
   6789                     endif
   6790                   endif
   6791 c
   6792 c               Keep ob iim1
   6793 c               ------------
   6794                 elseif((l_iim1_mdcrs.and.l_ii_acars).or.
   6795      $                 (l_iim1_mdcrs.and.l_ii_airep).or. 
   6796      $                 (l_iim1_mdcrs.and.l_ii_man).or.
   6797      $                 (l_iim1_mdcrs.and.l_ii_mdcrs).or.
   6798      $                 (l_iim1_acars.and.l_ii_airep).or.
   6799      $                 (l_iim1_acars.and.l_ii_man).or.

Page 137         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   6800      $                 (l_iim1_acars.and.l_ii_acars).or.
   6801      $                 (l_iim1_amdar.and.l_ii_airep).or.
   6802      $                 (l_iim1_amdar.and.l_ii_man).or.
   6803      $                 (l_iim1_airep.and.l_ii_man).or.
   6804      $                 l_ii_sh.or.
   6805      $                 (ob_spd(iim1).ne.amiss.and.
   6806      $                  ob_spd(ii).eq.amiss).or.
   6807      $                 (ob_dir(iim1).ne.amiss.and.
   6808      $                  ob_dir(ii).eq.amiss)) then
   6809 c
   6810                     indx(knt1) = ii
   6811                     indx(knt0) = iim1
   6812                     isave = ii
   6813                     ii = iim1
   6814                     iim1 = isave
   6815 c
   6816                   if(c_qc(iim1)(1:1).eq.'-'.or.
   6817      $               c_qc(iim1)(1:1).eq.'.'.or.
   6818      $               c_qc(iim1)(1:1).eq.'N') 
   6819      $               c_qc(iim1)(1:1) = 'd'
   6820 c
   6821                   if(c_qc(ii)(1:1).eq.'-') c_qc(ii)(1:1) = '.'
   6822 c
   6823 c                 Count rejects by category
   6824 c                 -------------------------
   6825                   n_near = n_near + 1
   6826 c
   6827                   if(l_ii_sh) then
   6828                     n_near_sh = n_near_sh + 1
   6829                     l_print = .true.
   6830                     if(l_print) then
   6831                       write(io8,*)
   6832                       write(io8,*)'Low-wind dup found with short id'
   6833                     endif
   6834                     if(l_ii_man.and.l_iim1_man) then
   6835                       n_nr_sh_MaMa = n_nr_sh_MaMa + 1
   6836                       if(l_print) 
   6837      $                  write(io8,*) 'manAIREP-manAIREP dup'
   6838                     elseif(l_ii_man.and.l_iim1_airep) then 
   6839                       n_nr_sh_MaAr = n_nr_sh_MaAr + 1
   6840                       if(l_print) write(io8,*) 'manAIREP-AIREP dup'
   6841                     elseif(l_ii_man.and.l_iim1_mdcrs) then 
   6842                       n_nr_sh_MaMd = n_nr_sh_MaMd + 1
   6843                       if(l_print) write(io8,*) 'manAIREP-MDCRS dup'
   6844                     elseif(l_ii_man.and.l_iim1_acars) then 
   6845                       n_nr_sh_MaAc = n_nr_sh_MaAc + 1
   6846 ccccdak                      if(l_print) write(io8,*) 'manAIREP-ACARS dup'
   6847                       if(l_print) write(io8,*) 'manAIREP-TAMDAR dup'
   6848                     elseif(l_iim1_man.and.l_ii_airep) then 
   6849                       n_nr_sh_ArMa = n_nr_sh_ArMa + 1
   6850                       if(l_print) write(io8,*) 'AIREP-manAIREP dup'
   6851                     elseif(l_ii_airep.and.l_iim1_airep) then 
   6852                       n_nr_sh_ArAr = n_nr_sh_ArAr + 1
   6853                       if(l_print) write(io8,*) 'AIREP-AIREP dup'
   6854                     else
   6855                       l_print = .true.
   6856                       if(l_print) then

Page 138         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   6857                         write(io8,*)
   6858                         write(io8,*) 'Uncat. low-wind short-id dup'
   6859                       endif
   6860                     endif
   6861 c
   6862                   elseif((ob_spd(ii).ne.amiss.and.
   6863      $                    ob_spd(iim1).eq.amiss).or.
   6864      $                   (ob_dir(ii).ne.amiss.and.
   6865      $                    ob_dir(iim1).eq.amiss)) then
   6866                     n_near_ws = n_near_ws + 1
   6867                     l_print = .false.
   6868                     if(c_acftid(iim1)(1:2).eq.'IT') then 
   6869                       n_near_ws_IT = n_near_ws_IT + 1
   6870                       l_print = .false.
   6871                     elseif(c_acftid(iim1)(1:2).eq.'EU') then 
   6872                       n_near_ws_EU = n_near_ws_EU + 1
   6873                       l_print = .false.
   6874                     endif
   6875                     if(l_print) then
   6876                       write(io8,*)
   6877                       write(io8,*) 'Low-wind dup with msg winds'
   6878                     endif
   6879                     if(l_ii_man.and.l_iim1_man) then
   6880                       n_nr_mswn_MaMa = n_nr_mswn_MaMa + 1
   6881                       if(l_print) 
   6882      $                  write(io8,*) 'manAIREP-manAIREP dup'
   6883                     elseif(l_ii_man.and.l_iim1_airep) then 
   6884                       n_nr_mswn_MaAr = n_nr_mswn_MaAr + 1
   6885                       if(l_print) write(io8,*) 'manAIREP-AIREP dup'
   6886                     elseif(l_ii_man.and.l_iim1_amdar) then 
   6887                       n_nr_mswn_MaAm = n_nr_mswn_MaAm + 1
   6888                       if(l_print) write(io8,*) 'manAIREP-AMDAR dup'
   6889                     elseif(l_iim1_man.and.l_ii_airep) then 
   6890                       n_nr_mswn_ArMa = n_nr_mswn_ArMa + 1
   6891                       if(l_print) write(io8,*) 'AIREP-manAIREP dup'
   6892                     elseif(l_ii_airep.and.l_iim1_airep) then 
   6893                       n_nr_mswn_ArAr = n_nr_mswn_ArAr + 1
   6894                       if(l_print) write(io8,*) 'AIREP-AIREP dup'
   6895                     elseif(l_ii_acars.and.l_iim1_acars) then
   6896                       n_nr_mswn_AcAc = n_nr_mswn_AcAc + 1
   6897 ccccdak                      if(l_print) write(io8,*) 'ACARS-ACARS dup'
   6898                       if(l_print) write(io8,*) 'TAMDAR-TAMDAR dup'
   6899                     elseif(l_ii_mdcrs.and.l_iim1_mdcrs) then
   6900                       n_nr_mswn_MdMd = n_nr_mswn_MdMd + 1
   6901                       if(l_print) write(io8,*) 'MDCRS-MDCRS dup'
   6902                     elseif(l_ii_acars.and.l_iim1_mdcrs) then
   6903                       n_nr_mswn_AcMd = n_nr_mswn_AcMd + 1
   6904 ccccdak                      if(l_print) write(io8,*) 'ACARS-MDCRS dup'
   6905                       if(l_print) write(io8,*) 'TAMDAR-MDCRS dup'
   6906                     elseif(l_ii_mdcrs.and.l_iim1_acars) then
   6907                       n_nr_mswn_MdAc = n_nr_mswn_MdAc + 1
   6908 ccccdak                      if(l_print) write(io8,*) 'MDCRS-ACARS dup'
   6909                       if(l_print) write(io8,*) 'MDCRS-TAMDAR dup'
   6910                     elseif(l_ii_mdcrs.and.l_iim1_amdar) then
   6911                       n_nr_mswn_MdAm = n_nr_mswn_MdAm + 1
   6912                       if(l_print) write(io8,*) 'MDCRS-AMDAR dup'
   6913                     elseif(l_ii_mdcrs.and.l_iim1_airep) then

Page 139         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   6914                       n_nr_mswn_MdAr = n_nr_mswn_MdAr + 1
   6915                       if(l_print) write(io8,*) 'MDCRS-AIREP dup'
   6916                     elseif(l_ii_mdcrs.and.l_iim1_man) then
   6917                       n_nr_mswn_MdMa = n_nr_mswn_MdMa + 1
   6918                       if(l_print) write(io8,*) 'MDCRS-manAIREP dup'
   6919                     elseif(l_ii_airep.and.l_iim1_acars) then
   6920                       n_nr_mswn_ArAc = n_nr_mswn_ArAc + 1
   6921 ccccdak                      if(l_print) write(io8,*) 'AIREP-ACARS dup'
   6922                       if(l_print) write(io8,*) 'AIREP-TAMDAR dup'
   6923                     elseif(l_ii_airep.and.l_iim1_mdcrs) then
   6924                       n_nr_mswn_ArMd = n_nr_mswn_ArMd + 1
   6925                       if(l_print) write(io8,*) 'AIREP-MDCRS dup'
   6926                     elseif(l_ii_man.and.l_iim1_acars) then
   6927                       n_nr_mswn_MaAc = n_nr_mswn_MaAc + 1
   6928 ccccdak                      if(l_print) write(io8,*) 'manAIREP-ACARS dup'
   6929                       if(l_print) write(io8,*) 'manAIREP-TAMDAR dup'
   6930                     elseif(l_ii_man.and.l_iim1_mdcrs) then
   6931                       n_nr_mswn_MaMd = n_nr_mswn_MaMd + 1
   6932                       if(l_print) write(io8,*) 'manAIREP-MDCRS dup'
   6933                     elseif(l_ii_amdar.and.l_iim1_amdar) then
   6934                       n_nr_mswn_AmAm = n_nr_mswn_AmAm + 1
   6935                       if(l_print) write(io8,*) 'AMDAR-AMDAR dup'
   6936                     elseif(l_ii_airep.and.l_iim1_amdar) then
   6937                       n_nr_mswn_ArAm = n_nr_mswn_ArAm + 1
   6938                       if(l_print) write(io8,*) 'AIREP-AMDAR dup'
   6939                     elseif(l_ii_amdar.and.l_iim1_airep) then
   6940                       n_nr_mswn_AmAr = n_nr_mswn_AmAr + 1
   6941                       if(l_print) write(io8,*) 'AMDAR-AIREP dup'
   6942                     elseif(l_ii_acars.and.l_iim1_amdar) then
   6943                       n_nr_mswn_AcAm = n_nr_mswn_AcAm + 1
   6944 ccccdak                      if(l_print) write(io8,*) 'ACARS-AMDAR dup'
   6945                       if(l_print) write(io8,*) 'TAMDAR-AMDAR dup'
   6946                     else
   6947                       l_print = .true.
   6948                       if(l_print) then
   6949                         write(io8,*)
   6950                         write(io8,*) 'Uncat. low-wind msg-wind dup'
   6951                       endif
   6952                     endif
   6953 c
   6954                   elseif(l_iim1_mdcrs.and.l_ii_acars) then
   6955                     n_slow_MdAc = n_slow_MdAc + 1
   6956                     l_print = .false.
   6957                     if(l_print) then
   6958                       write(io8,*)
   6959 ccccdak                      write(io8,*) 'MDCRS-ACARS low-wind dup found'
   6960                       write(io8,*) 'MDCRS-TAMDAR low-wind dup found'
   6961                     endif
   6962 c
   6963                   elseif(l_iim1_mdcrs.and.l_ii_airep) then
   6964                     n_slow_MdAr = n_slow_MdAr + 1
   6965                     l_print = .false.
   6966                     if(l_print) then
   6967                       write(io8,*)
   6968                       write(io8,*) 'MDCRS-AIREP low-wind dup found'
   6969                     endif
   6970 c

Page 140         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   6971                   elseif(l_ii_mdcrs.and.l_iim1_mdcrs) then
   6972                     if(ichk_s(iim1).eq.-10) then
   6973                       n_nr_bad_roll_Md = n_nr_bad_roll_Md + 1
   6974                       l_print = .false.
   6975                       if(l_print) then
   6976                         write(io8,*)
   6977                         write(io8,*)'MDCRS-MDCRS bad roll qc lw dup'
   6978                       endif
   6979                     else
   6980                       n_slow_MdMd = n_slow_MdMd + 1
   6981                       l_print = .false.
   6982                       if(l_print) then
   6983                         write(io8,*)
   6984                         write(io8,*)'MDCRS-MDCRS low-wind dup found'
   6985                       endif
   6986                     endif
   6987 c
   6988                   elseif(l_iim1_acars.and.l_ii_airep) then
   6989                     n_slow_AcAr = n_slow_AcAr + 1
   6990                     l_print = .false.
   6991                     if(l_print) then
   6992                       write(io8,*)
   6993 ccccdak                      write(io8,*) 'ACARS-AIREP low-wind dup found'
   6994                       write(io8,*) 'TAMDAR-AIREP low-wind dup found'
   6995                     endif
   6996 c
   6997                   elseif(l_iim1_acars.and.l_ii_acars) then
   6998                     n_slow_AcAc = n_slow_AcAc + 1
   6999                     l_print = .false.
   7000                     if(l_print) then
   7001                       write(io8,*)
   7002 ccccdak                      write(io8,*) 'ACARS-ACARS low-wind dup found'
   7003                       write(io8,*) 'TAMDAR-TAMDAR low-wind dup found'
   7004                     endif
   7005 c
   7006                   elseif(l_ii_amdar.and.l_iim1_amdar) then
   7007                     if(ichk_s(iim1).eq.-10) then
   7008                       n_nr_bad_roll_Am = n_nr_bad_roll_Am + 1
   7009                       l_print = .false.
   7010                       if(l_print) then
   7011                         write(io8,*)
   7012                         write(io8,*)'AMDAR-AMDAR bad roll qc lw dup'
   7013                       endif
   7014                     else
   7015                       n_slow_AmAm = n_slow_AmAm + 1
   7016                       l_print = .false.
   7017                       if(l_print) then
   7018                         write(io8,*)
   7019                         write(io8,*)'AMDAR-AMDAR low-wind dup found'
   7020                       endif
   7021                     endif
   7022 c
   7023                   elseif(l_iim1_amdar.and.l_ii_airep) then
   7024                     n_slow_AmAr = n_slow_AmAr + 1
   7025                     l_print = .false.
   7026                     if(l_print) then
   7027                       write(io8,*)

Page 141         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   7028                       write(io8,*) 'AMDAR-AIREP low-wind dup found'
   7029                     endif
   7030 c
   7031                   elseif(l_iim1_airep.and.l_ii_man) then
   7032                     n_slow_ArMa = n_slow_ArMa + 1
   7033                     l_print = .false.
   7034                     if(l_print) then
   7035                       write(io8,*)
   7036                       write(io8,*) 'AIREP-manAIREP low-wind dup'
   7037                     endif
   7038 c
   7039                   else
   7040                     l_print = .true.
   7041                     if(l_print) then
   7042                       write(io8,*)
   7043                       write(io8,*) 'Uncategorized low-wind dup-2-'
   7044                     endif
   7045                   endif
   7046                 endif
   7047 c
   7048 c             Check if report is a near dup except for flight id (not rejected)
   7049 c             Echo to log file for later inspection
   7050 c             -----------------------------------------------------------------
   7051               elseif(idt_dif.ge.0.and.idt_dif.le.90.and.
   7052      $               c_qc(iim1)(1:1).ne.'D'.and.
   7053 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
   7054      $               abs(alat(iim1)-alat(ii)).lt.0.125.and.
   7055      $               abs(alon(iim1)-alon(ii)).lt.0.125.and.
   7056 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
   7057      $               ((ht_ft(ii).lt.25000.and.
   7058      $             abs(ht_ft(iim1)-ht_ft(ii)).lt.htdif_same/4+0.5).or.
   7059      $                (((l_ii_mdcrs.and.(.not.l_iim1_mdcrs)).or.        ! new
   7060      $                  (l_iim1_mdcrs.and.(.not.l_ii_mdcrs)).or.        ! new
   7061      $                  (l_ii_acars.and.(.not.l_iim1_acars)).or.        ! new
   7062      $                  (l_iim1_acars.and.(.not.l_ii_acars)).or.        ! new
   7063      $                  (l_ii_man.and.(.not.l_iim1_man)).or.            ! new
   7064      $                  (l_iim1_man.and.(.not.l_ii_man)).or.            ! new
   7065      $                  (((l_ii_amdar.and.l_iim1_amdar).or.             ! new
   7066      $                    (l_ii_airep.and.l_iim1_amdar).or.             ! new
   7067      $                    (l_iim1_airep.and.l_ii_amdar)).and.           ! new
   7068      $                   c_acftid(ii).eq.c_acftid(iim1)) ).and.         ! new
   7069      $                  ht_ft(ii).lt.25000.and.
   7070      $               abs(ht_ft(iim1)-ht_ft(ii)).lt.htdif_same+0.5).or.
   7071      $                (ht_ft(ii).gt.24999.5.and.
   7072      $               abs(ht_ft(iim1)-ht_ft(ii)).lt.htdif_same+0.5)).and.
   7073      $               abs(ob_t(iim1)-ob_t(ii)).lt.1.25.and.
   7074      $               ((abs(ob_spd(iim1)-ob_spd(ii)).lt.1.25.and.
   7075      $                 ((abs(difdir).lt.10.5).or.
   7076      $                  (ob_dir(ii).eq.amiss.and.
   7077      $                   ob_dir(iim1).eq.amiss))).or.
   7078      $               (ob_spd(iim1).eq.amiss.and.ob_spd(ii).ne.amiss).or.
   7079      $               (ob_spd(iim1).ne.amiss.and.ob_spd(ii).eq.amiss).or.
   7080      $               (ob_dir(iim1).eq.amiss.and.ob_dir(ii).ne.amiss).or.
   7081      $                (ob_dir(iim1).ne.amiss.and.ob_dir(ii).eq.amiss))
   7082      $                 ) then
   7083 c
   7084                 l_print = .true.

Page 142         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   7085                 if(l_print) then
   7086                   write(io8,*)
   7087                   write(io8,*) 'Non-rejected duplicate found--',ii
   7088                 endif
   7089 c
   7090 c             Check if airep report is an exact dup except for large temperature or
   7091 c             wind differences--assume encode error and reject both!
   7092 c             -----------------------------------------------------------------
   7093               elseif((idt_dif.ge.0.and.idt_dif.le.90).and.
   7094      $               c_qc(iim1)(1:1).ne.'D'.and.
   7095 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
   7096      $               abs(alat(iim1)-alat(ii)).lt.0.035.and.
   7097      $               abs(alon(iim1)-alon(ii)).lt.0.035.and.
   7098 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
   7099      $               (abs(ht_ft(iim1)-ht_ft(ii)).lt.0.5.or.
   7100      $                abs(pres(iim1)-pres(ii)).lt.0.05).and.
   7101      $               (c_acftid(ii).eq.c_acftid(iim1).or.
   7102      $                l_ii_sh.or.l_iim1_sh).and.
   7103      $               (l_ii_man.and.l_iim1_man)) then
   7104 c
   7105                 l_print = .true.
   7106                 if(l_print) then
   7107                   write(io8,*)
   7108                   write(io8,*) 'Encoding problem detected'
   7109                 endif
   7110 c
   7111 c               Special case where winds are missing
   7112 c               (Temperature for that report is usually way off!)
   7113 c               Reject report with missing winds
   7114 c               -------------------------------------------------
   7115                 if(ob_spd(iim1).eq.amiss.and.ob_spd(ii).ne.amiss.and.
   7116      $             ob_dir(iim1).eq.amiss.and.ob_dir(ii).ne.amiss.and.
   7117      $             (c_qc(iim1)(1:1).eq.'-'.or.
   7118      $              c_qc(iim1)(1:1).eq.'.'.or.
   7119      $              c_qc(iim1)(1:1).eq.'N')) then
   7120 c
   7121                   c_qc(iim1)(1:1) = 'e'
   7122 c
   7123                 elseif(ob_spd(ii).eq.amiss.and.
   7124      $                 ob_spd(iim1).ne.amiss.and.
   7125      $                 ob_dir(ii).eq.amiss.and.
   7126      $                 ob_dir(iim1).ne.amiss.and.
   7127      $                 (c_qc(ii)(1:1).eq.'-'.or.
   7128      $                  c_qc(ii)(1:1).eq.'.'.or.
   7129      $                  c_qc(ii)(1:1).eq.'N')) then
   7130 c
   7131                   indx(knt1) = ii
   7132                   indx(knt0) = iim1
   7133                   isave = ii
   7134                   ii = iim1
   7135                   iim1 = isave
   7136                   c_qc(iim1)(1:1) = 'e'
   7137 c
   7138                 elseif((c_acftid(ii).eq.c_acftid(iim1).or.
   7139      $                  l_iim1_sh).and.
   7140      $                 (c_qc(iim1)(1:1).eq.'-'.or.
   7141      $                  c_qc(iim1)(1:1).eq.'.'.or.

Page 143         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   7142      $                  c_qc(iim1)(1:1).eq.'N')) then
   7143 c
   7144                   c_qc(iim1)(1:1) = 'E'
   7145 c
   7146                elseif((c_acftid(ii).eq.c_acftid(iim1).or.l_ii_sh).and.
   7147      $                 (c_qc(ii)(1:1).eq.'-'.or.
   7148      $                  c_qc(ii)(1:1).eq.'.'.or.
   7149      $                  c_qc(ii)(1:1).eq.'N')) then
   7150 c
   7151                   indx(knt1) = ii
   7152                   indx(knt0) = iim1
   7153                   isave = ii
   7154                   ii = iim1
   7155                   iim1 = isave
   7156                   c_qc(iim1)(1:1) = 'E'
   7157 c
   7158                 endif
   7159 c
   7160                 if(abs(ob_t(iim1)-ob_t(ii)).lt.2.05.and.
   7161      $             abs(difdir).lt.10.5.and.
   7162      $             abs(ob_spd(iim1)-ob_spd(ii)).lt.1.25) then
   7163 c
   7164                   c_qc(iim1)(1:1) = 'd'
   7165 c
   7166                   if(l_print) write(io8,*) 'Near duplicate'
   7167                   n_near = n_near + 1
   7168                   n_near_MaMa = n_near_MaMa + 1
   7169 c
   7170                 else
   7171                   n_bad_encode = n_bad_encode + 1
   7172 c
   7173                   if(abs(ob_t(iim1)-ob_t(ii)).gt.2.05.and.
   7174      $               c_qc(iim1)(1:1).ne.'e') then 
   7175                     c_qc(ii)(6:6) = 'E'
   7176                     if(l_print) write(io8,*) 'Bad temperature'
   7177                   endif
   7178 c
   7179                   if(abs(difdir).gt.10.5.and.
   7180      $               c_qc(iim1)(1:1).ne.'e') then 
   7181                     c_qc(ii)(7:7) = 'E'
   7182                     if(l_print) write(io8,*) 'Bad wind direction'
   7183                   endif
   7184 c
   7185                   if(abs(ob_spd(iim1)-ob_spd(ii)).gt.1.25.and. 
   7186      $               c_qc(iim1)(1:1).ne.'e') then 
   7187                     c_qc(ii)(8:8) = 'E'
   7188                     if(l_print) write(io8,*) 'Bad windspeed'
   7189                   endif
   7190                 endif
   7191 c
   7192 c             Check if report is a position dup 
   7193 c             Echo to log file for later inspection
   7194 c             -------------------------------------
   7195               elseif(idt_dif.ge.0.and.idt_dif.le.90.and.
   7196      $               c_qc(iim1)(1:1).ne.'D'.and.
   7197 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
   7198      $               abs(alat(iim1)-alat(ii)).lt.0.035.and.

Page 144         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   7199      $               abs(alon(iim1)-alon(ii)).lt.0.035.and.
   7200 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
   7201 c     $               abs(ht_ft(iim1)-ht_ft(ii)).lt.50.5.and.
   7202      $               abs(ht_ft(iim1)-ht_ft(ii)).lt.25.5.and.
   7203      $               (c_acftid(ii).eq.c_acftid(iim1).or.
   7204      $                l_ii_sh.or.l_iim1_sh)) then
   7205 c
   7206 c               Check if MDCRS-MDCRS duplicate has a bad roll angle
   7207 c               ---------------------------------------------------
   7208                 if((ichk_s(iim1).eq.-10.and.
   7209      $              ichk_s(ii  ).ne.-10).and.
   7210      $             l_iim1_mdcrs.and.l_ii_mdcrs.and.
   7211      $             abs(ob_t(iim1)-ob_t(ii)).lt.1.25.and.
   7212      $             (c_qc(iim1)(1:1).eq.'-'.or.
   7213      $              c_qc(iim1)(1:1).eq.'.'.or.
   7214      $              c_qc(iim1)(1:1).eq.'N')) then
   7215 c
   7216                   c_qc(iim1)(1:1) = 'd'
   7217 c
   7218                   n_near = n_near + 1
   7219                   n_nr_bad_roll_Md = n_nr_bad_roll_Md + 1
   7220 c
   7221                   l_print = .false.
   7222                   if(l_print) then
   7223                     write(io8,*)
   7224                     write(io8,*) 'Bad roll angle qc - MDCRS'
   7225                   endif
   7226 c
   7227                 elseif((ichk_s(ii  ).eq.-10.and.
   7228      $                  ichk_s(iim1).ne.-10).and.
   7229      $                 l_iim1_mdcrs.and.l_ii_mdcrs.and.
   7230      $                 abs(ob_t(iim1)-ob_t(ii)).lt.1.25.and.
   7231      $                 (c_qc(ii)(1:1).eq.'-'.or.
   7232      $                  c_qc(ii)(1:1).eq.'.'.or.
   7233      $                  c_qc(ii)(1:1).eq.'N')) then
   7234 c
   7235                   indx(knt1) = ii
   7236                   indx(knt0) = iim1
   7237                   isave = ii
   7238                   ii = iim1
   7239                   iim1 = isave
   7240 c
   7241                   c_qc(iim1)(1:1) = 'd'
   7242 c
   7243                   n_near = n_near + 1
   7244                   n_nr_bad_roll_Md = n_nr_bad_roll_Md + 1
   7245 c
   7246                   l_print = .false.
   7247                   if(l_print) then
   7248                     write(io8,*)
   7249                     write(io8,*) 'Bad roll angle qc - MDCRS'
   7250                   endif
   7251 c
   7252 c               Check if AMDAR-AMDAR duplicate has a bad roll angle
   7253 c               ---------------------------------------------------
   7254                 elseif((ichk_s(iim1).eq.-10.and.
   7255      $                  ichk_s(ii  ).ne.-10).and.

Page 145         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   7256      $             l_iim1_amdar.and.l_ii_amdar.and.
   7257      $             abs(ob_t(iim1)-ob_t(ii)).lt.1.25.and.
   7258      $             (c_qc(iim1)(1:1).eq.'-'.or.
   7259      $              c_qc(iim1)(1:1).eq.'.'.or.
   7260      $              c_qc(iim1)(1:1).eq.'N')) then
   7261 c
   7262                   c_qc(iim1)(1:1) = 'd'
   7263 c
   7264                   n_near = n_near + 1
   7265                   n_nr_bad_roll_Am = n_nr_bad_roll_Am + 1
   7266 c
   7267                   l_print = .false.
   7268                   if(l_print) then
   7269                     write(io8,*)
   7270                     write(io8,*) 'Bad roll angle qc - AMDAR'
   7271                   endif
   7272 c
   7273                 elseif((ichk_s(ii  ).eq.-10.and.
   7274      $                  ichk_s(iim1).ne.-10).and.
   7275      $                 l_iim1_amdar.and.l_ii_amdar.and.
   7276      $                 abs(ob_t(iim1)-ob_t(ii)).lt.1.25.and.
   7277      $                 (c_qc(ii)(1:1).eq.'-'.or.
   7278      $                  c_qc(ii)(1:1).eq.'.'.or.
   7279      $                  c_qc(ii)(1:1).eq.'N')) then
   7280 c
   7281                   indx(knt1) = ii
   7282                   indx(knt0) = iim1
   7283                   isave = ii
   7284                   ii = iim1
   7285                   iim1 = isave
   7286 c
   7287                   c_qc(iim1)(1:1) = 'd'
   7288 c
   7289                   n_near = n_near + 1
   7290                   n_nr_bad_roll_Am = n_nr_bad_roll_Am + 1
   7291 c
   7292                   l_print = .false.
   7293                   if(l_print) then
   7294                     write(io8,*)
   7295                     write(io8,*) 'Bad roll angle qc - AMDAR'
   7296                   endif
   7297 c
   7298                 else
   7299                   if(c_qc(ii)(1:1).eq.'-') c_qc(ii)(1:1) = '.'
   7300                   l_print = .false.
   7301                   if(l_print) then
   7302                     write(io8,*)
   7303                     write(io8,*) 'Position duplicate found'
   7304                   endif
   7305 c
   7306                 endif
   7307 c
   7308 c             Set c_qc to '.' if no duplicate found within 60 sec window
   7309 c             ----------------------------------------------------------
   7310               else
   7311                 if(c_qc(ii)(1:1).eq.'-') c_qc(ii)(1:1) = '.'
   7312               endif

Page 146         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   7313 c
   7314 c           Set c_qc to '.' if lats and lons too far apart
   7315 c           ----------------------------------------------
   7316             else
   7317               if(c_qc(ii)(1:1).eq.'-') c_qc(ii)(1:1) = '.'
   7318             endif
   7319 c
   7320             if(l_print) then
   7321 c            if(c_qc(iim1)(1:1).eq.'d'.and.
   7322 c     $         (idt(ii).ne.idt(iim1).or.
   7323 c     $          c_acftid(ii).ne.c_acftid(iim1))) then
   7324               write(io8,*)
   7325               write(io8,8002) kkdup,iim1,c_insty_ob(itype(iim1))
   7326      x,            c_acftreg(iim1),c_acftid(iim1)
   7327      x,            idt(iim1),alat(iim1),alon(iim1)
   7328      x,            pres(iim1),ht_ft(iim1)
   7329      x,            t_prcn(iim1),ob_t(iim1),xiv_t(iim1),ichk_t(iim1)
   7330      x,            ob_q(iim1),xiv_q(iim1),ichk_q(iim1)
   7331      x,            ob_dir(iim1),xiv_d(iim1),ichk_d(iim1)
   7332      x,            ob_spd(iim1),xiv_s(iim1),ichk_s(iim1)
   7333      x,            c_qc(iim1)
   7334               write(io8,8002) kkdup,ii,c_insty_ob(itype(ii))
   7335      x,            c_acftreg(ii),c_acftid(ii)
   7336      x,            idt(ii),alat(ii),alon(ii)
   7337      x,            pres(ii),ht_ft(ii)
   7338      x,            t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
   7339      x,            ob_q(ii),xiv_q(ii),ichk_q(ii)
   7340      x,            ob_dir(ii),xiv_d(ii),ichk_d(ii)
   7341      x,            ob_spd(ii),xiv_s(ii),ichk_s(ii)
   7342      x,            c_qc(ii)
   7343  8002         format(i3,1x,i6,1x,a8,1x,a8,1x,a9,1x,i7,1x,2f11.5,1x
   7344      x,            f8.1,1x,f7.0,1x,f5.2,4(2(1x,f8.2),1x,i5),1x
   7345      x,            '!',a11,'!')
   7346             endif
   7347 cc
   7348 ccccccdak           Set up table associating airep and acars flight ids
   7349 cc           Set up table associating airep and tamdar flight ids
   7350 cc           Require that the report be within idt_samflt of the previously
   7351 cc             saved minimum and maximum times for this flight segment
   7352 cc             and is within fairly close limits on position, temp and winds
   7353 cc           ---------------------------------------------------------------
   7354 c            if( ( (l_ii_acars   .and..not.l_iim1_acars ).or.
   7355 c     $            (l_iim1_acars .and..not.l_ii_acars   ).or.
   7356 c     $            (l_ii_mdcrs  .and..not.l_iim1_mdcrs).or.
   7357 c     $            (l_iim1_mdcrs.and..not.l_ii_mdcrs  ) ).and.
   7358 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
   7359 c     $          abs(alat(iim1)-alat(ii))    .lt.0.025.and.
   7360 c     $          abs(alon(iim1)-alon(ii))    .lt.0.025.and.
   7361 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
   7362 c     $          abs(ob_t(iim1)-ob_t(ii))    .lt.0.65.and.
   7363 c     $          abs(difdir).lt.5.5.and.
   7364 c     $          abs(ob_spd(iim1)-ob_spd(ii)).lt.0.55.and.  
   7365 c     $          (c_qc(iim1)(1:1).eq.'D'.or.c_qc(iim1)(1:1).eq.'d').and.
   7366 c     $          c_acftid(iim1)(1:8).ne.c_acftid(ii)(1:8) ) then
   7367 cc
   7368 c              if(ndup.ne.0) then
   7369 c                kk = 1

Page 147         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   7370 cc
   7371 c                do while (kk.le.ndup)
   7372 c                  min_idt = idt_min(kk) - idt_samflt
   7373 cc                  if(min_idt.lt.0) min_idt = 0
   7374 c                  max_idt = idt_max(kk) + idt_samflt
   7375 cc                  if(max_idt.gt.24*60*60) max_idt = 24*60*60
   7376 cc
   7377 c                  if(c_acftid(ii)  .eq.c_acr_id(kk).and.
   7378 c     $               c_acftreg(ii) .eq.c_acr_reg(kk).and.
   7379 c     $               c_acftid(iim1).eq.c_air_id(kk).and.
   7380 c     $               idt(ii).ge.min_idt.and.
   7381 c     $               idt(ii).le.max_idt) then
   7382 cc
   7383 c                    kdup(kk) = kdup(kk) + 1
   7384 c                    if(idt(ii).lt.idt_min(kk)) 
   7385 c     $                idt_min(kk) = idt(ii)
   7386 c                    if(idt(ii).gt.idt_max(kk)) 
   7387 c     $                idt_max(kk) = idt(ii)
   7388 cc
   7389 c                    goto 201
   7390 c                  endif
   7391 cc
   7392 c                  kk = kk + 1
   7393 c                enddo
   7394 c              endif
   7395 cc
   7396 c              ndup = ndup + 1
   7397 c              c_acr_id(ndup) = c_acftid(ii)
   7398 c              c_acr_reg(ndup) = c_acftreg(ii)
   7399 c              c_air_id(ndup) = c_acftid(iim1)
   7400 c              idt_min(ndup) = idt(ii)
   7401 c              idt_max(ndup) = idt(ii)
   7402 c              kdup(ndup) = 1
   7403 cc
   7404 c 201          continue
   7405 c            endif
   7406 c
   7407 c         Set c_qc to '.' if iim1 = 0
   7408 c         ---------------------------
   7409           else
   7410             if(c_qc(ii)(1:1).eq.'-') c_qc(ii)(1:1) = '.'
   7411           endif
   7412 c
   7413 c       End loop over reports within 60 seconds
   7414 c       ---------------------------------------
   7415         enddo
   7416 c
   7417 c     End loop over reports
   7418 c     ---------------------
   7419       enddo
   7420 cc
   7421 cc Check mixed duplicates for double mapping
   7422 cc -----------------------------------------------
   7423 c      do kk=1,ndup-1
   7424 c        do kk1=kk+1,ndup
   7425 c          if(c_air_id(kk).eq.c_air_id(kk1).and.
   7426 c     $       c_acr_id(kk).ne.c_acr_id(kk1)) then

Page 148         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   7427 c            if((kdup(kk).le.3.and.kdup(kk1).gt.5).or.
   7428 c     $         ((kdup(kk1)-kdup(kk))*100/kdup(kk1).ge.70)) then
   7429 c              c_air_id(kk) = '         '
   7430 c              c_acr_id(kk) = '         '
   7431 c              kdup(kk) = 0
   7432 c            elseif((kdup(kk).gt.5.and.kdup(kk1).le.3).or.
   7433 c     $             ((kdup(kk)-kdup(kk1))*100/kdup(kk).ge.70)) then
   7434 c              c_air_id(kk1) = '         '
   7435 c              c_acr_id(kk1) = '         '
   7436 c              kdup(kk1) = 0
   7437 c            else
   7438 c              write(io8,*)
   7439 c              write(io8,*) 'Multiple ids for mixed duplicates found'
   7440 c              write(io8,*) 'Cannot choose which id to use'
   7441 c              write(io8,*) kk,'  ',c_air_id(kk),c_acr_id(kk),
   7442 c     $                     kdup(kk),idt_min(kk),idt_max(kk)
   7443 c              write(io8,*) kk1,'  ',c_air_id(kk1),c_acr_id(kk1),
   7444 c     $                     kdup(kk1),idt_min(kk1),idt_max(kk1)
   7445 c              c_air_id(kk) = '         '
   7446 c              c_acr_id(kk) = '         '
   7447 c              kdup(kk) = 0
   7448 c              c_air_id(kk1) = '         '
   7449 c              c_acr_id(kk1) = '         '
   7450 c              kdup(kk1) = 0
   7451 c            endif
   7452 c          endif
   7453 c        enddo
   7454 c      enddo
   7455 cc
   7456 cc Output mixed duplicate mapping
   7457 cc ------------------------------
   7458 c      write(io8,*)
   7459 ccccdak      write(io8,*) '         kk  airep id acars id  #  idt_min idt_max'
   7460 c      write(io8,*) '         kk  airep id tamdar id  #  idt_min idt_max'
   7461 c      write(io8,*) '         --  -------- --------- --- ------- -------'
   7462 c      do kk=1,ndup
   7463 c        write(io8,*) kk,'  ',c_air_id(kk),c_acr_id(kk),kdup(kk),
   7464 c     $               idt_min(kk),idt_max(kk)
   7465 c      enddo
   7466 cc
   7467 cc Map new flight ids and tail numbers on airep data
   7468 cc Check all flights--allow AMDAR-AIREP mixed dups
   7469 ccccccdak Almost all of the AIREP-ACARS/MDCRS dups are UAL
   7470 cc Almost all of the AIREP-TAMDAR/MDCRS dups are UAL
   7471 cc -------------------------------------------------
   7472 c      kmap = 0
   7473 c      l_ual_all = .false.
   7474 cc
   7475 c      do iob=1,numreps
   7476 c        ii = indx(iob)
   7477 c        if(itype(ii).ne.i_acars     .and.
   7478 c     $     itype(ii).ne.i_acars_asc .and.
   7479 c     $     itype(ii).ne.i_acars_lvl .and.
   7480 c     $     itype(ii).ne.i_acars_des .and.
   7481 c     $     itype(ii).ne.i_mdcrs    .and.
   7482 c     $     itype(ii).ne.i_mdcrs_asc.and.
   7483 c     $     itype(ii).ne.i_mdcrs_lvl.and.

Page 149         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   7484 c     $     itype(ii).ne.i_mdcrs_des.and.
   7485 c     $     itype(ii).ne.i_amdar    .and.
   7486 c     $     itype(ii).ne.i_amdar_asc.and.
   7487 c     $     itype(ii).ne.i_amdar_lvl.and.
   7488 c     $     itype(ii).ne.i_amdar_des.and.
   7489 c     $     c_qc(ii)(1:1).ne.'D'.and.
   7490 c     $     c_qc(ii)(1:1).ne.'d'.and.
   7491 c     $     c_qc(ii)(1:1).ne.'e'.and.
   7492 c     $     c_qc(ii)(1:1).ne.'E'.and.
   7493 c     $     (.not.l_ual_all.or.
   7494 c     $      (l_ual_all.and.c_acftid(ii)(1:2).eq.'UA'))) then
   7495 cc
   7496 c          do kk=1,ndup
   7497 c            min_idt = idt_min(kk) - idt_samflt
   7498 c            max_idt = idt_max(kk) + idt_samflt
   7499 cc
   7500 c            if((c_acftid(ii)(1:8).eq.
   7501 c     $          c_air_id(kk)(1:2)//c_air_id(kk)(4:9)).or.
   7502 c     $          (c_acftid(ii)(1:9).eq.c_air_id(kk)(1:9)).and.
   7503 c     $         idt(ii).ge.min_idt.and.
   7504 c     $         idt(ii).le.max_idt) then
   7505 cc
   7506 cc              write(io8,*)
   7507 cc              write(io8,*) 'Flight id re-mapped: before and after'
   7508 cc              write(io8,8002) kkdup,ii,c_insty_ob(itype(ii))
   7509 cc     x,           c_acftreg(ii),c_acftid(ii)
   7510 cc     x,           idt(ii),alat(ii),alon(ii)
   7511 cc     x,           pres(ii),ht_ft(ii)
   7512 cc     x,           t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
   7513 cc     x,           ob_q(ii),xiv_q(ii),ichk_q(ii)
   7514 cc     x,           ob_dir(ii),xiv_d(ii),ichk_d(ii)
   7515 cc     x,           ob_spd(ii),xiv_s(ii),ichk_s(ii)
   7516 cc     x,           c_qc(ii)
   7517 cc
   7518 c              c_acftid(ii) = c_acr_id(kk)
   7519 c              c_acftreg(ii) = c_acr_reg(kk)
   7520 c              kmap = kmap + 1
   7521 cc
   7522 cc              write(io8,8002) kkdup,ii,c_insty_ob(itype(ii))
   7523 cc     x,           c_acftreg(ii),c_acftid(ii)
   7524 cc     x,           idt(ii),alat(ii),alon(ii)
   7525 cc     x,           pres(ii),ht_ft(ii)
   7526 cc     x,           t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
   7527 cc     x,           ob_q(ii),xiv_q(ii),ichk_q(ii)
   7528 cc     x,           ob_dir(ii),xiv_d(ii),ichk_d(ii)
   7529 cc     x,           ob_spd(ii),xiv_s(ii),ichk_s(ii)
   7530 cc     x,           c_qc(ii)
   7531 c            endif
   7532 c          enddo
   7533 c        endif
   7534 c      enddo
   7535 c
   7536 c     If no tail number is found, copy airlines ident into tail number 
   7537 c     to accumulate stats by airline
   7538 c     -----------------------------------------------------------------
   7539 c DAK: Could this be written more efficiently?
   7540       do iob=1,numreps

Page 150         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   7541         ii = indx(iob)
   7542 C DAK: Here is the logic that originally did not work for TAMDAR reports whose tail number is
   7543 c      missing, but flight number was all numbers (e.g., "00009934") meaning a tail number
   7544 c      could not be created from the flight number -- this was bypassed by changing "000" in
   7545 c      the 1st 3 characters of the flight number to "TAM" in subroutine input_acqc where the
   7546 c      reports are read in from NCEP PREPBUFR file and stored in memory
   7547         if(c_acftreg(ii).eq.'        ') then
   7548           if(c_acftid(ii)(1:5).eq.'XX999') then
   7549             c_acftreg(ii)(1:5) = 'XX999'
   7550           else
   7551             if(c_acftid(ii)(1:1).ge.'A'.and.
   7552      $         c_acftid(ii)(1:1).le.'Z')
   7553      $        c_acftreg(ii)(1:1) = c_acftid(ii)(1:1)
   7554 c
   7555             if(c_acftid(ii)(2:2).ge.'A'.and.
   7556      $         c_acftid(ii)(2:2).le.'Z'.and.
   7557      $         c_acftreg(ii)(1:1).ne.' ')
   7558      $        c_acftreg(ii)(2:2) = c_acftid(ii)(2:2)
   7559 c
   7560             if(c_acftid(ii)(3:3).ge.'A'.and.
   7561      $         c_acftid(ii)(3:3).le.'Z'.and.
   7562      $         c_acftreg(ii)(2:2).ne.' ')
   7563      $        c_acftreg(ii)(3:3) = c_acftid(ii)(3:3)
   7564 c
   7565             if(c_acftid(ii)(4:4).ge.'A'.and.
   7566      $         c_acftid(ii)(4:4).le.'Z'.and.
   7567      $         c_acftreg(ii)(3:3).ne.' ')
   7568      $        c_acftreg(ii)(4:4) = c_acftid(ii)(4:4)
   7569 c
   7570             if(c_acftid(ii)(5:5).ge.'A'.and.
   7571      $         c_acftid(ii)(5:5).le.'Z'.and.
   7572      $         c_acftreg(ii)(4:4).ne.' ')
   7573      $        c_acftreg(ii)(5:5) = c_acftid(ii)(5:5)
   7574           endif
   7575         endif
   7576       enddo
   7577 c
   7578 c      write(io8,*)
   7579 c      write(io8,*) 'Number of flight ids re-mapped = ',kmap
   7580 c
   7581 c Sum number of reports per tail numbers
   7582 c --------------------------------------
   7583       write(*,*) 'Counting number of reports per tail number'
   7584       write(io8,*)
   7585       write(io8,*) 'Counting number of reports per tail number'
   7586       write(io8,*) '------------------------------------------'
   7587       l_print = .false.
   7588       call do_reg(l_print,io8,

Page 151         Source Listing                  DUPCHEK_QC
2017-04-18 11:07 Entry Points                    acftobs_qc.f



ENTRY POINTS

  Name                   
                         
 dupchek_qc_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 10                         Label  4505                                                           4514                              
 3001                       Label  7603                                                           7602,7789                         
 3002                       Label  7692                                                           7683,7893                         
 8002                       Label  7343                                                           7325,7334                         
 99                         Label  8545                                                           7590                              
 ABS                        Func   4305                                 scalar                    4305,4306,4309,4310,4316,4317,4323
                                                                                                  ,4324,4330,4331,4337,4338,4603,461
                                                                                                  1,4619,4627,4718,4726,4728,4731,47
                                                                                                  32,4733,4734,4736,5213,5217,5240,5
                                                                                                  264,5269,5273,5277,5287,5300,5301,
                                                                                                  5337,5338,5340,5341,5350,5363,5364
                                                                                                  ,5366,5368,5369,5378,5408,5474,589
                                                                                                  8,5899,5901,5902,5911,5924,5925,59
                                                                                                  27,5929,5930,5939,5969,6043,6471,6
                                                                                                  472,6475,6479,6482,6483,6488,6489,
                                                                                                  6494,6495,6500,7054,7055,7058,7070
                                                                                                  ,7072,7073,7074,7075,7096,7097,709
                                                                                                  9,7100,7160,7161,7162,7173,7179,71
                                                                                                  85,7198,7199,7202,7211,7230,7257,7
                                                                                                  276                               
 ALAT                       Dummy  3615     R(8)            8     1     0        ARG,INOUT        4305,4309,4316,4323,4330,4337,4349
                                                                                                  ,4383,4603,4604,4605,4611,4612,461
                                                                                                  3,4726,5213,5337,5363,5408,5474,58
                                                                                                  98,5924,5969,6043,6471,7054,7096,7
                                                                                                  198,7327,7336,7685,7895           
 ALON                       Dummy  3615     R(8)            8     1     0        ARG,INOUT        4306,4310,4317,4324,4331,4338,4350
                                                                                                  ,4383,4619,4620,4621,4627,4628,462
                                                                                                  9,4728,5217,5338,5364,5411,5476,54
                                                                                                  77,5899,5925,5972,6045,6046,6472,7
                                                                                                  055,7097,7199,7327,7336,7685,7895 
 AMISS                      Dummy  3619     R(4)            4           scalar   ARG,INOUT        4421,4431,4714,4715,4716,4735,5274
                                                                                                  ,5275,5278,5279,5280,5281,5282,528
                                                                                                  8,5289,5290,5291,5292,5293,5342,53
                                                                                                  43,5344,5345,5346,5347,5351,5352,5
                                                                                                  353,5354,5355,5356,5357,5358,5370,
                                                                                                  5371,5372,5373,5374,5375,5379,5380
                                                                                                  ,5381,5382,5383,5384,5385,5386,541
                                                                                                  4,5419,5420,5523,5524,5582,5583,55
                                                                                                  84,5585,5903,5904,5905,5906,5907,5
                                                                                                  908,5912,5913,5914,5915,5916,5917,
                                                                                                  5918,5919,5931,5932,5933,5934,5935
                                                                                                  ,5936,5940,5941,5942,5943,5944,594
                                                                                                  5,5946,5947,5975,5980,5981,5982,59
                                                                                                  83,6092,6093,6151,6152,6153,6154,6

Page 152         Source Listing                  DUPCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  484,6485,6490,6491,6496,6497,6501,
                                                                                                  6502,6505,6506,6507,6508,6541,6542
                                                                                                  ,6591,6592,6593,6594,6805,6806,680
                                                                                                  7,6808,6862,6863,6864,6865,7076,70
                                                                                                  77,7078,7079,7080,7081,7115,7116,7
                                                                                                  123,7124,7125,7126                
 CDTG_AN                    Dummy  3614     CHAR            10          scalar   ARG,INOUT        4235,8303                         
 CREG_REG                   Dummy  3618     CHAR            8     1     0        ARG,INOUT        7590,7669,7706,7751,7765,7779     
 CSORT                      Dummy  3619     CHAR            25    1     0        ARG,INOUT        7680,7800,7844,7890               
 C_ACFTID                   Dummy  3614     CHAR            9     1     0        ARG,INOUT        4290,4291,4295,4296,4383,4469,4470
                                                                                                  ,4543,4545,4546,4547,4552,4553,455
                                                                                                  4,4556,4557,4559,4560,4562,4563,45
                                                                                                  74,4576,4577,4578,4583,4584,4585,4
                                                                                                  587,4588,4590,4591,4593,4594,5215,
                                                                                                  5219,5234,5251,5255,5263,5423,5479
                                                                                                  ,5588,5591,5987,6048,6157,6160,640
                                                                                                  2,6405,6436,6457,6476,6597,6600,68
                                                                                                  68,6871,7068,7101,7138,7146,7203,7
                                                                                                  326,7335,7548,7551,7552,7553,7555,
                                                                                                  7556,7558,7560,7561,7563,7565,7566
                                                                                                  ,7568,7570,7571,7573,7684,7894    
 C_ACFTREG                  Dummy  3614     CHAR            8     1     0        ARG,INOUT        5334,5895,7326,7335,7547,7549,7553
                                                                                                  ,7557,7558,7562,7563,7567,7568,757
                                                                                                  2,7573,7589,7669,7684,7706,7894   
 C_INSTY_OB                 Func   3688     CHAR            16          scalar                    7325,7334,7683,7893               
 C_QC                       Dummy  3614     CHAR            11    1     0        ARG,INOUT        4252,4508,4509,4510,4511,4512,4764
                                                                                                  ,4765,4766,4767,4769,4937,4938,493
                                                                                                  9,4940,4942,5094,5095,5096,5097,50
                                                                                                  99,5142,5173,5226,5425,5426,5427,5
                                                                                                  428,5430,5995,5996,5997,5998,6000,
                                                                                                  6407,6408,6409,6410,6412,6469,6545
                                                                                                  ,6546,6547,6548,6550,6816,6817,681
                                                                                                  8,6819,6821,7052,7094,7117,7118,71
                                                                                                  19,7121,7127,7128,7129,7136,7140,7
                                                                                                  141,7142,7144,7147,7148,7149,7156,
                                                                                                  7164,7174,7175,7180,7181,7186,7187
                                                                                                  ,7196,7212,7213,7214,7216,7231,723
                                                                                                  2,7233,7241,7258,7259,7260,7262,72
                                                                                                  77,7278,7279,7287,7299,7311,7317,7
                                                                                                  333,7342,7410,7589,7660,7661,7691,
                                                                                                  7698,7699,7700,7709,7711,7712,7799
                                                                                                  ,7843,7887,7888,7901              
 DIFDIR                     Local  3703     I(4)            4           scalar                    4716,4718,4719,4734,5277,5284,5285
                                                                                                  ,5341,5369,5422,5677,5727,5885,590
                                                                                                  2,5930,5986,6246,6296,6381,6483,64
                                                                                                  89,6495,6500,7075,7161,7179       
 DO_REG                     Subr   7588                                                           7588                              
 DUPCHEK_QC                 Subr   3613                                                                                             
 FLOAT                      Func   4305                                 scalar                    4305,4306                         
 HTDIF_SAME                 Dummy  3613     R(4)            4           scalar   ARG,INOUT        5241,5264,5269,7058,7070,7072     
 HT_FT                      Dummy  3615     R(4)            4     1     0        ARG,INOUT        4383,4405,4407,4410,4413,4415,4418
                                                                                                  ,4732,5230,5231,5240,5245,5264,526
                                                                                                  8,5269,5300,5301,5366,5927,6475,70
                                                                                                  57,7058,7069,7070,7071,7072,7099,7
                                                                                                  202,7328,7337,7686,7896           

Page 153         Source Listing                  DUPCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ICHK_D                     Dummy  3617     I(4)            4     1     0        ARG,INOUT        5125,5156,5760,5818,7331,7340,7689
                                                                                                  ,7899                             
 ICHK_Q                     Dummy  3617     I(4)            4     1     0        ARG,INOUT        5124,5155,5759,5817,7330,7339,7688
                                                                                                  ,7898                             
 ICHK_S                     Dummy  3617     I(4)            4     1     0        ARG,INOUT        5116,5126,5128,5147,5157,5159,5750
                                                                                                  ,5751,5761,5763,5764,5808,5809,581
                                                                                                  9,5821,5822,6530,6701,6744,6972,70
                                                                                                  07,7208,7209,7227,7228,7254,7255,7
                                                                                                  273,7274,7332,7341,7690,7900      
 ICHK_T                     Dummy  3617     I(4)            4     1     0        ARG,INOUT        5123,5154,5758,5816,7329,7338,7687
                                                                                                  ,7897                             
 IDT                        Dummy  3617     I(4)            4     1     0        ARG,INOUT        4370,4382,4530,7327,7336,7685,7895
 IDT_DIF                    Local  3702     I(4)            4           scalar                    4486,4494,4495,4530,4724,5225,5367
                                                                                                  ,5928,6468,7051,7093,7195         
 IFIX                       Func   4410                                 scalar                    4410,4418,5231                    
 IHR_AN                     Local  3970     I(4)            4           scalar                    4235,4370,4382                    
 IHR_OB                     Local  3971     I(4)            4           scalar                    4370,4371,4372,4374,4375,4380,4382
                                                                                                  ,4388,4391,4394,4397,4400         
 II                         Local  3709     I(4)            4           scalar                    4243,4252,4256,4257,4258,4259,4262
                                                                                                  ,4263,4264,4265,4268,4269,4270,427
                                                                                                  1,4274,4275,4276,4277,4280,4281,42
                                                                                                  90,4291,4295,4296,4305,4306,4309,4
                                                                                                  310,4316,4317,4323,4324,4330,4331,
                                                                                                  4337,4338,4349,4350,4370,4382,4383
                                                                                                  ,4405,4407,4410,4413,4415,4418,442
                                                                                                  1,4423,4425,4428,4431,4433,4435,44
                                                                                                  38,4469,4470,4530,4543,4545,4552,4
                                                                                                  553,4557,4560,4563,4571,4572,4574,
                                                                                                  4577,4578,4583,4585,4587,4590,4593
                                                                                                  ,4604,4605,4611,4620,4621,4627,464
                                                                                                  6,4647,4648,4649,4662,4663,4664,46
                                                                                                  65,4678,4679,4680,4681,4692,4693,4
                                                                                                  706,4707,4708,4709,4714,4718,4726,
                                                                                                  4728,4731,4732,4733,4735,4736,4769
                                                                                                  ,4781,4816,4847,4856,4865,4873,488
                                                                                                  1,4890,4898,4906,4913,4931,4933,49
                                                                                                  34,4942,4953,4988,5019,5028,5037,5
                                                                                                  045,5053,5062,5070,5078,5085,5099,
                                                                                                  5112,5116,5123,5124,5125,5126,5141
                                                                                                  ,5142,5147,5154,5155,5156,5157,517
                                                                                                  2,5173,5183,5192,5199,5213,5215,52
                                                                                                  17,5219,5230,5231,5234,5240,5245,5
                                                                                                  249,5251,5254,5255,5263,5264,5268,
                                                                                                  5269,5273,5274,5275,5278,5279,5280
                                                                                                  ,5281,5282,5283,5285,5287,5288,528
                                                                                                  9,5290,5291,5292,5293,5294,5295,52
                                                                                                  96,5300,5301,5329,5334,5337,5338,5
                                                                                                  340,5342,5344,5346,5348,5350,5351,
                                                                                                  5353,5355,5357,5359,5363,5364,5366
                                                                                                  ,5368,5370,5372,5374,5376,5378,537
                                                                                                  9,5381,5383,5385,5387,5400,5401,54
                                                                                                  02,5408,5411,5414,5419,5420,5421,5
                                                                                                  423,5430,5442,5474,5476,5477,5479,
                                                                                                  5485,5523,5530,5582,5584,5588,5591
                                                                                                  ,5597,5674,5676,5684,5737,5742,574

Page 154         Source Listing                  DUPCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  7,5750,5758,5759,5760,5761,5764,57
                                                                                                  77,5787,5796,5804,5808,5816,5817,5
                                                                                                  818,5819,5822,5835,5844,5853,5861,
                                                                                                  5869,5877,5884,5892,5895,5898,5899
                                                                                                  ,5901,5903,5905,5907,5910,5911,591
                                                                                                  2,5914,5916,5918,5921,5924,5925,59
                                                                                                  27,5929,5931,5933,5935,5938,5939,5
                                                                                                  940,5942,5944,5946,5949,5964,5969,
                                                                                                  5972,5975,5981,5983,5985,5986,5987
                                                                                                  ,5989,5991,5992,6000,6012,6043,604
                                                                                                  5,6046,6048,6054,6092,6099,6151,61
                                                                                                  53,6166,6243,6245,6253,6306,6310,6
                                                                                                  315,6324,6332,6340,6349,6357,6365,
                                                                                                  6373,6380,6402,6405,6412,6423,6431
                                                                                                  ,6436,6443,6450,6457,6461,6471,647
                                                                                                  2,6475,6476,6479,6481,6482,6484,64
                                                                                                  87,6488,6490,6493,6494,6496,6499,6
                                                                                                  501,6504,6505,6506,6507,6508,6530,
                                                                                                  6541,6542,6550,6591,6593,6597,6600
                                                                                                  ,6806,6808,6810,6812,6813,6821,686
                                                                                                  2,6864,7054,7055,7057,7058,7068,70
                                                                                                  69,7070,7071,7072,7073,7074,7076,7
                                                                                                  078,7079,7080,7081,7087,7096,7097,
                                                                                                  7099,7100,7101,7115,7116,7123,7125
                                                                                                  ,7127,7128,7129,7131,7133,7134,713
                                                                                                  8,7146,7147,7148,7149,7151,7153,71
                                                                                                  54,7160,7162,7173,7175,7181,7185,7
                                                                                                  187,7198,7199,7202,7203,7209,7211,
                                                                                                  7227,7230,7231,7232,7233,7235,7237
                                                                                                  ,7238,7255,7257,7273,7276,7277,727
                                                                                                  8,7279,7281,7283,7284,7299,7311,73
                                                                                                  17,7334,7335,7336,7337,7338,7339,7
                                                                                                  340,7341,7342,7410,7541,7547,7548,
                                                                                                  7549,7551,7552,7553,7555,7556,7557
                                                                                                  ,7558,7560,7561,7562,7563,7565,756
                                                                                                  6,7567,7568,7570,7571,7572,7573,76
                                                                                                  15,7619,7620,7621,7622,7626,7627,7
                                                                                                  628,7629,7633,7634,7635,7636,7640,
                                                                                                  7641,7642,7643,7647,7648,7654,7660
                                                                                                  ,7661,7669,7680,7683,7684,7685,768
                                                                                                  6,7687,7688,7689,7690,7691,7698,76
                                                                                                  99,7700,7706,7709,7711,7712,7795,7
                                                                                                  799,7800,7802,7803,7804,7805,7809,
                                                                                                  7810,7811,7812,7816,7817,7818,7819
                                                                                                  ,7823,7824,7825,7826,7830,7831,783
                                                                                                  7,7843,7844,7846,7847,7848,7849,78
                                                                                                  53,7854,7855,7856,7860,7861,7862,7
                                                                                                  863,7867,7868,7869,7870,7874,7875,
                                                                                                  7881,7887,7888,7890,7893,7894,7895
                                                                                                  ,7896,7897,7898,7899,7900,7901,794
                                                                                                  8,7949,7955,7956,7961,7962,7967,79
                                                                                                  68,7973,7974,7979,7980,7986,7987,7
                                                                                                  992,7993,7998,7999,8004,8005,8011,
                                                                                                  8012,8020,8021,8028,8029,8036,8037
                                                                                                  ,8044,8045,8060,8065,8069,8072,808

Page 155         Source Listing                  DUPCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  6,8091,8095,8098,8111,8116,8120,81
                                                                                                  23,8136,8141,8145,8148,8161,8166,8
                                                                                                  170,8173,8186,8191,8195,8198,8212,
                                                                                                  8217,8221,8224,8237,8242,8246,8249
                                                                                                  ,8262,8267,8271,8274,8287,8292,829
                                                                                                  6,8299                            
 IIM1                       Local  3710     I(4)            4           scalar                    4247,4249,4496,4506,4508,4509,4510
                                                                                                  ,4511,4512,4517,4523,4530,4540,454
                                                                                                  1,4543,4546,4547,4552,4554,4556,45
                                                                                                  59,4562,4574,4576,4583,4584,4588,4
                                                                                                  591,4594,4603,4612,4613,4619,4628,
                                                                                                  4629,4637,4638,4639,4640,4654,4655
                                                                                                  ,4656,4657,4670,4671,4672,4673,468
                                                                                                  6,4687,4698,4699,4700,4701,4715,47
                                                                                                  18,4726,4728,4731,4732,4733,4735,4
                                                                                                  736,4764,4765,4766,4767,4932,4934,
                                                                                                  4935,4937,4938,4939,4940,5094,5095
                                                                                                  ,5096,5097,5123,5124,5125,5126,512
                                                                                                  8,5141,5142,5154,5155,5156,5157,51
                                                                                                  59,5172,5173,5213,5215,5217,5219,5
                                                                                                  226,5231,5234,5240,5250,5251,5253,
                                                                                                  5255,5263,5264,5269,5273,5274,5275
                                                                                                  ,5278,5279,5280,5281,5282,5283,528
                                                                                                  4,5287,5288,5289,5290,5291,5292,52
                                                                                                  93,5294,5295,5296,5300,5301,5330,5
                                                                                                  334,5337,5338,5340,5343,5345,5347,
                                                                                                  5349,5350,5352,5354,5356,5358,5360
                                                                                                  ,5363,5364,5366,5368,5371,5373,537
                                                                                                  5,5377,5378,5380,5382,5384,5386,53
                                                                                                  88,5403,5414,5419,5420,5421,5422,5
                                                                                                  423,5425,5426,5427,5428,5479,5524,
                                                                                                  5583,5585,5675,5678,5741,5751,5758
                                                                                                  ,5759,5760,5761,5763,5809,5816,581
                                                                                                  7,5818,5819,5821,5893,5895,5898,58
                                                                                                  99,5901,5904,5906,5908,5909,5911,5
                                                                                                  913,5915,5917,5919,5920,5924,5925,
                                                                                                  5927,5929,5932,5934,5936,5937,5939
                                                                                                  ,5941,5943,5945,5947,5948,5961,596
                                                                                                  2,5963,5975,5980,5982,5984,5987,59
                                                                                                  90,5992,5993,5995,5996,5997,5998,6
                                                                                                  048,6093,6152,6154,6157,6160,6244,
                                                                                                  6247,6309,6402,6405,6407,6408,6409
                                                                                                  ,6410,6436,6457,6469,6471,6472,647
                                                                                                  5,6476,6479,6480,6482,6485,6486,64
                                                                                                  88,6491,6492,6494,6497,6498,6502,6
                                                                                                  503,6505,6506,6507,6508,6541,6542,
                                                                                                  6545,6546,6547,6548,6592,6594,6701
                                                                                                  ,6744,6805,6807,6811,6813,6814,681
                                                                                                  6,6817,6818,6819,6863,6865,6868,68
                                                                                                  71,6972,7007,7052,7054,7055,7058,7
                                                                                                  068,7070,7072,7073,7074,7077,7078,
                                                                                                  7079,7080,7081,7094,7096,7097,7099
                                                                                                  ,7100,7101,7115,7116,7117,7118,711
                                                                                                  9,7121,7124,7126,7132,7134,7135,71
                                                                                                  36,7138,7140,7141,7142,7144,7146,7

Page 156         Source Listing                  DUPCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  152,7154,7155,7156,7160,7162,7164,
                                                                                                  7173,7174,7180,7185,7186,7196,7198
                                                                                                  ,7199,7202,7203,7208,7211,7212,721
                                                                                                  3,7214,7216,7228,7230,7236,7238,72
                                                                                                  39,7241,7254,7257,7258,7259,7260,7
                                                                                                  262,7274,7276,7282,7284,7285,7287,
                                                                                                  7325,7326,7327,7328,7329,7330,7331
                                                                                                  ,7332,7333                        
 IMISS                      Dummy  3619     I(4)            4           scalar   ARG,INOUT        4495                              
 INDX                       Dummy  3619     I(4)            4     1     0        ARG,INOUT        4243,4247,4506,4931,4932,5989,5990
                                                                                                  ,6810,6811,7131,7132,7151,7152,723
                                                                                                  5,7236,7281,7282,7541,7589,7615,77
                                                                                                  95                                
 INSTY_OB_FUN               Func   3690     I(4)            4           scalar                    4024,4025,4026,4027,4028,4029,4030
                                                                                                  ,4031,4032,4033,4034,4035,4036,403
                                                                                                  7,4038,4039,4040,4041             
 INT                        Func   4305                                 scalar                    4305,4306,4349,4350               
 IO30                       Dummy  3619     I(4)            4           scalar   ARG,INOUT        7599,7600,7601,7602,7683,7725,7726
                                                                                                  ,7729,7731,7733,7735,7786,7787,778
                                                                                                  8,7789,7893,7910,7913,7915,7917,79
                                                                                                  19,7921,7924,7926,7928,7930       
 IO8                        Dummy  3619     I(4)            4           scalar   ARG,INOUT        4382,4779,4780,4786,4789,4792,4796
                                                                                                  ,4799,4802,4806,4807,4815,4816,482
                                                                                                  1,4824,4828,4831,4835,4836,4844,48
                                                                                                  46,4854,4856,4863,4865,4872,4873,4
                                                                                                  880,4881,4888,4889,4897,4898,4905,
                                                                                                  4906,4912,4913,4952,4953,4958,4961
                                                                                                  ,4964,4968,4971,4974,4978,4979,498
                                                                                                  7,4988,4993,4996,5000,5003,5007,50
                                                                                                  08,5016,5018,5026,5028,5035,5037,5
                                                                                                  044,5045,5052,5053,5060,5061,5069,
                                                                                                  5070,5077,5078,5084,5085,5109,5111
                                                                                                  ,5120,5121,5132,5133,5140,5141,514
                                                                                                  2,5151,5152,5163,5164,5171,5172,51
                                                                                                  73,5181,5182,5190,5191,5198,5199,5
                                                                                                  306,5307,5440,5441,5447,5450,5453,
                                                                                                  5457,5460,5463,5467,5468,5484,5485
                                                                                                  ,5490,5493,5496,5499,5502,5505,550
                                                                                                  8,5511,5514,5518,5519,5528,5529,55
                                                                                                  35,5538,5541,5545,5548,5552,5555,5
                                                                                                  558,5561,5564,5567,5570,5573,5577,
                                                                                                  5578,5596,5597,5602,5605,5608,5611
                                                                                                  ,5614,5618,5621,5625,5629,5632,563
                                                                                                  5,5638,5642,5645,5649,5652,5655,56
                                                                                                  58,5661,5665,5669,5670,5682,5683,5
                                                                                                  688,5691,5694,5697,5701,5705,5709,
                                                                                                  5713,5717,5721,5725,5726,5727,5735
                                                                                                  ,5737,5746,5747,5755,5756,5768,576
                                                                                                  9,5776,5777,5785,5787,5794,5796,58
                                                                                                  03,5804,5813,5814,5826,5827,5834,5
                                                                                                  835,5843,5844,5851,5853,5860,5861,
                                                                                                  5868,5869,5876,5877,5883,5884,6010
                                                                                                  ,6011,6017,6020,6023,6027,6030,603
                                                                                                  3,6037,6038,6053,6054,6059,6062,60
                                                                                                  65,6068,6071,6074,6077,6080,6083,6

Page 157         Source Listing                  DUPCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  087,6088,6097,6098,6104,6107,6110,
                                                                                                  6114,6117,6121,6124,6127,6130,6133
                                                                                                  ,6136,6139,6142,6146,6147,6165,616
                                                                                                  6,6171,6174,6177,6180,6183,6187,61
                                                                                                  90,6194,6198,6201,6204,6207,6211,6
                                                                                                  214,6218,6221,6224,6227,6230,6234,
                                                                                                  6238,6239,6251,6252,6257,6260,6263
                                                                                                  ,6266,6270,6274,6278,6282,6286,629
                                                                                                  0,6294,6295,6296,6304,6306,6314,63
                                                                                                  15,6322,6324,6331,6332,6339,6340,6
                                                                                                  347,6349,6356,6357,6364,6365,6372,
                                                                                                  6373,6379,6380,6422,6423,6430,6431
                                                                                                  ,6442,6443,6449,6450,6460,6461,656
                                                                                                  0,6561,6566,6569,6572,6576,6579,65
                                                                                                  82,6586,6587,6605,6606,6611,6614,6
                                                                                                  617,6620,6623,6627,6630,6634,6638,
                                                                                                  6641,6644,6647,6651,6654,6658,6661
                                                                                                  ,6664,6667,6670,6674,6678,6679,668
                                                                                                  7,6689,6696,6697,6705,6706,6712,67
                                                                                                  13,6721,6723,6730,6732,6739,6740,6
                                                                                                  748,6749,6755,6756,6764,6765,6772,
                                                                                                  6773,6780,6781,6787,6788,6831,6832
                                                                                                  ,6837,6840,6843,6847,6850,6853,685
                                                                                                  7,6858,6876,6877,6882,6885,6888,68
                                                                                                  91,6894,6898,6901,6905,6909,6912,6
                                                                                                  915,6918,6922,6925,6929,6932,6935,
                                                                                                  6938,6941,6945,6949,6950,6958,6960
                                                                                                  ,6967,6968,6976,6977,6983,6984,699
                                                                                                  2,6994,7001,7003,7011,7012,7018,70
                                                                                                  19,7027,7028,7035,7036,7042,7043,7
                                                                                                  086,7087,7107,7108,7166,7176,7182,
                                                                                                  7188,7223,7224,7248,7249,7269,7270
                                                                                                  ,7294,7295,7302,7303,7324,7325,733
                                                                                                  4,7584,7585,7586,7588,7653,7654,77
                                                                                                  41,7742,7744,7745,7750,7755,7756,7
                                                                                                  758,7759,7764,7769,7770,7772,7773,
                                                                                                  7778,7836,7837,7880,7881,7939,7940
                                                                                                  ,7941,7946,7947,7949,7952,7954,795
                                                                                                  6,7959,7960,7962,7965,7966,7968,79
                                                                                                  71,7972,7974,7977,7978,7980,7983,7
                                                                                                  985,7987,7990,7991,7993,7996,7997,
                                                                                                  7999,8002,8003,8005,8008,8009,8010
                                                                                                  ,8012,8014,8016,8018,8019,8021,802
                                                                                                  3,8025,8026,8027,8029,8031,8033,80
                                                                                                  34,8035,8037,8039,8041,8042,8043,8
                                                                                                  045,8047,8049,8050,8051,8052,8053,
                                                                                                  8056,8059,8061,8064,8068,8071,8074
                                                                                                  ,8076,8077,8078,8079,8082,8085,808
                                                                                                  7,8090,8094,8097,8100,8101,8102,81
                                                                                                  03,8104,8107,8110,8112,8115,8119,8
                                                                                                  122,8125,8126,8127,8128,8129,8132,
                                                                                                  8135,8137,8140,8144,8147,8150,8151
                                                                                                  ,8152,8153,8154,8157,8160,8162,816
                                                                                                  5,8169,8172,8175,8176,8177,8178,81
                                                                                                  79,8182,8185,8187,8190,8194,8197,8

Page 158         Source Listing                  DUPCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  200,8202,8203,8204,8205,8208,8211,
                                                                                                  8213,8216,8220,8223,8226,8227,8228
                                                                                                  ,8229,8230,8233,8236,8238,8241,824
                                                                                                  5,8248,8251,8252,8253,8254,8255,82
                                                                                                  58,8261,8263,8266,8270,8273,8276,8
                                                                                                  277,8278,8279,8280,8283,8286,8288,
                                                                                                  8291,8295,8298,8325,8326,8327,8328
                                                                                                  ,8331,8333,8335,8337,8339,8341,834
                                                                                                  3,8345,8347,8349,8351,8353,8354,83
                                                                                                  55,8356,8358,8360,8362,8364,8366,8
                                                                                                  368,8369,8370,8372,8374,8376,8378,
                                                                                                  8380,8381,8382,8384,8386,8388,8390
                                                                                                  ,8392,8394,8397,8398,8399,8401,840
                                                                                                  3,8405,8408,8409,8410,8411,8413,84
                                                                                                  15,8417,8419,8421,8423,8424,8425,8
                                                                                                  427,8429,8431,8433,8435,8437,8439,
                                                                                                  8440,8441,8443,8445,8447,8449,8451
                                                                                                  ,8453,8455,8456,8457,8458,8459,846
                                                                                                  1,8463,8465,8468,8470,8472,8474,84
                                                                                                  75,8476,8478,8480,8482,8484,8486,8
                                                                                                  488,8489,8490,8491,8493,8495,8497,
                                                                                                  8499,8501,8503,8506,8507,8508,8510
                                                                                                  ,8512,8514,8516,8518,8520,8523,852
                                                                                                  4,8525,8527,8529,8531,8534,8535,85
                                                                                                  36,8538,8540                      
 IOB                        Local  3708     I(4)            4           scalar                    4239,4243,4244,4245,4246,4247,4252
                                                                                                  ,4383,7540,7541,7614,7615,7794,779
                                                                                                  5                                 
 ISAVE                      Local  3715     I(4)            4           scalar                    4933,4935,5991,5993,6812,6814,7133
                                                                                                  ,7135,7153,7155,7237,7239,7283,728
                                                                                                  5                                 
 ITYPE                      Dummy  3617     I(4)            4     1     0        ARG,INOUT        4256,4257,4258,4259,4262,4263,4264
                                                                                                  ,4265,4268,4269,4270,4271,4274,427
                                                                                                  5,4276,4277,4280,4281,4540,4541,45
                                                                                                  71,4572,4637,4638,4639,4640,4646,4
                                                                                                  647,4648,4649,4654,4655,4656,4657,
                                                                                                  4662,4663,4664,4665,4670,4671,4672
                                                                                                  ,4673,4678,4679,4680,4681,4686,468
                                                                                                  7,4692,4693,4698,4699,4700,4701,47
                                                                                                  06,4707,4708,4709,5249,5250,5253,5
                                                                                                  254,5329,5330,5400,5401,5402,5403,
                                                                                                  5741,5742,5892,5893,5961,5962,5963
                                                                                                  ,5964,6309,6310,7325,7334,7589,761
                                                                                                  9,7620,7621,7622,7626,7627,7628,76
                                                                                                  29,7633,7634,7635,7636,7640,7641,7
                                                                                                  642,7643,7647,7648,7654,7683,7802,
                                                                                                  7803,7804,7805,7809,7810,7811,7812
                                                                                                  ,7816,7817,7818,7819,7823,7824,782
                                                                                                  5,7826,7830,7831,7837,7846,7847,78
                                                                                                  48,7849,7853,7854,7855,7856,7860,7
                                                                                                  861,7862,7863,7867,7868,7869,7870,
                                                                                                  7874,7875,7881,7893               
 I_ACARS                    Local  3720     I(4)            4           scalar                    4024,4265,4637,4646,7626,7809,7853
 I_ACARS_ASC                Local  3724     I(4)            4           scalar                    4026,4263,4640,4649,7627,7810,7854
 I_ACARS_DES                Local  3726     I(4)            4           scalar                    4027,4264,4639,4648,7629,7812,7856

Page 159         Source Listing                  DUPCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 I_ACARS_LVL                Local  3722     I(4)            4           scalar                    4025,4262,4638,4647,7628,7811,7855
 I_AIREP                    Local  3733     I(4)            4           scalar                    4034,4277,4670,4678,7640,7823,7867
 I_AIREP_ASC                Local  3735     I(4)            4           scalar                    4036,4275,4673,4681,7641,7824,7868
 I_AIREP_DES                Local  3736     I(4)            4           scalar                    4037,4276,4672,4680,7643,7826,7870
 I_AIREP_LVL                Local  3734     I(4)            4           scalar                    4035,4274,4671,4679,7642,7825,7869
 I_AMDAR                    Local  3737     I(4)            4           scalar                    4038,4271,4698,4706,7633,7816,7860
 I_AMDAR_ASC                Local  3739     I(4)            4           scalar                    4040,4269,4701,4709,7634,7817,7861
 I_AMDAR_DES                Local  3740     I(4)            4           scalar                    4041,4270,4700,4708,7636,7819,7863
 I_AMDAR_LVL                Local  3738     I(4)            4           scalar                    4039,4268,4699,4707,7635,7818,7862
 I_MAN_AIREP                Local  3731     I(4)            4           scalar                    4032,4280,4540,4571,4686,4692,7647
                                                                                                  ,7830,7874                        
 I_MAN_YAIREP               Local  3732     I(4)            4           scalar                    4033,4281,4541,4572,4687,4693,7648
                                                                                                  ,7831,7875                        
 I_MDCRS                    Local  3727     I(4)            4           scalar                    4028,4259,4654,4662,5249,5250,5253
                                                                                                  ,5254,5329,5330,5403,5741,5742,589
                                                                                                  2,5893,5964,6309,6310,7619,7802,78
                                                                                                  46                                
 I_MDCRS_ASC                Local  3729     I(4)            4           scalar                    4030,4257,4657,4665,5401,5962,7620
                                                                                                  ,7803,7847                        
 I_MDCRS_DES                Local  3730     I(4)            4           scalar                    4031,4258,4656,4664,5402,5963,7622
                                                                                                  ,7805,7849                        
 I_MDCRS_LVL                Local  3728     I(4)            4           scalar                    4029,4256,4655,4663,5400,5961,7621
                                                                                                  ,7804,7848                        
 KALT                       Local  3939     I(4)            4           scalar                    4414,4416,4418,4443,4444,4448,4449
                                                                                                  ,4453,4454,4458,4459,4463,4464    
 KBAD                       Local  3717     I(4)            4     2     15                        7594,7663,7727,7730,7732,7734,7736
                                                                                                  ,7806,7813,7820,7827,7832,7850,785
                                                                                                  7,7864,7871,7876,7911,7914,7916,79
                                                                                                  18,7920,7922,7925,7927,7929,7931,7
                                                                                                  934,7935,7936,7937                
 KBADTOT                    Dummy  3617     I(4)            4           scalar   ARG,INOUT        7934,7941                         
 KK                         Local  3967     I(4)            4           scalar                    7751,7765,7779,7949,7956,7962,7968
                                                                                                  ,7974,8066,8067,8068,8069,8092,809
                                                                                                  3,8094,8095,8117,8118,8119,8120,81
                                                                                                  42,8143,8144,8145,8167,8168,8169,8
                                                                                                  170,8192,8193,8194,8195,8218,8219,
                                                                                                  8220,8221,8243,8244,8245,8246,8268
                                                                                                  ,8269,8270,8271,8293,8294,8295,829
                                                                                                  6                                 
 KKDUP                      Local  3711     I(4)            4           scalar                    4487,4532,7325,7334               
 KLEV                       Local  3931     I(4)            4           scalar                    4406,4408,4410,4442,4447,4452,4457
                                                                                                  ,4462                             
 KNT                        Local  3712     I(4)            4           scalar                    4245,4504,4505,4506,4507,4513     
 KNT0                       Local  3713     I(4)            4           scalar                    4244,4932,5990,6811,7132,7152,7236
                                                                                                  ,7282                             
 KNT1                       Local  3714     I(4)            4           scalar                    4507,4518,4931,5989,6810,7131,7151
                                                                                                  ,7235,7281                        
 KREG                       Dummy  3618     I(4)            4           scalar   ARG,INOUT        7590,7668,7673,7705,7715,7747,7761
                                                                                                  ,7775                             
 KTEMP                      Local  3938     I(4)            4           scalar                    4422,4424,4426,4428,4443,4448,4453
                                                                                                  ,4458,4463,8067,8068,8093,8094,811
                                                                                                  8,8119,8143,8144,8168,8169        
 KTYPE                      Local  3646     I(4)            4           scalar                    4260,4266,4272,4278,4282,4292,4297
                                                                                                  ,4308,4315,4322,4329,4336,4352,435
                                                                                                  5,4358,4361,4364,4387,4390,4393,43

Page 160         Source Listing                  DUPCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  96,4399,4441,4446,4451,4456,4461,4
                                                                                                  472,4475,7624,7631,7638,7645,7650,
                                                                                                  7655,7663,7671,7672,7708,7710,7713
 KWSPD                      Local  3946     I(4)            4           scalar                    4432,4434,4436,4438,4444,4449,4454
                                                                                                  ,4459,4464,8193,8194,8219,8220,824
                                                                                                  4,8245,8269,8270,8294,8295        
 L_IIM1_0LAT                Local  3989     L(4)            4           scalar                    4602,4606,4727,4761,4811,5214,5408
                                                                                                  ,5473                             
 L_IIM1_0LON                Local  3991     L(4)            4           scalar                    4618,4622,4729,4762,4811,5218,5410
                                                                                                  ,5475                             
 L_IIM1_ACARS               Local  3995     L(4)            4           scalar                    4636,4640,4752,4818,4840,4920,4924
                                                                                                  ,4965,4990,5022,5031,5105,5256,525
                                                                                                  7,5327,5331,5416,5418,5487,5615,56
                                                                                                  22,5662,5731,5781,5953,5956,5977,5
                                                                                                  979,6024,6056,6111,6118,6184,6195,
                                                                                                  6208,6215,6318,6343,6391,6393,6526
                                                                                                  ,6533,6624,6631,6671,6683,6726,679
                                                                                                  8,6799,6800,6844,6895,6906,6919,69
                                                                                                  26,6988,6997,7061,7062            
 L_IIM1_AIREP               Local  3999     L(4)            4           scalar                    4669,4673,4753,4754,4755,4797,4800
                                                                                                  ,4859,4876,4884,4926,4959,4972,507
                                                                                                  3,5177,5232,5262,5333,5392,5393,54
                                                                                                  58,5461,5542,5546,5559,5565,5568,5
                                                                                                  609,5612,5639,5643,5656,5686,5695,
                                                                                                  5714,5790,5799,5839,5951,6018,6031
                                                                                                  ,6063,6066,6105,6134,6137,6172,618
                                                                                                  1,6202,6228,6258,6264,6279,6360,63
                                                                                                  95,6418,6527,6531,6534,6538,6577,6
                                                                                                  580,6618,6621,6648,6652,6665,6692,
                                                                                                  6717,6735,6768,6803,6838,6851,6883
                                                                                                  ,6892,6913,6939,7031,7067         
 L_IIM1_AMDAR               Local  4003     L(4)            4           scalar                    4697,4701,4922,4925,5056,5065,5146
                                                                                                  ,5233,5236,5260,5261,5332,5497,551
                                                                                                  2,5562,5571,5653,5659,5689,5692,58
                                                                                                  07,5894,5959,6078,6108,6131,6140,6
                                                                                                  175,6199,6222,6225,6231,6255,6261,
                                                                                                  6275,6335,6368,6394,6396,6434,6536
                                                                                                  ,6662,6668,6743,6801,6802,6886,691
                                                                                                  0,6933,6936,6942,7006,7023,7065,70
                                                                                                  66,7256,7275                      
 L_IIM1_MAN                 Local  4001     L(4)            4           scalar                    4685,4687,4756,4757,4758,4759,4783
                                                                                                  ,4787,4790,4793,4825,4829,4850,486
                                                                                                  8,4893,4901,4955,4969,4997,5001,51
                                                                                                  86,5216,5220,5235,5258,5259,5390,5
                                                                                                  395,5396,5398,5444,5448,5451,5454,
                                                                                                  5480,5494,5500,5503,5509,5532,5536
                                                                                                  ,5539,5549,5553,5599,5603,5606,564
                                                                                                  6,5650,5698,5702,5706,5710,5847,58
                                                                                                  56,5864,5872,6014,6028,6049,6069,6
                                                                                                  075,6081,6101,6128,6168,6178,6205,
                                                                                                  6267,6403,6426,6528,6532,6535,6537
                                                                                                  ,6539,6563,6567,6570,6573,6608,661
                                                                                                  2,6615,6655,6659,6760,6776,6834,68
                                                                                                  48,6879,6889,6916,7063,7064,7103  
 L_IIM1_MDCRS               Local  3997     L(4)            4           scalar                    4653,4657,4822,4919,4921,4923,4962

Page 161         Source Listing                  DUPCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  ,4994,5012,5040,5048,5115,5246,524
                                                                                                  7,5252,5328,5417,5491,5506,5556,56
                                                                                                  19,5626,5630,5633,5636,5718,5740,5
                                                                                                  891,5954,5957,5978,6021,6060,6072,
                                                                                                  6115,6122,6125,6188,6191,6212,6219
                                                                                                  ,6271,6283,6287,6300,6327,6352,639
                                                                                                  0,6392,6529,6628,6635,6639,6642,66
                                                                                                  45,6700,6794,6795,6796,6797,6841,6
                                                                                                  899,6902,6923,6930,6954,6963,6971,
                                                                                                  7059,7060,7210,7229               
 L_IIM1_SH                  Local  3987     L(4)            4           scalar                    4539,4544,4548,4550,4555,4558,4561
                                                                                                  ,4564,4760,4775,5405,5436,6477,654
                                                                                                  0,6556,7102,7139,7204             
 L_II_0LAT                  Local  3988     L(4)            4           scalar                    4610,4614,4727,4928,4983,5214,5969
                                                                                                  ,6043                             
 L_II_0LON                  Local  3990     L(4)            4           scalar                    4626,4630,4729,4929,4983,5218,5971
                                                                                                  ,6044                             
 L_II_ACARS                 Local  3993     L(4)            4           scalar                    4645,4649,4753,4757,4793,4818,4850
                                                                                                  ,4859,4919,4990,5012,5105,5256,525
                                                                                                  7,5331,5392,5395,5418,5454,5487,55
                                                                                                  42,5549,5615,5626,5639,5646,5781,5
                                                                                                  790,5847,5891,5979,6056,6184,6191,
                                                                                                  6231,6300,6390,6393,6531,6532,6533
                                                                                                  ,6573,6624,6635,6648,6655,6717,672
                                                                                                  6,6794,6800,6895,6902,6942,6954,69
                                                                                                  97,7061,7062                      
 L_II_AIREP                 Local  3998     L(4)            4           scalar                    4677,4681,4759,4787,4800,4829,4901
                                                                                                  ,4920,4921,4922,4969,4972,5001,503
                                                                                                  1,5048,5056,5177,5233,5261,5390,54
                                                                                                  48,5461,5494,5497,5536,5565,5571,5
                                                                                                  603,5612,5633,5659,5689,5695,5710,
                                                                                                  5864,5894,5953,5954,6028,6031,6111
                                                                                                  ,6115,6128,6134,6140,6178,6181,620
                                                                                                  8,6212,6225,6255,6264,6283,6318,63
                                                                                                  27,6335,6396,6418,6537,6538,6567,6
                                                                                                  580,6612,6621,6642,6668,6760,6768,
                                                                                                  6795,6798,6801,6848,6851,6889,6892
                                                                                                  ,6919,6923,6936,6963,6988,7023,706
                                                                                                  6                                 
 L_II_AMDAR                 Local  4002     L(4)            4           scalar                    4705,4709,4755,4758,4884,4893,5146
                                                                                                  ,5232,5235,5260,5262,5332,5333,539
                                                                                                  8,5509,5539,5562,5568,5606,5630,56
                                                                                                  53,5656,5662,5686,5692,5706,5807,5
                                                                                                  839,5872,6066,6081,6131,6137,6222,
                                                                                                  6228,6258,6261,6394,6395,6404,6434
                                                                                                  ,6534,6535,6536,6615,6639,6662,666
                                                                                                  5,6671,6735,6743,6933,6939,7006,70
                                                                                                  65,7067,7256,7275                 
 L_II_MAN                   Local  4000     L(4)            4           scalar                    4691,4693,4783,4797,4825,4923,4924
                                                                                                  ,4925,4926,4955,4959,4962,4965,499
                                                                                                  7,5022,5040,5065,5073,5186,5216,52
                                                                                                  20,5236,5258,5259,5444,5458,5480,5
                                                                                                  500,5506,5512,5532,5559,5599,5609,
                                                                                                  5636,5698,5951,5956,5957,5959,6014
                                                                                                  ,6018,6021,6024,6049,6063,6069,607

Page 162         Source Listing                  DUPCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  2,6078,6101,6105,6108,6118,6122,61
                                                                                                  68,6172,6175,6215,6219,6267,6271,6
                                                                                                  275,6279,6343,6352,6360,6368,6403,
                                                                                                  6426,6539,6563,6577,6608,6618,6645
                                                                                                  ,6776,6796,6799,6802,6803,6834,683
                                                                                                  8,6841,6844,6879,6883,6886,6926,69
                                                                                                  30,7031,7063,7064,7103            
 L_II_MDCRS                 Local  3996     L(4)            4           scalar                    4661,4665,4752,4754,4756,4790,4822
                                                                                                  ,4840,4868,4876,4994,5115,5246,524
                                                                                                  7,5248,5327,5328,5393,5396,5416,54
                                                                                                  17,5451,5491,5503,5546,5553,5556,5
                                                                                                  619,5622,5643,5650,5702,5714,5718,
                                                                                                  5731,5740,5799,5856,5977,5978,6060
                                                                                                  ,6075,6125,6188,6195,6199,6202,620
                                                                                                  5,6287,6391,6392,6526,6527,6528,65
                                                                                                  29,6570,6628,6631,6652,6659,6683,6
                                                                                                  692,6700,6797,6899,6906,6910,6913,
                                                                                                  6916,6971,7059,7060,7210,7229     
 L_II_SH                    Local  3986     L(4)            4           scalar                    4570,4575,4579,4581,4586,4589,4592
                                                                                                  ,4595,4927,4948,5966,6006,6477,680
                                                                                                  4,6827,7102,7146,7204             
 L_INIT                     Dummy  3619     L(4)            4           scalar   ARG,INOUT        4045                              
 L_LAST                     Dummy  3619     L(4)            4           scalar   ARG,INOUT        7945                              
 L_NCEP                     Dummy  3620     L(4)            4           scalar   ARG,INOUT        4376                              
 L_OPERATIONAL              Dummy  3619     L(4)            4           scalar   ARG,INOUT        7598,7682,7724,7785,7892,7909     
 L_PRINT                    Local  3985     L(4)            4           scalar                    4500,4777,4778,4785,4789,4792,4796
                                                                                                  ,4799,4802,4804,4805,4813,4814,482
                                                                                                  1,4824,4827,4831,4833,4834,4842,48
                                                                                                  43,4852,4853,4861,4862,4870,4871,4
                                                                                                  878,4879,4886,4887,4895,4896,4903,
                                                                                                  4904,4910,4911,4950,4951,4957,4961
                                                                                                  ,4964,4968,4971,4974,4976,4977,498
                                                                                                  5,4986,4993,4996,4999,5003,5005,50
                                                                                                  06,5014,5015,5024,5025,5033,5034,5
                                                                                                  042,5043,5050,5051,5058,5059,5067,
                                                                                                  5068,5075,5076,5082,5083,5107,5108
                                                                                                  ,5118,5119,5130,5131,5138,5139,514
                                                                                                  9,5150,5161,5162,5169,5170,5179,51
                                                                                                  80,5188,5189,5196,5197,5304,5305,5
                                                                                                  438,5439,5446,5450,5453,5457,5460,
                                                                                                  5463,5465,5466,5482,5483,5490,5493
                                                                                                  ,5496,5499,5502,5505,5508,5511,551
                                                                                                  4,5516,5517,5526,5527,5534,5538,55
                                                                                                  41,5545,5548,5552,5555,5558,5561,5
                                                                                                  564,5567,5570,5573,5575,5576,5587,
                                                                                                  5590,5593,5595,5601,5605,5608,5611
                                                                                                  ,5614,5618,5621,5625,5629,5632,563
                                                                                                  5,5638,5642,5645,5649,5652,5655,56
                                                                                                  58,5661,5665,5667,5668,5680,5681,5
                                                                                                  688,5691,5694,5697,5700,5704,5708,
                                                                                                  5712,5716,5720,5723,5724,5733,5734
                                                                                                  ,5744,5745,5753,5754,5766,5767,577
                                                                                                  4,5775,5783,5784,5792,5793,5801,58
                                                                                                  02,5811,5812,5824,5825,5832,5833,5
                                                                                                  841,5842,5849,5850,5858,5859,5866,

Page 163         Source Listing                  DUPCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  5867,5874,5875,5881,5882,6008,6009
                                                                                                  ,6016,6020,6023,6027,6030,6033,603
                                                                                                  5,6036,6051,6052,6059,6062,6065,60
                                                                                                  68,6071,6074,6077,6080,6083,6085,6
                                                                                                  086,6095,6096,6103,6107,6110,6114,
                                                                                                  6117,6121,6124,6127,6130,6133,6136
                                                                                                  ,6139,6142,6144,6145,6156,6159,616
                                                                                                  2,6164,6170,6174,6177,6180,6183,61
                                                                                                  87,6190,6194,6198,6201,6204,6207,6
                                                                                                  211,6214,6218,6221,6224,6227,6230,
                                                                                                  6234,6236,6237,6249,6250,6257,6260
                                                                                                  ,6263,6266,6269,6273,6277,6281,628
                                                                                                  5,6289,6292,6293,6302,6303,6312,63
                                                                                                  13,6320,6321,6329,6330,6337,6338,6
                                                                                                  345,6346,6354,6355,6362,6363,6370,
                                                                                                  6371,6377,6378,6420,6421,6428,6429
                                                                                                  ,6437,6439,6441,6447,6448,6458,645
                                                                                                  9,6558,6559,6565,6569,6572,6576,65
                                                                                                  79,6582,6584,6585,6596,6599,6602,6
                                                                                                  604,6610,6614,6617,6620,6623,6627,
                                                                                                  6630,6634,6638,6641,6644,6647,6651
                                                                                                  ,6654,6658,6661,6664,6667,6670,667
                                                                                                  4,6676,6677,6685,6686,6694,6695,67
                                                                                                  03,6704,6710,6711,6719,6720,6728,6
                                                                                                  729,6737,6738,6746,6747,6753,6754,
                                                                                                  6762,6763,6770,6771,6778,6779,6785
                                                                                                  ,6786,6829,6830,6836,6840,6843,684
                                                                                                  7,6850,6853,6855,6856,6867,6870,68
                                                                                                  73,6875,6881,6885,6888,6891,6894,6
                                                                                                  898,6901,6905,6909,6912,6915,6918,
                                                                                                  6922,6925,6929,6932,6935,6938,6941
                                                                                                  ,6945,6947,6948,6956,6957,6965,696
                                                                                                  6,6974,6975,6981,6982,6990,6991,69
                                                                                                  99,7000,7009,7010,7016,7017,7025,7
                                                                                                  026,7033,7034,7040,7041,7084,7085,
                                                                                                  7105,7106,7166,7176,7182,7188,7221
                                                                                                  ,7222,7246,7247,7267,7268,7292,729
                                                                                                  3,7300,7301,7320,7587,7588        
 L_SAVE_DUPS                Local  4005     L(4)            4           scalar                    4011,7785,7892                    
 MAXFLT                     Dummy  3613     I(4)            4           scalar   ARG,INOUT        3977,3978,3979,3980,3981,7590     
 MAX_REPS                   Dummy  3613     I(4)            4           scalar   ARG,INOUT        3639,3645,3647,3648,3649,3650,3651
                                                                                                  ,3652,3653,3654,3655,3656,3657,365
                                                                                                  8,3659,3660,3661,3662,3663,3664,36
                                                                                                  65,3666,3667,3684,7589            
 MM                         Local  3976     I(4)            4           scalar                    7667,7668,7669,7672,7673,7675,7704
                                                                                                  ,7705,7706,7710,7713,7715,7717,774
                                                                                                  7,7748,7749,7751,7761,7762,7763,77
                                                                                                  65,7775,7776,7777,7779            
 NBAD_AC                    Local  3955     I(4)            4           scalar                    4223                              
 NBAD_AM                    Local  3959     I(4)            4           scalar                    4227                              
 NBAD_AR                    Local  3958     I(4)            4           scalar                    4226                              
 NBAD_MA                    Local  3957     I(4)            4           scalar                    4225                              
 NBAD_MD                    Local  3956     I(4)            4           scalar                    4224                              
 NDUP_AC                    Local  3961     I(4)            4           scalar                    4228,7814,7858,8317,8346          
 NDUP_AM                    Local  3965     I(4)            4           scalar                    4232,7821,7865,8317,8346          

Page 164         Source Listing                  DUPCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 NDUP_AR                    Local  3964     I(4)            4           scalar                    4231,7828,7872,8317,8346          
 NDUP_MA                    Local  3963     I(4)            4           scalar                    4230,7833,7877,8317,8346          
 NDUP_MD                    Local  3962     I(4)            4           scalar                    4229,7807,7851,8317,8346          
 NOBS_REG                   Dummy  3618     I(4)            4     2     0        ARG,INOUT        7590                              
 NREJ_REG                   Dummy  3618     I(4)            4     2     0        ARG,INOUT        4018,7672,7748,7749,7751          
 NREP_AC                    Local  3949     I(4)            4           scalar                    4218,7630,8311,8334               
 NREP_AM                    Local  3953     I(4)            4           scalar                    4222,7637,8311,8334               
 NREP_AR                    Local  3952     I(4)            4           scalar                    4221,7644,8311,8334               
 NREP_MA                    Local  3951     I(4)            4           scalar                    4220,7649,8311,8334               
 NREP_MD                    Local  3950     I(4)            4           scalar                    4219,7623,8311,8334               
 NTEMP_REG                  Dummy  3618     I(4)            4     2     0        ARG,INOUT        4019,7710,7762,7763,7765          
 NUMREPS                    Dummy  3613     I(4)            4           scalar   ARG,INOUT        4239,7540,7589,7614,7794,7940     
 NWIND_REG                  Dummy  3618     I(4)            4     2     0        ARG,INOUT        4020,7713,7776,7777,7779          
 N_0000_AC                  Local  3903     I(4)            4           scalar                    4180,4318,8342                    
 N_0000_AM                  Local  3909     I(4)            4           scalar                    4186,4325,8342                    
 N_0000_AR                  Local  3905     I(4)            4           scalar                    4182,4332,8342                    
 N_0000_MA                  Local  3907     I(4)            4           scalar                    4184,4339,8342                    
 N_0000_MD                  Local  3899     I(4)            4           scalar                    4178,4311,8342                    
 N_00_AC                    Local  3901     I(4)            4           scalar                    4179,4320,8340                    
 N_00_AM                    Local  3908     I(4)            4           scalar                    4185,4327,8340                    
 N_00_AR                    Local  3904     I(4)            4           scalar                    4181,4334,8340                    
 N_00_MA                    Local  3906     I(4)            4           scalar                    4183,4341,8340                    
 N_00_MD                    Local  3898     I(4)            4           scalar                    4177,4313,8340                    
 N_AREA_AC                  Local  3915     I(4)            4     2     703                       4189,4356,7956                    
 N_AREA_AM                  Local  3918     I(4)            4     2     703                       4192,4359,7962                    
 N_AREA_AR                  Local  3916     I(4)            4     2     703                       4190,4362,7968                    
 N_AREA_MA                  Local  3917     I(4)            4     2     703                       4191,4365,7974                    
 N_AREA_MD                  Local  3913     I(4)            4     2     703                       4188,4353,7949                    
 N_BAD_ENCODE               Local  3886     I(4)            4           scalar                    4165,7171,8321,8350               
 N_EXACT                    Local  3742     I(4)            4           scalar                    4047,4773,4946,5103,8354          
 N_EXACT_0LL                Local  3751     I(4)            4           scalar                    4055,4812,4984,8369               
 N_EXACT_ACAC               Local  3769     I(4)            4           scalar                    4068,5106,8387                    
 N_EXACT_ACAR               Local  3762     I(4)            4           scalar                    4062,4860,5032,8387               
 N_EXACT_ACMA               Local  3760     I(4)            4           scalar                    4061,4851,5023,8387               
 N_EXACT_AMAM               Local  3773     I(4)            4           scalar                    4072,5168,8389                    
 N_EXACT_AMAR               Local  3765     I(4)            4           scalar                    4065,4885,5057,8389               
 N_EXACT_AMMA               Local  3766     I(4)            4           scalar                    4066,4894,5066,8389               
 N_EXACT_ARAR               Local  3771     I(4)            4           scalar                    4070,5178,8391                    
 N_EXACT_ARMA               Local  3767     I(4)            4           scalar                    4067,4902,5074,8391               
 N_EXACT_MAMA               Local  3772     I(4)            4           scalar                    4071,5187,8393                    
 N_EXACT_MDAC               Local  3758     I(4)            4           scalar                    4060,4841,5013,8385               
 N_EXACT_MDAR               Local  3764     I(4)            4           scalar                    4064,4877,5049,8385               
 N_EXACT_MDMA               Local  3763     I(4)            4           scalar                    4063,4869,5041,8385               
 N_EXACT_MDMD               Local  3770     I(4)            4           scalar                    4069,5137,8385                    
 N_EXACT_SH                 Local  3743     I(4)            4           scalar                    4048,4776,4949,8355               
 N_EX_0LL_ACAC              Local  3753     I(4)            4           scalar                    4056,4819,4991,8373               
 N_EX_0LL_MAAR              Local  3756     I(4)            4           scalar                    4059,4830,5002,8375               
 N_EX_0LL_MAMA              Local  3755     I(4)            4           scalar                    4058,4826,4998,8377               
 N_EX_0LL_MDMD              Local  3754     I(4)            4           scalar                    4057,4823,4995,8373               
 N_EX_BAD_ROLL_AM           Local  3889     I(4)            4           scalar                    4168,5148,5160,8404               
 N_EX_BAD_ROLL_MD           Local  3888     I(4)            4           scalar                    4167,5117,5129,8402               
 N_EX_SH_ARAR               Local  3750     I(4)            4           scalar                    4054,4801,4973,8363               
 N_EX_SH_ARMA               Local  3749     I(4)            4           scalar                    4053,4798,4970,8365               
 N_EX_SH_MAAC               Local  3748     I(4)            4           scalar                    4052,4794,4966,8361               
 N_EX_SH_MAAR               Local  3745     I(4)            4           scalar                    4050,4788,4960,8363               

Page 165         Source Listing                  DUPCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 N_EX_SH_MAMA               Local  3744     I(4)            4           scalar                    4049,4784,4956,8365               
 N_EX_SH_MAMD               Local  3746     I(4)            4           scalar                    4051,4791,4963,8359               
 N_LAT                      Local  3911     I(4)            4           scalar                    4349,4353,4356,4359,4362,4365     
 N_LEV_AC                   Local  3927     I(4)            4     1     53                        4201,4447,8019,8021,8023          
 N_LEV_AM                   Local  3930     I(4)            4     1     53                        4204,4452,8027,8029,8031          
 N_LEV_AR                   Local  3928     I(4)            4     1     53                        4202,4457,8035,8037,8039          
 N_LEV_MA                   Local  3929     I(4)            4     1     53                        4203,4462,8043,8045,8047          
 N_LEV_MD                   Local  3925     I(4)            4     1     53                        4200,4442,8010,8012,8014          
 N_LON                      Local  3912     I(4)            4           scalar                    4350,4353,4356,4359,4362,4365     
 N_NEAR                     Local  3775     I(4)            4           scalar                    4074,5434,6004,6416,6554,6825,7167
                                                                                                  ,7218,7243,7264,7289,8409         
 N_NEAR_0LL                 Local  3784     I(4)            4           scalar                    4082,5481,6050,8424               
 N_NEAR_0WS                 Local  3826     I(4)            4           scalar                    4115,5679,6248,8475               
 N_NEAR_0WS_AMAM            Local  3829     I(4)            4           scalar                    4118,5693,6262,8481               
 N_NEAR_0WS_AMAR            Local  3828     I(4)            4           scalar                    4117,5690,6259,8483               
 N_NEAR_0WS_ARAM            Local  3827     I(4)            4           scalar                    4116,5687,6256,8481               
 N_NEAR_0WS_ARAR            Local  3830     I(4)            4           scalar                    4119,5696,6265,8483               
 N_NEAR_0WS_ARMD            Local  3835     I(4)            4           scalar                    4124,5715,6284,8479               
 N_NEAR_0WS_MAAM            Local  3833     I(4)            4           scalar                    4122,5707,6276,8481               
 N_NEAR_0WS_MAAR            Local  3834     I(4)            4           scalar                    4123,5711,6280,8483               
 N_NEAR_0WS_MAMA            Local  3831     I(4)            4           scalar                    4120,5699,6268,8485               
 N_NEAR_0WS_MAMD            Local  3832     I(4)            4           scalar                    4121,5703,6272,8479               
 N_NEAR_0WS_MDMD            Local  3836     I(4)            4           scalar                    4125,5719,6288,8479               
 N_NEAR_ACAC                Local  3865     I(4)            4           scalar                    4148,5782,8496                    
 N_NEAR_ACAR                Local  3856     I(4)            4           scalar                    4141,5791,6319,8496               
 N_NEAR_ACMA                Local  3860     I(4)            4           scalar                    4144,5848,6344,8496               
 N_NEAR_AMAM                Local  3869     I(4)            4           scalar                    4152,5831,6435,8498               
 N_NEAR_AMAR                Local  3858     I(4)            4           scalar                    4143,5840,6336,8498               
 N_NEAR_AMMA                Local  3863     I(4)            4           scalar                    4147,5873,6369,8498               
 N_NEAR_ARAR                Local  3867     I(4)            4           scalar                    4150,6419,8500                    
 N_NEAR_ARMA                Local  3862     I(4)            4           scalar                    4146,5865,6361,8500               
 N_NEAR_MAMA                Local  3868     I(4)            4           scalar                    4151,6427,7168,8502               
 N_NEAR_MDAC                Local  3854     I(4)            4           scalar                    4140,5732,6301,8494               
 N_NEAR_MDAR                Local  3857     I(4)            4           scalar                    4142,5800,6328,8494               
 N_NEAR_MDMA                Local  3861     I(4)            4           scalar                    4145,5857,6353,8494               
 N_NEAR_MDMD                Local  3866     I(4)            4           scalar                    4149,5773,8494                    
 N_NEAR_MST                 Local  3837     I(4)            4           scalar                    4126,5525,6094,8440               
 N_NEAR_NEGPOS              Local  3870     I(4)            4           scalar                    4153,5302,8490                    
 N_NEAR_SH                  Local  3776     I(4)            4           scalar                    4075,5437,6007,6557,6828,8410     
 N_NEAR_WS                  Local  3795     I(4)            4           scalar                    4092,5586,6155,6595,6866,8456     
 N_NEAR_WS_EU               Local  3824     I(4)            4           scalar                    4114,5592,6161,6601,6872,8458     
 N_NEAR_WS_IT               Local  3822     I(4)            4           scalar                    4113,5589,6158,6598,6869,8457     
 N_NR_0LL_ACAC              Local  3786     I(4)            4           scalar                    4083,5488,6057,8430               
 N_NR_0LL_AMAR              Local  3789     I(4)            4           scalar                    4086,5498,6067,8434               
 N_NR_0LL_AMMA              Local  3794     I(4)            4           scalar                    4091,5513,6082,8436               
 N_NR_0LL_MAAM              Local  3793     I(4)            4           scalar                    4090,5510,6079,8432               
 N_NR_0LL_MAAR              Local  3788     I(4)            4           scalar                    4085,5495,6064,8434               
 N_NR_0LL_MAMA              Local  3790     I(4)            4           scalar                    4087,5501,6070,8436               
 N_NR_0LL_MAMD              Local  3791     I(4)            4           scalar                    4088,5504,6073,8428               
 N_NR_0LL_MDMA              Local  3792     I(4)            4           scalar                    4089,5507,6076,8436               
 N_NR_0LL_MDMD              Local  3787     I(4)            4           scalar                    4084,5492,6061,8428               
 N_NR_BAD_ROLL_AM           Local  3891     I(4)            4           scalar                    4170,5810,5823,6745,7008,7265,7290
                                                                                                  ,8530                             
 N_NR_BAD_ROLL_MD           Local  3890     I(4)            4           scalar                    4169,5752,5765,6702,6973,7219,7244
                                                                                                  ,8528                             

Page 166         Source Listing                  DUPCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 N_NR_MST_AMAM              Local  3849     I(4)            4           scalar                    4136,5563,6132,8448               
 N_NR_MST_AMAR              Local  3851     I(4)            4           scalar                    4138,5572,6138,8450               
 N_NR_MST_ARAC              Local  3842     I(4)            4           scalar                    4130,5543,6112,8446               
 N_NR_MST_ARAM              Local  3852     I(4)            4           scalar                    4139,5569,6141,8448               
 N_NR_MST_ARAR              Local  3850     I(4)            4           scalar                    4137,5566,6135,8450               
 N_NR_MST_ARMA              Local  3848     I(4)            4           scalar                    4135,5560,6129,8452               
 N_NR_MST_ARMD              Local  3843     I(4)            4           scalar                    4131,5547,6116,8444               
 N_NR_MST_MAAC              Local  3845     I(4)            4           scalar                    4132,5550,6119,8446               
 N_NR_MST_MAAM              Local  3840     I(4)            4           scalar                    4129,5540,6109,8448               
 N_NR_MST_MAAR              Local  3839     I(4)            4           scalar                    4128,5537,6106,8450               
 N_NR_MST_MAMA              Local  3838     I(4)            4           scalar                    4127,5533,6102,8452               
 N_NR_MST_MAMD              Local  3846     I(4)            4           scalar                    4133,5554,6123,8444               
 N_NR_MST_MDMD              Local  3847     I(4)            4           scalar                    4134,5557,6126,8444               
 N_NR_MSWN_ACAC             Local  3802     I(4)            4           scalar                    4098,5616,6185,6625,6896,8464     
 N_NR_MSWN_ACAM             Local  3821     I(4)            4           scalar                    4112,5663,6232,6672,6943,8466     
 N_NR_MSWN_ACMD             Local  3805     I(4)            4           scalar                    4100,5623,6192,6632,6903,8462     
 N_NR_MSWN_AMAM             Local  3817     I(4)            4           scalar                    4109,5654,6223,6663,6934,8466     
 N_NR_MSWN_AMAR             Local  3819     I(4)            4           scalar                    4111,5660,6229,6669,6940,8469     
 N_NR_MSWN_ARAC             Local  3812     I(4)            4           scalar                    4105,5640,6209,6649,6920,8464     
 N_NR_MSWN_ARAM             Local  3818     I(4)            4           scalar                    4110,5657,6226,6666,6937,8466     
 N_NR_MSWN_ARAR             Local  3800     I(4)            4           scalar                    4097,5613,6182,6622,6893,8469     
 N_NR_MSWN_ARMA             Local  3799     I(4)            4           scalar                    4096,5610,6179,6619,6890,8471     
 N_NR_MSWN_ARMD             Local  3813     I(4)            4           scalar                    4106,5644,6213,6653,6924,8462     
 N_NR_MSWN_MAAC             Local  3815     I(4)            4           scalar                    4107,5647,6216,6656,6927,8464     
 N_NR_MSWN_MAAM             Local  3798     I(4)            4           scalar                    4095,5607,6176,6616,6887,8467     
 N_NR_MSWN_MAAR             Local  3797     I(4)            4           scalar                    4094,5604,6173,6613,6884,8469     
 N_NR_MSWN_MAMA             Local  3796     I(4)            4           scalar                    4093,5600,6169,6609,6880,8471     
 N_NR_MSWN_MAMD             Local  3816     I(4)            4           scalar                    4108,5651,6220,6660,6931,8462     
 N_NR_MSWN_MDAC             Local  3807     I(4)            4           scalar                    4101,5627,6196,6636,6907,8464     
 N_NR_MSWN_MDAM             Local  3808     I(4)            4           scalar                    4102,5631,6200,6640,6911,8466     
 N_NR_MSWN_MDAR             Local  3809     I(4)            4           scalar                    4103,5634,6203,6643,6914,8469     
 N_NR_MSWN_MDMA             Local  3810     I(4)            4           scalar                    4104,5637,6206,6646,6917,8471     
 N_NR_MSWN_MDMD             Local  3803     I(4)            4           scalar                    4099,5620,6189,6629,6900,8462     
 N_NR_POSREP                Local  3892     I(4)            4           scalar                    4171,5743,6311,8539               
 N_NR_SH_ARAR               Local  3783     I(4)            4           scalar                    4081,5462,6032,6581,6852,8418     
 N_NR_SH_ARMA               Local  3782     I(4)            4           scalar                    4080,5459,6029,6578,6849,8420     
 N_NR_SH_MAAC               Local  3781     I(4)            4           scalar                    4079,5455,6025,6574,6845,8416     
 N_NR_SH_MAAR               Local  3778     I(4)            4           scalar                    4077,5449,6019,6568,6839,8418     
 N_NR_SH_MAMA               Local  3777     I(4)            4           scalar                    4076,5445,6015,6564,6835,8420     
 N_NR_SH_MAMD               Local  3779     I(4)            4           scalar                    4078,5452,6022,6571,6842,8414     
 N_SH_AR                    Local  3896     I(4)            4           scalar                    4175,4293,8313,8338               
 N_SH_MA                    Local  3897     I(4)            4           scalar                    4176,4298,8313,8338               
 N_SLOW_ACAC                Local  3880     I(4)            4           scalar                    4159,6727,6998,8513               
 N_SLOW_ACAR                Local  3875     I(4)            4           scalar                    4155,6718,6989,8513               
 N_SLOW_AMAM                Local  3884     I(4)            4           scalar                    4163,6752,7015,8515               
 N_SLOW_AMAR                Local  3877     I(4)            4           scalar                    4157,6736,7024,8515               
 N_SLOW_ARAR                Local  3882     I(4)            4           scalar                    4161,6769,8517                    
 N_SLOW_ARMA                Local  3878     I(4)            4           scalar                    4158,6761,7032,8517               
 N_SLOW_MAMA                Local  3883     I(4)            4           scalar                    4162,6777,8519                    
 N_SLOW_MDAC                Local  3873     I(4)            4           scalar                    4154,6684,6955,8511               
 N_SLOW_MDAR                Local  3876     I(4)            4           scalar                    4156,6693,6964,8511               
 N_SLOW_MDMD                Local  3881     I(4)            4           scalar                    4160,6709,6980,8511               
 N_TEMP_AC                  Local  3934     I(4)            4     2     468                       4207,4448,8085,8086,8090,8091,8094
                                                                                                  ,8095,8097,8098                   
 N_TEMP_AM                  Local  3937     I(4)            4     2     468                       4210,4453,8110,8111,8115,8116,8119

Page 167         Source Listing                  DUPCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  ,8120,8122,8123                   
 N_TEMP_AR                  Local  3935     I(4)            4     2     468                       4208,4458,8135,8136,8140,8141,8144
                                                                                                  ,8145,8147,8148                   
 N_TEMP_MA                  Local  3936     I(4)            4     2     468                       4209,4463,8160,8161,8165,8166,8169
                                                                                                  ,8170,8172,8173                   
 N_TEMP_MD                  Local  3932     I(4)            4     2     468                       4206,4443,8059,8060,8064,8065,8068
                                                                                                  ,8069,8071,8072                   
 N_TIME_AC                  Local  3921     I(4)            4     1     24                        4195,4391,7987                    
 N_TIME_AM                  Local  3924     I(4)            4     1     24                        4198,4394,7993                    
 N_TIME_AR                  Local  3922     I(4)            4     1     24                        4196,4397,7999                    
 N_TIME_MA                  Local  3923     I(4)            4     1     24                        4197,4400,8005                    
 N_TIME_MD                  Local  3919     I(4)            4     1     24                        4194,4388,7980                    
 N_WSPD_AC                  Local  3942     I(4)            4     2     520                       4213,4449,8211,8212,8216,8217,8220
                                                                                                  ,8221,8223,8224                   
 N_WSPD_AM                  Local  3945     I(4)            4     2     520                       4216,4454,8236,8237,8241,8242,8245
                                                                                                  ,8246,8248,8249                   
 N_WSPD_AR                  Local  3943     I(4)            4     2     520                       4214,4459,8261,8262,8266,8267,8270
                                                                                                  ,8271,8273,8274                   
 N_WSPD_MA                  Local  3944     I(4)            4     2     520                       4215,4464,8286,8287,8291,8292,8295
                                                                                                  ,8296,8298,8299                   
 N_WSPD_MD                  Local  3940     I(4)            4     2     520                       4212,4444,8185,8186,8190,8191,8194
                                                                                                  ,8195,8197,8198                   
 N_XX999_AR                 Local  3894     I(4)            4           scalar                    4173,4473,8336                    
 N_XX999_MA                 Local  3895     I(4)            4           scalar                    4174,4476,8336                    
 OB_DIR                     Dummy  3615     R(4)            4     1     0        ARG,INOUT        4714,4715,4718,4735,5278,5279,5280
                                                                                                  ,5283,5284,5285,5291,5292,5293,534
                                                                                                  2,5343,5344,5345,5348,5349,5355,53
                                                                                                  56,5357,5358,5370,5371,5372,5373,5
                                                                                                  376,5377,5383,5384,5385,5386,5420,
                                                                                                  5422,5584,5585,5676,5678,5903,5904
                                                                                                  ,5905,5906,5909,5910,5916,5917,591
                                                                                                  8,5919,5931,5932,5933,5934,5937,59
                                                                                                  38,5944,5945,5946,5947,5982,5983,5
                                                                                                  986,6153,6154,6245,6247,6484,6485,
                                                                                                  6490,6491,6496,6497,6501,6502,6507
                                                                                                  ,6508,6542,6593,6594,6807,6808,686
                                                                                                  4,6865,7076,7077,7080,7081,7116,71
                                                                                                  25,7126,7331,7340,7689,7899       
 OB_Q                       Dummy  3615     R(4)            4     1     0        ARG,INOUT        7330,7339,7688,7898               
 OB_SPD                     Dummy  3615     R(4)            4     1     0        ARG,INOUT        4431,4433,4435,4438,4736,5281,5282
                                                                                                  ,5287,5288,5289,5290,5294,5295,529
                                                                                                  6,5346,5347,5350,5351,5352,5353,53
                                                                                                  54,5359,5360,5374,5375,5378,5379,5
                                                                                                  380,5381,5382,5387,5388,5419,5421,
                                                                                                  5582,5583,5674,5675,5907,5908,5911
                                                                                                  ,5912,5913,5914,5915,5920,5921,593
                                                                                                  5,5936,5939,5940,5941,5942,5943,59
                                                                                                  48,5949,5980,5981,5984,5985,6151,6
                                                                                                  152,6243,6244,6480,6481,6482,6486,
                                                                                                  6487,6488,6492,6493,6494,6498,6499
                                                                                                  ,6503,6504,6505,6506,6541,6591,659
                                                                                                  2,6805,6806,6862,6863,7074,7078,70
                                                                                                  79,7115,7123,7124,7162,7185,7332,7
                                                                                                  341,7690,7900                     
 OB_T                       Dummy  3615     R(4)            4     1     0        ARG,INOUT        4421,4423,4425,4428,4733,5273,5274

Page 168         Source Listing                  DUPCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  ,5275,5340,5368,5414,5523,5524,590
                                                                                                  1,5929,5975,6092,6093,6479,7073,71
                                                                                                  60,7173,7211,7230,7257,7276,7329,7
                                                                                                  338,7687,7897                     
 PRES                       Dummy  3615     R(4)            4     1     0        ARG,INOUT        4731,7100,7328,7337,7686,7896     
 T_PRCN                     Dummy  3615     R(4)            4     1     0        ARG,INOUT        7329,7338,7687,7897               
 XIV_D                      Dummy  3616     R(4)            4     1     0        ARG,INOUT        7331,7340,7689,7899               
 XIV_Q                      Dummy  3616     R(4)            4     1     0        ARG,INOUT        7330,7339,7688,7898               
 XIV_S                      Dummy  3616     R(4)            4     1     0        ARG,INOUT        7332,7341,7690,7900               
 XIV_T                      Dummy  3616     R(4)            4     1     0        ARG,INOUT        7329,7338,7687,7897               

Page 169         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   7589      $           max_reps,numreps,itype,c_qc,c_acftreg,indx,
   7590      $           maxflt,kreg,creg_reg,nobs_reg,*99)
   7591 c
   7592 c Output statistics and rejects
   7593 c -----------------------------
   7594       kbad = 0
   7595 c
   7596 c     Write header to output file
   7597 c     ---------------------------
   7598       if(.not.l_operational) then
   7599         write(io30,*)
   7600         write(io30,*) 'Encode dups (E or e)'
   7601         write(io30,*) '--------------------'
   7602         write(io30,3001)
   7603  3001   format(' index  type    tail num   flight     time       lat'
   7604      x,        '        lon       pres  height '
   7605      x,        't-prcn   temp     innov  ichk'
   7606      x,        ' spec hum    innov  ichk'
   7607      x,        '   ob_dir    innov  ichk'
   7608      x,        '   ob_spd    innov  ichk'
   7609      x,        '   qc flag')
   7610       endif
   7611 c
   7612 c     Loop over reports
   7613 c     -----------------
   7614       do iob = 1,numreps
   7615         ii = indx(iob)
   7616 c
   7617 c       Count number of reports considered
   7618 c       ----------------------------------
   7619         if(itype(ii).eq.i_mdcrs.or.
   7620      $     itype(ii).eq.i_mdcrs_asc.or.
   7621      $     itype(ii).eq.i_mdcrs_lvl.or.
   7622      $     itype(ii).eq.i_mdcrs_des) then
   7623           nrep_Md = nrep_Md + 1
   7624           ktype = 1
   7625 c
   7626         elseif(itype(ii).eq.i_acars.or.
   7627      $         itype(ii).eq.i_acars_asc.or.
   7628      $         itype(ii).eq.i_acars_lvl.or.
   7629      $         itype(ii).eq.i_acars_des) then
   7630           nrep_Ac = nrep_Ac + 1
   7631           ktype = 2
   7632 c
   7633         elseif(itype(ii).eq.i_amdar.or.
   7634      $         itype(ii).eq.i_amdar_asc.or.
   7635      $         itype(ii).eq.i_amdar_lvl.or.
   7636      $         itype(ii).eq.i_amdar_des) then
   7637           nrep_Am = nrep_Am + 1
   7638           ktype = 3
   7639 c
   7640         elseif(itype(ii).eq.i_airep.or.
   7641      $         itype(ii).eq.i_airep_asc.or.
   7642      $         itype(ii).eq.i_airep_lvl.or.
   7643      $         itype(ii).eq.i_airep_des) then
   7644           nrep_Ar = nrep_Ar + 1
   7645           ktype = 4

Page 170         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   7646 c
   7647         elseif(itype(ii).eq.i_man_airep.or.
   7648      $         itype(ii).eq.i_man_Yairep) then
   7649           nrep_Ma = nrep_Ma + 1
   7650           ktype = 5
   7651 c
   7652         else
   7653           write(io8,*)
   7654           write(io8,*) 'Bad itype: ',itype(ii),' for ii = ',ii
   7655           ktype = 0
   7656         endif
   7657 c
   7658 c       Count number of reports rejected with encode errors
   7659 c       ---------------------------------------------------
   7660         if(c_qc(ii)(1:1).eq.'e'.or.
   7661      $     c_qc(ii)(1:1).eq.'E') then
   7662 c
   7663           if(ktype.ne.0) kbad(ktype,1) = kbad(ktype,1) + 1
   7664 c
   7665 c         Count number of rejected reports by tail number
   7666 c         -----------------------------------------------
   7667           mm = 1
   7668           do while(mm.le.kreg)
   7669             if(c_acftreg(ii).eq.creg_reg(mm)) then 
   7670 c
   7671               if(ktype.gt.0.and.ktype.le.5)
   7672      $          nrej_reg(mm,ktype) = nrej_reg(mm,ktype) + 1
   7673               mm = kreg + 1
   7674             endif
   7675             mm = mm + 1
   7676           enddo
   7677 c
   7678 c         Flag bad report for reorder subroutine and output rejects
   7679 c         ---------------------------------------------------------
   7680           csort(ii)(1:5) = 'badob'
   7681 c
   7682           if(.not.l_operational) then
   7683             write(io30,3002) ii,c_insty_ob(itype(ii))
   7684      x,        c_acftreg(ii),c_acftid(ii)
   7685      x,        idt(ii),alat(ii),alon(ii)
   7686      x,        pres(ii),ht_ft(ii)
   7687      x,        t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
   7688      x,        ob_q(ii),xiv_q(ii),ichk_q(ii)
   7689      x,        ob_dir(ii),xiv_d(ii),ichk_d(ii)
   7690      x,        ob_spd(ii),xiv_s(ii),ichk_s(ii)
   7691      x,        c_qc(ii)
   7692  3002       format(i6,1x,a8,1x,a8,1x,a9,1x,i7,1x,2f11.5,1x,f8.1,1x,f7.0
   7693      x,          1x,f5.2,4(2(1x,f8.2),1x,i5),1x,'!',a11,'!')
   7694           endif
   7695 c
   7696 c       Count number of bad temperatures and bad winds
   7697 c       ----------------------------------------------
   7698         elseif(c_qc(ii)(6:6).eq.'E'.or.
   7699      $         c_qc(ii)(7:7).eq.'E'.or.
   7700      $         c_qc(ii)(8:8).eq.'E') then
   7701 c
   7702 c         Count number of rejected temps/winds by tail number

Page 171         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   7703 c         ---------------------------------------------------
   7704           mm = 1
   7705           do while(mm.le.kreg)
   7706             if(c_acftreg(ii).eq.creg_reg(mm)) then 
   7707 c
   7708               if(ktype.gt.0.and.ktype.le.5) then
   7709                 if(c_qc(ii)(6:6).eq.'E')
   7710      $            ntemp_reg(mm,ktype) = ntemp_reg(mm,ktype) + 1
   7711                 if(c_qc(ii)(7:7).eq.'E'.or.
   7712      $             c_qc(ii)(8:8).eq.'E')
   7713      $            nwind_reg(mm,ktype) = nwind_reg(mm,ktype) + 1
   7714               endif
   7715               mm = kreg + 1
   7716             endif
   7717             mm = mm + 1
   7718           enddo
   7719         endif
   7720       enddo
   7721 c
   7722 c     Output statistics
   7723 c     -----------------
   7724       if(.not.l_operational) then
   7725         write(io30,*)
   7726         write(io30,*)'  Number of MDCRS    encode dups rejected = '
   7727      $,                   kbad(1,1)
   7728 ccccdak        write(io30,*)'  Number of ACARS    encode dups rejected = '
   7729         write(io30,*)'  Number of TAMDAR   encode dups rejected = '
   7730      $,                   kbad(2,1)
   7731         write(io30,*)'  Number of AMDAR    encode dups rejected = '
   7732      $,                   kbad(3,1)
   7733         write(io30,*)'  Number of AIREP    encode dups rejected = '
   7734      $,                   kbad(4,1)
   7735         write(io30,*)'  Number of manAIREP encode dups rejected = '
   7736      $,                   kbad(5,1)
   7737       endif
   7738 c
   7739 c     Output tail number counts
   7740 c     -------------------------
   7741       write(io8,*) 
   7742       write(io8,*) '  Tail numbers for rejected encode dups'
   7743 ccccdak      write(io8,*) '  Tail Num  MDCRS  ACARS  AMDAR  AIREP  MAN  '
   7744       write(io8,*) '  Tail Num  MDCRS  TAMDAR AMDAR  AIREP  MAN  '
   7745       write(io8,*) '  -------------------------------------------'
   7746 c
   7747       do mm=1,kreg
   7748         if( nrej_reg(mm,1)+nrej_reg(mm,2)+nrej_reg(mm,3)
   7749      $     +nrej_reg(mm,4)+nrej_reg(mm,5).gt.0) then
   7750           write(io8,'(2x,a8,5(1x,i6))') 
   7751      $      creg_reg(mm),(nrej_reg(mm,kk),kk=1,5)
   7752         endif
   7753       enddo
   7754 c
   7755       write(io8,*) 
   7756       write(io8,*) '  Tail numbers for reports with bad temperature'
   7757 ccccdak      write(io8,*) '  Tail Num  MDCRS  ACARS  AMDAR  AIREP  MAN  '
   7758       write(io8,*) '  Tail Num  MDCRS  TAMDAR AMDAR  AIREP  MAN  '
   7759       write(io8,*) '  -------------------------------------------'

Page 172         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   7760 c
   7761       do mm=1,kreg
   7762         if( ntemp_reg(mm,1)+ntemp_reg(mm,2)+ntemp_reg(mm,3)
   7763      $     +ntemp_reg(mm,4)+ntemp_reg(mm,5).gt.0) then
   7764           write(io8,'(2x,a8,5(1x,i6))') 
   7765      $      creg_reg(mm),(ntemp_reg(mm,kk),kk=1,5)
   7766         endif
   7767       enddo
   7768 c
   7769       write(io8,*) 
   7770       write(io8,*) '  Tail numbers for reports with bad winds'
   7771 ccccdak      write(io8,*) '  Tail Num  MDCRS  ACARS  AMDAR  AIREP  MAN  '
   7772       write(io8,*) '  Tail Num  MDCRS  TAMDAR AMDAR  AIREP  MAN  '
   7773       write(io8,*) '  -------------------------------------------'
   7774 c
   7775       do mm=1,kreg
   7776         if( nwind_reg(mm,1)+nwind_reg(mm,2)+nwind_reg(mm,3)
   7777      $     +nwind_reg(mm,4)+nwind_reg(mm,5).gt.0) then
   7778           write(io8,'(2x,a8,5(1x,i6))') 
   7779      $      creg_reg(mm),(nwind_reg(mm,kk),kk=1,5)
   7780         endif
   7781       enddo
   7782 c
   7783 c     Write header to output file
   7784 c     ---------------------------
   7785       if(l_save_dups.and.(.not.l_operational)) then
   7786         write(io30,*)
   7787         write(io30,*) 'True dups(D) and close dups (d)'
   7788         write(io30,*) '-------------------------------'
   7789         write(io30,3001)
   7790       endif
   7791 c
   7792 c     Loop over reports
   7793 c     -----------------
   7794       do iob = 1,numreps
   7795         ii   = indx(iob)
   7796 c
   7797 c       Count number of exact duplicates
   7798 c       --------------------------------
   7799         if(c_qc(ii)(1:1).eq.'D'.and.
   7800      $     csort(ii)(1:5).ne.'badob') then
   7801 c
   7802           if(itype(ii).eq.i_mdcrs.or.
   7803      $       itype(ii).eq.i_mdcrs_asc.or.
   7804      $       itype(ii).eq.i_mdcrs_lvl.or.
   7805      $       itype(ii).eq.i_mdcrs_des) then
   7806             kbad(1,2) = kbad(1,2) + 1
   7807             ndup_Md = ndup_Md + 1
   7808 c
   7809           elseif(itype(ii).eq.i_acars.or.
   7810      $           itype(ii).eq.i_acars_asc.or.
   7811      $           itype(ii).eq.i_acars_lvl.or.
   7812      $           itype(ii).eq.i_acars_des) then
   7813             kbad(2,2) = kbad(2,2) + 1
   7814             ndup_Ac = ndup_Ac + 1
   7815 c
   7816           elseif(itype(ii).eq.i_amdar.or.

Page 173         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   7817      $           itype(ii).eq.i_amdar_asc.or.
   7818      $           itype(ii).eq.i_amdar_lvl.or.
   7819      $           itype(ii).eq.i_amdar_des) then
   7820             kbad(3,2) = kbad(3,2) + 1
   7821             ndup_Am = ndup_Am + 1
   7822 c
   7823           elseif(itype(ii).eq.i_airep.or.
   7824      $           itype(ii).eq.i_airep_asc.or.
   7825      $           itype(ii).eq.i_airep_lvl.or.
   7826      $           itype(ii).eq.i_airep_des) then
   7827             kbad(4,2) = kbad(4,2) + 1
   7828             ndup_Ar = ndup_Ar + 1
   7829 c
   7830           elseif(itype(ii).eq.i_man_airep.or.
   7831      $           itype(ii).eq.i_man_Yairep) then
   7832             kbad(5,2) = kbad(5,2) + 1
   7833             ndup_Ma = ndup_Ma + 1
   7834 c
   7835           else
   7836             write(io8,*)
   7837             write(io8,*) 'Bad itype: ',itype(ii),' for ii = ',ii
   7838           endif
   7839         endif
   7840 c
   7841 c       Count number of near and encode duplicates
   7842 c       ------------------------------------------
   7843         if(c_qc(ii)(1:1).eq.'d'.and.
   7844      $     csort(ii)(1:5).ne.'badob') then
   7845 c
   7846           if(itype(ii).eq.i_mdcrs.or.
   7847      $       itype(ii).eq.i_mdcrs_asc.or.
   7848      $       itype(ii).eq.i_mdcrs_lvl.or.
   7849      $       itype(ii).eq.i_mdcrs_des) then
   7850             kbad(1,3) = kbad(1,3) + 1
   7851             ndup_Md = ndup_Md + 1
   7852 c
   7853           elseif(itype(ii).eq.i_acars.or.
   7854      $           itype(ii).eq.i_acars_asc.or.
   7855      $           itype(ii).eq.i_acars_lvl.or.
   7856      $           itype(ii).eq.i_acars_des) then
   7857             kbad(2,3) = kbad(2,3) + 1
   7858             ndup_Ac = ndup_Ac + 1
   7859 c
   7860           elseif(itype(ii).eq.i_amdar.or.
   7861      $           itype(ii).eq.i_amdar_asc.or.
   7862      $           itype(ii).eq.i_amdar_lvl.or.
   7863      $           itype(ii).eq.i_amdar_des) then
   7864             kbad(3,3) = kbad(3,3) + 1
   7865             ndup_Am = ndup_Am + 1
   7866 c
   7867           elseif(itype(ii).eq.i_airep.or.
   7868      $           itype(ii).eq.i_airep_asc.or.
   7869      $           itype(ii).eq.i_airep_lvl.or.
   7870      $           itype(ii).eq.i_airep_des) then
   7871             kbad(4,3) = kbad(4,3) + 1
   7872             ndup_Ar = ndup_Ar + 1
   7873 c

Page 174         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   7874           elseif(itype(ii).eq.i_man_airep.or.
   7875      $           itype(ii).eq.i_man_Yairep) then
   7876             kbad(5,3) = kbad(5,3) + 1
   7877             ndup_Ma = ndup_Ma + 1
   7878 c
   7879           else
   7880             write(io8,*)
   7881             write(io8,*) 'Bad itype: ',itype(ii),' for ii = ',ii
   7882           endif
   7883         endif
   7884 c
   7885 c       Set flag for "reorder" and output dups if desired
   7886 c       -------------------------------------------------
   7887         if(c_qc(ii)(1:1).eq.'D'.or.
   7888      $     c_qc(ii)(1:1).eq.'d') then
   7889 c
   7890           csort(ii)(1:5) = 'badob'
   7891 c
   7892           if(l_save_dups.and.(.not.l_operational)) then
   7893             write(io30,3002) ii,c_insty_ob(itype(ii))
   7894      x,        c_acftreg(ii),c_acftid(ii)
   7895      x,        idt(ii),alat(ii),alon(ii)
   7896      x,        pres(ii),ht_ft(ii)
   7897      x,        t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
   7898      x,        ob_q(ii),xiv_q(ii),ichk_q(ii)
   7899      x,        ob_dir(ii),xiv_d(ii),ichk_d(ii)
   7900      x,        ob_spd(ii),xiv_s(ii),ichk_s(ii)
   7901      x,        c_qc(ii)
   7902           endif
   7903 c
   7904         endif
   7905       enddo
   7906 c
   7907 c     Output statistics
   7908 c     -----------------
   7909       if(.not.l_operational) then
   7910         write(io30,*)'  Number of MDCRS    exact dups rejected = '
   7911      $,                 kbad(1,2)
   7912 ccccdak        write(io30,*)'  Number of ACARS    exact dups rejected = '
   7913         write(io30,*)'  Number of TAMDAR   exact dups rejected = '
   7914      $,                 kbad(2,2)
   7915         write(io30,*)'  Number of AMDAR    exact dups rejected = '
   7916      $,                 kbad(3,2)
   7917         write(io30,*)'  Number of AIREP    exact dups rejected = '
   7918      $,                 kbad(4,2)
   7919         write(io30,*)'  Number of manAIREP exact dups rejected = '
   7920      $,                 kbad(5,2)
   7921         write(io30,*)'  Number of MDCRS    near dups rejected  = '
   7922      $,                 kbad(1,3)
   7923 ccccdak        write(io30,*)'  Number of ACARS    near dups rejected  = '
   7924         write(io30,*)'  Number of TAMDAR   near dups rejected  = '
   7925      $,                 kbad(2,3)
   7926         write(io30,*)'  Number of AMDAR    near dups rejected  = '
   7927      $,                 kbad(3,3)
   7928         write(io30,*)'  Number of AIREP    near dups rejected  = '
   7929      $,                 kbad(4,3)
   7930         write(io30,*)'  Number of manAIREP near dups rejected  = '

Page 175         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   7931      $,                 kbad(5,3)
   7932       endif
   7933 c
   7934       kbadtot = kbad(1,1) + kbad(2,1) + kbad(3,1) + kbad(4,1) 
   7935      $        + kbad(5,1) + kbad(1,2) + kbad(2,2) + kbad(3,2)
   7936      $        + kbad(4,2) + kbad(5,2) + kbad(1,3) + kbad(2,3)
   7937      $        + kbad(3,3) + kbad(4,3) + kbad(5,3)
   7938 c
   7939       write(io8,*)
   7940       write(io8,*) numreps,' good reports processed'
   7941       write(io8,*) kbadtot,' reports failed qc in duplicate check'
   7942 c
   7943 c     Output detailed stats
   7944 c     ---------------------
   7945       if(l_last) then
   7946         write(io8,*)
   7947         write(io8,*) 'Distribution of MDCRS reports'
   7948         do ii=19,1,-1
   7949           write(io8,'(37i7)') (n_area_Md(ii,kk),kk=1,37)
   7950         enddo
   7951 c
   7952         write(io8,*)
   7953 ccccdak        write(io8,*) 'Distribution of ACARS reports'
   7954         write(io8,*) 'Distribution of TAMDAR reports'
   7955         do ii=19,1,-1
   7956           write(io8,'(37i7)') (n_area_Ac(ii,kk),kk=1,37)
   7957         enddo
   7958 c
   7959         write(io8,*)
   7960         write(io8,*) 'Distribution of AMDAR reports'
   7961         do ii=19,1,-1
   7962           write(io8,'(37i7)') (n_area_Am(ii,kk),kk=1,37)
   7963         enddo
   7964 c
   7965         write(io8,*)
   7966         write(io8,*) 'Distribution of AIREP reports'
   7967         do ii=19,1,-1
   7968           write(io8,'(37i7)') (n_area_Ar(ii,kk),kk=1,37)
   7969         enddo
   7970 c
   7971         write(io8,*)
   7972         write(io8,*) 'Distribution of manAIREP reports'
   7973         do ii=19,1,-1
   7974           write(io8,'(37i7)') (n_area_Ma(ii,kk),kk=1,37)
   7975         enddo
   7976 c
   7977         write(io8,*)
   7978         write(io8,*) 'Temporal distribution of MDCRS reports'
   7979         do ii=1,24
   7980           write(io8,*) ii,n_time_Md(ii)
   7981         enddo
   7982 c
   7983         write(io8,*)
   7984 ccccdak        write(io8,*) 'Temporal distribution of ACARS reports'
   7985         write(io8,*) 'Temporal distribution of TAMDAR reports'
   7986         do ii=1,24
   7987           write(io8,*) ii,n_time_Ac(ii)

Page 176         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   7988         enddo
   7989 c
   7990         write(io8,*)
   7991         write(io8,*) 'Temporal distribution of AMDAR reports'
   7992         do ii=1,24
   7993           write(io8,*) ii,n_time_Am(ii)
   7994         enddo
   7995 c
   7996         write(io8,*)
   7997         write(io8,*) 'Temporal distribution of AIREP reports'
   7998         do ii=1,24
   7999           write(io8,*) ii,n_time_Ar(ii)
   8000         enddo
   8001 c
   8002         write(io8,*)
   8003         write(io8,*) 'Temporal distribution of manAIREP reports'
   8004         do ii=1,24
   8005           write(io8,*) ii,n_time_Ma(ii)
   8006         enddo
   8007 c
   8008         write(io8,*)
   8009         write(io8,*) 'Vertical distribution of MDCRS reports'
   8010         write(io8,*) '<0 ',n_lev_Md(53)
   8011         do ii=0,50
   8012           write(io8,*) ii,n_lev_Md(ii+1)
   8013         enddo
   8014         write(io8,*) '>50',n_lev_Md(52)
   8015 c
   8016         write(io8,*)
   8017 ccccdak        write(io8,*) 'Vertical distribution of ACARS reports'
   8018         write(io8,*) 'Vertical distribution of TAMDAR reports'
   8019         write(io8,*) '<0 ',n_lev_Ac(53)
   8020         do ii=0,50
   8021           write(io8,*) ii,n_lev_Ac(ii+1)
   8022         enddo
   8023         write(io8,*) '>50',n_lev_Ac(52)
   8024 c
   8025         write(io8,*)
   8026         write(io8,*) 'Vertical distribution of AMDAR reports'
   8027         write(io8,*) '<0 ',n_lev_Am(53)
   8028         do ii=0,50
   8029           write(io8,*) ii,n_lev_Am(ii+1)
   8030         enddo
   8031         write(io8,*) '>50',n_lev_Am(52)
   8032 c
   8033         write(io8,*)
   8034         write(io8,*) 'Vertical distribution of AIREP reports'
   8035         write(io8,*) '<0 ',n_lev_Ar(53)
   8036         do ii=0,50
   8037           write(io8,*) ii,n_lev_Ar(ii+1)
   8038         enddo
   8039         write(io8,*) '>50',n_lev_Ar(52)
   8040 c
   8041         write(io8,*)
   8042         write(io8,*) 'Vertical distribution of manAIREP reports'
   8043         write(io8,*) '<0 ',n_lev_Ma(53)
   8044         do ii=0,50

Page 177         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   8045           write(io8,*) ii,n_lev_Ma(ii+1)
   8046         enddo
   8047         write(io8,*) '>50',n_lev_Ma(52)
   8048 c
   8049         write(io8,*)
   8050         write(io8,*) 'Vertical distribution of MDCRS temp reports'
   8051         write(io8,*) '-------------------------------------------'
   8052         write(io8,'(''                           Altitude (kft)'')')
   8053         write(io8,'(1x,a45,a41)')
   8054      $  'Temp (C)   <0   0-5   5-10 10-15 15-20 20-25 ',
   8055      $              '25-30 30-35 35-40 40-45 45-50  50    >50 '
   8056         write(io8,'(1x,a45,a41)')
   8057      $      '-------- ----- ----- ----- ----- ----- ----- ',
   8058      $      '----- ----- ----- ----- ----- ----- -----'  
   8059         write(io8,'('' missing '',13i7)') n_temp_Md(36,13),
   8060      $                                   (n_temp_Md(36,ii),ii=1,12)
   8061         write(io8,'(1x,a45,a41)')
   8062      $      '-------- ----- ----- ----- ----- ----- ----- ',
   8063      $      '----- ----- ----- ----- ----- ----- -----'
   8064         write(io8,'('' < -100  '',13i7)') n_temp_Md(35,13),
   8065      $                                   (n_temp_Md(35,ii),ii=1,12)
   8066         do kk=1,33
   8067           ktemp = (5 * (kk-1) + 173) - 273
   8068           write(io8,'(i9,13i7)') ktemp,n_temp_Md(kk,13),
   8069      $                                (n_temp_Md(kk,ii),ii=1,12)
   8070         enddo
   8071         write(io8,'('' > 60    '',13i7)') n_temp_Md(34,13),
   8072      $                                   (n_temp_Md(34,ii),ii=1,12)
   8073 c
   8074         write(io8,*)
   8075 ccccdak        write(io8,*) 'Vertical distribution of ACARS temp reports'
   8076         write(io8,*) 'Vertical distribution of TAMDAR temp reports'
   8077         write(io8,*) '--------------------------------------------'
   8078         write(io8,'(''                           Altitude (kft)'')')
   8079         write(io8,'(1x,a45,a41)')
   8080      $  'Temp (C)   <0   0-5   5-10 10-15 15-20 20-25 ',
   8081      $              '25-30 30-35 35-40 40-45 45-50  50    >50 '
   8082         write(io8,'(1x,a45,a41)')
   8083      $      '-------- ----- ----- ----- ----- ----- ----- ',
   8084      $      '----- ----- ----- ----- ----- ----- -----'
   8085         write(io8,'('' missing '',13i7)') n_temp_Ac(36,13),
   8086      $                                   (n_temp_Ac(36,ii),ii=1,12)
   8087         write(io8,'(1x,a45,a41)')
   8088      $      '-------- ----- ----- ----- ----- ----- ----- ',
   8089      $      '----- ----- ----- ----- ----- ----- -----'
   8090         write(io8,'('' < -100  '',13i7)') n_temp_Ac(35,13),
   8091      $                                   (n_temp_Ac(35,ii),ii=1,12)
   8092         do kk=1,33
   8093           ktemp = (5 * (kk-1) + 173) - 273
   8094           write(io8,'(i9,13i7)') ktemp,n_temp_Ac(kk,13),
   8095      $                                (n_temp_Ac(kk,ii),ii=1,12)
   8096         enddo
   8097         write(io8,'('' > 60    '',13i7)') n_temp_Ac(34,13),
   8098      $                                   (n_temp_Ac(34,ii),ii=1,12)
   8099 c
   8100         write(io8,*)
   8101         write(io8,*) 'Vertical distribution of AMDAR temp reports'

Page 178         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   8102         write(io8,*) '-------------------------------------------'
   8103         write(io8,'(''                           Altitude (kft)'')')
   8104         write(io8,'(1x,a45,a41)')
   8105      $  'Temp (C)   <0   0-5   5-10 10-15 15-20 20-25 ',
   8106      $              '25-30 30-35 35-40 40-45 45-50  50    >50 '
   8107         write(io8,'(1x,a45,a41)')
   8108      $      '-------- ----- ----- ----- ----- ----- ----- ',
   8109      $      '----- ----- ----- ----- ----- ----- -----'  
   8110         write(io8,'('' missing '',13i7)') n_temp_Am(36,13),
   8111      $                                   (n_temp_Am(36,ii),ii=1,12)
   8112         write(io8,'(1x,a45,a41)')
   8113      $      '-------- ----- ----- ----- ----- ----- ----- ',
   8114      $      '----- ----- ----- ----- ----- ----- -----'
   8115         write(io8,'('' < -100  '',13i7)') n_temp_Am(35,13),
   8116      $                                   (n_temp_Am(35,ii),ii=1,12)
   8117         do kk=1,33
   8118           ktemp = (5 * (kk-1) + 173) - 273
   8119           write(io8,'(i9,13i7)') ktemp,n_temp_Am(kk,13),
   8120      $                                (n_temp_Am(kk,ii),ii=1,12)
   8121         enddo
   8122         write(io8,'('' > 60    '',13i7)') n_temp_Am(34,13),
   8123      $                                   (n_temp_Am(34,ii),ii=1,12)
   8124 c
   8125         write(io8,*)
   8126         write(io8,*) 'Vertical distribution of AIREP temp reports'
   8127         write(io8,*) '-------------------------------------------'
   8128         write(io8,'(''                           Altitude (kft)'')')
   8129         write(io8,'(1x,a45,a41)')
   8130      $  'Temp (C)   <0   0-5   5-10 10-15 15-20 20-25 ',
   8131      $              '25-30 30-35 35-40 40-45 45-50  50    >50 '
   8132         write(io8,'(1x,a45,a41)')
   8133      $      '-------- ----- ----- ----- ----- ----- ----- ',
   8134      $      '----- ----- ----- ----- ----- ----- -----'  
   8135         write(io8,'('' missing '',13i7)') n_temp_Ar(36,13),
   8136      $                                   (n_temp_Ar(36,ii),ii=1,12)
   8137         write(io8,'(1x,a45,a41)')
   8138      $      '-------- ----- ----- ----- ----- ----- ----- ',
   8139      $      '----- ----- ----- ----- ----- ----- -----'
   8140         write(io8,'('' < -100  '',13i7)') n_temp_Ar(35,13),
   8141      $                                   (n_temp_Ar(35,ii),ii=1,12)
   8142         do kk=1,33
   8143           ktemp = (5 * (kk-1) + 173) - 273
   8144           write(io8,'(i9,13i7)') ktemp,n_temp_Ar(kk,13),
   8145      $                                (n_temp_Ar(kk,ii),ii=1,12)
   8146         enddo
   8147         write(io8,'('' > 60    '',13i7)') n_temp_Ar(34,13),
   8148      $                                   (n_temp_Ar(34,ii),ii=1,12)
   8149 c
   8150         write(io8,*)
   8151         write(io8,*) 'Vertical distribution of manAIREP temp reports'
   8152         write(io8,*) '-------------------------------------------'
   8153         write(io8,'(''                           Altitude (kft)'')')
   8154         write(io8,'(1x,a45,a41)')
   8155      $  'Temp (C)   <0   0-5   5-10 10-15 15-20 20-25 ',
   8156      $              '25-30 30-35 35-40 40-45 45-50  50    >50 '
   8157         write(io8,'(1x,a45,a41)')
   8158      $      '-------- ----- ----- ----- ----- ----- ----- ',

Page 179         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   8159      $      '----- ----- ----- ----- ----- ----- -----'  
   8160         write(io8,'('' missing '',13i7)') n_temp_Ma(36,13),
   8161      $                                   (n_temp_Ma(36,ii),ii=1,12)
   8162         write(io8,'(1x,a45,a41)')
   8163      $      '-------- ----- ----- ----- ----- ----- ----- ',
   8164      $      '----- ----- ----- ----- ----- ----- -----'
   8165         write(io8,'('' < -100  '',13i7)') n_temp_Ma(35,13),
   8166      $                                   (n_temp_Ma(35,ii),ii=1,12)
   8167         do kk=1,33
   8168           ktemp = (5 * (kk-1) + 173) - 273
   8169           write(io8,'(i9,13i7)') ktemp,n_temp_Ma(kk,13),
   8170      $                                (n_temp_Ma(kk,ii),ii=1,12)
   8171         enddo
   8172         write(io8,'('' > 60    '',13i7)') n_temp_Ma(34,13),
   8173      $                                   (n_temp_Ma(34,ii),ii=1,12)
   8174 c
   8175         write(io8,*)
   8176         write(io8,*) 'Vertical distribution of MDCRS wspd reports'
   8177         write(io8,*) '-------------------------------------------'
   8178         write(io8,'(''                           Altitude (kft)'')')
   8179         write(io8,'(1x,a45,a41)')
   8180      $         'Spd(m/s)   <0   0-5   5-10 10-15 15-20 20-25 ',
   8181      $         '25-30 30-35 35-40 40-45 45-50  50    >50 '
   8182         write(io8,'(1x,a45,a41)')
   8183      $      '-------- ----- ----- ----- ----- ----- ----- ',
   8184      $      '----- ----- ----- ----- ----- ----- -----'  
   8185         write(io8,'('' missing '',13i7)') n_wspd_Md(40,13),
   8186      $                                   (n_wspd_Md(40,ii),ii=1,12)
   8187         write(io8,'(1x,a45,a41)')
   8188      $      '-------- ----- ----- ----- ----- ----- ----- ',
   8189      $      '----- ----- ----- ----- ----- ----- -----'
   8190         write(io8,'(''  < 0    '',13i7)') n_wspd_Md(39,13),
   8191      $                                   (n_wspd_Md(39,ii),ii=1,12)
   8192         do kk=1,37
   8193           kwspd = 5 * (kk-1)
   8194           write(io8,'(i9,13i7)') kwspd,n_wspd_Md(kk,13),
   8195      $                                (n_wspd_Md(kk,ii),ii=1,12)
   8196         enddo
   8197         write(io8,'('' > 180   '',13i7)') n_wspd_Md(38,13),
   8198      $                                   (n_wspd_Md(38,ii),ii=1,12)
   8199 c
   8200         write(io8,*)
   8201 ccccdak        write(io8,*) 'Vertical distribution of ACARS wspd reports'
   8202         write(io8,*) 'Vertical distribution of TAMDAR wspd reports'
   8203         write(io8,*) '-------------------------------------------'
   8204         write(io8,'(''                           Altitude (kft)'')')
   8205         write(io8,'(1x,a45,a41)')
   8206      $         'Spd(m/s)   <0   0-5   5-10 10-15 15-20 20-25 ',
   8207      $         '25-30 30-35 35-40 40-45 45-50  50    >50 '
   8208         write(io8,'(1x,a45,a41)')
   8209      $      '-------- ----- ----- ----- ----- ----- ----- ',
   8210      $      '----- ----- ----- ----- ----- ----- -----'  
   8211         write(io8,'('' missing '',13i7)') n_wspd_Ac(40,13),
   8212      $                                   (n_wspd_Ac(40,ii),ii=1,12)
   8213         write(io8,'(1x,a45,a41)')
   8214      $      '-------- ----- ----- ----- ----- ----- ----- ',
   8215      $      '----- ----- ----- ----- ----- ----- -----'

Page 180         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   8216         write(io8,'(''  < 0    '',13i7)') n_wspd_Ac(39,13),
   8217      $                                   (n_wspd_Ac(39,ii),ii=1,12)
   8218         do kk=1,37
   8219           kwspd = 5 * (kk-1)
   8220           write(io8,'(i9,13i7)') kwspd,n_wspd_Ac(kk,13),
   8221      $                                (n_wspd_Ac(kk,ii),ii=1,12)
   8222         enddo
   8223         write(io8,'('' > 180   '',13i7)') n_wspd_Ac(38,13),
   8224      $                                   (n_wspd_Ac(38,ii),ii=1,12)
   8225 c
   8226         write(io8,*)
   8227         write(io8,*) 'Vertical distribution of AMDAR wspd reports'
   8228         write(io8,*) '-------------------------------------------'
   8229         write(io8,'(''                           Altitude (kft)'')')
   8230         write(io8,'(1x,a45,a41)')
   8231      $         'Spd(m/s)   <0   0-5   5-10 10-15 15-20 20-25 ',
   8232      $         '25-30 30-35 35-40 40-45 45-50  50    >50 '
   8233         write(io8,'(1x,a45,a41)')
   8234      $      '-------- ----- ----- ----- ----- ----- ----- ',
   8235      $      '----- ----- ----- ----- ----- ----- -----'  
   8236         write(io8,'('' missing '',13i7)') n_wspd_Am(40,13),
   8237      $                                   (n_wspd_Am(40,ii),ii=1,12)
   8238         write(io8,'(1x,a45,a41)')
   8239      $      '-------- ----- ----- ----- ----- ----- ----- ',
   8240      $      '----- ----- ----- ----- ----- ----- -----'
   8241         write(io8,'(''  < 0    '',13i7)') n_wspd_Am(39,13),
   8242      $                                   (n_wspd_Am(39,ii),ii=1,12)
   8243         do kk=1,37
   8244           kwspd = 5 * (kk-1)
   8245           write(io8,'(i9,13i7)') kwspd,n_wspd_Am(kk,13),
   8246      $                                (n_wspd_Am(kk,ii),ii=1,12)
   8247         enddo
   8248         write(io8,'('' > 180   '',13i7)') n_wspd_Am(38,13),
   8249      $                                   (n_wspd_Am(38,ii),ii=1,12)
   8250 c
   8251         write(io8,*)
   8252         write(io8,*) 'Vertical distribution of AIREP wspd reports'
   8253         write(io8,*) '-------------------------------------------'
   8254         write(io8,'(''                           Altitude (kft)'')')
   8255         write(io8,'(1x,a45,a41)')
   8256      $         'Spd(m/s)   <0   0-5   5-10 10-15 15-20 20-25 ',
   8257      $         '25-30 30-35 35-40 40-45 45-50  50    >50 '
   8258         write(io8,'(1x,a45,a41)')
   8259      $      '-------- ----- ----- ----- ----- ----- ----- ',
   8260      $      '----- ----- ----- ----- ----- ----- -----'  
   8261         write(io8,'('' missing '',13i7)') n_wspd_Ar(40,13),
   8262      $                                   (n_wspd_Ar(40,ii),ii=1,12)
   8263         write(io8,'(1x,a45,a41)')
   8264      $      '-------- ----- ----- ----- ----- ----- ----- ',
   8265      $      '----- ----- ----- ----- ----- ----- -----'
   8266         write(io8,'(''  < 0    '',13i7)') n_wspd_Ar(39,13),
   8267      $                                   (n_wspd_Ar(39,ii),ii=1,12)
   8268         do kk=1,37
   8269           kwspd = 5 * (kk-1)
   8270           write(io8,'(i9,13i7)') kwspd,n_wspd_Ar(kk,13),
   8271      $                                (n_wspd_Ar(kk,ii),ii=1,12)
   8272         enddo

Page 181         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   8273         write(io8,'('' > 180   '',13i7)') n_wspd_Ar(38,13),
   8274      $                                   (n_wspd_Ar(38,ii),ii=1,12)
   8275 c
   8276         write(io8,*)
   8277         write(io8,*) 'Vertical distribution of manAIREP wspd reports'
   8278         write(io8,*) '-------------------------------------------'
   8279         write(io8,'(''                           Altitude (kft)'')')
   8280         write(io8,'(1x,a45,a41)')
   8281      $         'Spd(m/s)   <0   0-5   5-10 10-15 15-20 20-25 ',
   8282      $         '25-30 30-35 35-40 40-45 45-50  50    >50 '
   8283         write(io8,'(1x,a45,a41)')
   8284      $      '-------- ----- ----- ----- ----- ----- ----- ',
   8285      $      '----- ----- ----- ----- ----- ----- -----'  
   8286         write(io8,'('' missing '',13i7)') n_wspd_Ma(40,13),
   8287      $                                   (n_wspd_Ma(40,ii),ii=1,12)
   8288         write(io8,'(1x,a45,a41)')
   8289      $      '-------- ----- ----- ----- ----- ----- ----- ',
   8290      $      '----- ----- ----- ----- ----- ----- -----'
   8291         write(io8,'(''  < 0    '',13i7)') n_wspd_Ma(39,13),
   8292      $                                   (n_wspd_Ma(39,ii),ii=1,12)
   8293         do kk=1,37
   8294           kwspd = 5 * (kk-1)
   8295           write(io8,'(i9,13i7)') kwspd,n_wspd_Ma(kk,13),
   8296      $                                (n_wspd_Ma(kk,ii),ii=1,12)
   8297         enddo
   8298         write(io8,'('' > 180   '',13i7)') n_wspd_Ma(38,13),
   8299      $                                   (n_wspd_Ma(38,ii),ii=1,12)
   8300       endif
   8301 c
   8302       write(*,*)
   8303       write(*,*) 'Duplicate check data counts--',cdtg_an
   8304       write(*,*) '---------------------------------------'
   8305       write(*,'(1x,a55)')
   8306 ccccdak     $ 'Type of check     MDCRS   ACARS   AMDAR   AIREP     man'
   8307      $ 'Type of check     MDCRS  TAMDAR   AMDAR   AIREP     man'
   8308       write(*,'(1x,a55)')
   8309      $ '--------------- ------- ------- ------- ------- -------'
   8310       write(*,'('' Num considered '',5(1x,i7))')
   8311      $     nrep_Md,nrep_Ac,nrep_Am,nrep_Ar,nrep_Ma
   8312       write(*,'('' Short ids      '',24x,2(1x,i7),8x)')
   8313      $     n_sh_Ar,n_sh_Ma
   8314       write(*,'(1x,a55)')
   8315      $ '--------------- ------- ------- ------- ------- -------'
   8316       write(*,'('' All duplicates '',5(1x,i7))')
   8317      $     ndup_Md,ndup_Ac,ndup_Am,ndup_Ar,ndup_Ma
   8318       write(*,'(1x,a55)')
   8319      $ '--------------- ------- ------- ------- ------- -------'
   8320       write(*,'('' Bad encode dup '',32x,(1x,i7),8x)')
   8321      $     n_bad_encode
   8322       write(*,'(1x,a55)')
   8323      $ '--------------- ------- ------- ------- ------- -------'
   8324 c
   8325       write(io8,*)
   8326       write(io8,*) 'Duplicate check data counts'
   8327       write(io8,*) '---------------------------'
   8328       write(io8,'(1x,a55)')
   8329 ccccdak     $ 'Type of check     MDCRS   ACARS   AMDAR   AIREP     man'

Page 182         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   8330      $ 'Type of check     MDCRS  TAMDAR   AMDAR   AIREP     man'
   8331       write(io8,'(1x,a55)')
   8332      $ '--------------- ------- ------- ------- ------- -------'
   8333       write(io8,'(''Num considered '',5(1x,i7))')
   8334      $     nrep_Md,nrep_Ac,nrep_Am,nrep_Ar,nrep_Ma
   8335       write(io8,'(''Missing ids    '',24x,2(1x,i7),8x)')
   8336      $     n_xx999_Ar,n_xx999_Ma
   8337       write(io8,'(''Short ids      '',24x,2(1x,i7),8x)')
   8338      $     n_sh_Ar,n_sh_Ma
   8339       write(io8,'(''Whole deg pos  '',5(1x,i7))')
   8340      $     n_00_Md,n_00_Ac,n_00_Am,n_00_Ar,n_00_Ma
   8341       write(io8,'(''Zero lat/lon   '',5(1x,i7))')
   8342      $     n_0000_Md,n_0000_Ac,n_0000_Am,n_0000_Ar,n_0000_Ma
   8343       write(io8,'(1x,a55)')
   8344      $ '--------------- ------- ------- ------- ------- -------'
   8345       write(io8,'(''All duplicates '',5(1x,i7))')
   8346      $     ndup_Md,ndup_Ac,ndup_Am,ndup_Ar,ndup_Ma
   8347       write(io8,'(1x,a55)')
   8348      $ '--------------- ------- ------- ------- ------- -------'
   8349       write(io8,'(''Bad encode dup '',32x,(1x,i7),8x)')
   8350      $     n_bad_encode
   8351       write(io8,'(1x,a55)')
   8352      $ '--------------- ------- ------- ------- ------- -------'
   8353       write(io8,*)
   8354       write(io8,*) '  Exact duplicates: ',n_exact
   8355       write(io8,*) '  Exact duplicates with short ids: ',n_exact_sh
   8356       write(io8,'(1x,a55)')
   8357      $ '--------------- ------- ------- ------- ------- -------'
   8358       write(io8,'(''Duplicates Md  '',32x,(1x,i7))')
   8359      $     n_ex_sh_MaMd
   8360       write(io8,'(''Duplicates Ac  '',32x,(1x,i7))')
   8361      $     n_ex_sh_MaAc
   8362       write(io8,'(''Duplicates Ar  '',24x,2(1x,i7))')
   8363      $     n_ex_sh_ArAr,n_ex_sh_MaAr
   8364       write(io8,'(''Duplicates Ma  '',24x,2(1x,i7))')
   8365      $     n_ex_sh_ArMa,n_ex_sh_MaMa
   8366       write(io8,'(1x,a55)')
   8367      $ '--------------- ------- ------- ------- ------- -------'
   8368       write(io8,*)
   8369       write(io8,*) '  Exact dups with 0 lat and 0 lon: ',n_exact_0ll
   8370       write(io8,'(1x,a55)')
   8371      $ '--------------- ------- ------- ------- ------- -------'
   8372       write(io8,'(''Duplicates Md  '',5(1x,i7))')
   8373      $     n_ex_0ll_MdMd,n_ex_0ll_AcAc
   8374       write(io8,'(''Duplicates Ar  '',32x,2(1x,i7))')
   8375      $     n_ex_0ll_MaAr
   8376       write(io8,'(''Duplicates Ma  '',32x,2(1x,i7))')
   8377      $     n_ex_0ll_MaMa
   8378       write(io8,'(1x,a55)')
   8379      $ '--------------- ------- ------- ------- ------- -------'
   8380       write(io8,*)
   8381       write(io8,*) '  Other exact duplicates:'
   8382       write(io8,'(1x,a55)')
   8383      $ '--------------- ------- ------- ------- ------- -------'
   8384       write(io8,'(''Duplicates Md  '',2(1x,i7),8x,2(1x,i7))')
   8385      $     n_exact_MdMd,n_exact_MdAc,n_exact_MdAr,n_exact_MdMa
   8386       write(io8,'(''Duplicates Ac  '',8x,(1x,i7),8x,2(1x,i7))')

Page 183         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   8387      $     n_exact_AcAc,n_exact_AcAr,n_exact_AcMa
   8388       write(io8,'(''Duplicates Am  '',16x,4(1x,i7))')
   8389      $     n_exact_AmAm,n_exact_AmAr,n_exact_AmMa
   8390       write(io8,'(''Duplicates Ar  '',24x,3(1x,i7))')
   8391      $     n_exact_ArAr,n_exact_ArMa
   8392       write(io8,'(''Duplicates Ma  '',32x,2(1x,i7))')
   8393      $     n_exact_MaMa
   8394       write(io8,'(1x,a55)')
   8395      $ '--------------- ------- ------- ------- ------- -------'
   8396 c
   8397       write(io8,*)
   8398       write(io8,*) 'Exact duplicates with bad roll angle qc flags: '
   8399       write(io8,'(1x,a55)')
   8400      $ '--------------- ------- ------- ------- ------- -------'
   8401       write(io8,'(''Duplicates Md  '',(1x,i7))')
   8402      $     n_ex_bad_roll_Md
   8403       write(io8,'(''Duplicates Am  '',16x,(1x,i7))')
   8404      $     n_ex_bad_roll_Am
   8405       write(io8,'(1x,a55)')
   8406      $ '--------------- ------- ------- ------- ------- -------'
   8407 c
   8408       write(io8,*)
   8409       write(io8,*) '  Near duplicates: ',n_near
   8410       write(io8,*) '  Near duplicates with short ids: ',n_near_sh
   8411       write(io8,'(1x,a55)')
   8412      $ '--------------- ------- ------- ------- ------- -------'
   8413       write(io8,'(''Duplicates Md  '',32x,(1x,i7))')
   8414      $     n_nr_sh_MaMd
   8415       write(io8,'(''Duplicates Ac  '',32x,(1x,i7))')
   8416      $     n_nr_sh_MaAc
   8417       write(io8,'(''Duplicates Ar  '',24x,2(1x,i7))')
   8418      $     n_nr_sh_ArAr,n_nr_sh_MaAr
   8419       write(io8,'(''Duplicates Ma  '',24x,2(1x,i7))')
   8420      $     n_nr_sh_ArMa,n_nr_sh_MaMa
   8421       write(io8,'(1x,a55)')
   8422      $ '--------------- ------- ------- ------- ------- -------'
   8423       write(io8,*)
   8424       write(io8,*) '  Near dups with 0 lat and 0 lon: ',n_near_0ll
   8425       write(io8,'(1x,a55)')
   8426      $ '--------------- ------- ------- ------- ------- -------'
   8427       write(io8,'(''Duplicates Md  '',(1x,i7),24x,(1x,i7))')
   8428      $     n_nr_0ll_MdMd,n_nr_0ll_MaMd
   8429       write(io8,'(''Duplicates Ac  '',8x,5(1x,i7))')
   8430      $     n_nr_0ll_AcAc
   8431       write(io8,'(''Duplicates Am  '',32x,(1x,i7))')
   8432      $     n_nr_0ll_MaAm
   8433       write(io8,'(''Duplicates Ar  '',16x,(1x,i7),8x,(1x,i7))')
   8434      $     n_nr_0ll_AmAr,n_nr_0ll_MaAr
   8435       write(io8,'(''Duplicates Ma  '',(1x,i7),8x,(1x,i7),8x,(1x,i7))')
   8436      $     n_nr_0ll_MdMa,n_nr_0ll_AmMa,n_nr_0ll_MaMa
   8437       write(io8,'(1x,a55)')
   8438      $ '--------------- ------- ------- ------- ------- -------'
   8439       write(io8,*)
   8440       write(io8,*) '  Near dups with missing temp: ',n_near_mst
   8441       write(io8,'(1x,a55)')
   8442      $ '--------------- ------- ------- ------- ------- -------'
   8443       write(io8,'(''Duplicates Md  '',(1x,i7),16x,2(1x,i7))')

Page 184         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   8444      $     n_nr_mst_MdMd,n_nr_mst_ArMd,n_nr_mst_MaMd
   8445       write(io8,'(''Duplicates Ac  '',24x,2(1x,i7))')
   8446      $     n_nr_mst_ArAc,n_nr_mst_MaAc
   8447       write(io8,'(''Duplicates Am  '',16x,3(1x,i7))')
   8448      $     n_nr_mst_AmAm,n_nr_mst_ArAm,n_nr_mst_MaAm
   8449       write(io8,'(''Duplicates Ar  '',16x,3(1x,i7))')
   8450      $     n_nr_mst_AmAr,n_nr_mst_ArAr,n_nr_mst_MaAr
   8451       write(io8,'(''Duplicates Ma  '',24x,2(1x,i7))')
   8452      $     n_nr_mst_ArMa,n_nr_mst_MaMa
   8453       write(io8,'(1x,a55)')
   8454      $ '--------------- ------- ------- ------- ------- -------'
   8455       write(io8,*)
   8456       write(io8,*) '  Near dups with missing winds: ',n_near_ws
   8457       write(io8,*) '     ID begins with IT:',n_near_ws_IT
   8458       write(io8,*) '     ID begins with EU:',n_near_ws_EU
   8459       write(io8,'(1x,a55)')
   8460      $ '--------------- ------- ------- ------- ------- -------'
   8461       write(io8,'(''Duplicates Md  '',2(1x,i7),8x,2(1x,i7))')
   8462      $     n_nr_mswn_MdMd,n_nr_mswn_AcMd,n_nr_mswn_ArMd,n_nr_mswn_MaMd
   8463       write(io8,'(''Duplicates Ac  '',2(1x,i7),8x,2(1x,i7))')
   8464      $     n_nr_mswn_MdAc,n_nr_mswn_AcAc,n_nr_mswn_ArAc,n_nr_mswn_MaAc
   8465       write(io8,'(''Duplicates Am  '',5(1x,i7))')
   8466      $     n_nr_mswn_MdAm,n_nr_mswn_AcAm,n_nr_mswn_AmAm,n_nr_mswn_ArAm
   8467      $,    n_nr_mswn_MaAm
   8468       write(io8,'(''Duplicates Ar  '',(1x,i7),8x,4(1x,i7))')
   8469      $     n_nr_mswn_MdAr,n_nr_mswn_AmAr,n_nr_mswn_ArAr,n_nr_mswn_MaAr
   8470       write(io8,'(''Duplicates Ma  '',(1x,i7),16x,3(1x,i7))')
   8471      $     n_nr_mswn_MdMa,n_nr_mswn_ArMa,n_nr_mswn_MaMa
   8472       write(io8,'(1x,a55)')
   8473      $ '--------------- ------- ------- ------- ------- -------'
   8474       write(io8,*)
   8475       write(io8,*) '  Near dups with zero winds: ',n_near_0ws
   8476       write(io8,'(1x,a55)')
   8477      $ '--------------- ------- ------- ------- ------- -------'
   8478       write(io8,'(''Duplicates Md  '',(1x,i7),16x,2(1x,i7))')
   8479      $     n_near_0ws_MdMd,n_near_0ws_ArMd,n_near_0ws_MaMd
   8480       write(io8,'(''Duplicates Am  '',16x,3(1x,i7))')
   8481      $     n_near_0ws_AmAm,n_near_0ws_ArAm,n_near_0ws_MaAm
   8482       write(io8,'(''Duplicates Ar  '',16x,3(1x,i7))')
   8483      $     n_near_0ws_AmAr,n_near_0ws_ArAr,n_near_0ws_MaAr
   8484       write(io8,'(''Duplicates Ma  '',32x,(1x,i7))')
   8485      $     n_near_0ws_MaMa
   8486       write(io8,'(1x,a55)')
   8487      $ '--------------- ------- ------- ------- ------- -------'
   8488       write(io8,*)
   8489       write(io8,*) '  Other near duplicates:'
   8490       write(io8,*) '     Neg AMDAR/pos AIREP altitude: ',n_near_negpos
   8491       write(io8,'(1x,a55)')
   8492      $ '--------------- ------- ------- ------- ------- -------'
   8493       write(io8,'(''Duplicates Md  '',2(1x,i7),8x,2(1x,i7))')
   8494      $     n_near_MdMd,n_near_MdAc,n_near_MdAr,n_near_MdMa
   8495       write(io8,'(''Duplicates Ac  '',8x,(1x,i7),8x,2(1x,i7))')
   8496      $     n_near_AcAc,n_near_AcAr,n_near_AcMa
   8497       write(io8,'(''Duplicates Am  '',16x,4(1x,i7))')
   8498      $     n_near_AmAm,n_near_AmAr,n_near_AmMa
   8499       write(io8,'(''Duplicates Ar  '',24x,3(1x,i7))')
   8500      $     n_near_ArAr,n_near_ArMa

Page 185         Source Listing                  DUPCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

   8501       write(io8,'(''Duplicates Ma  '',32x,2(1x,i7))')
   8502      $     n_near_MaMa
   8503       write(io8,'(1x,a55)')
   8504      $ '--------------- ------- ------- ------- ------- -------'
   8505 c
   8506       write(io8,*)
   8507       write(io8,*) 'Near duplicates with low windspeeds: '
   8508       write(io8,'(1x,a55)')
   8509      $ '--------------- ------- ------- ------- ------- -------'
   8510       write(io8,'(''Duplicates Md  '',2(1x,i7),8x,2(1x,i7))')
   8511      $     n_slow_MdMd,n_slow_MdAc,n_slow_MdAr
   8512       write(io8,'(''Duplicates Ac  '',8x,(1x,i7),8x,2(1x,i7))')
   8513      $     n_slow_AcAc,n_slow_AcAr
   8514       write(io8,'(''Duplicates Am  '',16x,4(1x,i7))')
   8515      $     n_slow_AmAm,n_slow_AmAr
   8516       write(io8,'(''Duplicates Ar  '',24x,3(1x,i7))')
   8517      $     n_slow_ArAr,n_slow_ArMa
   8518       write(io8,'(''Duplicates Ma  '',32x,2(1x,i7))')
   8519      $     n_slow_MaMa
   8520       write(io8,'(1x,a55)')
   8521      $ '--------------- ------- ------- ------- ------- -------'
   8522 c
   8523       write(io8,*)
   8524       write(io8,*) 'Near duplicates with bad roll angle qc flags: '
   8525       write(io8,'(1x,a55)')
   8526      $ '--------------- ------- ------- ------- ------- -------'
   8527       write(io8,'(''Duplicates Md  '',(1x,i7))')
   8528      $     n_nr_bad_roll_Md
   8529       write(io8,'(''Duplicates Am  '',16x,(1x,i7))')
   8530      $     n_nr_bad_roll_Am
   8531       write(io8,'(1x,a55)')
   8532      $ '--------------- ------- ------- ------- ------- -------'
   8533 c
   8534       write(io8,*)
   8535       write(io8,*) 'Near duplicates with position reports: '
   8536       write(io8,'(1x,a55)')
   8537      $ '--------------- ------- ------- ------- ------- -------'
   8538       write(io8,'(''Duplicates Md  '',2(1x,i7),8x,2(1x,i7))')
   8539      $     n_nr_posrep
   8540       write(io8,'(1x,a55)')
   8541      $ '--------------- ------- ------- ------- ------- -------'
   8542 c
   8543       return
   8544 
   8545    99 continue
   8546       print *, '--------------------------------------------------'
   8547       print *, '~~~> SUBR. DUPCHEK_QC (transferred here from subr. ',
   8548      $ 'do_reg): RETURN 1'
   8549       print *, '--------------------------------------------------'
   8550       return 1
   8551 
   8552       end
   8553 c
   8554 c ###################################################################
   8555 c                            subroutine reorder
   8556 c ###################################################################
   8557 c

Page 186         Source Listing                  REORDER
2017-04-18 11:07                                 acftobs_qc.f

   8558       subroutine reorder(l_flight,numreps,max_reps,indx,krej,in_bad
   8559      $,          io8,l_print,cregmiss,csort,c_acftid,itype
   8560      $,          kflight,maxflt,cid_flt,creg_flt,nobs_flt,ntot_flt
   8561      $,          nrej_flt,iobs_flt,cid_flt_old,ntot_flt_old,nrej_flt_old
   8562      $,          kreg,creg_reg,nobs_reg,nrej_reg,c_acftreg,l_newflt)
   8563 c
   8564 c Re-order index array to skip bad reports
   8565 c
   8566 c modified by p.m.pauley (3/2/01) to save extra ids not previously catalogued
   8567 c                                  (needed for 2nd flights found in ordchek)
   8568 c 
   8569       implicit none
   8570 c
   8571 c Declaration statements
   8572 c ----------------------
   8573       integer      max_reps            ! max number of observations/reports
   8574 c
   8575 c     Data arrays
   8576 c     -----------
   8577       integer      numreps             ! actual number of reports
   8578       integer      itype(max_reps)     ! instrument type
   8579      $,            ktype               ! pointer for instrument type 
   8580       character*9  c_acftid(max_reps)  ! acft flight number
   8581       character*8  c_acftreg(max_reps) ! aircraft registration (tail) number
   8582       character*25 csort(max_reps)     ! variable used for sorting data
   8583 c
   8584 c     Arrays for mixed duplicates
   8585 c     ---------------------------
   8586       integer      maxflt              ! max number of flights allowed
   8587      $,            kflight             ! number of flights in dataset
   8588       character*6  cmaxflt             ! character form of maxflt for NCEP print statement
   8589       character*8  creg_flt(maxflt)    ! tail number for each flight
   8590       character*9  cid_flt(maxflt)     ! flight id for each flight
   8591       character*9  cid_flt_old(maxflt) ! old value of flight id for each flight
   8592       integer      nobs_flt(maxflt)    ! number of reports per flight
   8593      $,            ntot_flt(maxflt)    ! previous value of total number of reports per flight
   8594      $,            ntot_flt_old(maxflt)! previous value of total number of reports per flight
   8595      $,            nrej_flt(maxflt)    ! number of reports rejected per flight
   8596      $,            nrej_flt_old(maxflt)! old value of number of reports rejected per flight
   8597      $,            iobs_flt(maxflt)    ! index for first report in each flight
   8598 c
   8599       logical      l_newflt(maxflt)    ! true if flight is new flight
   8600 c
   8601 c     Tail number variables
   8602 c     ---------------------
   8603       integer      kreg                ! number of tail numbers in dataset
   8604       character*8  creg_reg(maxflt)    ! tail numbers
   8605       character*8  cregmiss            ! missing value for tail number
   8606       integer      nobs_reg(maxflt,5)  ! # of reports / flight / type
   8607       integer      nrej_reg(maxflt,5)  ! # of reports rejected / flight / type
   8608      $,            kk,mm               ! index pointing to current tail number
   8609 c
   8610 c     Pointers
   8611 c     --------
   8612       integer      indx(max_reps)      ! pointer index for reports
   8613      $,            in_bad(max_reps)    ! pointer index for bad reports
   8614 c

Page 187         Source Listing                  REORDER
2017-04-18 11:07                                 acftobs_qc.f

   8615 c     Functions
   8616 c     ---------
   8617       integer      insty_ob_fun        ! function to convert character
   8618 c
   8619 c     Other variables
   8620 c     ---------------
   8621       integer      io8                 ! i/o unit number for log file
   8622       integer      iob,job             ! do loop index 
   8623      $,            ii,jj               ! index pointing to current report
   8624      $,            iim1,jjm1           ! index pointing to previous report
   8625       integer      keep                ! counter for number of reports kept
   8626      $,            krej                ! counter for number of reports rejected
   8627       integer      kbad(5)             ! counter for number of bad reports
   8628      $,            kgood(5)            ! counter for number of good reports
   8629      $,            kper(5)             ! percentage of bad reports (out of # of good)
   8630      $,            k_yairep            ! number of YRXX86 AIREPs rejected
   8631       real         percent             ! percentage of rejected reports
   8632 c
   8633 ccccdak      integer      i_acars             ! instrument type for acars
   8634       integer      i_acars             ! instrument type for tamdar
   8635 ccccdak     $,            i_acars_lvl         ! instrument type for acars--level flt
   8636      $,            i_acars_lvl         ! instrument type for tamdar--level flt
   8637 ccccdak     $,            i_acars_asc         ! instrument type for acars--ascent
   8638      $,            i_acars_asc         ! instrument type for tamdar--ascent
   8639 ccccdak     $,            i_acars_des         ! instrument type for acars--descent
   8640      $,            i_acars_des         ! instrument type for tamdar--descent
   8641      $,            i_mdcrs             ! instrument type for mdcrs
   8642      $,            i_mdcrs_lvl         ! instrument type for mdcrs--level flt
   8643      $,            i_mdcrs_asc         ! instrument type for mdcrs--ascent
   8644      $,            i_mdcrs_des         ! instrument type for mdcrs--descent
   8645      $,            i_man_airep         ! instrument type for manual aireps
   8646      $,            i_man_Yairep        ! instrument type for manual aireps (YRXX)
   8647      $,            i_airep             ! instrument type for airep
   8648      $,            i_airep_lvl         ! instrument type for airep--level flt
   8649      $,            i_airep_asc         ! instrument type for airep--ascent
   8650      $,            i_airep_des         ! instrument type for airep--descent
   8651      $,            i_amdar             ! instrument type for amdar
   8652      $,            i_amdar_lvl         ! instrument type for amdar--level flt
   8653      $,            i_amdar_asc         ! instrument type for amdar--ascent
   8654      $,            i_amdar_des         ! instrument type for amdar--descent
   8655      $,            ifirst1             ! indicator - 1st time in subr. maxflt @ ipt 1 exceeded
   8656      $,            ifirst2             ! indicator - 1st time in subr. maxflt @ ipt 2 exceeded
   8657      $,            ifirst3             ! indicator - 1st time in subr. maxflt @ ipt 3 exceeded
   8658 c
   8659 ccccdak      save         i_acars             ! instrument type for acars
   8660       save         i_acars             ! instrument type for tamdar
   8661 ccccdak     $,            i_acars_lvl         ! instrument type for acars--level flt
   8662      $,            i_acars_lvl         ! instrument type for tamdar--level flt
   8663 ccccdak     $,            i_acars_asc         ! instrument type for acars--ascent
   8664      $,            i_acars_asc         ! instrument type for tamdar--ascent
   8665 ccccdak     $,            i_acars_des         ! instrument type for acars--descent
   8666      $,            i_acars_des         ! instrument type for tamdar--descent
   8667      $,            i_mdcrs             ! instrument type for mdcrs
   8668      $,            i_mdcrs_lvl         ! instrument type for mdcrs--level flt
   8669      $,            i_mdcrs_asc         ! instrument type for mdcrs--ascent
   8670      $,            i_mdcrs_des         ! instrument type for mdcrs--descent
   8671      $,            i_man_airep         ! instrument type for manual aireps

Page 188         Source Listing                  REORDER
2017-04-18 11:07                                 acftobs_qc.f

   8672      $,            i_man_Yairep        ! instrument type for manual aireps (YRXX)
   8673      $,            i_airep             ! instrument type for airep
   8674      $,            i_airep_lvl         ! instrument type for airep--level flt
   8675      $,            i_airep_asc         ! instrument type for airep--ascent
   8676      $,            i_airep_des         ! instrument type for airep--descent
   8677      $,            i_amdar             ! instrument type for amdar
   8678      $,            i_amdar_lvl         ! instrument type for amdar--level flt
   8679      $,            i_amdar_asc         ! instrument type for amdar--ascent
   8680      $,            i_amdar_des         ! instrument type for amdar--descent
   8681      $,            ifirst1             ! indicator - 1st time in subr. maxflt @ ipt 1 exceeded
   8682      $,            ifirst2             ! indicator - 1st time in subr. maxflt @ ipt 2 exceeded
   8683      $,            ifirst3             ! indicator - 1st time in subr. maxflt @ ipt 3 exceeded
   8684 c
   8685 c     Switches
   8686 c     --------
   8687       logical      l_flight            ! true if flight stats to be updated
   8688      $,            l_print             ! true if flight stats to be printed
   8689      $,            l_first             ! true first time subroutine is called
   8690      $,            l_done              ! true if finished
   8691 c
   8692 c     Data statements
   8693 c     ---------------
   8694       data l_first /.true./,ifirst1/0/,ifirst2/0/,ifirst3/0/
   8695 c
   8696 c # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
   8697 c
   8698 c Initialize aircraft data types
   8699 c ------------------------------
   8700       if(l_first) then
   8701         i_acars      = insty_ob_fun('acars')
   8702         i_acars_lvl  = insty_ob_fun('acars_lvl') 
   8703         i_acars_asc  = insty_ob_fun('acars_asc') 
   8704         i_acars_des  = insty_ob_fun('acars_des') 
   8705         i_mdcrs      = insty_ob_fun('mdcrs')
   8706         i_mdcrs_lvl  = insty_ob_fun('mdcrs_lvl') 
   8707         i_mdcrs_asc  = insty_ob_fun('mdcrs_asc') 
   8708         i_mdcrs_des  = insty_ob_fun('mdcrs_des')
   8709         i_man_airep  = insty_ob_fun('man-airep') 
   8710         i_man_Yairep = insty_ob_fun('man-Yairep') 
   8711         i_airep      = insty_ob_fun('airep')
   8712         i_airep_lvl  = insty_ob_fun('airep_lvl')
   8713         i_airep_asc  = insty_ob_fun('airep_asc')
   8714         i_airep_des  = insty_ob_fun('airep_des')
   8715         i_amdar      = insty_ob_fun('amdar')
   8716         i_amdar_lvl  = insty_ob_fun('amdar_lvl')
   8717         i_amdar_asc  = insty_ob_fun('amdar_asc')
   8718         i_amdar_des  = insty_ob_fun('amdar_des')
   8719 c
   8720         l_first = .false.
   8721       endif
   8722 c
   8723 c Initialize counters
   8724 c -------------------
   8725       k_yairep = 0
   8726 c
   8727       kbad = 0
   8728       kgood = 0

Page 189         Source Listing                  REORDER
2017-04-18 11:07                                 acftobs_qc.f

   8729 c
   8730       keep = 0
   8731 c
   8732       l_newflt = .false.
   8733       nrej_reg = 0
   8734 c
   8735       kk = 1
   8736       mm = 1
   8737 c
   8738 c Loop over obs
   8739 c -------------
   8740       do iob = 1,numreps 
   8741         ii = indx(iob)
   8742 c
   8743 c If report rejected...
   8744 c ---------------------
   8745         if(csort(ii)(1:5).eq.'badob') then
   8746 c
   8747           krej = krej+1
   8748           in_bad(krej) = indx(iob)
   8749 c
   8750           csort(ii)(1:25) = 'zzzzzzzzzzzzzzzzzzzzzzzzz'
   8751 c
   8752           if(itype(ii).eq.i_mdcrs.or.
   8753      $       itype(ii).eq.i_mdcrs_asc.or.
   8754      $       itype(ii).eq.i_mdcrs_lvl.or.
   8755      $       itype(ii).eq.i_mdcrs_des) then
   8756             kbad(1) = kbad(1) + 1
   8757             ktype = 1
   8758 c
   8759           elseif(itype(ii).eq.i_acars.or.
   8760      $           itype(ii).eq.i_acars_asc.or.
   8761      $           itype(ii).eq.i_acars_lvl.or.
   8762      $           itype(ii).eq.i_acars_des) then
   8763             kbad(2) = kbad(2) + 1
   8764             ktype = 2
   8765 c
   8766           elseif(itype(ii).eq.i_amdar.or.
   8767      $           itype(ii).eq.i_amdar_asc.or.
   8768      $           itype(ii).eq.i_amdar_lvl.or.
   8769      $           itype(ii).eq.i_amdar_des) then
   8770             kbad(3) = kbad(3) + 1
   8771             ktype = 3
   8772 c
   8773           elseif(itype(ii).eq.i_airep.or.
   8774      $           itype(ii).eq.i_airep_asc.or.
   8775      $           itype(ii).eq.i_airep_lvl.or.
   8776      $           itype(ii).eq.i_airep_des) then
   8777             kbad(4) = kbad(4) + 1
   8778             ktype = 4
   8779 c
   8780           elseif(itype(ii).eq.i_man_airep.or.
   8781      $           itype(ii).eq.i_man_Yairep) then
   8782             kbad(5) = kbad(5) + 1
   8783             ktype = 5
   8784 c
   8785             if(itype(ii).eq.i_man_Yairep)

Page 190         Source Listing                  REORDER
2017-04-18 11:07                                 acftobs_qc.f

   8786      $        k_yairep = k_yairep + 1
   8787 c
   8788           else
   8789             write(io8,*)
   8790             write(io8,*) 'Bad itype: ',itype(ii),' for ii = ',ii
   8791           endif
   8792 c
   8793 c         Count rej reps by tail number/flight number, if desired
   8794 c         -------------------------------------------------------
   8795           if(l_flight) then
   8796 c
   8797 c           Increment number of reports rejected per flight
   8798 c           -----------------------------------------------
   8799  11         if(c_acftid(ii).eq.cid_flt(mm)) then
   8800               nrej_flt(mm) = nrej_flt(mm) + 1
   8801               if(l_newflt(mm)) then
   8802                 mm = 1
   8803               endif
   8804 c
   8805             else
   8806               mm = mm + 1
   8807               if(mm.le.kflight) then
   8808                 goto 11
   8809 c
   8810               else
   8811                 if(kflight.ne.maxflt) then
   8812                   kflight = kflight + 1
   8813                 else
   8814 c-----------------------------------
   8815                   if(ifirst1.eq.0) then
   8816                     ifirst1 = 1
   8817                     write(io8,*)
   8818                     write(io8,*) 'WARNING-1: Need to increase maxflt!'
   8819                     print 53, maxflt,maxflt
   8820    53 format(/' #####> WARNING: THERE ARE MORE THAN ',I6,' AIRCRAFT ',
   8821      + '"FLIGHTS" IN INPUT FILE -- MUST INCREASE SIZE OF PARAMETER ',
   8822      +'NAME "MAXFLT" - WILL CONTINUE ON PROCESSING ONLY ',I6,' FLTS-1'/)
   8823                     write(cmaxflt,'(i6)') maxflt
   8824       call system('[ -n "$jlogfile" ] && $DATA/postmsg'//
   8825      + ' "$jlogfile" "***WARNING:'//cmaxflt//' AIRCRAFT "FLIGHT" '//
   8826      + 'LIMIT EXCEEDED IN PREPOBS_PREPACQC, ONLY '//
   8827      + cmaxflt//' FLIGHTS PROCESSED-1"')
   8828                   endif
   8829 c-----------------------------------
   8830                 endif
   8831                 cid_flt(kflight) = c_acftid(ii)
   8832                 creg_flt(kflight) = c_acftreg(ii)
   8833                 iobs_flt(kflight) = iob
   8834                 ntot_flt(kflight) = 0
   8835                 nrej_flt(kflight) = 1
   8836                 l_newflt(kflight) = .true.
   8837                 mm = 1
   8838 c
   8839 c               Search backwards for first ob from new flight
   8840 c               ---------------------------------------------
   8841                 job = iob
   8842                 if(job.ne.1) then

Page 191         Source Listing                  REORDER
2017-04-18 11:07                                 acftobs_qc.f

   8843 12                jjm1 = indx(job-1)
   8844                   if(c_acftid(jjm1)(1:9).eq.cid_flt(kflight)(1:9)) then
   8845                     job = job-1
   8846                     if(job.ne.1) goto 12
   8847                   endif
   8848                 endif
   8849 c
   8850 c               Count total number of obs from new flight
   8851 c               -----------------------------------------
   8852                 do while(job.le.numreps)
   8853                   jj = indx(job)
   8854                   if(c_acftid(jj)(1:9).eq.cid_flt(kflight)(1:9)) then
   8855                     ntot_flt(kflight) = ntot_flt(kflight) + 1
   8856                     job = job + 1
   8857                   else
   8858                     job = numreps + 1
   8859                   endif
   8860                 enddo
   8861 c
   8862                 nobs_flt(kflight) = ntot_flt(kflight)
   8863 c
   8864               endif 
   8865             endif
   8866 c
   8867 c           Skip blank tail numbers
   8868 c           -----------------------
   8869             if(c_acftreg(ii).ne.'        ') then
   8870 c
   8871 c             If tail numbers are equal, increment counters
   8872 c             --------------------------------------------- 
   8873               if(c_acftreg(ii).eq.creg_reg(kk)) then
   8874                 nrej_reg(kk,ktype) = nrej_reg(kk,ktype) + 1
   8875 c
   8876 c             Otherwise, loop to find matching tail number
   8877 c             --------------------------------------------
   8878               else
   8879                 kk = 1
   8880                 l_done = .false.
   8881                 do while (.not.l_done)
   8882                   if(c_acftreg(ii).eq.creg_reg(kk)) then
   8883                     nrej_reg(kk,ktype) = nrej_reg(kk,ktype) + 1
   8884                     l_done = .true.
   8885                   else
   8886                     kk = kk + 1
   8887                     if(kk.eq.kreg+1) then
   8888                       write(io8,*) 
   8889                       write(io8,*) 'Tail# not found--',c_acftreg(ii),ii
   8890                       l_done = .true.
   8891                     endif
   8892                   endif
   8893                 enddo
   8894               endif
   8895             endif
   8896           endif
   8897 c
   8898 c If report not rejected...
   8899 c -------------------------

Page 192         Source Listing                  REORDER
2017-04-18 11:07                                 acftobs_qc.f

   8900         else
   8901           keep = keep + 1
   8902 c
   8903           indx(keep) = indx(iob)
   8904 c
   8905           if(itype(ii).eq.i_mdcrs.or.
   8906      $       itype(ii).eq.i_mdcrs_asc.or.
   8907      $       itype(ii).eq.i_mdcrs_lvl.or.
   8908      $       itype(ii).eq.i_mdcrs_des) then
   8909             kgood(1) = kgood(1) + 1
   8910 c
   8911           elseif(itype(ii).eq.i_acars.or.
   8912      $           itype(ii).eq.i_acars_asc.or.
   8913      $           itype(ii).eq.i_acars_lvl.or.
   8914      $           itype(ii).eq.i_acars_des) then
   8915             kgood(2) = kgood(2) + 1
   8916 c
   8917           elseif(itype(ii).eq.i_amdar.or.
   8918      $           itype(ii).eq.i_amdar_asc.or.
   8919      $           itype(ii).eq.i_amdar_lvl.or.
   8920      $           itype(ii).eq.i_amdar_des) then
   8921             kgood(3) = kgood(3) + 1
   8922 c
   8923           elseif(itype(ii).eq.i_airep.or.
   8924      $           itype(ii).eq.i_airep_asc.or.
   8925      $           itype(ii).eq.i_airep_lvl.or.
   8926      $           itype(ii).eq.i_airep_des) then
   8927             kgood(4) = kgood(4) + 1
   8928 c
   8929           elseif(itype(ii).eq.i_man_airep.or.
   8930      $           itype(ii).eq.i_man_Yairep) then
   8931             kgood(5) = kgood(5) + 1
   8932 c
   8933           else
   8934             write(io8,*)
   8935             write(io8,*) 'Bad itype: ',itype(ii),' for ii = ',ii
   8936           endif
   8937         endif
   8938       enddo
   8939 c
   8940 c Save number of good reports
   8941 c ---------------------------
   8942       numreps = keep
   8943 c
   8944 c Update flight stats if desired
   8945 c ------------------------------
   8946       if(l_flight) then
   8947 c
   8948 c       Initialize variables
   8949 c       --------------------
   8950         cid_flt_old = cid_flt   ! DAK: has cid_flt been initialized at this point?
   8951         ntot_flt_old = ntot_flt ! DAK: has ntot_flt been initialized at this point?
   8952         nrej_flt_old = nrej_flt ! DAK: has nrej_flt been initialized at this point?
   8953         iobs_flt = 0
   8954         nobs_flt = 0
   8955         ntot_flt = 0
   8956         nrej_flt = 0

Page 193         Source Listing                  REORDER
2017-04-18 11:07                                 acftobs_qc.f

   8957         cid_flt = '         '
   8958         creg_flt = '        '
   8959         l_newflt = .false.
   8960 c
   8961 c
   8962         mm = 1
   8963 c
   8964 c       Begin loop over reports
   8965 c       -----------------------
   8966         do iob = 1,numreps 
   8967           ii = indx(iob)
   8968           if(iob.eq.1) then
   8969             iim1 = 0
   8970           else
   8971             iim1 = indx(iob-1)
   8972           endif
   8973 c
   8974 c         Initialize variables for iob = 1
   8975 c         --------------------------------
   8976           if(iob.eq.1) then
   8977             kk = 1
   8978             iobs_flt(1) = 1
   8979             nobs_flt(1) = 1
   8980             cid_flt(1) = c_acftid(ii)
   8981             creg_flt(1) = c_acftreg(ii)
   8982 c
   8983  101        if(cid_flt(1).eq.cid_flt_old(mm)) then
   8984               ntot_flt(1) = ntot_flt_old(mm)
   8985               nrej_flt(1) = nrej_flt_old(mm)
   8986 
   8987             else
   8988               mm = mm + 1
   8989               if(mm.le.kflight) then
   8990                 goto 101
   8991 
   8992               else
   8993                 write(io8,*)
   8994                 write(io8,*) 'flight id #1 not found--',c_acftid(ii)
   8995 c
   8996 c                ntot_flt(1) = nobs_flt(1)
   8997                 cid_flt(1) = c_acftid(ii)
   8998                 creg_flt(1) = c_acftreg(ii)
   8999                 iobs_flt(1) = iob
   9000                 nobs_flt(1) = 1
   9001                 ntot_flt(1) = 1
   9002                 nrej_flt(1) = 0
   9003                 l_newflt(1) = .true.
   9004                 mm = 1
   9005               endif 
   9006             endif
   9007 c
   9008 c         If flight numbers are equal, increment counter
   9009 c         ---------------------------------------------- 
   9010           elseif(c_acftid(iim1).eq.c_acftid(ii)) then
   9011             nobs_flt(kk) = nobs_flt(kk) + 1
   9012             if(l_newflt(kk)) then
   9013               mm = 1

Page 194         Source Listing                  REORDER
2017-04-18 11:07                                 acftobs_qc.f

   9014             endif
   9015             if(c_acftreg(ii).ne.cregmiss.and.creg_flt(kk).eq.cregmiss) 
   9016      $        creg_flt(kk) = c_acftreg(ii)
   9017 c
   9018 c         Otherwise, save starting index & start counting reports for next flight
   9019 c         -------------------------------------------------------------------------
   9020           else
   9021             if(kk.ne.maxflt) then
   9022               kk = kk + 1
   9023             else
   9024 c-----------------------------------
   9025               if(ifirst2.eq.0) then
   9026                 write(io8,*)
   9027                 write(io8,*) 'WARNING-2: Need to increase maxflt!'
   9028                 ifirst2 = 1
   9029                 print 753, maxflt,maxflt
   9030   753 format(/' #####> WARNING: THERE ARE MORE THAN ',I6,' AIRCRAFT ',
   9031      + '"FLIGHTS" IN INPUT FILE -- MUST INCREASE SIZE OF PARAMETER ',
   9032      +'NAME "MAXFLT" - WILL CONTINUE ON PROCESSING ONLY ',I6,' FLTS-2'/)
   9033                 write(cmaxflt,'(i6)') maxflt
   9034       call system('[ -n "$jlogfile" ] && $DATA/postmsg'//
   9035      + ' "$jlogfile" "***WARNING:'//cmaxflt//' AIRCRAFT "FLIGHT" '//
   9036      + 'LIMIT EXCEEDED IN PREPOBS_PREPACQC, ONLY '//
   9037      + cmaxflt//' FLIGHTS PROCESSED-2"')
   9038               endif
   9039 c-----------------------------------
   9040             endif
   9041             iobs_flt(kk) = iob
   9042             nobs_flt(kk) = 1
   9043             cid_flt(kk) = c_acftid(ii)
   9044             creg_flt(kk) = c_acftreg(ii)
   9045 c
   9046  201        if(cid_flt(kk).eq.cid_flt_old(mm)) then
   9047               ntot_flt(kk) = ntot_flt_old(mm)
   9048               nrej_flt(kk) = nrej_flt_old(mm)
   9049               mm = 1
   9050 c
   9051             else
   9052               mm = mm + 1
   9053               if(mm.le.kflight) then
   9054                 goto 201
   9055 c
   9056               else
   9057                 if(kk.ne.maxflt) then
   9058                   kk = kk + 1
   9059                 else
   9060 c-----------------------------------
   9061                   if(ifirst3.eq.0) then
   9062                     write(io8,*)
   9063                     write(io8,*) 'WARNING-3: Need to increase maxflt!'
   9064                     ifirst3 = 1
   9065                     print 853, maxflt,maxflt
   9066   853 format(/' #####> WARNING: THERE ARE MORE THAN ',I6,' AIRCRAFT ',
   9067      + '"FLIGHTS" IN INPUT FILE -- MUST INCREASE SIZE OF PARAMETER ',
   9068      +'NAME "MAXFLT" - WILL CONTINUE ON PROCESSING ONLY ',I6,' FLTS-3'/)
   9069                     write(cmaxflt,'(i6)') maxflt
   9070       call system('[ -n "$jlogfile" ] && $DATA/postmsg'//

Page 195         Source Listing                  REORDER
2017-04-18 11:07                                 acftobs_qc.f

   9071      + ' "$jlogfile" "***WARNING:'//cmaxflt//' AIRCRAFT "FLIGHT" '//
   9072      + 'LIMIT EXCEEDED IN PREPOBS_PREPACQC, ONLY '//
   9073      + cmaxflt//' FLIGHTS PROCESSED-3"')
   9074                   endif
   9075 c-----------------------------------
   9076                 endif
   9077                 cid_flt(kk) = c_acftid(ii)
   9078                 creg_flt(kk) = c_acftreg(ii)
   9079                 iobs_flt(kk) = iob
   9080                 ntot_flt(kk) = 0
   9081                 nrej_flt(kk) = 1
   9082                 l_newflt(kk) = .true.
   9083                 mm = 1
   9084 c
   9085 c               Count total number of obs from new flight
   9086 c               -----------------------------------------
   9087                 job = iob
   9088                 do while(job.le.numreps)
   9089                   jj = indx(job)
   9090                   if(c_acftid(jj)(1:9).eq.cid_flt(kk)(1:9)) then
   9091                     ntot_flt(kk) = ntot_flt(kk) + 1
   9092                     job = job + 1
   9093                   else
   9094                     job = numreps + 1
   9095                   endif
   9096                 enddo
   9097 c
   9098                 nobs_flt(kk) = ntot_flt(kk)
   9099 c
   9100               endif 
   9101             endif
   9102           endif
   9103         enddo
   9104       endif
   9105 c
   9106 c      if(kflight.ne.kk) then
   9107 c        write(io8,*)
   9108 c        write(io8,*) 'Mismatch in numbers of flights'
   9109 c        write(io8,*) '  kk = ',kk
   9110 c        write(io8,*) '  kflight = ',kflight
   9111 c      endif
   9112 c
   9113       kflight = kk
   9114 c
   9115 c Output number of reports retained/skipped
   9116 c -----------------------------------------
   9117       if(kgood(1).eq.0)then
   9118         kper(1) = 0
   9119       else
   9120         kper(1) = kbad(1) * 100 / (kgood(1)+kbad(1))
   9121       endif
   9122 c
   9123       if(kgood(2).eq.0)then
   9124         kper(2) = 0
   9125       else
   9126         kper(2) = kbad(2) * 100 / (kgood(2)+kbad(2))
   9127       endif

Page 196         Source Listing                  REORDER
2017-04-18 11:07                                 acftobs_qc.f

   9128 c
   9129       if(kgood(3).eq.0)then
   9130         kper(3) = 0
   9131       else
   9132         kper(3) = kbad(3) * 100 / (kgood(3)+kbad(3))
   9133       endif
   9134 c
   9135       if(kgood(4).eq.0)then
   9136         kper(4) = 0
   9137       else
   9138         kper(4) = kbad(4) * 100 / (kgood(4)+kbad(4))
   9139       endif
   9140 c
   9141       if(kgood(5).eq.0)then
   9142         kper(5) = 0
   9143       else
   9144         kper(5) = kbad(5) * 100 / (kgood(5)+kbad(5))
   9145       endif
   9146 c
   9147       write(io8,*)
   9148       write(io8,*) '  Re-ordering index array'
   9149       write(io8,*) '  -----------------------'
   9150       write(io8,*) numreps,' reports retained'
   9151       write(io8,*) kbad(1),' MDCRS reports skipped leaving    ',kgood(1)
   9152      $          ,'--',kper(1),'%'
   9153 ccccdak      write(io8,*) kbad(2),' ACARS reports skipped leaving    ',kgood(2)
   9154       write(io8,*) kbad(2),' TAMDAR rpts skipped leaving      ',kgood(2)
   9155      $          ,'--',kper(2),'%'
   9156       write(io8,*) kbad(3),' AMDAR reports skipped leaving    ',kgood(3)
   9157      $          ,'--',kper(3),'%'
   9158       write(io8,*) kbad(4),' AIREP reports skipped leaving    ',kgood(4)
   9159      $          ,'--',kper(4),'%'                                 
   9160       write(io8,*) kbad(5),' manAIREP reports skipped leaving ',kgood(5)
   9161      $          ,'--',kper(5),'%'
   9162       write(io8,*) '     out of these, ',k_yairep,' are YRXX reports' 
   9163 c
   9164 c Output indices for each flight
   9165 c ------------------------------
   9166       if(l_print.and.l_flight) then
   9167         write(io8,*)
   9168         write(io8,*) 'Subtotals for tail#s with rejected reports'
   9169         write(io8,*) '------------------------------------------'
   9170         write(io8,'(27x,a12,22x,a8)')'Total Number','Rejected'
   9171         write(io8,'(a47,a43)')
   9172      $    '  kk  tail num  #Md    #Ac    #Am    #Ar    #Ma',
   9173      $    '    #Md    #Ac    #Am    #Ar    #Ma     %  '
   9174         write(io8,'(1x,a47,a43)')
   9175      $    '----- -------- ------ ------ ------ ------ ----',
   9176      $    '-- ------ ------ ------ ------ ------ -----'
   9177 c
   9178         do kk=1,kreg
   9179           
   9180           if((nobs_reg(kk,1)+nobs_reg(kk,2)+
   9181      $        nobs_reg(kk,3)+nobs_reg(kk,4)+
   9182      $        nobs_reg(kk,5)).ne.0) then
   9183 c
   9184             percent = (nrej_reg(kk,1) + nrej_reg(kk,2) 

Page 197         Source Listing                  REORDER
2017-04-18 11:07                                 acftobs_qc.f

   9185      $               + nrej_reg(kk,3) + nrej_reg(kk,4)
   9186      $               + nrej_reg(kk,5)) * 100.0
   9187      $              / (nobs_reg(kk,1) + nobs_reg(kk,2) 
   9188      $               + nobs_reg(kk,3) + nobs_reg(kk,4)
   9189      $               + nobs_reg(kk,5))
   9190           else
   9191             percent = -9999.0
   9192           endif
   9193 c 
   9194           write(io8,'(i5,1x,a8,10(1x,i6),f6.1)') kk,creg_reg(kk)
   9195      $,       nobs_reg(kk,1),nobs_reg(kk,2)
   9196      $,       nobs_reg(kk,3),nobs_reg(kk,4)
   9197      $,       nobs_reg(kk,5)
   9198      $,       nrej_reg(kk,1),nrej_reg(kk,2)
   9199      $,       nrej_reg(kk,3),nrej_reg(kk,4)
   9200      $,       nrej_reg(kk,5),percent
   9201         enddo
   9202       endif
   9203 c
   9204       return
   9205       end


ENTRY POINTS

  Name                
                      
 reorder_             

Page 198         Source Listing                  REORDER
2017-04-18 11:07 Symbol Table                    acftobs_qc.f



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 101                        Label  8983                                                           8990                              
 11                         Label  8799                                                           8808                              
 12                         Label  8843                                                           8846                              
 201                        Label  9046                                                           9054                              
 53                         Label  8820                                                           8819                              
 753                        Label  9030                                                           9029                              
 853                        Label  9066                                                           9065                              
 CID_FLT                    Dummy  8560     CHAR            9     1     0        ARG,INOUT        8799,8831,8844,8854,8950,8957,8980
                                                                                                  ,8983,8997,9043,9046,9077,9090    
 CID_FLT_OLD                Dummy  8561     CHAR            9     1     0        ARG,INOUT        8950,8983,9046                    
 CMAXFLT                    Local  8588     CHAR            6           scalar                    8823,8825,8827,9033,9035,9037,9069
                                                                                                  ,9071,9073                        
 CREGMISS                   Dummy  8559     CHAR            8           scalar   ARG,INOUT        9015                              
 CREG_FLT                   Dummy  8560     CHAR            8     1     0        ARG,INOUT        8832,8958,8981,8998,9015,9016,9044
                                                                                                  ,9078                             
 CREG_REG                   Dummy  8562     CHAR            8     1     0        ARG,INOUT        8873,8882,9194                    
 CSORT                      Dummy  8559     CHAR            25    1     0        ARG,INOUT        8745,8750                         
 C_ACFTID                   Dummy  8559     CHAR            9     1     0        ARG,INOUT        8799,8831,8844,8854,8980,8994,8997
                                                                                                  ,9010,9043,9077,9090              
 C_ACFTREG                  Dummy  8562     CHAR            8     1     0        ARG,INOUT        8832,8869,8873,8882,8889,8981,8998
                                                                                                  ,9015,9016,9044,9078              
 IFIRST1                    Local  8655     I(4)            4           scalar   SAVE             8694,8815,8816                    
 IFIRST2                    Local  8656     I(4)            4           scalar   SAVE             8694,9025,9028                    
 IFIRST3                    Local  8657     I(4)            4           scalar   SAVE             8694,9061,9064                    
 II                         Local  8623     I(4)            4           scalar                    8741,8745,8750,8752,8753,8754,8755
                                                                                                  ,8759,8760,8761,8762,8766,8767,876
                                                                                                  8,8769,8773,8774,8775,8776,8780,87
                                                                                                  81,8785,8790,8799,8831,8832,8869,8
                                                                                                  873,8882,8889,8905,8906,8907,8908,
                                                                                                  8911,8912,8913,8914,8917,8918,8919
                                                                                                  ,8920,8923,8924,8925,8926,8929,893
                                                                                                  0,8935,8967,8980,8981,8994,8997,89
                                                                                                  98,9010,9015,9016,9043,9044,9077,9
                                                                                                  078                               
 IIM1                       Local  8624     I(4)            4           scalar                    8969,8971,9010                    
 INDX                       Dummy  8558     I(4)            4     1     0        ARG,INOUT        8741,8748,8843,8853,8903,8967,8971
                                                                                                  ,9089                             
 INSTY_OB_FUN               Func   8617     I(4)            4           scalar                    8701,8702,8703,8704,8705,8706,8707
                                                                                                  ,8708,8709,8710,8711,8712,8713,871
                                                                                                  4,8715,8716,8717,8718             
 IN_BAD                     Dummy  8558     I(4)            4     1     0        ARG,INOUT        8748                              
 IO8                        Dummy  8559     I(4)            4           scalar   ARG,INOUT        8789,8790,8817,8818,8888,8889,8934
                                                                                                  ,8935,8993,8994,9026,9027,9062,906
                                                                                                  3,9147,9148,9149,9150,9151,9154,91
                                                                                                  56,9158,9160,9162,9167,9168,9169,9
                                                                                                  170,9171,9174,9194                
 IOB                        Local  8622     I(4)            4           scalar                    8740,8741,8748,8833,8841,8903,8966
                                                                                                  ,8967,8968,8971,8976,8999,9041,907
                                                                                                  9,9087                            
 IOBS_FLT                   Dummy  8561     I(4)            4     1     0        ARG,INOUT        8833,8953,8978,8999,9041,9079     
 ITYPE                      Dummy  8559     I(4)            4     1     0        ARG,INOUT        8752,8753,8754,8755,8759,8760,8761

Page 199         Source Listing                  REORDER
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  ,8762,8766,8767,8768,8769,8773,877
                                                                                                  4,8775,8776,8780,8781,8785,8790,89
                                                                                                  05,8906,8907,8908,8911,8912,8913,8
                                                                                                  914,8917,8918,8919,8920,8923,8924,
                                                                                                  8925,8926,8929,8930,8935          
 I_ACARS                    Local  8634     I(4)            4           scalar   SAVE             8701,8759,8911                    
 I_ACARS_ASC                Local  8638     I(4)            4           scalar   SAVE             8703,8760,8912                    
 I_ACARS_DES                Local  8640     I(4)            4           scalar   SAVE             8704,8762,8914                    
 I_ACARS_LVL                Local  8636     I(4)            4           scalar   SAVE             8702,8761,8913                    
 I_AIREP                    Local  8647     I(4)            4           scalar   SAVE             8711,8773,8923                    
 I_AIREP_ASC                Local  8649     I(4)            4           scalar   SAVE             8713,8774,8924                    
 I_AIREP_DES                Local  8650     I(4)            4           scalar   SAVE             8714,8776,8926                    
 I_AIREP_LVL                Local  8648     I(4)            4           scalar   SAVE             8712,8775,8925                    
 I_AMDAR                    Local  8651     I(4)            4           scalar   SAVE             8715,8766,8917                    
 I_AMDAR_ASC                Local  8653     I(4)            4           scalar   SAVE             8717,8767,8918                    
 I_AMDAR_DES                Local  8654     I(4)            4           scalar   SAVE             8718,8769,8920                    
 I_AMDAR_LVL                Local  8652     I(4)            4           scalar   SAVE             8716,8768,8919                    
 I_MAN_AIREP                Local  8645     I(4)            4           scalar   SAVE             8709,8780,8929                    
 I_MAN_YAIREP               Local  8646     I(4)            4           scalar   SAVE             8710,8781,8785,8930               
 I_MDCRS                    Local  8641     I(4)            4           scalar   SAVE             8705,8752,8905                    
 I_MDCRS_ASC                Local  8643     I(4)            4           scalar   SAVE             8707,8753,8906                    
 I_MDCRS_DES                Local  8644     I(4)            4           scalar   SAVE             8708,8755,8908                    
 I_MDCRS_LVL                Local  8642     I(4)            4           scalar   SAVE             8706,8754,8907                    
 JJ                         Local  8623     I(4)            4           scalar                    8853,8854,9089,9090               
 JJM1                       Local  8624     I(4)            4           scalar                    8843,8844                         
 JOB                        Local  8622     I(4)            4           scalar                    8841,8842,8843,8845,8846,8852,8853
                                                                                                  ,8856,8858,9087,9088,9089,9092,909
                                                                                                  4                                 
 KBAD                       Local  8627     I(4)            4     1     5                         8727,8756,8763,8770,8777,8782,9120
                                                                                                  ,9126,9132,9138,9144,9151,9154,915
                                                                                                  6,9158,9160                       
 KEEP                       Local  8625     I(4)            4           scalar                    8730,8901,8903,8942               
 KFLIGHT                    Dummy  8560     I(4)            4           scalar   ARG,INOUT        8807,8811,8812,8831,8832,8833,8834
                                                                                                  ,8835,8836,8844,8854,8855,8862,898
                                                                                                  9,9053,9113                       
 KGOOD                      Local  8628     I(4)            4     1     5                         8728,8909,8915,8921,8927,8931,9117
                                                                                                  ,9120,9123,9126,9129,9132,9135,913
                                                                                                  8,9141,9144,9151,9154,9156,9158,91
                                                                                                  60                                
 KK                         Local  8608     I(4)            4           scalar                    8735,8873,8874,8879,8882,8883,8886
                                                                                                  ,8887,8977,9011,9012,9015,9016,902
                                                                                                  1,9022,9041,9042,9043,9044,9046,90
                                                                                                  47,9048,9057,9058,9077,9078,9079,9
                                                                                                  080,9081,9082,9090,9091,9098,9113,
                                                                                                  9178,9180,9181,9182,9184,9185,9186
                                                                                                  ,9187,9188,9189,9194,9195,9196,919
                                                                                                  7,9198,9199,9200                  
 KPER                       Local  8629     I(4)            4     1     5                         9118,9120,9124,9126,9130,9132,9136
                                                                                                  ,9138,9142,9144,9152,9155,9157,915
                                                                                                  9,9161                            
 KREG                       Dummy  8562     I(4)            4           scalar   ARG,INOUT        8887,9178                         
 KREJ                       Dummy  8558     I(4)            4           scalar   ARG,INOUT        8747,8748                         
 KTYPE                      Local  8579     I(4)            4           scalar                    8757,8764,8771,8778,8783,8874,8883
 K_YAIREP                   Local  8630     I(4)            4           scalar                    8725,8786,9162                    
 L_DONE                     Local  8690     L(4)            4           scalar                    8880,8881,8884,8890               

Page 200         Source Listing                  REORDER
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 L_FIRST                    Local  8689     L(4)            4           scalar                    8694,8700,8720                    
 L_FLIGHT                   Dummy  8558     L(4)            4           scalar   ARG,INOUT        8795,8946,9166                    
 L_NEWFLT                   Dummy  8562     L(4)            4     1     0        ARG,INOUT        8732,8801,8836,8959,9003,9012,9082
 L_PRINT                    Dummy  8559     L(4)            4           scalar   ARG,INOUT        9166                              
 MAXFLT                     Dummy  8560     I(4)            4           scalar   ARG,INOUT        8589,8590,8591,8592,8593,8594,8595
                                                                                                  ,8596,8597,8599,8604,8606,8607,881
                                                                                                  1,8819,8823,9021,9029,9033,9057,90
                                                                                                  65,9069                           
 MAX_REPS                   Dummy  8558     I(4)            4           scalar   ARG,INOUT        8578,8580,8581,8582,8612,8613     
 MM                         Local  8608     I(4)            4           scalar                    8736,8799,8800,8801,8802,8806,8807
                                                                                                  ,8837,8962,8983,8984,8985,8988,898
                                                                                                  9,9004,9013,9046,9047,9048,9049,90
                                                                                                  52,9053,9083                      
 NOBS_FLT                   Dummy  8560     I(4)            4     1     0        ARG,INOUT        8862,8954,8979,9000,9011,9042,9098
 NOBS_REG                   Dummy  8562     I(4)            4     2     0        ARG,INOUT        9180,9181,9182,9187,9188,9189,9195
                                                                                                  ,9196,9197                        
 NREJ_FLT                   Dummy  8561     I(4)            4     1     0        ARG,INOUT        8800,8835,8952,8956,8985,9002,9048
                                                                                                  ,9081                             
 NREJ_FLT_OLD               Dummy  8561     I(4)            4     1     0        ARG,INOUT        8952,8985,9048                    
 NREJ_REG                   Dummy  8562     I(4)            4     2     0        ARG,INOUT        8733,8874,8883,9184,9185,9186,9198
                                                                                                  ,9199,9200                        
 NTOT_FLT                   Dummy  8560     I(4)            4     1     0        ARG,INOUT        8834,8855,8862,8951,8955,8984,9001
                                                                                                  ,9047,9080,9091,9098              
 NTOT_FLT_OLD               Dummy  8561     I(4)            4     1     0        ARG,INOUT        8951,8984,9047                    
 NUMREPS                    Dummy  8558     I(4)            4           scalar   ARG,INOUT        8740,8852,8858,8942,8966,9088,9094
                                                                                                  ,9150                             
 PERCENT                    Local  8631     R(4)            4           scalar                    9184,9191,9200                    
 REORDER                    Subr   8558                                                                                             
 SYSTEM                     Subr   8824                                                           8824,9034,9070                    

Page 201         Source Listing                  REORDER
2017-04-18 11:07                                 acftobs_qc.f

   9206 c
   9207 c ###################################################################
   9208 c                            subroutine do_flt
   9209 c ###################################################################
   9210 c
   9211       subroutine do_flt(l_first,numreps,max_reps,c_acftid,c_acftreg,idt,
   9212      $           ht_ft,cidmiss,cregmiss,indx,idt_samflt,
   9213      $           kflight,maxflt,cid_flt,creg_flt,nobs_flt,ntot_flt,
   9214      $           nrej_flt,iobs_flt,csort,l_sort,l_print,amiss,io8,*)
   9215 c
   9216 c     Determine starting index for each flight and number of reports per flight
   9217 c
   9218 c     modified by p.pauley (4/1/01) to allow a shorter time gap between flight
   9219 c                                   segments if a low altitude is found on either
   9220 c                                   side of the time gap
   9221 c
   9222 c     modified by p.pauley (11/1/01) to use both upper and lower case letters
   9223 c                                   for the 9th character in the flight id.
   9224 c                                   Required to deal with the large number of
   9225 c                                   aircraft using flight id VYXAUSJA beginning
   9226 c                                   in late October 2001.
   9227 c
   9228       implicit none
   9229 c
   9230 c Declaration statements
   9231 c ----------------------
   9232       integer      max_reps            ! max number of observations/reports
   9233 c
   9234 c     Data arrays
   9235 c     -----------
   9236       integer      numreps             ! actual number of reports
   9237       character*9  c_acftid(max_reps)  ! acft flight number
   9238       character*8  c_acftreg(max_reps) ! acft registration (tail) number
   9239       integer      idt(max_reps)       ! time in seconds to analysis time 
   9240       real         ht_ft(max_reps)     ! height in feet
   9241       character*25 csort(max_reps)     ! variable used for sorting data 
   9242 c
   9243 c     Arrays for mixed duplicates
   9244 c     ---------------------------
   9245       integer      maxflt              ! max number of flights allowed
   9246      $,            kflight             ! number of flights in dataset
   9247       character*8  creg_flt(maxflt)    ! tail number for each flight 
   9248       character*9  cid_flt(maxflt)     ! flight id for each flight
   9249       integer      nobs_flt(maxflt)    ! number of reports per flight
   9250      $,            ntot_flt(maxflt)    ! total number of reports per flight
   9251      $,            nrej_flt(maxflt)    ! number of reports rejected per flight
   9252      $,            iobs_flt(maxflt)    ! index for first report in each flight
   9253 c
   9254 c     Pointers
   9255 c     --------
   9256       integer      indx(max_reps)      ! pointer index for reports
   9257 c
   9258 c     Other variables
   9259 c     ---------------
   9260       integer      io8                 ! i/o unit number for log file
   9261       integer      ii                  ! index for current ob
   9262      $,            iim1                ! index for previous ob

Page 202         Source Listing                  DO_FLT
2017-04-18 11:07                                 acftobs_qc.f

   9263      $,            iob                 ! do loop index--over reports
   9264      $,            kk                  ! do loop index--over flights
   9265       integer      nave                ! average number of reports per flight
   9266      $,            nmiss               ! number of reps with missing flight id
   9267      $,            idt_samflt          ! time difference allowed for same flight
   9268      $,            idt_dif             ! actual time difference
   9269       integer      istart              ! first report in flight
   9270      $,            iistart             ! index for first report in flight
   9271      $,            iend                ! last report in flight
   9272      $,            iiend               ! index for last report in flight
   9273       integer      k_abc               ! pointer for c_abc
   9274       integer      knt                 ! counter used in defining iim1
   9275 c
   9276       real         amiss               ! real missing value flag
   9277 c
   9278       character*1  c_abc(62)           ! array of lower-case and upper-case letters
   9279       character*8  cregmiss            ! missing value flag for tail number
   9280      $,            cidmiss             ! missing value flag for flight number
   9281 c
   9282 c     Switches
   9283 c     --------
   9284       logical      l_first             ! true first time subroutine is called
   9285      $,            l_print             ! true for printing values
   9286      $,            l_sort              ! true if data need to be sorted
   9287      $,            l_same              ! true if tail numbers are same
   9288      $,            l_newid             ! true if letter to be appended to flight id
   9289 c
   9290 c     Data statements
   9291 c     ---------------
   9292       data c_abc/'a','b','c','d','e','f','g','h','i','j','k','l','m',
   9293      $           'n','o','p','q','r','s','t','u','v','w','x','y','z',
   9294      $           'A','B','C','D','E','F','G','H','I','J','K','L','M',
   9295      $           'N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
   9296      $           '0','1','2','3','4','5','6','7','8','9'/
   9297 c
   9298 c # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
   9299 c
   9300 c Initialize variables
   9301 c --------------------
   9302       l_sort = .false.
   9303 c
   9304       kflight = 0
   9305       iobs_flt = 0
   9306       nobs_flt = 0
   9307       ntot_flt = 0
   9308       nrej_flt = 0
   9309       cid_flt = '        '
   9310       creg_flt = '        '
   9311 c
   9312 c Begin loop over reports
   9313 c -----------------------
   9314       do iob = 1,numreps 
   9315         ii = indx(iob)
   9316         if(iob.eq.1) then
   9317           iim1 = 0
   9318         else
   9319           iim1 = indx(iob-1)

Page 203         Source Listing                  DO_FLT
2017-04-18 11:07                                 acftobs_qc.f

   9320         endif
   9321 c
   9322 c Initialize variables for iob = 1
   9323 c --------------------------------
   9324         if(iob.eq.1) then
   9325           kflight = 1
   9326           iobs_flt(1) = 1
   9327           nobs_flt(1) = 1
   9328           ntot_flt(1) = 1
   9329           cid_flt(1) = c_acftid(ii)
   9330           creg_flt(1) = c_acftreg(ii)
   9331           nmiss = 1
   9332 c
   9333 c If flight numbers are equal, increment counter
   9334 c ---------------------------------------------- 
   9335         elseif(c_acftid(iim1)(1:9).eq.c_acftid(ii)(1:9)) then
   9336           nobs_flt(kflight) = nobs_flt(kflight) + 1
   9337           ntot_flt(kflight) = ntot_flt(kflight) + 1
   9338           if(c_acftid(ii)(1:8).eq.cidmiss(1:8)) 
   9339      $       nmiss = nmiss + 1
   9340           if(c_acftreg(ii).ne.cregmiss.and.
   9341      $       creg_flt(kflight).eq.cregmiss) 
   9342      $       creg_flt(kflight) = c_acftreg(ii)
   9343 c
   9344 c Otherwise, save starting index and start counting reports for next flight
   9345 c -------------------------------------------------------------------------
   9346         else
   9347           kflight = kflight + 1
   9348 c-----------------------------------
   9349 c Check index against maximum
   9350 c ---------------------------
   9351           if(kflight.gt.maxflt) then
   9352             kflight = kflight - 1
   9353             write(io8,*)
   9354             write(io8,*) 'Subr. DO_FLT, ipoint 1: Max number of ',
   9355      $                   'flights exceeded--increase maxflt'
   9356             return 1
   9357           endif
   9358 c-----------------------------------
   9359           cid_flt(kflight) = c_acftid(ii)
   9360           creg_flt(kflight) = c_acftreg(ii)
   9361           iobs_flt(kflight) = iob
   9362           nobs_flt(kflight) = 1
   9363           ntot_flt(kflight) = 1
   9364         endif
   9365       enddo
   9366 c
   9367 c Check for flights with same flight # (but different tail #s)
   9368 c (do this only the first time the subroutine is called)
   9369 c ------------------------------------------------------------
   9370       if(l_first) then
   9371         do kk=1,kflight
   9372           istart = iobs_flt(kk)
   9373           iistart = indx(istart)
   9374           iend = iobs_flt(kk) + nobs_flt(kk) - 1
   9375           iiend = indx(iend)
   9376           k_abc = 0

Page 204         Source Listing                  DO_FLT
2017-04-18 11:07                                 acftobs_qc.f

   9377 c
   9378 c         Check if tail number is constant for entire flight
   9379 c         --------------------------------------------------
   9380           l_same = .true.
   9381 c
   9382           do iob=istart+1,iend
   9383             ii = indx(iob)
   9384             if(c_acftreg(iistart).eq.cregmiss) then
   9385               istart = istart + 1
   9386               iistart = indx(istart)
   9387             elseif(c_acftreg(ii).ne.c_acftreg(iistart).and.
   9388      $             c_acftreg(ii).ne.cregmiss) then
   9389               l_same = .false.
   9390             endif
   9391           enddo
   9392 c
   9393 c         Change last char of tail # if second tail # found
   9394 c         -------------------------------------------------
   9395           if(.not.l_same) then
   9396             do iob=istart+1,iend
   9397               ii = indx(iob)
   9398               iim1 = indx(iob-1)
   9399 c
   9400 c             ii report has different tail number than first report
   9401 c             -----------------------------------------------------
   9402               if(c_acftreg(ii).ne.c_acftreg(iistart)) then
   9403 c
   9404 c               ii report has different tail number than ii report
   9405 c               --------------------------------------------------
   9406                 if(c_acftreg(ii).ne.cregmiss.and.
   9407      $             c_acftreg(ii).ne.c_acftreg(iim1)) then
   9408 c
   9409 c                 look backwards for same tail number if different ids are found
   9410 c                 --------------------------------------------------------------
   9411                   knt = 1
   9412  10               continue
   9413                   if(c_acftreg(ii).ne.c_acftreg(iim1).and.
   9414      $               iob-knt.gt.istart) then
   9415                     knt = knt + 1
   9416                     iim1 = indx(iob-knt)
   9417                     idt_dif = abs(idt(ii) - idt(iim1))
   9418                     goto 10
   9419                   endif
   9420 c
   9421 c                 use new 9th char if tail number not found
   9422 c                 -----------------------------------------
   9423                   if(iim1.eq.iistart) then
   9424                     k_abc = k_abc + 1
   9425 c
   9426                     if(k_abc.gt.62) then
   9427                       write(io8,*)
   9428                       write(io8,*) 'k_abc too large--too many tail#s!'
   9429                       c_acftid(ii)(9:9) = '?'
   9430                       csort(ii)(9:9) = '?'
   9431                     else
   9432                       c_acftid(ii)(9:9) = c_abc(k_abc)
   9433                       csort(ii)(9:9) = c_abc(k_abc)

Page 205         Source Listing                  DO_FLT
2017-04-18 11:07                                 acftobs_qc.f

   9434                     endif
   9435 c
   9436                     l_sort = .true.
   9437 c
   9438 c                 use old 9th char if tail number found
   9439 c                 -------------------------------------
   9440                   else
   9441                     c_acftid(ii)(9:9) = c_acftid(iim1)(9:9)
   9442                     csort(ii)(9:9) = c_acftid(ii)(9:9)
   9443                   endif
   9444 c
   9445 c               subsequent reports with different tail number
   9446 c               ---------------------------------------------
   9447                 elseif(c_acftreg(ii).ne.cregmiss.and.
   9448      $                 c_acftreg(ii).eq.c_acftreg(iim1)) then
   9449 c
   9450                   c_acftid(ii)(9:9) = c_acftid(iim1)(9:9)
   9451                   csort(ii)(9:9) = c_acftid(iim1)(9:9)
   9452 c
   9453 c               missing value for tail number
   9454 c               -----------------------------
   9455                 elseif(c_acftreg(ii).eq.cregmiss.and.
   9456      $                 iob.ne.istart) then
   9457 c
   9458                   if(c_acftreg(iim1).ne.cregmiss.and.
   9459      $              abs(idt(ii)-idt(iim1)).le.7200) then
   9460                     c_acftreg(ii) = c_acftreg(iim1)
   9461 c
   9462 c                  else
   9463 c                    write(io8,*)
   9464 c                    write(io8,*) 'Missing tail number found for rep #',ii
   9465 c                    write(io8,*) 'Not sure which tail number to choose!'
   9466                   endif
   9467                 endif
   9468               endif
   9469             enddo
   9470           endif
   9471         enddo
   9472       endif
   9473 c
   9474 c Check if large time gaps exist during flight
   9475 c and identify coherent flight segments
   9476 c --------------------------------------------
   9477       if(.not.l_sort) then
   9478 c
   9479         l_sort = .false.
   9480 c
   9481         do kk=1,kflight
   9482           istart = iobs_flt(kk)
   9483           iistart = indx(istart)
   9484           iend = iobs_flt(kk) + nobs_flt(kk) - 1
   9485           iiend = indx(iend)
   9486           k_abc = 0
   9487 c
   9488           l_newid = .false.
   9489 c
   9490           do iob=istart+1,iend

Page 206         Source Listing                  DO_FLT
2017-04-18 11:07                                 acftobs_qc.f

   9491             ii = indx(iob)
   9492             iim1 = indx(iob-1)
   9493             idt_dif = abs(idt(ii) - idt(iim1))
   9494             knt = 1
   9495 c
   9496 c           increment abc counter and change 8th char if time threshold crossed
   9497 c           and flight ids don't change
   9498 c           -------------------------------------------------------------------
   9499             if(c_acftid(ii)(1:9).eq.c_acftid(iim1)(1:9).and.
   9500      $         (idt_dif.gt.idt_samflt.or.
   9501      $          (idt_dif.gt.idt_samflt/6.and.
   9502      $           ht_ft(ii).ne.amiss.and.
   9503      $           ht_ft(iim1).ne.amiss.and.
   9504      $           (ht_ft(ii).lt.5001..or.ht_ft(iim1).lt.5001.)))) then 
   9505 c
   9506               l_newid = .true.
   9507               l_sort = .true.
   9508               k_abc = k_abc + 1
   9509               if(c_abc(k_abc).eq.c_acftid(ii)(8:8)) k_abc = k_abc + 1
   9510 c
   9511               if(k_abc.gt.10) then
   9512                 write(io8,*)
   9513                 write(io8,*) 'Large value: k_abc = ',k_abc
   9514                 write(io8,*) '  ids = ',c_acftreg(ii),' ',c_acftid(ii)
   9515               endif
   9516 c
   9517               if(k_abc.gt.62) then
   9518                 write(io8,*)
   9519                 write(io8,*) 'k_abc too large!'
   9520                 c_acftid(ii)(8:8) = '?'
   9521                 csort(ii)(8:8) = '?'
   9522               else
   9523                 c_acftid(ii)(8:8) = c_abc(k_abc)
   9524                 csort(ii)(8:8) = c_acftid(ii)(8:8)
   9525               endif
   9526 c
   9527 c           Check if flight numbers and tail numbers are the same,
   9528 c             the time difference is small, and a new id is in use.
   9529 c           Change flight id if so.
   9530 c           -------------------------------------------------------
   9531             elseif(c_acftid(ii)(1:7).eq.c_acftid(iim1)(1:7).and.
   9532      $             c_acftreg(ii)(1:8).eq.c_acftreg(iim1)(1:8).and.
   9533      $             idt_dif.le.idt_samflt.and.
   9534      $             l_newid) then
   9535 c
   9536               c_acftid(ii)(8:8) = c_acftid(iim1)(8:8)
   9537               csort(ii)(8:8) = c_acftid(ii)(8:8)
   9538             endif
   9539           enddo
   9540 c
   9541         enddo
   9542 c
   9543 c       Re-do flight limits if time gaps found
   9544 c       --------------------------------------
   9545         if(l_sort) then
   9546           kflight = 0
   9547           iobs_flt = 0

Page 207         Source Listing                  DO_FLT
2017-04-18 11:07                                 acftobs_qc.f

   9548           nobs_flt = 0
   9549           ntot_flt = 0
   9550           nrej_flt = 0
   9551           cid_flt = '        '
   9552           creg_flt = '        '
   9553 c
   9554           do iob = 1,numreps 
   9555             ii = indx(iob)
   9556             if(iob.eq.1) then
   9557               iim1 = 0
   9558             else
   9559               iim1 = indx(iob-1)
   9560             endif
   9561 c
   9562 c           Initialize variables for iob = 1
   9563 c           --------------------------------
   9564             if(iob.eq.1) then
   9565               kflight = 1
   9566               iobs_flt(1) = 1
   9567               nobs_flt(1) = 1
   9568               ntot_flt(1) = 1
   9569               cid_flt(1) = c_acftid(ii)
   9570               creg_flt(1) = c_acftreg(ii)
   9571               nmiss = 1
   9572 c
   9573 c           If flight numbers are equal, increment counter
   9574 c           ---------------------------------------------- 
   9575             elseif(c_acftid(iim1)(1:9).eq.c_acftid(ii)(1:9)) then
   9576               nobs_flt(kflight) = nobs_flt(kflight) + 1
   9577               ntot_flt(kflight) = ntot_flt(kflight) + 1
   9578               if(c_acftid(ii)(1:8).eq.cidmiss(1:8)) 
   9579      $           nmiss = nmiss + 1
   9580               if(c_acftreg(ii).ne.cregmiss.and.
   9581      $           creg_flt(kflight).eq.cregmiss) 
   9582      $           creg_flt(kflight) = c_acftreg(ii)
   9583 c
   9584 c           Otherwise, save starting index and start counting reports for next flight
   9585 c           -------------------------------------------------------------------------
   9586             else
   9587               kflight = kflight + 1
   9588 c-----------------------------------
   9589 c Check index against maximum
   9590 c ---------------------------
   9591               if(kflight.gt.maxflt) then
   9592                 kflight = kflight - 1
   9593                 write(io8,*)
   9594                 write(io8,*) 'Subr. DO_FLT, ipoint 2: Max number of ',
   9595      $                       'flights exceeded--increase maxflt'
   9596                 return 1
   9597               endif
   9598 c-----------------------------------
   9599               cid_flt(kflight) = c_acftid(ii)
   9600               creg_flt(kflight) = c_acftreg(ii)
   9601               iobs_flt(kflight) = iob
   9602               nobs_flt(kflight) = 1
   9603               ntot_flt(kflight) = 1
   9604             endif

Page 208         Source Listing                  DO_FLT
2017-04-18 11:07                                 acftobs_qc.f

   9605           enddo
   9606         endif
   9607       endif
   9608 c
   9609 c Output basic stats
   9610 c ------------------
   9611       nave = (numreps-nmiss) / (kflight-1)
   9612       write(io8,*)
   9613       write(io8,*) kflight,' different flights found'
   9614       write(io8,*) nave,' reports per flight, on average'
   9615 c
   9616 c Output indices for each flight
   9617 c ------------------------------
   9618       if(l_print.and.((.not.l_sort.and.l_first).or..not.l_first)) then
   9619         write(io8,*)
   9620         write(io8,*) 'Indices for individual flights'
   9621         write(io8,*) '------------------------------'
   9622         write(io8,*) '  kk flight id istrt indx  iend  indx  nobs'
   9623 c
   9624         do kk=1,kflight
   9625           istart = iobs_flt(kk)
   9626           iend = iobs_flt(kk) + nobs_flt(kk) - 1
   9627           ii = indx(istart)
   9628           if(ii.eq.0) then
   9629             write(io8,*)
   9630             write(io8,*) 'ii = 0 in do_flt output section'
   9631           endif
   9632          write(io8,'(i5,1x,a9,5(1x,i5))') kk,c_acftid(ii),istart,
   9633      $        indx(istart),iend,indx(iend),nobs_flt(kk)
   9634         enddo
   9635       endif
   9636 c
   9637       return
   9638       end

Page 209         Source Listing                  DO_FLT
2017-04-18 11:07 Entry Points                    acftobs_qc.f



ENTRY POINTS

  Name               
                     
 do_flt_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 10                         Label  9412                                                           9418                              
 ABS                        Func   9417                                 scalar                    9417,9459,9493                    
 AMISS                      Dummy  9214     R(4)            4           scalar   ARG,INOUT        9502,9503                         
 CIDMISS                    Dummy  9212     CHAR            8           scalar   ARG,INOUT        9338,9578                         
 CID_FLT                    Dummy  9213     CHAR            9     1     0        ARG,INOUT        9309,9329,9359,9551,9569,9599     
 CREGMISS                   Dummy  9212     CHAR            8           scalar   ARG,INOUT        9340,9341,9384,9388,9406,9447,9455
                                                                                                  ,9458,9580,9581                   
 CREG_FLT                   Dummy  9213     CHAR            8     1     0        ARG,INOUT        9310,9330,9341,9342,9360,9552,9570
                                                                                                  ,9581,9582,9600                   
 CSORT                      Dummy  9214     CHAR            25    1     0        ARG,INOUT        9430,9433,9442,9451,9521,9524,9537
 C_ABC                      Local  9278     CHAR            1     1     62                        9292,9432,9433,9509,9523          
 C_ACFTID                   Dummy  9211     CHAR            9     1     0        ARG,INOUT        9329,9335,9338,9359,9429,9432,9441
                                                                                                  ,9442,9450,9451,9499,9509,9514,952
                                                                                                  0,9523,9524,9531,9536,9537,9569,95
                                                                                                  75,9578,9599,9632                 
 C_ACFTREG                  Dummy  9211     CHAR            8     1     0        ARG,INOUT        9330,9340,9342,9360,9384,9387,9388
                                                                                                  ,9402,9406,9407,9413,9447,9448,945
                                                                                                  5,9458,9460,9514,9532,9570,9580,95
                                                                                                  82,9600                           
 DO_FLT                     Subr   9211                                                                                             
 HT_FT                      Dummy  9212     R(4)            4     1     0        ARG,INOUT        9502,9503,9504                    
 IDT                        Dummy  9211     I(4)            4     1     0        ARG,INOUT        9417,9459,9493                    
 IDT_DIF                    Local  9268     I(4)            4           scalar                    9417,9493,9500,9501,9533          
 IDT_SAMFLT                 Dummy  9212     I(4)            4           scalar   ARG,INOUT        9500,9501,9533                    
 IEND                       Local  9271     I(4)            4           scalar                    9374,9375,9382,9396,9484,9485,9490
                                                                                                  ,9626,9633                        
 II                         Local  9261     I(4)            4           scalar                    9315,9329,9330,9335,9338,9340,9342
                                                                                                  ,9359,9360,9383,9387,9388,9397,940
                                                                                                  2,9406,9407,9413,9417,9429,9430,94
                                                                                                  32,9433,9441,9442,9447,9448,9450,9
                                                                                                  451,9455,9459,9460,9491,9493,9499,
                                                                                                  9502,9504,9509,9514,9520,9521,9523
                                                                                                  ,9524,9531,9532,9536,9537,9555,956
                                                                                                  9,9570,9575,9578,9580,9582,9599,96
                                                                                                  00,9627,9628,9632                 
 IIEND                      Local  9272     I(4)            4           scalar                    9375,9485                         
 IIM1                       Local  9262     I(4)            4           scalar                    9317,9319,9335,9398,9407,9413,9416
                                                                                                  ,9417,9423,9441,9448,9450,9451,945
                                                                                                  8,9459,9460,9492,9493,9499,9503,95
                                                                                                  04,9531,9532,9536,9557,9559,9575  
 IISTART                    Local  9270     I(4)            4           scalar                    9373,9384,9386,9387,9402,9423,9483
 INDX                       Dummy  9212     I(4)            4     1     0        ARG,INOUT        9315,9319,9373,9375,9383,9386,9397
                                                                                                  ,9398,9416,9483,9485,9491,9492,955
                                                                                                  5,9559,9627,9633                  

Page 210         Source Listing                  DO_FLT
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 IO8                        Dummy  9214     I(4)            4           scalar   ARG,INOUT        9353,9354,9427,9428,9512,9513,9514
                                                                                                  ,9518,9519,9593,9594,9612,9613,961
                                                                                                  4,9619,9620,9621,9622,9629,9630,96
                                                                                                  32                                
 IOB                        Local  9263     I(4)            4           scalar                    9314,9315,9316,9319,9324,9361,9382
                                                                                                  ,9383,9396,9397,9398,9414,9416,945
                                                                                                  6,9490,9491,9492,9554,9555,9556,95
                                                                                                  59,9564,9601                      
 IOBS_FLT                   Dummy  9214     I(4)            4     1     0        ARG,INOUT        9305,9326,9361,9372,9374,9482,9484
                                                                                                  ,9547,9566,9601,9625,9626         
 ISTART                     Local  9269     I(4)            4           scalar                    9372,9373,9382,9385,9386,9396,9414
                                                                                                  ,9456,9482,9483,9490,9625,9627,963
                                                                                                  2,9633                            
 KFLIGHT                    Dummy  9213     I(4)            4           scalar   ARG,INOUT        9304,9325,9336,9337,9341,9342,9347
                                                                                                  ,9351,9352,9359,9360,9361,9362,936
                                                                                                  3,9371,9481,9546,9565,9576,9577,95
                                                                                                  81,9582,9587,9591,9592,9599,9600,9
                                                                                                  601,9602,9603,9611,9613,9624      
 KK                         Local  9264     I(4)            4           scalar                    9371,9372,9374,9481,9482,9484,9624
                                                                                                  ,9625,9626,9632,9633              
 KNT                        Local  9274     I(4)            4           scalar                    9411,9414,9415,9416,9494          
 K_ABC                      Local  9273     I(4)            4           scalar                    9376,9424,9426,9432,9433,9486,9508
                                                                                                  ,9509,9511,9513,9517,9523         
 L_FIRST                    Dummy  9211     L(4)            4           scalar   ARG,INOUT        9370,9618                         
 L_NEWID                    Local  9288     L(4)            4           scalar                    9488,9506,9534                    
 L_PRINT                    Dummy  9214     L(4)            4           scalar   ARG,INOUT        9618                              
 L_SAME                     Local  9287     L(4)            4           scalar                    9380,9389,9395                    
 L_SORT                     Dummy  9214     L(4)            4           scalar   ARG,INOUT        9302,9436,9477,9479,9507,9545,9618
 MAXFLT                     Dummy  9213     I(4)            4           scalar   ARG,INOUT        9247,9248,9249,9250,9251,9252,9351
                                                                                                  ,9591                             
 MAX_REPS                   Dummy  9211     I(4)            4           scalar   ARG,INOUT        9237,9238,9239,9240,9241,9256     
 NAVE                       Local  9265     I(4)            4           scalar                    9611,9614                         
 NMISS                      Local  9266     I(4)            4           scalar                    9331,9339,9571,9579,9611          
 NOBS_FLT                   Dummy  9213     I(4)            4     1     0        ARG,INOUT        9306,9327,9336,9362,9374,9484,9548
                                                                                                  ,9567,9576,9602,9626,9633         
 NREJ_FLT                   Dummy  9214     I(4)            4     1     0        ARG,INOUT        9308,9550                         
 NTOT_FLT                   Dummy  9213     I(4)            4     1     0        ARG,INOUT        9307,9328,9337,9363,9549,9568,9577
                                                                                                  ,9603                             
 NUMREPS                    Dummy  9211     I(4)            4           scalar   ARG,INOUT        9314,9554,9611                    

Page 211         Source Listing                  DO_FLT
2017-04-18 11:07                                 acftobs_qc.f

   9639 c
   9640 c ###################################################################
   9641 c                            subroutine do_reg
   9642 c ###################################################################
   9643 c   
   9644       subroutine do_reg(l_print,io8,
   9645      $           max_reps,numreps,itype,c_qc,c_acftreg,indx,
   9646      $           maxflt,kreg,creg_reg,nobs_reg,*)
   9647 c
   9648 c     Count number of obs per tail (registration) number
   9649 c
   9650       implicit none
   9651 c
   9652 c Observation variables
   9653 c ---------------------
   9654       integer      max_reps            ! maximum number of reports allowed
   9655       integer      numreps             ! actual number of reports
   9656      $,            itype(max_reps)     ! observation type
   9657       character*11 c_qc(max_reps)      ! qc flags
   9658       character*8  c_acftreg(max_reps) ! aircraft registration (tail) number
   9659       integer      indx(max_reps)      ! pointer index for reports
   9660       integer      iob                 ! do loop index--over reports
   9661       integer      ii                  ! index for current ob
   9662 c     $,            iim1                ! index for previous ob
   9663 c
   9664 c Tail number variables
   9665 c ---------------------
   9666       integer      maxflt              ! max number of flights/tail numbers
   9667       integer      kreg                ! actual number of tail#s in dataset
   9668       character*8  creg_reg(maxflt)    ! tail numbers
   9669       integer      nobs_reg(maxflt,5)  ! number of reports per tail# per type
   9670       integer      ktot                ! sum of reports categorized
   9671      $,            mm                  ! do loop index--over tail numbers
   9672 c
   9673 c Other variables
   9674 c ---------------
   9675       integer      io8                 ! i/o unit number for log file
   9676 c
   9677 ccccdak      integer      i_acars             ! instrument type for acars
   9678       integer      i_acars             ! instrument type for tamdar
   9679 ccccdak     $,            i_acars_lvl         ! instrument type for acars--level flt
   9680      $,            i_acars_lvl         ! instrument type for tamdar--level flt
   9681 ccccdak     $,            i_acars_asc         ! instrument type for acars--ascent
   9682      $,            i_acars_asc         ! instrument type for tamdar--ascent
   9683 ccccdak     $,            i_acars_des         ! instrument type for acars--descent
   9684      $,            i_acars_des         ! instrument type for tamdar--descent
   9685      $,            i_mdcrs             ! instrument type for mdcrs
   9686      $,            i_mdcrs_lvl         ! instrument type for mdcrs--level flt
   9687      $,            i_mdcrs_asc         ! instrument type for mdcrs--ascent
   9688      $,            i_mdcrs_des         ! instrument type for mdcrs--descent
   9689      $,            i_man_airep         ! instrument type for manual aireps
   9690      $,            i_man_Yairep        ! instrument type for manual aireps (YRXX)
   9691      $,            i_airep             ! instrument type for airep
   9692      $,            i_airep_lvl         ! instrument type for airep--level flt
   9693      $,            i_airep_asc         ! instrument type for airep--ascent
   9694      $,            i_airep_des         ! instrument type for airep--descent
   9695      $,            i_amdar             ! instrument type for amdar

Page 212         Source Listing                  DO_REG
2017-04-18 11:07                                 acftobs_qc.f

   9696      $,            i_amdar_lvl         ! instrument type for amdar--level flt
   9697      $,            i_amdar_asc         ! instrument type for amdar--ascent
   9698      $,            i_amdar_des         ! instrument type for amdar--descent
   9699 c
   9700 c     Function
   9701 c     --------
   9702       integer      insty_ob_fun        ! function to convert character
   9703                                        !   instrument type to integer
   9704 c
   9705 c     Switches
   9706 c     --------
   9707       logical      l_print             ! true for printing values
   9708       logical      l_done              ! true if finished
   9709 c
   9710 c # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
   9711 c
   9712 c Initialize aircraft data types
   9713 c ------------------------------
   9714       i_acars      = insty_ob_fun('acars')
   9715       i_acars_lvl  = insty_ob_fun('acars_lvl') 
   9716       i_acars_asc  = insty_ob_fun('acars_asc') 
   9717       i_acars_des  = insty_ob_fun('acars_des') 
   9718       i_mdcrs      = insty_ob_fun('mdcrs')
   9719       i_mdcrs_lvl  = insty_ob_fun('mdcrs_lvl') 
   9720       i_mdcrs_asc  = insty_ob_fun('mdcrs_asc') 
   9721       i_mdcrs_des  = insty_ob_fun('mdcrs_des')
   9722       i_man_airep  = insty_ob_fun('man-airep') 
   9723       i_man_Yairep = insty_ob_fun('man-Yairep') 
   9724       i_airep      = insty_ob_fun('airep')
   9725       i_airep_lvl  = insty_ob_fun('airep_lvl')
   9726       i_airep_asc  = insty_ob_fun('airep_asc')
   9727       i_airep_des  = insty_ob_fun('airep_des')
   9728       i_amdar      = insty_ob_fun('amdar')
   9729       i_amdar_lvl  = insty_ob_fun('amdar_lvl')
   9730       i_amdar_asc  = insty_ob_fun('amdar_asc')
   9731       i_amdar_des  = insty_ob_fun('amdar_des')
   9732 c
   9733 c Initialize variables
   9734 c --------------------
   9735       kreg = 0
   9736       creg_reg = 'xxxxxxxx'
   9737       nobs_reg = 0
   9738 c
   9739 c Begin loop over reports
   9740 c -----------------------
   9741       do iob = 1,numreps 
   9742         ii = indx(iob)
   9743 c
   9744 c
   9745 c Ignore reports with blank tail number and those marked as duplicates
   9746 c --------------------------------------------------------------------
   9747         if(c_acftreg(ii).ne.'        '.and.
   9748      $     c_qc(ii)(1:1).ne.'D'.and.
   9749      $     c_qc(ii)(1:1).ne.'d') then
   9750 c
   9751 c Handle case where kreg = 0
   9752 c --------------------------

Page 213         Source Listing                  DO_REG
2017-04-18 11:07                                 acftobs_qc.f

   9753           if(kreg.eq.0) then
   9754             kreg = 1
   9755             mm = 1
   9756             creg_reg(kreg) = c_acftreg(ii)
   9757             l_done = .true.
   9758 c
   9759             if(itype(ii).eq.i_mdcrs.or.
   9760      $         itype(ii).eq.i_mdcrs_lvl.or.
   9761      $         itype(ii).eq.i_mdcrs_asc.or.
   9762      $         itype(ii).eq.i_mdcrs_des) then
   9763               nobs_reg(kreg,1) = 1
   9764 c
   9765             elseif(itype(ii).eq.i_acars.or.
   9766      $             itype(ii).eq.i_acars_lvl.or.
   9767      $             itype(ii).eq.i_acars_asc.or.
   9768      $             itype(ii).eq.i_acars_des) then
   9769               nobs_reg(kreg,2) = 1
   9770 c
   9771             elseif(itype(ii).eq.i_amdar.or. 
   9772      $             itype(ii).eq.i_amdar_lvl.or.
   9773      $             itype(ii).eq.i_amdar_asc.or.
   9774      $             itype(ii).eq.i_amdar_des) then
   9775               nobs_reg(kreg,3) = 1
   9776 c
   9777             elseif(itype(ii).eq.i_airep.or.
   9778      $             itype(ii).eq.i_airep_lvl.or.
   9779      $             itype(ii).eq.i_airep_asc.or.
   9780      $             itype(ii).eq.i_airep_des) then
   9781               nobs_reg(kreg,4) = 1
   9782 c
   9783             elseif(itype(ii).eq.i_man_airep.or.
   9784      $             itype(ii).eq.i_man_Yairep) then
   9785               nobs_reg(kreg,5) = 1
   9786             endif
   9787 c
   9788 c If tail numbers are equal, increment counter
   9789 c -------------------------------------------- 
   9790           elseif(c_acftreg(ii).eq.creg_reg(mm)) then
   9791 c
   9792             if(itype(ii).eq.i_mdcrs.or.
   9793      $         itype(ii).eq.i_mdcrs_lvl.or.
   9794      $         itype(ii).eq.i_mdcrs_asc.or.
   9795      $         itype(ii).eq.i_mdcrs_des) then
   9796               nobs_reg(mm,1) = nobs_reg(mm,1) + 1
   9797 c
   9798             elseif(itype(ii).eq.i_acars.or.
   9799      $             itype(ii).eq.i_acars_lvl.or.
   9800      $             itype(ii).eq.i_acars_asc.or.
   9801      $             itype(ii).eq.i_acars_des) then
   9802               nobs_reg(mm,2) = nobs_reg(mm,2) + 1
   9803 c
   9804             elseif(itype(ii).eq.i_amdar.or. 
   9805      $             itype(ii).eq.i_amdar_lvl.or.
   9806      $             itype(ii).eq.i_amdar_asc.or.
   9807      $             itype(ii).eq.i_amdar_des) then
   9808               nobs_reg(mm,3) = nobs_reg(mm,3) + 1
   9809 c

Page 214         Source Listing                  DO_REG
2017-04-18 11:07                                 acftobs_qc.f

   9810             elseif(itype(ii).eq.i_airep.or.
   9811      $             itype(ii).eq.i_airep_lvl.or.
   9812      $             itype(ii).eq.i_airep_asc.or.
   9813      $             itype(ii).eq.i_airep_des) then
   9814               nobs_reg(mm,4) = nobs_reg(mm,4) + 1
   9815 c
   9816             elseif(itype(ii).eq.i_man_airep.or.
   9817      $             itype(ii).eq.i_man_Yairep) then
   9818               nobs_reg(mm,5) = nobs_reg(mm,5) + 1
   9819             endif
   9820 c
   9821 c Otherwise, loop to find matching tail number
   9822 c --------------------------------------------
   9823           else
   9824             mm = 1
   9825             l_done = .false.
   9826 c
   9827             do while (.not.l_done)
   9828               if(c_acftreg(ii).eq.creg_reg(mm)) then
   9829                 l_done = .true.
   9830 c
   9831                 if(itype(ii).eq.i_mdcrs.or.
   9832      $             itype(ii).eq.i_mdcrs_lvl.or.
   9833      $             itype(ii).eq.i_mdcrs_asc.or.
   9834      $             itype(ii).eq.i_mdcrs_des) then
   9835                   nobs_reg(mm,1) = nobs_reg(mm,1) + 1
   9836 c
   9837                 elseif(itype(ii).eq.i_acars.or.
   9838      $                 itype(ii).eq.i_acars_lvl.or.
   9839      $                 itype(ii).eq.i_acars_asc.or.
   9840      $                 itype(ii).eq.i_acars_des) then
   9841                   nobs_reg(mm,2) = nobs_reg(mm,2) + 1
   9842 c
   9843                 elseif(itype(ii).eq.i_amdar.or. 
   9844      $                 itype(ii).eq.i_amdar_lvl.or.
   9845      $                 itype(ii).eq.i_amdar_asc.or.
   9846      $                 itype(ii).eq.i_amdar_des) then
   9847                   nobs_reg(mm,3) = nobs_reg(mm,3) + 1
   9848 c
   9849                 elseif(itype(ii).eq.i_airep.or.
   9850      $                 itype(ii).eq.i_airep_lvl.or.
   9851      $                 itype(ii).eq.i_airep_asc.or.
   9852      $                 itype(ii).eq.i_airep_des) then
   9853                   nobs_reg(mm,4) = nobs_reg(mm,4) + 1
   9854 c
   9855                 elseif(itype(ii).eq.i_man_airep.or.
   9856      $                 itype(ii).eq.i_man_Yairep) then
   9857                   nobs_reg(mm,5) = nobs_reg(mm,5) + 1
   9858                 endif
   9859 c
   9860 c             If tail number not found, add to end
   9861 c             ------------------------------------
   9862               else
   9863                 mm = mm + 1
   9864                 if(mm.eq.kreg+1) then
   9865                   kreg = kreg + 1
   9866 c-----------------------------------

Page 215         Source Listing                  DO_REG
2017-04-18 11:07                                 acftobs_qc.f

   9867 c Check index against maximum
   9868 c ---------------------------
   9869                   if(kreg.gt.maxflt) then
   9870                     kreg = kreg - 1
   9871                     write(io8,*)
   9872                     write(io8,*) 'Subr. DO_REG: Max number of flights ',
   9873      $                           'exceeded--increase maxflt'
   9874                     return 1
   9875                   endif
   9876 c-----------------------------------
   9877                   creg_reg(kreg) = c_acftreg(ii)
   9878                   l_done = .true.
   9879 c
   9880                   if(itype(ii).eq.i_mdcrs.or.
   9881      $               itype(ii).eq.i_mdcrs_lvl.or.
   9882      $               itype(ii).eq.i_mdcrs_asc.or.
   9883      $               itype(ii).eq.i_mdcrs_des) then
   9884                     nobs_reg(mm,1) = 1
   9885 c
   9886                   elseif(itype(ii).eq.i_acars.or.
   9887      $                   itype(ii).eq.i_acars_lvl.or.
   9888      $                   itype(ii).eq.i_acars_asc.or.
   9889      $                   itype(ii).eq.i_acars_des) then
   9890                     nobs_reg(mm,2) = 1
   9891 c
   9892                   elseif(itype(ii).eq.i_amdar.or. 
   9893      $                   itype(ii).eq.i_amdar_lvl.or.
   9894      $                   itype(ii).eq.i_amdar_asc.or.
   9895      $                   itype(ii).eq.i_amdar_des) then
   9896                     nobs_reg(mm,3) = 1
   9897 c
   9898                   elseif(itype(ii).eq.i_airep.or.
   9899      $                   itype(ii).eq.i_airep_lvl.or.
   9900      $                   itype(ii).eq.i_airep_asc.or.
   9901      $                   itype(ii).eq.i_airep_des) then
   9902                     nobs_reg(mm,4) = 1
   9903 c
   9904                   elseif(itype(ii).eq.i_man_airep.or.
   9905      $                   itype(ii).eq.i_man_Yairep) then
   9906                     nobs_reg(mm,5) = 1
   9907                   endif
   9908                 endif
   9909               endif
   9910             enddo
   9911 c
   9912           endif
   9913         endif
   9914       enddo
   9915 c
   9916 c Output indices for each flight
   9917 c ------------------------------
   9918       if(l_print) then
   9919         write(io8,*)
   9920         write(io8,*) 'Indices for individual tail numbers'
   9921         write(io8,*) '-----------------------------------'
   9922 ccccdak        write(io8,*) '  mm flight# #MDCRS  #ACARS  #AMDAR   ',
   9923         write(io8,*) '  mm flight# #MDCRS  #TAMDAR #AMDAR   ',

Page 216         Source Listing                  DO_REG
2017-04-18 11:07                                 acftobs_qc.f

   9924      $               ' #AIREP  #manAIREP '
   9925       endif
   9926 c
   9927       ktot = 0
   9928       do mm=1,kreg
   9929 c
   9930        if(l_print) write(io8,'(i5,1x,a8,6(1x,i5))') mm,creg_reg(mm),
   9931      $      nobs_reg(mm,1),nobs_reg(mm,2),nobs_reg(mm,3),
   9932      $      nobs_reg(mm,4),nobs_reg(mm,5)
   9933 c
   9934        ktot = ktot + nobs_reg(mm,1) + nobs_reg(mm,2) + nobs_reg(mm,3)
   9935      $             + nobs_reg(mm,4) + nobs_reg(mm,5)
   9936 c
   9937       enddo
   9938 c
   9939       write(io8,*)
   9940       write(io8,*) numreps,' reports input to do_reg'
   9941       write(io8,*) ktot,' reports categorized by tail number'
   9942 c
   9943       return
   9944       end


ENTRY POINTS

  Name               
                     
 do_reg_             

Page 217         Source Listing                  DO_REG
2017-04-18 11:07 Symbol Table                    acftobs_qc.f



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CREG_REG                   Dummy  9646     CHAR            8     1     0        ARG,INOUT        9736,9756,9790,9828,9877,9930     
 C_ACFTREG                  Dummy  9645     CHAR            8     1     0        ARG,INOUT        9747,9756,9790,9828,9877          
 C_QC                       Dummy  9645     CHAR            11    1     0        ARG,INOUT        9748,9749                         
 DO_REG                     Subr   9644                                                                                             
 II                         Local  9661     I(4)            4           scalar                    9742,9747,9748,9749,9756,9759,9760
                                                                                                  ,9761,9762,9765,9766,9767,9768,977
                                                                                                  1,9772,9773,9774,9777,9778,9779,97
                                                                                                  80,9783,9784,9790,9792,9793,9794,9
                                                                                                  795,9798,9799,9800,9801,9804,9805,
                                                                                                  9806,9807,9810,9811,9812,9813,9816
                                                                                                  ,9817,9828,9831,9832,9833,9834,983
                                                                                                  7,9838,9839,9840,9843,9844,9845,98
                                                                                                  46,9849,9850,9851,9852,9855,9856,9
                                                                                                  877,9880,9881,9882,9883,9886,9887,
                                                                                                  9888,9889,9892,9893,9894,9895,9898
                                                                                                  ,9899,9900,9901,9904,9905         
 INDX                       Dummy  9645     I(4)            4     1     0        ARG,INOUT        9742                              
 INSTY_OB_FUN               Func   9702     I(4)            4           scalar                    9714,9715,9716,9717,9718,9719,9720
                                                                                                  ,9721,9722,9723,9724,9725,9726,972
                                                                                                  7,9728,9729,9730,9731             
 IO8                        Dummy  9644     I(4)            4           scalar   ARG,INOUT        9871,9872,9919,9920,9921,9923,9930
                                                                                                  ,9939,9940,9941                   
 IOB                        Local  9660     I(4)            4           scalar                    9741,9742                         
 ITYPE                      Dummy  9645     I(4)            4     1     0        ARG,INOUT        9759,9760,9761,9762,9765,9766,9767
                                                                                                  ,9768,9771,9772,9773,9774,9777,977
                                                                                                  8,9779,9780,9783,9784,9792,9793,97
                                                                                                  94,9795,9798,9799,9800,9801,9804,9
                                                                                                  805,9806,9807,9810,9811,9812,9813,
                                                                                                  9816,9817,9831,9832,9833,9834,9837
                                                                                                  ,9838,9839,9840,9843,9844,9845,984
                                                                                                  6,9849,9850,9851,9852,9855,9856,98
                                                                                                  80,9881,9882,9883,9886,9887,9888,9
                                                                                                  889,9892,9893,9894,9895,9898,9899,
                                                                                                  9900,9901,9904,9905               
 I_ACARS                    Local  9678     I(4)            4           scalar                    9714,9765,9798,9837,9886          
 I_ACARS_ASC                Local  9682     I(4)            4           scalar                    9716,9767,9800,9839,9888          
 I_ACARS_DES                Local  9684     I(4)            4           scalar                    9717,9768,9801,9840,9889          
 I_ACARS_LVL                Local  9680     I(4)            4           scalar                    9715,9766,9799,9838,9887          
 I_AIREP                    Local  9691     I(4)            4           scalar                    9724,9777,9810,9849,9898          
 I_AIREP_ASC                Local  9693     I(4)            4           scalar                    9726,9779,9812,9851,9900          
 I_AIREP_DES                Local  9694     I(4)            4           scalar                    9727,9780,9813,9852,9901          
 I_AIREP_LVL                Local  9692     I(4)            4           scalar                    9725,9778,9811,9850,9899          
 I_AMDAR                    Local  9695     I(4)            4           scalar                    9728,9771,9804,9843,9892          
 I_AMDAR_ASC                Local  9697     I(4)            4           scalar                    9730,9773,9806,9845,9894          
 I_AMDAR_DES                Local  9698     I(4)            4           scalar                    9731,9774,9807,9846,9895          
 I_AMDAR_LVL                Local  9696     I(4)            4           scalar                    9729,9772,9805,9844,9893          
 I_MAN_AIREP                Local  9689     I(4)            4           scalar                    9722,9783,9816,9855,9904          
 I_MAN_YAIREP               Local  9690     I(4)            4           scalar                    9723,9784,9817,9856,9905          
 I_MDCRS                    Local  9685     I(4)            4           scalar                    9718,9759,9792,9831,9880          
 I_MDCRS_ASC                Local  9687     I(4)            4           scalar                    9720,9761,9794,9833,9882          
 I_MDCRS_DES                Local  9688     I(4)            4           scalar                    9721,9762,9795,9834,9883          

Page 218         Source Listing                  DO_REG
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 I_MDCRS_LVL                Local  9686     I(4)            4           scalar                    9719,9760,9793,9832,9881          
 KREG                       Dummy  9646     I(4)            4           scalar   ARG,INOUT        9735,9753,9754,9756,9763,9769,9775
                                                                                                  ,9781,9785,9864,9865,9869,9870,987
                                                                                                  7,9928                            
 KTOT                       Local  9670     I(4)            4           scalar                    9927,9934,9941                    
 L_DONE                     Local  9708     L(4)            4           scalar                    9757,9825,9827,9829,9878          
 L_PRINT                    Dummy  9644     L(4)            4           scalar   ARG,INOUT        9918,9930                         
 MAXFLT                     Dummy  9646     I(4)            4           scalar   ARG,INOUT        9668,9669,9869                    
 MAX_REPS                   Dummy  9645     I(4)            4           scalar   ARG,INOUT        9656,9657,9658,9659               
 MM                         Local  9671     I(4)            4           scalar                    9755,9790,9796,9802,9808,9814,9818
                                                                                                  ,9824,9828,9835,9841,9847,9853,985
                                                                                                  7,9863,9864,9884,9890,9896,9902,99
                                                                                                  06,9928,9930,9931,9932,9934,9935  
 NOBS_REG                   Dummy  9646     I(4)            4     2     0        ARG,INOUT        9737,9763,9769,9775,9781,9785,9796
                                                                                                  ,9802,9808,9814,9818,9835,9841,984
                                                                                                  7,9853,9857,9884,9890,9896,9902,99
                                                                                                  06,9931,9932,9934,9935            
 NUMREPS                    Dummy  9645     I(4)            4           scalar   ARG,INOUT        9741,9940                         

Page 219         Source Listing                  DO_REG
2017-04-18 11:07                                 acftobs_qc.f

   9945 c
   9946 c ###################################################################
   9947 c                            subroutine innov_qc
   9948 c ###################################################################
   9949 c
   9950       subroutine innov_qc(max_reps,numreps,indx,xiv_t,xiv_d,xiv_s,amiss,
   9951      $           c_qc,knt,io8,l_init,l_innov_miss)
   9952 c
   9953 c Compute distribution of innovations
   9954 c
   9955       implicit none
   9956 c
   9957 c     Work arrays
   9958 c     -----------
   9959       integer      io8                 ! i/o unit number for log file
   9960      $,            knt                 ! counter for first or second time innov_qc is called
   9961       integer      ii,nn,iob           ! do loop indices
   9962       integer      n_xiv               ! computed innovation (integer)
   9963       integer      max_reps            ! maximum number of observations allowed
   9964       integer      numreps             ! actual number of reports
   9965       real         amiss               ! missing value flag (real)
   9966       real         xiv_t(max_reps)     ! temperature innovation (ob - bk)
   9967      $,            xiv_d(max_reps)     ! wind direction innovation (ob - bk)
   9968      $,            xiv_s(max_reps)     ! wind speed innovation (ob - bk)
   9969       integer      knt_t(2)            ! number of non-rejected temperature innovations
   9970      $,            knt_d(2)            ! number of non-rejected wind direction innovations
   9971      $,            knt_s(2)            ! number of non-rejected wind speed innovations
   9972       integer      k_t(104,2)          ! distribution of temperature innovations
   9973      $,            k_d(40,2)           ! distribution of wind direction innovations
   9974      $,            k_s(104,2)          ! distribution of wind speed innovations
   9975       integer      indx(max_reps)      ! pointer index for reports
   9976 c
   9977       character*11 c_qc(max_reps)      ! qc flags
   9978 c
   9979       logical      l_init              ! initialize variables if true
   9980      $,            l_innov_miss        ! true if all innovations missing
   9981 c
   9982 c # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
   9983 c
   9984       l_innov_miss = .true.
   9985 c
   9986 c Initialize histogram arrays
   9987 c ---------------------------
   9988       if(l_init) then
   9989         k_t(:,knt) = 0
   9990 c
   9991         k_d(:,knt) = 0
   9992 c
   9993         k_s(:,knt) = 0
   9994 c
   9995         knt_t(knt) = 0
   9996         knt_d(knt) = 0
   9997         knt_s(knt) = 0
   9998       endif
   9999 c
  10000 c Loop over reports
  10001 c -----------------

Page 220         Source Listing                  INNOV_QC
2017-04-18 11:07                                 acftobs_qc.f

  10002       do iob=1,numreps
  10003         ii = indx(iob)
  10004 c
  10005         nn = nint(xiv_t(ii)) + 52
  10006         if(nn.eq.43) then
  10007           write(io8,*)
  10008           write(io8,*) 'Temperature innovation = -9 for ii = ',ii
  10009           write(io8,*) '  xiv_t = ',xiv_t(ii)
  10010         endif
  10011 c
  10012 c Count distribution of temperature innovations
  10013 c ---------------------------------------------
  10014         if(c_qc(ii)(6:6).ne.'B'.and.
  10015      $     c_qc(ii)(6:6).ne.'E'.and.
  10016      $     c_qc(ii)(6:6).ne.'I'.and.
  10017      $     c_qc(ii)(6:6).ne.'K'.and.
  10018      $     c_qc(ii)(6:6).ne.'b') then
  10019 c
  10020           knt_t(knt) = knt_t(knt) + 1
  10021           nn = nint(xiv_t(ii)) + 52
  10022 c
  10023           if(xiv_t(ii).eq.amiss) then
  10024             k_t(104,knt) = k_t(104,knt) + 1
  10025           elseif(xiv_t(ii).lt.-50.) then
  10026             k_t(1,knt) = k_t(1,knt) + 1
  10027           elseif(xiv_t(ii).gt.50.) then
  10028             k_t(103,knt) = k_t(103,knt) + 1
  10029           else
  10030             k_t(nn,knt) = k_t(nn,knt) + 1
  10031           endif
  10032         endif
  10033 c
  10034 c Count distribution of wind direction innovations
  10035 c ------------------------------------------------
  10036         if(c_qc(ii)(7:7).ne.'S'.and.
  10037      $     c_qc(ii)(7:7).ne.'E'.and.
  10038      $     c_qc(ii)(7:7).ne.'K'.and.
  10039      $     c_qc(ii)(7:7).ne.'B'.and.
  10040      $     c_qc(ii)(7:7).ne.'I') then
  10041 c
  10042           knt_d(knt) = knt_d(knt) + 1
  10043           nn = nint(xiv_d(ii)/10.) + 20
  10044 c
  10045           if(xiv_d(ii).eq.amiss) then
  10046             k_d(40,knt) = k_d(40,knt) + 1
  10047           elseif(xiv_d(ii).lt.-180.) then
  10048             k_d(1,knt) = k_d(1,knt) + 1
  10049           elseif(xiv_d(ii).gt.180.) then
  10050             k_d(39,knt) = k_d(39,knt) + 1
  10051           else
  10052             k_d(nn,knt) = k_d(nn,knt) + 1
  10053           endif
  10054         endif
  10055 c
  10056 c Count distribution of wind speed innovations
  10057 c --------------------------------------------
  10058         if(c_qc(ii)(8:8).ne.'S'.and.

Page 221         Source Listing                  INNOV_QC
2017-04-18 11:07                                 acftobs_qc.f

  10059      $     c_qc(ii)(8:8).ne.'E'.and.
  10060      $     c_qc(ii)(8:8).ne.'K'.and.
  10061      $     c_qc(ii)(8:8).ne.'B'.and.
  10062      $     c_qc(ii)(8:8).ne.'A'.and.
  10063      $     c_qc(ii)(8:8).ne.'I') then
  10064 c
  10065           knt_s(knt) = knt_s(knt) + 1
  10066           nn = nint(xiv_s(ii)) + 52
  10067 c
  10068           if(xiv_s(ii).eq.amiss) then
  10069             k_s(104,knt) = k_s(104,knt) + 1
  10070           elseif(xiv_s(ii).lt.-50.) then
  10071             k_s(1,knt) = k_s(1,knt) + 1
  10072           elseif(xiv_s(ii).gt.50.) then
  10073             k_s(103,knt) = k_s(103,knt) + 1
  10074           else
  10075             k_s(nn,knt) = k_s(nn,knt) + 1
  10076           endif
  10077         endif
  10078 c
  10079       enddo
  10080 c
  10081 c Output distribution of temperature innovations if non-missing values present
  10082 c ----------------------------------------------------------------------------
  10083       if(knt_t(knt).gt.k_t(104,knt)) then
  10084 c
  10085         l_innov_miss = .false.
  10086 c
  10087         write(io8,*) 
  10088         write(io8,*) 'Distribution of Temperature Innovations (K)'
  10089         write(io8,*) '-------------------------------------------'
  10090         if(k_t(1,knt).gt.0) write(io8,*) '      < -50 ',k_t(1,knt)
  10091 c
  10092         do nn=2,102
  10093           n_xiv = nn - 52
  10094           if(k_t(nn,knt).gt.0) write(io8,*) n_xiv, k_t(nn,knt)
  10095         enddo
  10096 c 
  10097         if(k_t(103,knt).gt.0) write(io8,*) '      >  50 ',k_t(103,knt)
  10098         if(k_t(104,knt).gt.0) write(io8,*) '     missing',k_t(104,knt)
  10099 c
  10100       else
  10101         write(io8,*)
  10102         write(io8,*) 'All temperature innovations missing'
  10103       endif
  10104 c
  10105 c Output distribution of wind direction innovations
  10106 c -------------------------------------------------
  10107       if(knt_d(knt).gt.k_d(40,knt)) then
  10108 c
  10109         l_innov_miss = .false.
  10110 c
  10111         write(io8,*) 
  10112         write(io8,*) 'Distribution of Wind Direction Innovations'
  10113         write(io8,*) '------------------------------------------'
  10114         if(k_d(1,knt).gt.0) write(io8,*) '     < -180 ',k_d(1,knt)
  10115 c

Page 222         Source Listing                  INNOV_QC
2017-04-18 11:07                                 acftobs_qc.f

  10116         do nn=2,38
  10117           n_xiv = (nn - 20) * 10
  10118           if(k_d(nn,knt).gt.0) write(io8,*) n_xiv, k_d(nn,knt)
  10119         enddo
  10120 c 
  10121         if(k_d(39,knt).gt.0) write(io8,*) '     >  180 ',k_d(39,knt)
  10122         if(k_d(40,knt).gt.0) write(io8,*) '     missing',k_d(40,knt)
  10123 c
  10124       else
  10125         write(io8,*)
  10126         write(io8,*) 'All wind direction innovations missing'
  10127       endif
  10128 c
  10129 c Output distribution of wind speed innovations
  10130 c ---------------------------------------------
  10131       if(knt_s(knt).gt.k_s(104,knt)) then
  10132 c
  10133         l_innov_miss = .false.
  10134 c
  10135         write(io8,*) 
  10136         write(io8,*) 'Distribution of Wind Speed Innovations (m/s)'
  10137         write(io8,*) '--------------------------------------------'
  10138         if(k_s(1,knt).gt.0)  write(io8,*) '      < -50 ',k_s(1,knt)
  10139 c
  10140         do nn=2,102
  10141           n_xiv = nn - 52
  10142           if(k_s(nn,knt).gt.0) write(io8,*) n_xiv, k_s(nn,knt)
  10143         enddo
  10144 c 
  10145         if(k_s(103,knt).gt.0) write(io8,*) '      >  50 ',k_s(103,knt)
  10146         if(k_s(104,knt).gt.0) write(io8,*) '     missing',k_s(104,knt)
  10147 c
  10148       else
  10149         write(io8,*)
  10150         write(io8,*) 'All wind speed innovations missing'
  10151       endif
  10152 c
  10153       return
  10154       end

Page 223         Source Listing                  INNOV_QC
2017-04-18 11:07 Entry Points                    acftobs_qc.f



ENTRY POINTS

  Name                 
                       
 innov_qc_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 AMISS                      Dummy  9950     R(4)            4           scalar   ARG,INOUT        10023,10045,10068                 
 C_QC                       Dummy  9951     CHAR            11    1     0        ARG,INOUT        10014,10015,10016,10017,10018,1003
                                                                                                  6,10037,10038,10039,10040,10058,10
                                                                                                  059,10060,10061,10062,10063       
 II                         Local  9961     I(4)            4           scalar                    10003,10005,10008,10009,10014,1001
                                                                                                  5,10016,10017,10018,10021,10023,10
                                                                                                  025,10027,10036,10037,10038,10039,
                                                                                                  10040,10043,10045,10047,10049,1005
                                                                                                  8,10059,10060,10061,10062,10063,10
                                                                                                  066,10068,10070,10072             
 INDX                       Dummy  9950     I(4)            4     1     0        ARG,INOUT        10003                             
 INNOV_QC                   Subr   9950                                                                                             
 IO8                        Dummy  9951     I(4)            4           scalar   ARG,INOUT        10007,10008,10009,10087,10088,1008
                                                                                                  9,10090,10094,10097,10098,10101,10
                                                                                                  102,10111,10112,10113,10114,10118,
                                                                                                  10121,10122,10125,10126,10135,1013
                                                                                                  6,10137,10138,10142,10145,10146,10
                                                                                                  149,10150                         
 IOB                        Local  9961     I(4)            4           scalar                    10002,10003                       
 KNT                        Dummy  9951     I(4)            4           scalar   ARG,INOUT        9989,9991,9993,9995,9996,9997,1002
                                                                                                  0,10024,10026,10028,10030,10042,10
                                                                                                  046,10048,10050,10052,10065,10069,
                                                                                                  10071,10073,10075,10083,10090,1009
                                                                                                  4,10097,10098,10107,10114,10118,10
                                                                                                  121,10122,10131,10138,10142,10145,
                                                                                                  10146                             
 KNT_D                      Local  9970     I(4)            4     1     2                         9996,10042,10107                  
 KNT_S                      Local  9971     I(4)            4     1     2                         9997,10065,10131                  
 KNT_T                      Local  9969     I(4)            4     1     2                         9995,10020,10083                  
 K_D                        Local  9973     I(4)            4     2     80                        9991,10046,10048,10050,10052,10107
                                                                                                  ,10114,10118,10121,10122          
 K_S                        Local  9974     I(4)            4     2     208                       9993,10069,10071,10073,10075,10131
                                                                                                  ,10138,10142,10145,10146          
 K_T                        Local  9972     I(4)            4     2     208                       9989,10024,10026,10028,10030,10083
                                                                                                  ,10090,10094,10097,10098          
 L_INIT                     Dummy  9951     L(4)            4           scalar   ARG,INOUT        9988                              
 L_INNOV_MISS               Dummy  9951     L(4)            4           scalar   ARG,INOUT        9984,10085,10109,10133            
 MAX_REPS                   Dummy  9950     I(4)            4           scalar   ARG,INOUT        9966,9967,9968,9975,9977          
 NINT                       Func   10005                                scalar                    10005,10021,10043,10066           
 NN                         Local  9961     I(4)            4           scalar                    10005,10006,10021,10030,10043,1005
                                                                                                  2,10066,10075,10092,10093,10094,10
                                                                                                  116,10117,10118,10140,10141,10142 
 NUMREPS                    Dummy  9950     I(4)            4           scalar   ARG,INOUT        10002                             
 N_XIV                      Local  9962     I(4)            4           scalar                    10093,10094,10117,10118,10141,1014

Page 224         Source Listing                  INNOV_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  2                                 
 XIV_D                      Dummy  9950     R(4)            4     1     0        ARG,INOUT        10043,10045,10047,10049           
 XIV_S                      Dummy  9950     R(4)            4     1     0        ARG,INOUT        10066,10068,10070,10072           
 XIV_T                      Dummy  9950     R(4)            4     1     0        ARG,INOUT        10005,10009,10021,10023,10025,1002
                                                                                                  7                                 

Page 225         Source Listing                  INNOV_QC
2017-04-18 11:07                                 acftobs_qc.f

  10155 c
  10156 c ###################################################################
  10157 c                            subroutine benford_qc
  10158 c ###################################################################
  10159 c
  10160       subroutine benford_qc(max_reps,numreps,indx,xiv_t,xiv_d,xiv_s,
  10161      $           amiss,c_acftreg,itype,maxflt,kreg_tot,creg_reg_tot,
  10162      $           c_qc,lead_t_tot,lead_d_tot,lead_s_tot,
  10163      $           n_xiv_t,n_xiv_d,n_xiv_s,
  10164      $           sum_xiv_t,sum_xiv_d,sum_xiv_s,
  10165      $           sumabs_xiv_t,sumabs_xiv_d,sumabs_xiv_s,knt,io8
  10166      $,          l_init,l_last)
  10167 c
  10168 c Compute leading digit distributions to compare with Benford's law
  10169 c
  10170       implicit none
  10171 c
  10172 c     Work arrays
  10173 c     -----------
  10174       integer      io8                 ! i/o unit number for log file
  10175       integer      ii,jj,mm,iob,nid    ! do loop indices
  10176       integer      max_reps            ! maximum number of observations allowed
  10177       integer      numreps             ! actual number of reports
  10178      $,            lead                ! value of leading digit
  10179       integer      indx(max_reps)      ! pointer index for reports
  10180       real         amiss               ! missing value flag (real)
  10181       real         xiv_t(max_reps)     ! temperature innovation (ob - bk)
  10182      $,            xiv_d(max_reps)     ! wind direction innovation (ob - bk)
  10183      $,            xiv_s(max_reps)     ! wind speed innovation (ob - bk)
  10184       integer      itype(max_reps)     ! type of aircraft data
  10185       character*8  c_acftreg(max_reps) ! tail numbers
  10186 c
  10187       character*11 c_qc(max_reps)      ! qc flags
  10188 c
  10189       integer      maxflt              ! maximum number of tail numbers
  10190      $,            kreg_tot            ! number of unique tail numbers
  10191      $,            knt                 ! counter for first or second time benford is called
  10192      $,            ktype               ! instrument type
  10193       character*8  creg_reg_tot(maxflt)     ! master list of tail numbers
  10194       integer      lead_t_tot(maxflt,11,2)  ! distribution of temperature innovation leading digits
  10195      $,            lead_d_tot(maxflt,11,2)  ! distribution of wind direction innovation leading digits
  10196      $,            lead_s_tot(maxflt,11,2)  ! distribution of wind speed innovation leading digits
  10197      $,            lead_t_sum(11,2)    ! overall distribution of temperature innovations
  10198      $,            lead_d_sum(11,2)    ! overall distribution of wind direction innovations
  10199      $,            lead_s_sum(11,2)    ! overall distribution of wind speed innovations
  10200      $,            lead_t_typ(5,11,2)  ! distribution of temperature innovations by instrument type
  10201      $,            lead_d_typ(5,11,2)  ! distribution of wind direction innovations by instrument type
  10202      $,            lead_s_typ(5,11,2)  ! distribution of wind speed innovations by instrument type
  10203      $,            lead_t_reg(33,11,2) ! distribution of temperature innovations by tail number group
  10204      $,            lead_d_reg(33,11,2) ! distribution of wind direction innovations by tail number group
  10205      $,            lead_s_reg(33,11,2) ! distribution of wind speed innovations by tail number group
  10206      $,            n_xiv_t(maxflt,2)   ! number of temperature innovations
  10207      $,            n_xiv_d(maxflt,2)   ! number of wind direction innovations
  10208      $,            n_xiv_s(maxflt,2)   ! number of wind speed innovations
  10209      $,            ntot_xiv_t(2)       ! total number of temperature innovations
  10210      $,            ntot_xiv_d(2)       ! total number of wind direction innovations
  10211      $,            ntot_xiv_s(2)       ! total number of wind speed innovations

Page 226         Source Listing                  BENFORD_QC
2017-04-18 11:07                                 acftobs_qc.f

  10212      $,            ntyp_xiv_t(5,2)     ! number of temperature innovations by instrument type
  10213      $,            ntyp_xiv_d(5,2)     ! number of wind direction innovations by instrument type
  10214      $,            ntyp_xiv_s(5,2)     ! number of wind speed innovations by instrument type
  10215      $,            ntot_t_reg(33,2)    ! total number of innovations by tail number type
  10216      $,            ntot_d_reg(33,2)    ! total number of innovations by tail number type
  10217      $,            ntot_s_reg(33,2)    ! total number of innovations by tail number type
  10218       real         sum_xiv_t(maxflt,2) ! sum of temperature innovations
  10219      $,            sum_xiv_d(maxflt,2) ! sum of wind direction innovations
  10220      $,            sum_xiv_s(maxflt,2) ! sum of wind speed innovations
  10221      $,            sumabs_xiv_t(maxflt,2)   ! sum of absolute value of temperature innovations
  10222      $,            sumabs_xiv_d(maxflt,2)   ! sum of absolute value of wind direction innovations
  10223      $,            sumabs_xiv_s(maxflt,2)   ! sum of absolute value of wind speed innovations
  10224      $,            avg                 ! average innovation
  10225      $,            avgabs              ! absolute average innovation
  10226      $,            avg_lead(11)        ! average number of innovations per leading digit
  10227 c
  10228       integer      insty_ob_fun        ! function to convert character
  10229                                        !   instrument type to integer
  10230 c
  10231       character*12 c_lead              ! character form of xiv
  10232       character*8  c_label(5)          ! label for output
  10233       character*2  c_reg_list(33)      ! Tail number ids used to summarize stats
  10234       logical      l_init              ! initialize variables if true
  10235      $,            l_last              ! true if last time subroutine is called
  10236 c
  10237 ccccdak      data c_label/'MDCRS   ','ACARS   ','AMDAR   ',
  10238       data c_label/'MDCRS   ','TAMDAR  ','AMDAR   ',
  10239      $             'AIREP   ','manAIREP'/
  10240 c
  10241       data c_reg_list/'AN','AR','BA','EU','IT','KL','LH','MK','NZ','QF'
  10242      $,               'SA','SK','SV'
  10243      $,               '13','L3','IC','YC','0I','EI','KI','UI','2M','IR'
  10244      $,               'YR','AS','JT','AU','GU','WU','FV','QV','VV','YW'/
  10245 c
  10246 c # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  10247 c
  10248 c Initialize leading digit arrays
  10249 c -------------------------------
  10250       if(l_init) then
  10251         ntot_xiv_t(1) = 0
  10252         ntot_xiv_d(1) = 0
  10253         ntot_xiv_s(1) = 0
  10254         ntot_xiv_t(2) = 0
  10255         ntot_xiv_d(2) = 0
  10256         ntot_xiv_s(2) = 0
  10257 c
  10258         sum_xiv_t(1:kreg_tot,:) = 0.0
  10259         sum_xiv_d(1:kreg_tot,:) = 0.0
  10260         sum_xiv_s(1:kreg_tot,:) = 0.0
  10261         sumabs_xiv_t(1:kreg_tot,:) = 0.0
  10262         sumabs_xiv_d(1:kreg_tot,:) = 0.0
  10263         sumabs_xiv_s(1:kreg_tot,:) = 0.0
  10264         n_xiv_t(1:kreg_tot,:) = 0
  10265         n_xiv_d(1:kreg_tot,:) = 0
  10266         n_xiv_s(1:kreg_tot,:) = 0
  10267 c
  10268         lead_t_tot(1:kreg_tot,:,:) = 0

Page 227         Source Listing                  BENFORD_QC
2017-04-18 11:07                                 acftobs_qc.f

  10269         lead_d_tot(1:kreg_tot,:,:) = 0
  10270         lead_s_tot(1:kreg_tot,:,:) = 0
  10271 c
  10272         lead_t_sum = 0
  10273         lead_d_sum = 0
  10274         lead_s_sum = 0
  10275       endif
  10276 c
  10277 c Loop over reports
  10278 c -----------------
  10279       do iob=1,numreps
  10280         ii = indx(iob)
  10281 c
  10282 c       Determine the instrument type
  10283 c       -----------------------------
  10284         if(itype(ii).eq.insty_ob_fun('mdcrs').or.
  10285      $     itype(ii).eq.insty_ob_fun('mdcrs_lvl').or.
  10286      $     itype(ii).eq.insty_ob_fun('mdcrs_asc').or.
  10287      $     itype(ii).eq.insty_ob_fun('mdcrs_des')) then
  10288           ktype = 1
  10289 c
  10290         elseif(itype(ii).eq.insty_ob_fun('acars').or.
  10291      $         itype(ii).eq.insty_ob_fun('acars_lvl').or.
  10292      $         itype(ii).eq.insty_ob_fun('acars_asc').or.
  10293      $         itype(ii).eq.insty_ob_fun('acars_des')) then
  10294           ktype = 2
  10295 c
  10296         elseif(itype(ii).eq.insty_ob_fun('amdar').or. 
  10297      $         itype(ii).eq.insty_ob_fun('amdar_lvl').or.
  10298      $         itype(ii).eq.insty_ob_fun('amdar_asc').or.
  10299      $         itype(ii).eq.insty_ob_fun('amdar_des')) then
  10300           ktype = 3
  10301 c
  10302         elseif(itype(ii).eq.insty_ob_fun('airep').or.
  10303      $         itype(ii).eq.insty_ob_fun('airep_lvl').or.
  10304      $         itype(ii).eq.insty_ob_fun('airep_asc').or.
  10305      $         itype(ii).eq.insty_ob_fun('airep_des')) then
  10306           ktype = 4
  10307 c
  10308         elseif(itype(ii).eq.insty_ob_fun('man-airep').or.
  10309      $         itype(ii).eq.insty_ob_fun('man-Yairep')) then
  10310           ktype = 5
  10311         endif
  10312 c
  10313 c Find this tail number in the master list
  10314 c ----------------------------------------
  10315         do mm=1,kreg_tot
  10316 c
  10317           if(c_acftreg(ii)(1:8).eq.creg_reg_tot(mm)(1:8)) then
  10318 c            write(io8,*)
  10319 c            write(io8,*) 'Tail number found in master list at mm = ',mm
  10320 c
  10321 c Compute leading digit distribution for temperature innovations
  10322 c --------------------------------------------------------------
  10323             if(c_qc(ii)(6:6).ne.'B'.and.
  10324      $         c_qc(ii)(6:6).ne.'E'.and.
  10325      $         c_qc(ii)(6:6).ne.'I'.and.

Page 228         Source Listing                  BENFORD_QC
2017-04-18 11:07                                 acftobs_qc.f

  10326      $         c_qc(ii)(6:6).ne.'K'.and.
  10327      $         c_qc(ii)(6:6).ne.'b') then
  10328 c
  10329               if(xiv_t(ii).eq.amiss) then
  10330                 lead = 11
  10331               elseif(xiv_t(ii).eq.0.0) then
  10332                 lead = 10
  10333               else
  10334                 write(c_lead,'(e12.5)') xiv_t(ii)
  10335                 if(c_lead(2:2).eq.' '.or.
  10336      $             c_lead(2:2).eq.'0'.or.
  10337      $             c_lead(2:2).eq.'-') then
  10338                   lead = ichar(c_lead(4:4)) - 48
  10339                 else
  10340                   lead = ichar(c_lead(2:2)) - 48
  10341                   write(io8,*) '?',xiv_t(ii),c_lead,lead
  10342                 endif
  10343               endif
  10344 c
  10345 c              write(io8,*) '  ii = ',ii,' mm = ',mm
  10346 c              write(io8,*) '  xiv_t = ',xiv_t(ii),' lead = ',lead
  10347 c
  10348               lead_t_tot(mm,lead,knt) = lead_t_tot(mm,lead,knt) + 1
  10349               lead_t_sum(lead,knt)    = lead_t_sum(lead,knt)    + 1
  10350               lead_t_typ(ktype,lead,knt) = 
  10351      $            lead_t_typ(ktype,lead,knt) + 1
  10352 c
  10353               if(itype(ii).eq.insty_ob_fun('amdar').or. 
  10354      $           itype(ii).eq.insty_ob_fun('amdar_lvl').or.
  10355      $           itype(ii).eq.insty_ob_fun('amdar_asc').or.
  10356      $           itype(ii).eq.insty_ob_fun('amdar_des')) then
  10357 c
  10358                 nid = 1
  10359                 do while(nid.le.13)
  10360                   if(c_acftreg(ii)(1:2).eq.c_reg_list(nid)(1:2)) then
  10361                     lead_t_reg(nid,lead,knt) = 
  10362      $                  lead_t_reg(nid,lead,knt)+1
  10363                     if(lead.ne.11) 
  10364      $                ntot_t_reg(nid,knt) = ntot_t_reg(nid,knt) + 1
  10365                     nid = 14
  10366                   else
  10367                     nid = nid + 1
  10368                   endif
  10369                 enddo
  10370 c
  10371               elseif(itype(ii).eq.insty_ob_fun('mdcrs').or.
  10372      $               itype(ii).eq.insty_ob_fun('mdcrs_lvl').or.
  10373      $               itype(ii).eq.insty_ob_fun('mdcrs_asc').or.
  10374      $               itype(ii).eq.insty_ob_fun('mdcrs_des').or.
  10375      $               itype(ii).eq.insty_ob_fun('acars').or.
  10376      $               itype(ii).eq.insty_ob_fun('acars_lvl').or.
  10377      $               itype(ii).eq.insty_ob_fun('acars_asc').or.
  10378      $               itype(ii).eq.insty_ob_fun('acars_des')) then
  10379 c
  10380                 nid = 14
  10381                 do while(nid.le.33)
  10382                   if(c_acftreg(ii)(4:5).eq.c_reg_list(nid)(1:2)) then

Page 229         Source Listing                  BENFORD_QC
2017-04-18 11:07                                 acftobs_qc.f

  10383                     lead_t_reg(nid,lead,knt) = 
  10384      $                  lead_t_reg(nid,lead,knt) + 1
  10385                     if(lead.ne.11) 
  10386      $                ntot_t_reg(nid,knt) = ntot_t_reg(nid,knt) + 1
  10387                     nid = 34
  10388                   else
  10389                     nid = nid + 1
  10390                   endif
  10391                 enddo
  10392               endif
  10393 c
  10394               if(lead.ne.11) then
  10395                 sum_xiv_t(mm,knt) = sum_xiv_t(mm,knt) + xiv_t(ii)
  10396                 sumabs_xiv_t(mm,knt) = sumabs_xiv_t(mm,knt) 
  10397      $                               + abs(xiv_t(ii))
  10398                 n_xiv_t(mm,knt) = n_xiv_t(mm,knt) + 1
  10399                 ntot_xiv_t(knt) = ntot_xiv_t(knt) + 1
  10400                 ntyp_xiv_t(ktype,knt) = ntyp_xiv_t(ktype,knt) + 1
  10401               endif
  10402 c
  10403 c              write(io8,*) 'lead_t_tot = ',(lead_t_tot(mm,jj,knt),jj=1,11)
  10404 c
  10405             endif
  10406 c
  10407 c
  10408 c Compute leading digit distribution for wind direction innovations
  10409 c -----------------------------------------------------------------
  10410             if(c_qc(ii)(7:7).ne.'S'.and.
  10411      $         c_qc(ii)(7:7).ne.'E'.and.
  10412      $         c_qc(ii)(7:7).ne.'K'.and.
  10413      $         c_qc(ii)(7:7).ne.'B'.and.
  10414      $         c_qc(ii)(7:7).ne.'I') then
  10415 c
  10416               if(xiv_d(ii).eq.amiss) then
  10417                 lead = 11
  10418               elseif(xiv_d(ii).eq.0.0) then
  10419                 lead = 10
  10420               else
  10421                 write(c_lead,'(e12.5)') xiv_d(ii)
  10422                 if(c_lead(2:2).eq.' '.or.
  10423      $             c_lead(2:2).eq.'0'.or.
  10424      $             c_lead(2:2).eq.'-') then
  10425                   lead = ichar(c_lead(4:4)) - 48
  10426                 else
  10427                   lead = ichar(c_lead(2:2)) - 48
  10428                   write(io8,*) '?',xiv_d(ii),c_lead,lead
  10429                 endif
  10430               endif
  10431 c
  10432 c              write(io8,*) 'ii = ',ii,' mm = ',mm
  10433 c              write(io8,*) 'xiv_d = ',xiv_d(ii),' lead = ',lead
  10434 c
  10435               lead_d_tot(mm,lead,knt) = lead_d_tot(mm,lead,knt) + 1
  10436               lead_d_sum(lead,knt)    = lead_d_sum(lead,knt)    + 1
  10437               lead_d_typ(ktype,lead,knt) = 
  10438      $            lead_d_typ(ktype,lead,knt) + 1
  10439 c

Page 230         Source Listing                  BENFORD_QC
2017-04-18 11:07                                 acftobs_qc.f

  10440               if(itype(ii).eq.insty_ob_fun('amdar').or. 
  10441      $           itype(ii).eq.insty_ob_fun('amdar_lvl').or.
  10442      $           itype(ii).eq.insty_ob_fun('amdar_asc').or.
  10443      $           itype(ii).eq.insty_ob_fun('amdar_des')) then
  10444 c
  10445                 nid = 1
  10446                 do while(nid.le.13)
  10447                   if(c_acftreg(ii)(1:2).eq.c_reg_list(nid)(1:2)) then
  10448                     lead_d_reg(nid,lead,knt) = 
  10449      $                  lead_d_reg(nid,lead,knt) + 1
  10450                     if(lead.ne.11) 
  10451      $                ntot_d_reg(nid,knt) = ntot_d_reg(nid,knt) + 1
  10452                     nid = 14
  10453                   else
  10454                     nid = nid + 1
  10455                   endif
  10456                 enddo
  10457 c
  10458               elseif(itype(ii).eq.insty_ob_fun('mdcrs').or.
  10459      $               itype(ii).eq.insty_ob_fun('mdcrs_lvl').or.
  10460      $               itype(ii).eq.insty_ob_fun('mdcrs_asc').or.
  10461      $               itype(ii).eq.insty_ob_fun('mdcrs_des').or.
  10462      $               itype(ii).eq.insty_ob_fun('acars').or.
  10463      $               itype(ii).eq.insty_ob_fun('acars_lvl').or.
  10464      $               itype(ii).eq.insty_ob_fun('acars_asc').or.
  10465      $               itype(ii).eq.insty_ob_fun('acars_des')) then
  10466 c
  10467                 nid = 14
  10468                 do while(nid.le.33)
  10469                   if(c_acftreg(ii)(4:5).eq.c_reg_list(nid)(1:2)) then
  10470                     lead_d_reg(nid,lead,knt) = 
  10471      $                  lead_d_reg(nid,lead,knt) + 1
  10472                     if(lead.ne.11) 
  10473      $                ntot_d_reg(nid,knt) = ntot_d_reg(nid,knt) + 1
  10474                     nid = 34
  10475                   else
  10476                     nid = nid + 1
  10477                   endif
  10478                 enddo
  10479               endif
  10480 c
  10481               if(lead.ne.11) then
  10482                 sum_xiv_d(mm,knt) = sum_xiv_d(mm,knt) + xiv_d(ii)
  10483                 sumabs_xiv_d(mm,knt) = sumabs_xiv_d(mm,knt) 
  10484      $                               + abs(xiv_d(ii))
  10485                 n_xiv_d(mm,knt) = n_xiv_d(mm,knt) + 1
  10486                 ntot_xiv_d(knt) = ntot_xiv_d(knt) + 1
  10487                 ntyp_xiv_d(ktype,knt) = ntyp_xiv_d(ktype,knt) + 1
  10488               endif
  10489 c
  10490 c              write(io8,*) 'lead_d_tot = ',(lead_d_tot(mm,jj,knt),jj=1,11)
  10491 c
  10492             endif
  10493 c
  10494 c Compute leading digit distribution for wind speed innovations
  10495 c -------------------------------------------------------------
  10496             if(c_qc(ii)(8:8).ne.'S'.and.

Page 231         Source Listing                  BENFORD_QC
2017-04-18 11:07                                 acftobs_qc.f

  10497      $         c_qc(ii)(8:8).ne.'E'.and.
  10498      $         c_qc(ii)(8:8).ne.'K'.and.
  10499      $         c_qc(ii)(8:8).ne.'B'.and.
  10500      $         c_qc(ii)(8:8).ne.'A'.and.
  10501      $         c_qc(ii)(8:8).ne.'I') then
  10502 c
  10503               if(xiv_s(ii).eq.amiss) then
  10504                 lead = 11
  10505               elseif(xiv_s(ii).eq.0.0) then
  10506                 lead = 10
  10507               else
  10508                 write(c_lead,'(e12.5)') xiv_s(ii)
  10509                 if(c_lead(2:2).eq.' '.or.
  10510      $             c_lead(2:2).eq.'0'.or.
  10511      $             c_lead(2:2).eq.'-') then
  10512                   lead = ichar(c_lead(4:4)) - 48
  10513                 else
  10514                   lead = ichar(c_lead(2:2)) - 48
  10515                   write(io8,*) '?',xiv_s(ii),c_lead,lead
  10516                 endif
  10517               endif
  10518 c
  10519 c              write(io8,*) 'ii = ',ii,' mm = ',mm
  10520 c              write(io8,*) 'xiv_s = ',xiv_s(ii),' lead = ',lead
  10521 c
  10522               lead_s_tot(mm,lead,knt) = lead_s_tot(mm,lead,knt) + 1
  10523               lead_s_sum(lead,knt)    = lead_s_sum(lead,knt)    + 1
  10524               lead_s_typ(ktype,lead,knt) = 
  10525      $            lead_s_typ(ktype,lead,knt) + 1
  10526 c
  10527               if(itype(ii).eq.insty_ob_fun('amdar').or. 
  10528      $           itype(ii).eq.insty_ob_fun('amdar_lvl').or.
  10529      $           itype(ii).eq.insty_ob_fun('amdar_asc').or.
  10530      $           itype(ii).eq.insty_ob_fun('amdar_des')) then
  10531 c
  10532                 nid = 1
  10533                 do while(nid.le.13)
  10534                   if(c_acftreg(ii)(1:2).eq.c_reg_list(nid)(1:2)) then
  10535                     lead_s_reg(nid,lead,knt) = 
  10536      $                  lead_s_reg(nid,lead,knt) + 1
  10537                     if(lead.ne.11) 
  10538      $                ntot_s_reg(nid,knt) = ntot_s_reg(nid,knt) + 1
  10539                     nid = 14
  10540                   else
  10541                     nid = nid + 1
  10542                   endif
  10543                 enddo
  10544 c
  10545               elseif(itype(ii).eq.insty_ob_fun('mdcrs').or.
  10546      $               itype(ii).eq.insty_ob_fun('mdcrs_lvl').or.
  10547      $               itype(ii).eq.insty_ob_fun('mdcrs_asc').or.
  10548      $               itype(ii).eq.insty_ob_fun('mdcrs_des').or.
  10549      $               itype(ii).eq.insty_ob_fun('acars').or.
  10550      $               itype(ii).eq.insty_ob_fun('acars_lvl').or.
  10551      $               itype(ii).eq.insty_ob_fun('acars_asc').or.
  10552      $               itype(ii).eq.insty_ob_fun('acars_des')) then
  10553 c

Page 232         Source Listing                  BENFORD_QC
2017-04-18 11:07                                 acftobs_qc.f

  10554                 nid = 14
  10555                 do while(nid.le.33)
  10556                   if(c_acftreg(ii)(4:5).eq.c_reg_list(nid)(1:2)) then
  10557                     lead_s_reg(nid,lead,knt) = 
  10558      $                  lead_s_reg(nid,lead,knt) + 1
  10559                     if(lead.ne.11) 
  10560      $                ntot_s_reg(nid,knt) = ntot_s_reg(nid,knt) + 1
  10561                     nid = 34
  10562                   else
  10563                     nid = nid + 1
  10564                   endif
  10565                 enddo
  10566               endif
  10567 c
  10568               if(lead.ne.11) then
  10569                 sum_xiv_s(mm,knt) = sum_xiv_s(mm,knt) + xiv_s(ii)
  10570                 sumabs_xiv_s(mm,knt) = sumabs_xiv_s(mm,knt) 
  10571      $                               + abs(xiv_s(ii))
  10572                 n_xiv_s(mm,knt) = n_xiv_s(mm,knt) + 1
  10573                 ntot_xiv_s(knt) = ntot_xiv_s(knt) + 1
  10574                 ntyp_xiv_s(ktype,knt) = ntyp_xiv_s(ktype,knt) + 1
  10575               endif
  10576 c
  10577 c              write(io8,*) 'lead_s_tot = ',(lead_s_tot(mm,jj,knt),jj=1,11)
  10578 c
  10579             endif
  10580           endif
  10581         enddo
  10582       enddo
  10583 c
  10584 c Output results
  10585 c --------------
  10586       if(l_last) then
  10587       write(io8,*)
  10588       write(io8,*) 'Temperature statistics'
  10589       write(io8,*) '----------------------'
  10590       write(io8,'(''                     leading digit distribution'')')
  10591       write(io8,'('' Tail#         1     2     3     4     5     6    ''
  10592      $,           '' 7     8     9     0   amiss    tot  avg avgabs'')')
  10593       write(io8,'(''--------------------------------------------------''
  10594      $,           ''-----------------------------------------------'')')
  10595       
  10596 c
  10597       do mm=1,kreg_tot
  10598         if(n_xiv_t(mm,knt).ne.0) then
  10599           if(sum_xiv_t(mm,knt).ne.0.0) then
  10600             avg = sum_xiv_t(mm,knt) / float(n_xiv_t(mm,knt))
  10601           else
  10602             avg = 0.0
  10603           endif
  10604           if(sumabs_xiv_t(mm,knt).ne.0.0) then
  10605             avgabs = sumabs_xiv_t(mm,knt) / float(n_xiv_t(mm,knt))
  10606           else
  10607             avgabs = 0.0
  10608           endif
  10609           avg_lead = float(lead_t_tot(mm,:,knt))
  10610      $                   / float(n_xiv_t(mm,knt)) * 100.0

Page 233         Source Listing                  BENFORD_QC
2017-04-18 11:07                                 acftobs_qc.f

  10611 c
  10612           write(io8,'(1x,a8,1x,11i6,i7,2f7.2)')
  10613      $      creg_reg_tot(mm),(lead_t_tot(mm,lead,knt),lead=1,11),
  10614      $      n_xiv_t(mm,knt),avg,avgabs
  10615           write(io8,'(1x,8x,1x,11f6.1)') (avg_lead(lead),lead=1,11)
  10616         endif
  10617       enddo
  10618 c
  10619       write(io8,*)
  10620       do jj=1,33
  10621         if(ntot_t_reg(jj,knt).ne.0) then
  10622           avg_lead = float(lead_t_reg(jj,:,knt))
  10623      $                   / float(ntot_t_reg(jj,knt)) * 100.0
  10624 c
  10625           write(io8,'(1x,a8,1x,11i6,i7)')
  10626      $      c_reg_list(jj),(lead_t_reg(jj,lead,knt),lead=1,11),
  10627      $      ntot_t_reg(jj,knt)
  10628           write(io8,'(1x,8x,1x,11f6.1)') (avg_lead(lead),lead=1,11)
  10629         endif
  10630       enddo
  10631 c
  10632       write(io8,*)
  10633       do ktype=1,5
  10634         if(ntyp_xiv_t(ktype,knt).ne.0) then
  10635           avg_lead = float(lead_t_typ(ktype,:,knt))
  10636      $                   / float(ntyp_xiv_t(ktype,knt)) * 100.0
  10637 c
  10638           write(io8,'(1x,a8,1x,11i6,i7)')
  10639      $      c_label(ktype),(lead_t_typ(ktype,lead,knt),lead=1,11),
  10640      $      ntyp_xiv_t(ktype,knt)
  10641           write(io8,'(1x,8x,1x,11f6.1)') (avg_lead(lead),lead=1,11)
  10642         endif
  10643       enddo
  10644 c
  10645       write(io8,*)
  10646       if(ntot_xiv_t(knt).ne.0) then
  10647         avg_lead = float(lead_t_sum(:,knt))
  10648      $                 / float(ntot_xiv_t(knt)) * 100.0
  10649 c
  10650         write(io8,'(1x,''Overall '',1x,11i6,i7)')
  10651      $    (lead_t_sum(lead,knt),lead=1,11),
  10652      $    ntot_xiv_t(knt)
  10653         write(io8,'(1x,8x,1x,11f6.1)') (avg_lead(lead),lead=1,11)
  10654       endif
  10655 c
  10656       write(io8,*)
  10657       write(io8,*) 'Wind direction statistics'
  10658       write(io8,*) '-------------------------'
  10659       write(io8,'(''                     leading digit distribution'')')
  10660       write(io8,'('' Tail#         1     2     3     4     5     6    ''
  10661      $,           '' 7     8     9     0   amiss    tot  avg avgabs'')')
  10662       write(io8,'(''--------------------------------------------------''
  10663      $,           ''-----------------------------------------------'')')
  10664 c
  10665       do mm=1,kreg_tot
  10666         if(n_xiv_d(mm,knt).ne.0) then
  10667           if(sum_xiv_d(mm,knt).ne.0.0) then

Page 234         Source Listing                  BENFORD_QC
2017-04-18 11:07                                 acftobs_qc.f

  10668             avg = sum_xiv_d(mm,knt) / float(n_xiv_d(mm,knt))
  10669           else
  10670             avg = 0.0
  10671           endif
  10672           if(sumabs_xiv_d(mm,knt).ne.0.0) then
  10673             avgabs = sumabs_xiv_d(mm,knt) / float(n_xiv_d(mm,knt))
  10674           else
  10675             avgabs = 0.0
  10676           endif
  10677           avg_lead = float(lead_d_tot(mm,:,knt))
  10678      $                   / float(n_xiv_d(mm,knt)) * 100.0
  10679 c
  10680           write(io8,'(1x,a8,1x,11i6,i7,2f7.2)')
  10681      $      creg_reg_tot(mm),(lead_d_tot(mm,lead,knt),lead=1,11),
  10682      $      n_xiv_d(mm,knt),avg,avgabs
  10683           write(io8,'(1x,8x,1x,11f6.1)') (avg_lead(lead),lead=1,11)
  10684         endif
  10685       enddo
  10686 c
  10687       write(io8,*)
  10688       do jj=1,33
  10689         if(ntot_d_reg(jj,knt).ne.0) then
  10690           avg_lead = float(lead_d_reg(jj,:,knt))
  10691      $                   / float(ntot_d_reg(jj,knt)) * 100.0
  10692 c
  10693           write(io8,'(1x,a8,1x,11i6,i7)')
  10694      $      c_reg_list(jj),(lead_d_reg(jj,lead,knt),lead=1,11),
  10695      $      ntot_d_reg(jj,knt)
  10696           write(io8,'(1x,8x,1x,11f6.1)') (avg_lead(lead),lead=1,11)
  10697         endif
  10698       enddo
  10699 c
  10700       write(io8,*)
  10701       do ktype=1,5
  10702         if(ntyp_xiv_d(ktype,knt).ne.0) then
  10703           avg_lead = float(lead_d_typ(ktype,:,knt))
  10704      $                   / float(ntyp_xiv_d(ktype,knt)) * 100.0
  10705 c
  10706           write(io8,'(1x,a8,1x,11i6,i7)')
  10707      $      c_label(ktype),(lead_d_typ(ktype,lead,knt),lead=1,11),
  10708      $      ntyp_xiv_d(ktype,knt)
  10709           write(io8,'(1x,8x,1x,11f6.1)') (avg_lead(lead),lead=1,11)
  10710         endif
  10711       enddo
  10712 c
  10713       write(io8,*)
  10714       if(ntot_xiv_d(knt).ne.0) then
  10715         avg_lead = float(lead_d_sum(:,knt))
  10716      $                 / float(ntot_xiv_d(knt)) * 100.0
  10717 c
  10718         write(io8,'(1x,''Overall '',1x,11i6,i7)')
  10719      $    (lead_d_sum(lead,knt),lead=1,11),
  10720      $    ntot_xiv_d(knt)
  10721         write(io8,'(1x,8x,1x,11f6.1)') (avg_lead(lead),lead=1,11)
  10722       endif
  10723 c
  10724       write(io8,*)

Page 235         Source Listing                  BENFORD_QC
2017-04-18 11:07                                 acftobs_qc.f

  10725       write(io8,*) 'Wind speed statistics'
  10726       write(io8,*) '---------------------'
  10727       write(io8,'(''                     leading digit distribution'')')
  10728       write(io8,'('' Tail#         1     2     3     4     5     6    ''
  10729      $,           '' 7     8     9     0   amiss    tot  avg avgabs'')')
  10730       write(io8,'(''--------------------------------------------------''
  10731      $,           ''-----------------------------------------------'')')
  10732 c
  10733       do mm=1,kreg_tot
  10734         if(n_xiv_s(mm,knt).ne.0) then
  10735           if(sum_xiv_s(mm,knt).ne.0.0) then
  10736             avg = sum_xiv_s(mm,knt) / float(n_xiv_s(mm,knt))
  10737           else
  10738             avg = 0.0
  10739           endif
  10740           if(sumabs_xiv_s(mm,knt).ne.0.0) then
  10741             avgabs = sumabs_xiv_s(mm,knt) / float(n_xiv_s(mm,knt))
  10742           else
  10743             avgabs = 0.0
  10744           endif
  10745           avg_lead = float(lead_s_tot(mm,:,knt))
  10746      $                   / float(n_xiv_s(mm,knt)) * 100.0
  10747 c
  10748           write(io8,'(1x,a8,1x,11i6,i7,2f7.2)')
  10749      $      creg_reg_tot(mm),(lead_s_tot(mm,lead,knt),lead=1,11),
  10750      $      n_xiv_s(mm,knt),avg,avgabs
  10751           write(io8,'(1x,8x,1x,11f6.1)') (avg_lead(lead),lead=1,11)
  10752         endif
  10753       enddo
  10754 c
  10755       write(io8,*)
  10756       do jj=1,33
  10757         if(ntot_s_reg(jj,knt).ne.0) then
  10758           avg_lead = float(lead_s_reg(jj,:,knt))
  10759      $                   / float(ntot_s_reg(jj,knt)) * 100.0
  10760 c
  10761           write(io8,'(1x,a8,1x,11i6,i7)')
  10762      $      c_reg_list(jj),(lead_s_reg(jj,lead,knt),lead=1,11),
  10763      $      ntot_s_reg(jj,knt)
  10764           write(io8,'(1x,8x,1x,11f6.1)') (avg_lead(lead),lead=1,11)
  10765         endif
  10766       enddo
  10767 c
  10768       write(io8,*)
  10769       do ktype=1,5
  10770         if(ntyp_xiv_s(ktype,knt).ne.0) then
  10771           avg_lead = float(lead_s_typ(ktype,:,knt))
  10772      $                   / float(ntyp_xiv_s(ktype,knt)) * 100.0
  10773 c
  10774           write(io8,'(1x,a8,1x,11i6,i7)')
  10775      $      c_label(ktype),(lead_s_typ(ktype,lead,knt),lead=1,11),
  10776      $      ntyp_xiv_s(ktype,knt)
  10777           write(io8,'(1x,8x,1x,11f6.1)') (avg_lead(lead),lead=1,11)
  10778         endif
  10779       enddo
  10780 c
  10781       write(io8,*)

Page 236         Source Listing                  BENFORD_QC
2017-04-18 11:07                                 acftobs_qc.f

  10782       if(ntot_xiv_s(knt).ne.0) then
  10783         avg_lead = float(lead_s_sum(:,knt))
  10784      $                 / float(ntot_xiv_s(knt)) * 100.0
  10785 c
  10786         write(io8,'(1x,''Overall '',1x,11i6,i7)')
  10787      $    (lead_s_sum(lead,knt),lead=1,11),
  10788      $    ntot_xiv_s(knt)
  10789         write(io8,'(1x,8x,1x,11f6.1)') (avg_lead(lead),lead=1,11)
  10790       endif
  10791       endif
  10792 c
  10793       return
  10794       end


ENTRY POINTS

  Name                   
                         
 benford_qc_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ABS                        Func   10397                                scalar                    10397,10484,10571                 
 AMISS                      Dummy  10161    R(4)            4           scalar   ARG,INOUT        10329,10416,10503                 
 AVG                        Local  10224    R(4)            4           scalar                    10600,10602,10614,10668,10670,1068
                                                                                                  2,10736,10738,10750               
 AVGABS                     Local  10225    R(4)            4           scalar                    10605,10607,10614,10673,10675,1068
                                                                                                  2,10741,10743,10750               
 AVG_LEAD                   Local  10226    R(4)            4     1     11                        10609,10615,10622,10628,10635,1064
                                                                                                  1,10647,10653,10677,10683,10690,10
                                                                                                  696,10703,10709,10715,10721,10745,
                                                                                                  10751,10758,10764,10771,10777,1078
                                                                                                  3,10789                           
 BENFORD_QC                 Subr   10160                                                                                            
 CREG_REG_TOT               Dummy  10161    CHAR            8     1     0        ARG,INOUT        10317,10613,10681,10749           
 C_ACFTREG                  Dummy  10161    CHAR            8     1     0        ARG,INOUT        10317,10360,10382,10447,10469,1053
                                                                                                  4,10556                           
 C_LABEL                    Local  10232    CHAR            8     1     5                         10238,10639,10707,10775           
 C_LEAD                     Local  10231    CHAR            12          scalar                    10334,10335,10336,10337,10338,1034
                                                                                                  0,10341,10421,10422,10423,10424,10
                                                                                                  425,10427,10428,10508,10509,10510,
                                                                                                  10511,10512,10514,10515           
 C_QC                       Dummy  10162    CHAR            11    1     0        ARG,INOUT        10323,10324,10325,10326,10327,1041
                                                                                                  0,10411,10412,10413,10414,10496,10
                                                                                                  497,10498,10499,10500,10501       
 C_REG_LIST                 Local  10233    CHAR            2     1     33                        10241,10360,10382,10447,10469,1053
                                                                                                  4,10556,10626,10694,10762         
 FLOAT                      Func   10600                                scalar                    10600,10605,10609,10610,10622,1062
                                                                                                  3,10635,10636,10647,10648,10668,10
                                                                                                  673,10677,10678,10690,10691,10703,
                                                                                                  10704,10715,10716,10736,10741,1074
                                                                                                  5,10746,10758,10759,10771,10772,10
                                                                                                  783,10784                         

Page 237         Source Listing                  BENFORD_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ICHAR                      Func   10338                                scalar                    10338,10340,10425,10427,10512,1051
                                                                                                  4                                 
 II                         Local  10175    I(4)            4           scalar                    10280,10284,10285,10286,10287,1029
                                                                                                  0,10291,10292,10293,10296,10297,10
                                                                                                  298,10299,10302,10303,10304,10305,
                                                                                                  10308,10309,10317,10323,10324,1032
                                                                                                  5,10326,10327,10329,10331,10334,10
                                                                                                  341,10353,10354,10355,10356,10360,
                                                                                                  10371,10372,10373,10374,10375,1037
                                                                                                  6,10377,10378,10382,10395,10397,10
                                                                                                  410,10411,10412,10413,10414,10416,
                                                                                                  10418,10421,10428,10440,10441,1044
                                                                                                  2,10443,10447,10458,10459,10460,10
                                                                                                  461,10462,10463,10464,10465,10469,
                                                                                                  10482,10484,10496,10497,10498,1049
                                                                                                  9,10500,10501,10503,10505,10508,10
                                                                                                  515,10527,10528,10529,10530,10534,
                                                                                                  10545,10546,10547,10548,10549,1055
                                                                                                  0,10551,10552,10556,10569,10571   
 INDX                       Dummy  10160    I(4)            4     1     0        ARG,INOUT        10280                             
 INSTY_OB_FUN               Func   10228    I(4)            4           scalar                    10284,10285,10286,10287,10290,1029
                                                                                                  1,10292,10293,10296,10297,10298,10
                                                                                                  299,10302,10303,10304,10305,10308,
                                                                                                  10309,10353,10354,10355,10356,1037
                                                                                                  1,10372,10373,10374,10375,10376,10
                                                                                                  377,10378,10440,10441,10442,10443,
                                                                                                  10458,10459,10460,10461,10462,1046
                                                                                                  3,10464,10465,10527,10528,10529,10
                                                                                                  530,10545,10546,10547,10548,10549,
                                                                                                  10550,10551,10552                 
 IO8                        Dummy  10165    I(4)            4           scalar   ARG,INOUT        10341,10428,10515,10587,10588,1058
                                                                                                  9,10590,10591,10593,10612,10615,10
                                                                                                  619,10625,10628,10632,10638,10641,
                                                                                                  10645,10650,10653,10656,10657,1065
                                                                                                  8,10659,10660,10662,10680,10683,10
                                                                                                  687,10693,10696,10700,10706,10709,
                                                                                                  10713,10718,10721,10724,10725,1072
                                                                                                  6,10727,10728,10730,10748,10751,10
                                                                                                  755,10761,10764,10768,10774,10777,
                                                                                                  10781,10786,10789                 
 IOB                        Local  10175    I(4)            4           scalar                    10279,10280                       
 ITYPE                      Dummy  10161    I(4)            4     1     0        ARG,INOUT        10284,10285,10286,10287,10290,1029
                                                                                                  1,10292,10293,10296,10297,10298,10
                                                                                                  299,10302,10303,10304,10305,10308,
                                                                                                  10309,10353,10354,10355,10356,1037
                                                                                                  1,10372,10373,10374,10375,10376,10
                                                                                                  377,10378,10440,10441,10442,10443,
                                                                                                  10458,10459,10460,10461,10462,1046
                                                                                                  3,10464,10465,10527,10528,10529,10
                                                                                                  530,10545,10546,10547,10548,10549,
                                                                                                  10550,10551,10552                 
 JJ                         Local  10175    I(4)            4           scalar                    10620,10621,10622,10623,10626,1062
                                                                                                  7,10688,10689,10690,10691,10694,10
                                                                                                  695,10756,10757,10758,10759,10762,
                                                                                                  10763                             

Page 238         Source Listing                  BENFORD_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 KNT                        Dummy  10165    I(4)            4           scalar   ARG,INOUT        10348,10349,10350,10351,10361,1036
                                                                                                  2,10364,10383,10384,10386,10395,10
                                                                                                  396,10398,10399,10400,10435,10436,
                                                                                                  10437,10438,10448,10449,10451,1047
                                                                                                  0,10471,10473,10482,10483,10485,10
                                                                                                  486,10487,10522,10523,10524,10525,
                                                                                                  10535,10536,10538,10557,10558,1056
                                                                                                  0,10569,10570,10572,10573,10574,10
                                                                                                  598,10599,10600,10604,10605,10609,
                                                                                                  10610,10613,10614,10621,10622,1062
                                                                                                  3,10626,10627,10634,10635,10636,10
                                                                                                  639,10640,10646,10647,10648,10651,
                                                                                                  10652,10666,10667,10668,10672,1067
                                                                                                  3,10677,10678,10681,10682,10689,10
                                                                                                  690,10691,10694,10695,10702,10703,
                                                                                                  10704,10707,10708,10714,10715,1071
                                                                                                  6,10719,10720,10734,10735,10736,10
                                                                                                  740,10741,10745,10746,10749,10750,
                                                                                                  10757,10758,10759,10762,10763,1077
                                                                                                  0,10771,10772,10775,10776,10782,10
                                                                                                  783,10784,10787,10788             
 KREG_TOT                   Dummy  10161    I(4)            4           scalar   ARG,INOUT        10258,10259,10260,10261,10262,1026
                                                                                                  3,10264,10265,10266,10268,10269,10
                                                                                                  270,10315,10597,10665,10733       
 KTYPE                      Local  10192    I(4)            4           scalar                    10288,10294,10300,10306,10310,1035
                                                                                                  0,10351,10400,10437,10438,10487,10
                                                                                                  524,10525,10574,10633,10634,10635,
                                                                                                  10636,10639,10640,10701,10702,1070
                                                                                                  3,10704,10707,10708,10769,10770,10
                                                                                                  771,10772,10775,10776             
 LEAD                       Local  10178    I(4)            4           scalar                    10330,10332,10338,10340,10341,1034
                                                                                                  8,10349,10350,10351,10361,10362,10
                                                                                                  363,10383,10384,10385,10394,10417,
                                                                                                  10419,10425,10427,10428,10435,1043
                                                                                                  6,10437,10438,10448,10449,10450,10
                                                                                                  470,10471,10472,10481,10504,10506,
                                                                                                  10512,10514,10515,10522,10523,1052
                                                                                                  4,10525,10535,10536,10537,10557,10
                                                                                                  558,10559,10568,10613,10615,10626,
                                                                                                  10628,10639,10641,10651,10653,1068
                                                                                                  1,10683,10694,10696,10707,10709,10
                                                                                                  719,10721,10749,10751,10762,10764,
                                                                                                  10775,10777,10787,10789           
 LEAD_D_REG                 Local  10204    I(4)            4     3     726                       10448,10449,10470,10471,10690,1069
                                                                                                  4                                 
 LEAD_D_SUM                 Local  10198    I(4)            4     2     22                        10273,10436,10715,10719           
 LEAD_D_TOT                 Dummy  10162    I(4)            4     3     0        ARG,INOUT        10269,10435,10677,10681           
 LEAD_D_TYP                 Local  10201    I(4)            4     3     110                       10437,10438,10703,10707           
 LEAD_S_REG                 Local  10205    I(4)            4     3     726                       10535,10536,10557,10558,10758,1076
                                                                                                  2                                 
 LEAD_S_SUM                 Local  10199    I(4)            4     2     22                        10274,10523,10783,10787           
 LEAD_S_TOT                 Dummy  10162    I(4)            4     3     0        ARG,INOUT        10270,10522,10745,10749           
 LEAD_S_TYP                 Local  10202    I(4)            4     3     110                       10524,10525,10771,10775           
 LEAD_T_REG                 Local  10203    I(4)            4     3     726                       10361,10362,10383,10384,10622,1062
                                                                                                  6                                 

Page 239         Source Listing                  BENFORD_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 LEAD_T_SUM                 Local  10197    I(4)            4     2     22                        10272,10349,10647,10651           
 LEAD_T_TOT                 Dummy  10162    I(4)            4     3     0        ARG,INOUT        10268,10348,10609,10613           
 LEAD_T_TYP                 Local  10200    I(4)            4     3     110                       10350,10351,10635,10639           
 L_INIT                     Dummy  10166    L(4)            4           scalar   ARG,INOUT        10250                             
 L_LAST                     Dummy  10166    L(4)            4           scalar   ARG,INOUT        10586                             
 MAXFLT                     Dummy  10161    I(4)            4           scalar   ARG,INOUT        10193,10194,10195,10196,10206,1020
                                                                                                  7,10208,10218,10219,10220,10221,10
                                                                                                  222,10223                         
 MAX_REPS                   Dummy  10160    I(4)            4           scalar   ARG,INOUT        10179,10181,10182,10183,10184,1018
                                                                                                  5,10187                           
 MM                         Local  10175    I(4)            4           scalar                    10315,10317,10348,10395,10396,1039
                                                                                                  8,10435,10482,10483,10485,10522,10
                                                                                                  569,10570,10572,10597,10598,10599,
                                                                                                  10600,10604,10605,10609,10610,1061
                                                                                                  3,10614,10665,10666,10667,10668,10
                                                                                                  672,10673,10677,10678,10681,10682,
                                                                                                  10733,10734,10735,10736,10740,1074
                                                                                                  1,10745,10746,10749,10750         
 NID                        Local  10175    I(4)            4           scalar                    10358,10359,10360,10361,10362,1036
                                                                                                  4,10365,10367,10380,10381,10382,10
                                                                                                  383,10384,10386,10387,10389,10445,
                                                                                                  10446,10447,10448,10449,10451,1045
                                                                                                  2,10454,10467,10468,10469,10470,10
                                                                                                  471,10473,10474,10476,10532,10533,
                                                                                                  10534,10535,10536,10538,10539,1054
                                                                                                  1,10554,10555,10556,10557,10558,10
                                                                                                  560,10561,10563                   
 NTOT_D_REG                 Local  10216    I(4)            4     2     66                        10451,10473,10689,10691,10695     
 NTOT_S_REG                 Local  10217    I(4)            4     2     66                        10538,10560,10757,10759,10763     
 NTOT_T_REG                 Local  10215    I(4)            4     2     66                        10364,10386,10621,10623,10627     
 NTOT_XIV_D                 Local  10210    I(4)            4     1     2                         10252,10255,10486,10714,10716,1072
                                                                                                  0                                 
 NTOT_XIV_S                 Local  10211    I(4)            4     1     2                         10253,10256,10573,10782,10784,1078
                                                                                                  8                                 
 NTOT_XIV_T                 Local  10209    I(4)            4     1     2                         10251,10254,10399,10646,10648,1065
                                                                                                  2                                 
 NTYP_XIV_D                 Local  10213    I(4)            4     2     10                        10487,10702,10704,10708           
 NTYP_XIV_S                 Local  10214    I(4)            4     2     10                        10574,10770,10772,10776           
 NTYP_XIV_T                 Local  10212    I(4)            4     2     10                        10400,10634,10636,10640           
 NUMREPS                    Dummy  10160    I(4)            4           scalar   ARG,INOUT        10279                             
 N_XIV_D                    Dummy  10163    I(4)            4     2     0        ARG,INOUT        10265,10485,10666,10668,10673,1067
                                                                                                  8,10682                           
 N_XIV_S                    Dummy  10163    I(4)            4     2     0        ARG,INOUT        10266,10572,10734,10736,10741,1074
                                                                                                  6,10750                           
 N_XIV_T                    Dummy  10163    I(4)            4     2     0        ARG,INOUT        10264,10398,10598,10600,10605,1061
                                                                                                  0,10614                           
 SUMABS_XIV_D               Dummy  10165    R(4)            4     2     0        ARG,INOUT        10262,10483,10672,10673           
 SUMABS_XIV_S               Dummy  10165    R(4)            4     2     0        ARG,INOUT        10263,10570,10740,10741           
 SUMABS_XIV_T               Dummy  10165    R(4)            4     2     0        ARG,INOUT        10261,10396,10604,10605           
 SUM_XIV_D                  Dummy  10164    R(4)            4     2     0        ARG,INOUT        10259,10482,10667,10668           
 SUM_XIV_S                  Dummy  10164    R(4)            4     2     0        ARG,INOUT        10260,10569,10735,10736           
 SUM_XIV_T                  Dummy  10164    R(4)            4     2     0        ARG,INOUT        10258,10395,10599,10600           
 XIV_D                      Dummy  10160    R(4)            4     1     0        ARG,INOUT        10416,10418,10421,10428,10482,1048
                                                                                                  4                                 
 XIV_S                      Dummy  10160    R(4)            4     1     0        ARG,INOUT        10503,10505,10508,10515,10569,1057

Page 240         Source Listing                  BENFORD_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  1                                 
 XIV_T                      Dummy  10160    R(4)            4     1     0        ARG,INOUT        10329,10331,10334,10341,10395,1039
                                                                                                  7                                 

Page 241         Source Listing                  BENFORD_QC
2017-04-18 11:07                                 acftobs_qc.f

  10795 c
  10796 c ###################################################################
  10797 c                            subroutine invalid_qc
  10798 c ###################################################################
  10799 c
  10800       subroutine invalid_qc(numreps,max_reps,c_acftreg,c_acftid,c_qc
  10801      $,     alat,alon,pres,ht_ft,t_prcn,ob_t,ob_q,ob_dir,ob_spd
  10802      $,     xiv_t,xiv_q,xiv_d,xiv_s,maxflt,kreg,creg_reg,ntemp_reg
  10803      $,     idt,itype,ichk_t,ichk_q,ichk_d,ichk_s,kbadtot,n_minus9C
  10804      $,     indx,csort,amiss,imiss,io8,io32,l_operational,l_init
  10805      $,     cdtg_an,l_minus9c)
  10806 c
  10807 c Remove invalid data from dataset
  10808 c
  10809 c modified 5/18/01 by p.m.pauley-- -9c test refined
  10810 c modified 6/28/01 by p.m.pauley--test added for direction=360
  10811 c          some aircraft report 360 when they should report 180
  10812 c modified 1/8/03 by P.M.Pauley--added check for truncated German
  10813 c          AMDAR reports--these seem to have blank tail numbers, which
  10814 c          the code changes to 'LH      ' (which the test looks for)
  10815 c
  10816       implicit none
  10817 c
  10818 c Declaration statements
  10819 c ----------------------
  10820       integer      max_reps            ! maximum number of reports
  10821 c
  10822       character*11 c_qc(max_reps)      ! internal qc flags
  10823 c
  10824 c     Data arrays
  10825 c     -----------
  10826       character*10 cdtg_an             ! date time group for analysis
  10827       integer      numreps             ! actual number of reports
  10828       integer      itype(max_reps)     ! type of aircraft data
  10829      $,            ktype               ! pointer for instrument type 
  10830       integer      idt(max_reps)       ! time in seconds to analysis time 
  10831       character*8  c_acftreg(max_reps) ! aircraft registration (tail) number
  10832       character*9  c_acftid(max_reps)  ! aircraft flight number
  10833       real*8       alat(max_reps)      ! latitude
  10834      $,            alon(max_reps)      ! longitude
  10835       real         pres(max_reps)      ! pressure
  10836      $,            ht_ft(max_reps)     ! height in feet
  10837       real         t_prcn(max_reps)    ! temperature precision
  10838       real         ob_t(max_reps)      ! temperature
  10839      $,            ob_q(max_reps)      ! specific humidity
  10840      $,            ob_dir(max_reps)    ! wind direction
  10841      $,            ob_spd(max_reps)    ! wind speed
  10842       real         xiv_t(max_reps)     ! temperature innovation (ob - bk)
  10843      $,            xiv_q(max_reps)     ! specific humidity innovation (ob - bk)
  10844      $,            xiv_d(max_reps)     ! wind direction innovation (ob - bk)
  10845      $,            xiv_s(max_reps)     ! wind speed innovation (ob - bk)
  10846       integer      ichk_t(max_reps)    ! NRL QC flag for temperature ob
  10847      $,            ichk_q(max_reps)    ! NRL QC flag for specific humidity ob
  10848      $,            ichk_d(max_reps)    ! NRL QC flag for wind direction ob
  10849      $,            ichk_s(max_reps)    ! NRL QC flag for wind speed ob
  10850       character*25 csort(max_reps)     ! sort variable    
  10851       logical      l_minus9c(max_reps)     ! true for mdcrs -9C temperatures

Page 242         Source Listing                  INVALID_QC
2017-04-18 11:07                                 acftobs_qc.f

  10852 c
  10853 c     Pointers
  10854 c     --------
  10855       integer      indx(max_reps)      ! pointer index for good reports
  10856 c
  10857 c     Functions
  10858 c     ---------
  10859       character*16 c_insty_ob          ! function to convert integer instrument 
  10860                                        !   type to character instrument type
  10861       integer      insty_ob_fun        ! function to convert character
  10862                                        !   instrument type to integer
  10863 c
  10864 c     Other variables
  10865 c     ---------------
  10866       integer      io8                 ! i/o unit number for log file
  10867       integer      io32                ! i/o unit number for rejected reports
  10868 c
  10869       integer      imiss               ! integer missing value flag
  10870       real         amiss               ! real missing value flag
  10871 c
  10872       integer      iob                 ! do loop index 
  10873      $,            ii                  ! index pointing to current report
  10874      $,            iim2                ! index pointing to report before previous report
  10875      $,            iim1                ! index pointing to previous report
  10876      $,            iip1                ! index pointing to following report
  10877      $,            iip2                ! index pointing to report after following report
  10878      $,            kbadtot             ! total number of rejected duplicates
  10879      $,            kbad(5)             ! counter for number of invalid reports
  10880 c
  10881 ccccdak      integer      i_acars             ! instrument type for acars
  10882       integer      i_acars             ! instrument type for tamdar
  10883 ccccdak     $,            i_acars_lvl         ! instrument type for acars--level flt
  10884      $,            i_acars_lvl         ! instrument type for tamdar--level flt
  10885 ccccdak     $,            i_acars_asc         ! instrument type for acars--ascent
  10886      $,            i_acars_asc         ! instrument type for tamdar--ascent
  10887 ccccdak     $,            i_acars_des         ! instrument type for acars--descent
  10888      $,            i_acars_des         ! instrument type for tamdar--descent
  10889      $,            i_mdcrs             ! instrument type for mdcrs
  10890      $,            i_mdcrs_lvl         ! instrument type for mdcrs--level flt
  10891      $,            i_mdcrs_asc         ! instrument type for mdcrs--ascent
  10892      $,            i_mdcrs_des         ! instrument type for mdcrs--descent
  10893      $,            i_man_airep         ! instrument type for manual aireps
  10894      $,            i_man_Yairep        ! instrument type for manual aireps (YRXX)
  10895      $,            i_airep             ! instrument type for airep
  10896      $,            i_airep_lvl         ! instrument type for airep--level flt
  10897      $,            i_airep_asc         ! instrument type for airep--ascent
  10898      $,            i_airep_des         ! instrument type for airep--descent
  10899      $,            i_amdar             ! instrument type for amdar
  10900      $,            i_amdar_lvl         ! instrument type for amdar--level flt
  10901      $,            i_amdar_asc         ! instrument type for amdar--ascent
  10902      $,            i_amdar_des         ! instrument type for amdar--descent
  10903 c
  10904       integer      n_empty(5)          ! number of empty reports
  10905      $,            n_zero_tmp(5)       ! number of reports with zero winds and temperature
  10906      $,            n_zero_alt(5)       ! number of reports with zero winds and altitude
  10907      $,            n_zero_pos(5)       ! number of reports with zero lat/lon
  10908      $,            n_bad_decode(5)     ! number of reports with bad decodes

Page 243         Source Listing                  INVALID_QC
2017-04-18 11:07                                 acftobs_qc.f

  10909      $,            n_miss_time(5)      ! number of reports with missing times
  10910      $,            n_miss_pos(5)       ! number of reports with missing positions
  10911      $,            n_miss_pres(5)      ! number of reports with missing pressures
  10912      $,            n_small_pres(5)     ! number of reports with too small pressures
  10913      $,            n_low_airep(5)      ! number of low-level aireps rejected 
  10914                                        ! (sign on altitude is ambiguous)
  10915      $,            n_minus9C(5)        ! number of -9C temperatures rejected
  10916      $,            n_bad360(5)         ! number of erroneous north winds
  10917      $,            n_bad180(5)         ! number of erroneous south winds
  10918 c
  10919       integer      n_xx999_Ar          ! number of aireps with missing id
  10920      $,            n_xx999_Ma          ! number of manual aireps with missing id
  10921       integer      n_blank_Ar          ! number of aireps with blank id
  10922      $,            n_blank_Ma          ! number of manual aireps with blank id
  10923      $,            n_blank_Md          ! number of MDCRS reports with blank id
  10924      $,            n_blank_Am          ! number of AMDAR reports with blank id
  10925 c
  10926 ccccdak      integer      nrep_Ac             ! number of acars reports considered
  10927       integer      nrep_Ac             ! number of tamdar reports considered
  10928      $,            nrep_Md             ! number of mdcrs reports considered
  10929      $,            nrep_Ma             ! number of manual airep reports considered
  10930      $,            nrep_Ar             ! number of airep reports considered
  10931      $,            nrep_Am             ! number of amdar reports considered
  10932 ccccdak     $,            nbad_Ac             ! number of bad acars
  10933      $,            nbad_Ac             ! number of bad tamdar
  10934      $,            nbad_Md             ! number of bad mdcrs
  10935      $,            nbad_Ma             ! number of bad manual aireps
  10936      $,            nbad_Ar             ! number of bad aireps
  10937      $,            nbad_Am             ! number of bad amdar 
  10938 c
  10939       integer      maxflt              ! max number of flights allowed
  10940       integer      kreg                ! actual number of tail#s in dataset
  10941      $,            mm                  ! index pointing to current tail number
  10942       character*8  creg_reg(maxflt)    ! tail numbers
  10943       integer      ntemp_reg(maxflt,5) ! number of reports w. rejected temp
  10944 c
  10945       integer      knt                 ! counter used in defining iim1, iip1
  10946 c
  10947 c     Switches
  10948 c     --------
  10949       logical      l_print             ! print values if true
  10950      $,            l_operational       ! run QC in operational mode if true
  10951      $,            l_init              ! initialize counters if true
  10952 c     $,            l_ual_all           ! true if all remapped ids are UAL acft
  10953 c
  10954 c # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  10955 c
  10956 c Initialize aircraft data types
  10957 c ------------------------------
  10958       i_acars      = insty_ob_fun('acars')
  10959       i_acars_lvl  = insty_ob_fun('acars_lvl') 
  10960       i_acars_asc  = insty_ob_fun('acars_asc') 
  10961       i_acars_des  = insty_ob_fun('acars_des') 
  10962       i_mdcrs      = insty_ob_fun('mdcrs')
  10963       i_mdcrs_lvl  = insty_ob_fun('mdcrs_lvl') 
  10964       i_mdcrs_asc  = insty_ob_fun('mdcrs_asc') 
  10965       i_mdcrs_des  = insty_ob_fun('mdcrs_des')

Page 244         Source Listing                  INVALID_QC
2017-04-18 11:07                                 acftobs_qc.f

  10966       i_man_airep  = insty_ob_fun('man-airep') 
  10967       i_man_Yairep = insty_ob_fun('man-Yairep') 
  10968       i_airep      = insty_ob_fun('airep')
  10969       i_airep_lvl  = insty_ob_fun('airep_lvl')
  10970       i_airep_asc  = insty_ob_fun('airep_asc')
  10971       i_airep_des  = insty_ob_fun('airep_des')
  10972       i_amdar      = insty_ob_fun('amdar')
  10973       i_amdar_lvl  = insty_ob_fun('amdar_lvl')
  10974       i_amdar_asc  = insty_ob_fun('amdar_asc')
  10975       i_amdar_des  = insty_ob_fun('amdar_des')
  10976 c
  10977 c Initialize counters
  10978 c -------------------
  10979       if(l_init) then
  10980         n_empty = 0
  10981         n_zero_tmp = 0
  10982         n_zero_alt = 0
  10983         n_zero_pos = 0
  10984         n_bad_decode = 0
  10985         n_miss_time = 0
  10986         n_miss_pos = 0
  10987         n_miss_pres = 0
  10988         n_small_pres = 0
  10989         n_low_airep = 0
  10990         n_minus9C = 0
  10991         n_bad360 = 0
  10992         n_bad180 = 0
  10993 c
  10994         n_xx999_Ar = 0
  10995         n_xx999_Ma = 0
  10996         n_blank_Ar = 0
  10997         n_blank_Ma = 0
  10998         n_blank_Md = 0
  10999         n_blank_Am = 0
  11000 c
  11001         nrep_Ac = 0
  11002         nrep_Md = 0
  11003         nrep_Ma = 0
  11004         nrep_Ar = 0
  11005         nrep_Am = 0
  11006         nbad_Ac = 0
  11007         nbad_Md = 0
  11008         nbad_Ma = 0
  11009         nbad_Ar = 0
  11010         nbad_Am = 0
  11011       endif
  11012 c
  11013 c Begin loop over reports
  11014 c -----------------------
  11015       do iob = 1,numreps
  11016 c
  11017         l_print = .false.
  11018 c
  11019 c       Compute ii index
  11020 c       ----------------
  11021         ii = indx(iob)
  11022 c

Page 245         Source Listing                  INVALID_QC
2017-04-18 11:07                                 acftobs_qc.f

  11023 c       Compute ii-1 index
  11024 c       ------------------
  11025         knt = iob - 1
  11026  10     if(knt.ge.1) then
  11027           iim1 = indx(knt)
  11028           if(c_qc(iim1)(1:1).eq.'B'.or.
  11029      $       c_qc(iim1)(3:4).eq.'BB'.or.
  11030      $       c_qc(iim1)(2:2).eq.'M'.or.
  11031      $       c_qc(iim1)(3:3).eq.'M'.or.
  11032      $       c_qc(iim1)(4:4).eq.'M'.or.
  11033      $       c_qc(iim1)(5:5).eq.'M'.or.
  11034      $       c_qc(iim1)(5:5).eq.'B'.or.
  11035      $       c_qc(iim1)(6:6).eq.'B'.or.
  11036      $       c_qc(iim1)(7:7).eq.'B'.or.
  11037      $       c_qc(iim1)(6:8).eq.'MMM') then
  11038             knt = knt - 1
  11039             goto 10
  11040           endif
  11041         else
  11042           iim1 = 0
  11043         endif
  11044 c
  11045 c       Compute ii-2 index
  11046 c       ------------------
  11047         knt = knt - 1
  11048  15     if(knt.ge.1) then
  11049           iim2 = indx(knt)
  11050           if(c_qc(iim2)(1:1).eq.'B'.or.
  11051      $       c_qc(iim2)(3:4).eq.'BB'.or.
  11052      $       c_qc(iim2)(2:2).eq.'M'.or.
  11053      $       c_qc(iim2)(3:3).eq.'M'.or.
  11054      $       c_qc(iim2)(4:4).eq.'M'.or.
  11055      $       c_qc(iim2)(5:5).eq.'M'.or.
  11056      $       c_qc(iim2)(5:5).eq.'B'.or.
  11057      $       c_qc(iim2)(6:6).eq.'B'.or.
  11058      $       c_qc(iim2)(7:7).eq.'B'.or.
  11059      $       c_qc(iim2)(6:8).eq.'MMM') then
  11060             knt = knt - 1
  11061             goto 15
  11062           endif
  11063         else
  11064           iim2 = 0
  11065         endif
  11066 c
  11067 c       Compute ii+1 index
  11068 c       ------------------
  11069         knt = iob + 1
  11070  20     if(knt.le.numreps) then
  11071           iip1 = indx(knt)
  11072           if(c_qc(iip1)(1:1).eq.'B'.or.
  11073      $       c_qc(iip1)(3:4).eq.'BB'.or.
  11074      $       c_qc(iip1)(2:2).eq.'M'.or.
  11075      $       c_qc(iip1)(3:3).eq.'M'.or.
  11076      $       c_qc(iip1)(4:4).eq.'M'.or.
  11077      $       c_qc(iip1)(5:5).eq.'M'.or.
  11078      $       c_qc(iip1)(5:5).eq.'B'.or.
  11079      $       c_qc(iip1)(6:6).eq.'B'.or.

Page 246         Source Listing                  INVALID_QC
2017-04-18 11:07                                 acftobs_qc.f

  11080      $       c_qc(iip1)(7:7).eq.'B'.or.
  11081      $       c_qc(iip1)(6:8).eq.'MMM') then
  11082             knt = knt + 1
  11083             goto 20
  11084           endif
  11085         else
  11086           iip1 = 0
  11087         endif
  11088 c
  11089 c       Compute ii+2 index
  11090 c       ------------------
  11091         knt = knt + 1
  11092  25     if(knt.le.numreps) then
  11093           iip2 = indx(knt)
  11094           if(c_qc(iip2)(1:1).eq.'B'.or.
  11095      $       c_qc(iip2)(3:4).eq.'BB'.or.
  11096      $       c_qc(iip2)(2:2).eq.'M'.or.
  11097      $       c_qc(iip2)(3:3).eq.'M'.or.
  11098      $       c_qc(iip2)(4:4).eq.'M'.or.
  11099      $       c_qc(iip2)(5:5).eq.'M'.or.
  11100      $       c_qc(iip2)(5:5).eq.'B'.or.
  11101      $       c_qc(iip2)(6:6).eq.'B'.or.
  11102      $       c_qc(iip2)(7:7).eq.'B'.or.
  11103      $       c_qc(iip2)(6:8).eq.'MMM') then
  11104             knt = knt + 1
  11105             goto 25
  11106           endif
  11107         else
  11108           iip2 = 0
  11109         endif
  11110 c
  11111 c Set ktype
  11112 c ---------
  11113         if(itype(ii).eq.i_mdcrs_lvl.or.
  11114      $     itype(ii).eq.i_mdcrs_asc.or.
  11115      $     itype(ii).eq.i_mdcrs_des.or.
  11116      $     itype(ii).eq.i_mdcrs) then 
  11117           ktype = 1
  11118 c
  11119         elseif(itype(ii).eq.i_acars_lvl.or.
  11120      $         itype(ii).eq.i_acars_asc.or.
  11121      $         itype(ii).eq.i_acars_des.or.
  11122      $         itype(ii).eq.i_acars) then 
  11123           ktype = 2
  11124 c
  11125         elseif(itype(ii).eq.i_amdar_lvl.or.
  11126      $         itype(ii).eq.i_amdar_asc.or.
  11127      $         itype(ii).eq.i_amdar_des.or.
  11128      $         itype(ii).eq.i_amdar) then 
  11129           ktype = 3
  11130 c
  11131         elseif(itype(ii).eq.i_airep_lvl.or.
  11132      $         itype(ii).eq.i_airep_asc.or.
  11133      $         itype(ii).eq.i_airep_des.or.
  11134      $         itype(ii).eq.i_airep) then
  11135           ktype = 4
  11136 c

Page 247         Source Listing                  INVALID_QC
2017-04-18 11:07                                 acftobs_qc.f

  11137         elseif(itype(ii).eq.i_man_airep.or.
  11138      $         itype(ii).eq.i_man_Yairep) then
  11139           ktype = 5
  11140         endif
  11141 c
  11142 c       Count reports with missing ids
  11143 c       ------------------------------
  11144         if(c_acftid(ii)(1:5).eq.'XX999'.or.
  11145      $     c_acftid(ii)(1:4).eq.'////') then
  11146 c
  11147           c_qc(ii)(1:1) = 'B'
  11148 c
  11149           if(ktype.eq.4) then 
  11150             n_xx999_Ar = n_xx999_Ar + 1
  11151 c
  11152           elseif(ktype.eq.5) then
  11153             n_xx999_Ma = n_xx999_Ma + 1
  11154           endif
  11155 c
  11156           l_print = .false.
  11157           if(l_print) then
  11158             write(io8,*)
  11159             write(io8,*) 'Report found with missing id'
  11160           endif
  11161 c
  11162 c       Count reports with blank ids
  11163 c       ----------------------------
  11164 
  11165 C DAK: Here is where TAMDAR reports were originally tossed for having a blank tail number due
  11166 c      to logic in subroutine dupchek_qc that would not allow one to be generated (flight
  11167 c      number was all numbers and tail number was originally missing, thus a tail number
  11168 c      could not be created from the flight number) -- this has since been bypassed by
  11169 c      changing characters 1-3 in in the flight number to "TAM" in subroutine input_acqc
  11170 c      where the reports are read in from NCEP PREPBUFR file and stored in memory
  11171 
  11172         elseif(c_acftreg(ii)(1:8).eq.'        ') then
  11173 c
  11174           c_qc(ii)(1:1) = 'B'
  11175 c
  11176           if(ktype.eq.1) then 
  11177             n_blank_Md = n_blank_Md + 1
  11178 c
  11179           elseif(ktype.eq.3) then
  11180             n_blank_Am = n_blank_Am + 1
  11181 c
  11182           elseif(ktype.eq.4) then
  11183             n_blank_Ar = n_blank_Ar + 1
  11184 c
  11185           elseif(ktype.eq.5) then
  11186             n_blank_Ma = n_blank_Ma + 1
  11187           endif
  11188 c
  11189           l_print = .true.
  11190           if(l_print) then
  11191             write(io8,*)
  11192             write(io8,*) 'Report found with blank tail number'
  11193           endif

Page 248         Source Listing                  INVALID_QC
2017-04-18 11:07                                 acftobs_qc.f

  11194 c
  11195 c       Look for truncated German AMDAR reports
  11196 c       ---------------------------------------
  11197         elseif(c_acftreg(ii)(1:8).eq.'LH      '.and.
  11198      $         ktype.eq.3) then
  11199 c
  11200           c_qc(ii)(1:1) = 'B'
  11201           n_bad_decode(3) = n_bad_decode(3) + 1
  11202 c
  11203           l_print = .true.
  11204           if(l_print) then
  11205             write(io8,*)
  11206             write(io8,*) 'Truncated German AMDAR report'
  11207           endif
  11208 c
  11209 c Count reports marked bad in decoder
  11210 c -----------------------------------
  11211         elseif(c_qc(ii)(1:1).eq.'B') then
  11212 c
  11213           n_bad_decode(ktype) = n_bad_decode(ktype) + 1
  11214 c
  11215           l_print = .true.
  11216           if(l_print) then
  11217             write(io8,*)
  11218             write(io8,*) 'Report marked bad in decoder'
  11219           endif
  11220 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  11221 c
  11222 c Check for zero position--lat/lon both zero
  11223 c ------------------------------------------
  11224         elseif(abs(alat(ii)).lt.0.001.and.
  11225      $         abs(alon(ii)).lt.0.001) then
  11226 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  11227 c
  11228           c_qc(ii)(3:4) = 'BB'
  11229 c
  11230           n_zero_pos(ktype) = n_zero_pos(ktype) + 1
  11231 c
  11232           l_print = .true.
  11233           if(l_print) then
  11234             write(io8,*)
  11235             write(io8,*) 'Report found with zero lat and lon'
  11236           endif
  11237 c
  11238 c Check for missing time
  11239 c ----------------------
  11240         elseif(idt(ii).eq.imiss) then
  11241 c
  11242           c_qc(ii)(2:2) = 'M'
  11243 c
  11244           n_miss_time(ktype) = n_miss_time(ktype) + 1
  11245 c
  11246           l_print = .true.
  11247           if(l_print) then
  11248             write(io8,*)
  11249             write(io8,*) 'Report found with missing time'
  11250           endif

Page 249         Source Listing                  INVALID_QC
2017-04-18 11:07                                 acftobs_qc.f

  11251 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  11252 c
  11253 c Check for missing latitude/longitude
  11254 c ------------------------------------
  11255         elseif(alat(ii).eq.amiss.or.
  11256      $         alon(ii).eq.amiss) then
  11257 c
  11258           if(alat(ii).eq.amiss) c_qc(ii)(3:3) = 'M'
  11259           if(alon(ii).eq.amiss) c_qc(ii)(4:4) = 'M'
  11260 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  11261 c
  11262           n_miss_pos(ktype) = n_miss_pos(ktype) + 1
  11263 c
  11264           l_print = .true.
  11265           if(l_print) then
  11266             write(io8,*)
  11267             write(io8,*) 'Report found with missing lat or lon'
  11268           endif
  11269 c
  11270 c Check for missing pressure/altitude
  11271 c -----------------------------------
  11272         elseif(pres(ii).eq.amiss.and.ht_ft(ii).eq.amiss) then
  11273 c
  11274           c_qc(ii)(5:5) = 'M'
  11275 c
  11276           n_miss_pres(ktype) = n_miss_pres(ktype) + 1
  11277 c
  11278           l_print = .true.
  11279           if(l_print) then
  11280             write(io8,*)
  11281             write(io8,*) 'Report found with missing pressure'
  11282           endif
  11283 c
  11284 c Check for too-small pressure (too-large altitude)
  11285 c Allow high altitude manual AIREPs from Concordes (BAW and AFR)
  11286 c --------------------------------------------------------------
  11287         elseif(ht_ft(ii).gt.49999.5.or.pres(ii).lt.116.05) then
  11288           if((itype(ii).eq.i_man_airep.or.
  11289      $        itype(ii).eq.i_man_Yairep).and.
  11290      $       (c_acftid(ii)(1:3).eq.'AFR'.or.
  11291      $        c_acftid(ii)(1:3).eq.'BAW')) then
  11292 c
  11293             l_print = .false.
  11294             if(l_print) then
  11295               write(io8,*)
  11296               write(io8,*) 'Valid high-altitude report--ii = ',ii
  11297             endif
  11298 c
  11299           else
  11300             c_qc(ii)(5:5) = 'B'
  11301 c
  11302             n_small_pres(ktype) = n_small_pres(ktype) + 1
  11303 c
  11304             l_print = .true.
  11305             if(l_print) then
  11306               write(io8,*)
  11307               write(io8,*) 'Altitude is too high!'

Page 250         Source Listing                  INVALID_QC
2017-04-18 11:07                                 acftobs_qc.f

  11308             endif
  11309           endif
  11310 c
  11311 c       Check for low-level airep reports--altitude sign not known
  11312 c       ----------------------------------------------------------
  11313         elseif((itype(ii).eq.i_airep.or.
  11314      $          itype(ii).eq.i_man_airep.or.
  11315      $          itype(ii).eq.i_man_Yairep).and.
  11316      $          abs(ht_ft(ii)).lt.600.0) then
  11317 c
  11318           c_qc(ii)(5:5) = 'B'
  11319 c
  11320           n_low_airep(ktype) = n_low_airep(ktype) + 1
  11321 c
  11322           l_print = .false.
  11323           if(l_print) then
  11324             write(io8,*)
  11325             write(io8,*) 'Low-altitude AIREP found'
  11326           endif
  11327 c
  11328 c Check for empty report--temperature and winds missing
  11329 c -----------------------------------------------------
  11330         elseif(ob_t(ii).eq.amiss.and.
  11331      $         (ob_dir(ii).eq.amiss.or.
  11332      $          ob_spd(ii).eq.amiss)) then
  11333 c
  11334           c_qc(ii)(6:9) = 'MMMN'
  11335           if(ob_q(ii).eq.amiss) c_qc(ii)(9:9) = 'M'
  11336 c
  11337           n_empty(ktype) = n_empty(ktype) + 1
  11338 c
  11339           l_print = .true.
  11340           if(l_print) then
  11341             write(io8,*)
  11342             write(io8,*) 'Report found with missing temperature, winds'
  11343           endif
  11344 c
  11345 c Check for empty report--temperature and winds zero
  11346 c --------------------------------------------------
  11347         elseif(abs(ob_t(ii)-273.16).lt.0.05.and.
  11348      $         (ifix(ob_dir(ii)).eq.360.or.ifix(ob_dir(ii)).eq.0).and.
  11349      $         ifix(ob_spd(ii)*10.0).eq.0.and.
  11350      $         (itype(ii).eq.i_man_airep.or.
  11351      $          itype(ii).eq.i_man_Yairep)) then
  11352 c
  11353           c_qc(ii)(6:9) = 'MMMN'
  11354           if(ob_q(ii).eq.amiss) c_qc(ii)(9:9) = 'M'
  11355 c
  11356           n_zero_tmp(ktype) = n_zero_tmp(ktype) + 1
  11357 c
  11358           l_print = .true.
  11359           if(l_print) then
  11360             write(io8,*)
  11361             write(io8,*) 'Report found with zero C temperature, winds'
  11362           endif
  11363 c
  11364 c Check for empty report--altitude and winds zero

Page 251         Source Listing                  INVALID_QC
2017-04-18 11:07                                 acftobs_qc.f

  11365 c -----------------------------------------------
  11366         elseif(ifix(ht_ft(ii)).eq.0.and.
  11367      $         (ifix(ob_dir(ii)).eq.360.or.ifix(ob_dir(ii)).eq.0).and.
  11368      $         ifix(ob_spd(ii)).eq.0) then
  11369 c
  11370           c_qc(ii)(5:9) = 'BNMMN'
  11371           if(ob_q(ii).eq.amiss) c_qc(ii)(9:9) = 'M'
  11372 c
  11373           n_zero_alt(ktype) = n_zero_alt(ktype) + 1
  11374 c
  11375           l_print = .true.
  11376           if(l_print) then
  11377             write(io8,*)
  11378             write(io8,*) 'Report found with zero altitude, winds'
  11379           endif
  11380 c
  11381 c Perform checks on just temperature or wind direction
  11382 c ----------------------------------------------------
  11383         else
  11384 c
  11385 c Check for -9C temperature, precision = 1.00, no phase indicated
  11386 c ---------------------------------------------------------------
  11387 c          if(abs(ob_t(ii)-264.16).lt.0.05.and.
  11388           if(l_minus9c(ii)) then
  11389 c
  11390 c            write(io8,*)
  11391 c            write(io8,*) 'l_minus9c = T at iob,ii = ',iob,ii
  11392 c            write(io8,*) '  t_prcn = ',t_prcn(ii)
  11393 c            write(io8,*) '  itype  = ',c_insty_ob(itype(ii))
  11394 c            write(io8,*) '  ht_ft  = ',ht_ft(ii)
  11395 c            write(io8,*) '  ids = ',c_acftreg(ii),c_acftid(ii)
  11396 c
  11397             if(ifix(t_prcn(ii)*100).eq.100.and.
  11398      $         itype(ii).eq.i_mdcrs) then
  11399 c
  11400               if(iob.eq.1) then
  11401                 iim1 = 0
  11402               else
  11403                 iim1 = indx(iob-1)
  11404               endif
  11405 c
  11406               if(iob.eq.numreps) then
  11407                 iip1 = 0
  11408               else
  11409                 iip1 = indx(iob+1)
  11410               endif
  11411 c
  11412 c             Reject ob if -9C temperature exceeds gross check
  11413 c             ------------------------------------------------
  11414               if(ht_ft(ii).gt.30187.5) then
  11415 c
  11416                 l_print = .true.
  11417                 if(l_print) then
  11418                   write(io8,*)
  11419                   write(io8,*)'-9C temp would be rejected by gross chk!'
  11420      $,                       ' ii = ',ii
  11421                 endif

Page 252         Source Listing                  INVALID_QC
2017-04-18 11:07                                 acftobs_qc.f

  11422 c
  11423                 if(c_qc(ii)(6:6).eq.'-') then
  11424                   c_qc(ii)(6:6) = 'I'
  11425                   n_minus9C(ktype) = n_minus9C(ktype) + 1
  11426                 endif
  11427 c
  11428 c             Perform other checks if previous ob available
  11429 c             ---------------------------------------------
  11430               elseif(iim1.ne.0) then
  11431 c
  11432 c               Reject ob if previous ob is from same flight but does not 
  11433 c                 have -9C temperature, precision = 1.00, no phase indicated
  11434 c               ------------------------------------------------------------
  11435                 if(c_acftreg(ii)(1:8).eq.c_acftreg(iim1)(1:8).and.
  11436      $             c_acftid(ii)(1:8).eq.c_acftid(iim1)(1:8).and.
  11437 c     $             abs(ob_t(iim1)-264.16).gt.0.05.and.
  11438      $             (.not.l_minus9c(iim1)).and.
  11439      $             ifix(t_prcn(iim1)*100).ne.100.and.
  11440      $             itype(iim1).ne.i_mdcrs) then
  11441 c
  11442                   l_print = .true.
  11443                   if(l_print) then
  11444                     write(io8,*)
  11445                     write(io8,*) 'Isolated -9C temperature found!--iim1'
  11446      $,                          ' ii = ',ii
  11447                   endif
  11448 c
  11449                   if(c_qc(ii)(6:6).eq.'-') then
  11450                     c_qc(ii)(6:6) = 'I'
  11451                     n_minus9C(ktype) = n_minus9C(ktype) + 1
  11452                   endif
  11453 c
  11454 c               Check if previous ob has -9C temperature, precision = 1.00, no phase indicated
  11455 c               ------------------------------------------------------------------------------
  11456                 elseif(c_acftreg(ii)(1:8).eq.c_acftreg(iim1)(1:8).and.
  11457      $                 c_acftid(ii)(1:8).eq.c_acftid(iim1)(1:8).and.
  11458 c     $                 abs(ob_t(iim1)-264.16).lt.0.05.and.
  11459      $                 l_minus9c(iim1).and.
  11460      $                 ifix(t_prcn(ii)*100).eq.100.and.
  11461      $                 itype(ii).eq.i_mdcrs) then
  11462 c
  11463 c                 Check if following ob is available
  11464 c                 ----------------------------------
  11465                   if(iip1.ne.0) then
  11466 c
  11467 c                   Check if following ob is from same flight
  11468 c                   -----------------------------------------
  11469                     if(c_acftreg(ii)(1:8).eq.c_acftreg(iip1)(1:8).and.
  11470      $                 c_acftid(ii)(1:8).eq.c_acftid(iip1)(1:8)) then
  11471 c
  11472 c                     Reject all three obs if following ob has -9C temperature,
  11473 c                     precision = 1.00, no phase indicated
  11474 c                     ---------------------------------------------------------
  11475 c                      if(abs(ob_t(iip1)-264.16).lt.0.05.and.
  11476                       if(l_minus9c(iip1).and.
  11477      $                   ifix(t_prcn(iip1)*100).eq.100.and.
  11478      $                   itype(iip1).eq.i_mdcrs) then

Page 253         Source Listing                  INVALID_QC
2017-04-18 11:07                                 acftobs_qc.f

  11479 c
  11480                         l_print = .true.
  11481                         if(l_print) then
  11482                           write(io8,*)
  11483                           write(io8,*)'Three -9C temps in a row'
  11484      $,                               ' ii = ',ii
  11485                         endif
  11486 c
  11487                         if(c_qc(iim1)(6:6).eq.'-') then
  11488                           c_qc(iim1)(6:6) = 'I'
  11489                           n_minus9C(ktype) = n_minus9C(ktype) + 1
  11490                         endif
  11491 c
  11492                         if(c_qc(ii)(6:6).eq.'-') then
  11493                           c_qc(ii)(6:6) = 'I'
  11494                           n_minus9C(ktype) = n_minus9C(ktype) + 1
  11495                         endif
  11496 c
  11497                         if(c_qc(iip1)(6:6).eq.'-') then
  11498                           c_qc(iip1)(6:6) = 'I'
  11499                           n_minus9C(ktype) = n_minus9C(ktype) + 1
  11500                         endif
  11501 c
  11502                       endif
  11503 c
  11504 c                   Following ob is not from same flight--reject two obs
  11505 c                   ----------------------------------------------------
  11506                     else
  11507 c
  11508                       l_print = .true.
  11509                       if(l_print) then
  11510                         write(io8,*)
  11511                         write(io8,*)'Two -9C temps in a row'
  11512      $,                             ' ii = ',ii
  11513                       endif
  11514 c
  11515                       if(c_qc(iim1)(6:6).eq.'-') then
  11516                         c_qc(iim1)(6:6) = 'I'
  11517                         n_minus9C(ktype) = n_minus9C(ktype) + 1
  11518                       endif
  11519 c
  11520                       if(c_qc(ii)(6:6).eq.'-') then
  11521                         c_qc(ii)(6:6) = 'I'
  11522                         n_minus9C(ktype) = n_minus9C(ktype) + 1
  11523                       endif
  11524 c
  11525                     endif
  11526                   endif
  11527                 endif
  11528 c
  11529 c             Check if following ob is available
  11530 c             ----------------------------------
  11531               elseif(iip1.ne.0) then
  11532 c
  11533 c               Reject ob if following ob is from same flight but does not 
  11534 c                 have -9C temperature, precision = 1.00, no phase indicated
  11535 c               ------------------------------------------------------------

Page 254         Source Listing                  INVALID_QC
2017-04-18 11:07                                 acftobs_qc.f

  11536                 if(c_acftreg(ii)(1:8).eq.c_acftreg(iip1)(1:8).and.
  11537      $             c_acftid(ii)(1:8).eq.c_acftid(iip1)(1:8).and.
  11538 c     $             abs(ob_t(iip1)-264.16).gt.0.05.and.
  11539      $             (.not.l_minus9c(iip1)).and.
  11540      $             ifix(t_prcn(iip1)*100).ne.100.and.
  11541      $             itype(iip1).ne.i_mdcrs) then
  11542 c
  11543                   l_print = .true.
  11544                   if(l_print) then
  11545                     write(io8,*)
  11546                     write(io8,*) 'Isolated -9C temperature found--iip1!'
  11547      $,                          ' ii = ',ii
  11548                   endif
  11549 c
  11550                   if(c_qc(ii)(6:6).eq.'-') then
  11551                     c_qc(ii)(6:6) = 'I'
  11552                     n_minus9C(ktype) = n_minus9C(ktype) + 1
  11553                   endif
  11554 c
  11555                 endif
  11556               endif
  11557             endif
  11558           endif
  11559 c
  11560 c Check for erroneous 360 and 0 degree wind directions
  11561 c Exclude winds less than 5 kts?
  11562 c ----------------------------------------------------
  11563           if((ifix(ob_dir(ii)).eq.360.or.
  11564      $        ifix(ob_dir(ii)).eq.0).and.
  11565      $       ifix(ob_spd(ii)*100.0).ne.0.and.
  11566      $       ob_spd(ii).ne.amiss.and.
  11567      $       itype(ii).ne.i_man_airep.and.
  11568      $       itype(ii).ne.i_man_Yairep) then
  11569 c
  11570 c           Perform other checks if previous and following obs available
  11571 c           ------------------------------------------------------------
  11572             if(iim1.ne.0.and.iip1.ne.0) then
  11573 c
  11574 c             Check if previous and following obs from same flight
  11575 c             ----------------------------------------------------
  11576               if(c_acftreg(ii)(1:8).eq.c_acftreg(iim1)(1:8).and.
  11577      $           c_acftid(ii)(1:8).eq.c_acftid(iim1)(1:8).and.
  11578      $           c_acftreg(ii)(1:8).eq.c_acftreg(iip1)(1:8).and.
  11579      $           c_acftid(ii)(1:8).eq.c_acftid(iip1)(1:8).and.
  11580      $           ob_dir(iim1).ne.amiss.and.
  11581      $           ob_spd(iim1).ne.amiss.and.
  11582      $           ifix(ob_dir(iim1)).ne.360.and.
  11583      $           ifix(ob_dir(iim1)).ne.0.and.
  11584      $           ob_dir(iip1).ne.amiss.and.
  11585      $           ob_spd(iip1).ne.amiss.and.
  11586      $           ifix(ob_dir(iip1)).ne.360.and.
  11587      $           ifix(ob_dir(iip1)).ne.0) then
  11588 c
  11589 c               Reject ob if neither neighbor has a northerly component
  11590 c               -------------------------------------------------------
  11591                 if(ifix(ob_dir(iim1)).lt.270.and.
  11592      $             ifix(ob_dir(iim1)).gt.90.and.

Page 255         Source Listing                  INVALID_QC
2017-04-18 11:07                                 acftobs_qc.f

  11593      $             ifix(ob_dir(iip1)).lt.270.and.
  11594      $             ifix(ob_dir(iip1)).gt.90) then
  11595 c
  11596                   if(ob_spd(ii).lt.7.75.and.
  11597      $               (ob_spd(iim1).lt.7.75.or.
  11598      $                ob_spd(iip1).lt.7.75).and.
  11599      $               abs(idt(ii)-idt(iim1)).gt.120.and.
  11600      $               abs(idt(ii)-idt(iip1)).gt.120) then
  11601 c
  11602 c                   light and variable ok except for high time resolution flights
  11603 c
  11604                   elseif(ob_spd(ii).lt.2.55.and.
  11605      $                   (ob_spd(iim1).lt.2.55.or.
  11606      $                    ob_spd(iip1).lt.2.55)) then
  11607 c
  11608 c                   light and variable ok for high time resolution flights
  11609 c
  11610                   elseif(ob_spd(ii).lt.7.75.and.
  11611      $                   ht_ft(ii).lt.10000.0.and.
  11612      $                   (ht_ft(iim1)-ht_ft(ii)).gt.8000.0.and.
  11613      $                   (ht_ft(iip1)-ht_ft(ii)).gt.8000.0) then
  11614 c
  11615 c                   large shear in low-res descent-ascent probably ok
  11616 c
  11617                   else
  11618 c
  11619                     c_qc(ii)(7:7) = 'B'
  11620                     n_bad360(ktype) = n_bad360(ktype) + 1
  11621 c
  11622                     l_print = .true.
  11623                     if(l_print) then
  11624                       write(io8,*)
  11625                       write(io8,*) 'Bad north wind found-1-ii = ',ii
  11626                     endif
  11627                   endif
  11628                 endif
  11629 c
  11630 c             Check if three consecutive north winds are ok
  11631 c             ---------------------------------------------
  11632               elseif(c_acftreg(ii)(1:8).eq.c_acftreg(iim1)(1:8).and.
  11633      $               c_acftid(ii)(1:8).eq.c_acftid(iim1)(1:8).and.
  11634      $               c_acftreg(ii)(1:8).eq.c_acftreg(iip1)(1:8).and.
  11635      $               c_acftid(ii)(1:8).eq.c_acftid(iip1)(1:8).and.
  11636      $               ob_dir(iim1).ne.amiss.and.
  11637      $               ob_spd(iim1).ne.amiss.and.
  11638      $               (ifix(ob_dir(iim1)).eq.360.or.
  11639      $                ifix(ob_dir(iim1)).eq.0).and.
  11640      $               ob_dir(iip1).ne.amiss.and.
  11641      $               ob_spd(iip1).ne.amiss.and.
  11642      $               (ifix(ob_dir(iip1)).eq.360.or.
  11643      $                ifix(ob_dir(iip1)).eq.0).and.
  11644      $               iim2.ne.0.and.
  11645      $               iip2.ne.0) then
  11646 c
  11647 c               Reject ob if neither neighbor has a northerly component
  11648 c               -------------------------------------------------------
  11649                 if(ifix(ob_dir(iim2)).lt.270.and.

Page 256         Source Listing                  INVALID_QC
2017-04-18 11:07                                 acftobs_qc.f

  11650      $             ifix(ob_dir(iim2)).gt.90.and.
  11651      $             ifix(ob_dir(iip2)).lt.270.and.
  11652      $             ifix(ob_dir(iip2)).gt.90) then
  11653 c
  11654                   if(ob_spd(ii).lt.7.75.and.
  11655      $               ((ob_spd(iim2).lt.7.75.and.
  11656      $                 ob_spd(iim1).lt.7.75).or.
  11657      $                (ob_spd(iip1).lt.7.75.and.
  11658      $                 ob_spd(iip2).lt.7.75)).and.
  11659      $               abs(idt(ii)-idt(iim1)).gt.120.and.
  11660      $               abs(idt(ii)-idt(iip1)).gt.120) then
  11661 c
  11662 c                   light and variable ok
  11663 c
  11664                   elseif(ob_spd(ii).lt.2.55.and.
  11665      $                   ((ob_spd(iim2).lt.2.55.and.
  11666      $                     ob_spd(iim1).lt.2.55).or.
  11667      $                    (ob_spd(iip1).lt.2.55.and.
  11668      $                     ob_spd(iip2).lt.2.55))) then
  11669 c
  11670 c                   light and variable ok
  11671 c
  11672                   else
  11673 c
  11674                     c_qc(ii)(7:7) = 'B'
  11675                     n_bad360(ktype) = n_bad360(ktype) + 1
  11676 c
  11677                     l_print = .true.
  11678                     if(l_print) then
  11679                       write(io8,*)
  11680                       write(io8,*) 'Bad north wind found-1-ii = ',ii
  11681                     endif
  11682                   endif
  11683                 endif
  11684 c
  11685 c             Check if previous ob from same flight
  11686 c             -------------------------------------
  11687               elseif(c_acftreg(ii)(1:8).eq.c_acftreg(iim1)(1:8).and.
  11688      $               c_acftid(ii)(1:8).eq.c_acftid(iim1)(1:8).and.
  11689      $               ob_dir(iim1).ne.amiss.and.
  11690      $               ob_spd(iim1).ne.amiss.and.
  11691      $               ifix(ob_dir(iim1)).ne.360.and.
  11692      $               ifix(ob_dir(iim1)).ne.0) then
  11693 c
  11694 c               Reject ob if neighbor does not have a northerly wind
  11695 c               ----------------------------------------------------
  11696                 if(ifix(ob_dir(iim1)).lt.270.and.
  11697      $             ifix(ob_dir(iim1)).gt.90) then
  11698 c
  11699                   if(ob_spd(ii).lt.7.75.and.
  11700      $               ob_spd(iim1).lt.7.75.and.
  11701      $               abs(idt(ii)-idt(iim1)).gt.120) then
  11702 c
  11703 c                   light and variable ok
  11704 c
  11705                   elseif(ob_spd(ii).lt.2.55.and.
  11706      $                   ob_spd(iim1).lt.2.55) then

Page 257         Source Listing                  INVALID_QC
2017-04-18 11:07                                 acftobs_qc.f

  11707 c
  11708 c                   light and variable ok
  11709 c
  11710                   elseif(ob_spd(ii).lt.7.75.and.
  11711      $                   ht_ft(ii).lt.10000.0.and.
  11712      $                   (ht_ft(iim1)-ht_ft(ii)).gt.8000.0) then
  11713 c
  11714 c                   large shear in low-res descent probably ok
  11715 c
  11716                   else
  11717 c
  11718                     c_qc(ii)(7:7) = 'B'
  11719                     n_bad360(ktype) = n_bad360(ktype) + 1
  11720 c
  11721                     l_print = .true.
  11722                     if(l_print) then
  11723                       write(io8,*)
  11724                       write(io8,*) 'Bad north wind found-2-ii = ',ii
  11725                     endif
  11726                   endif
  11727                 endif
  11728 c
  11729 c             Check if following ob from same flight
  11730 c             --------------------------------------
  11731               elseif(c_acftreg(ii)(1:8).eq.c_acftreg(iip1)(1:8).and.
  11732      $               c_acftid(ii)(1:8).eq.c_acftid(iip1)(1:8).and.
  11733      $               ob_dir(iip1).ne.amiss.and.
  11734      $               ob_spd(iip1).ne.amiss.and.
  11735      $               ifix(ob_dir(iip1)).ne.360.and.
  11736      $               ifix(ob_dir(iip1)).ne.0) then
  11737 c
  11738 c               Reject ob if neighbor does not have a northerly wind
  11739 c               ----------------------------------------------------
  11740                 if(ifix(ob_dir(iip1)).lt.270.and.
  11741      $             ifix(ob_dir(iip1)).gt.90) then
  11742 c
  11743                   if(ob_spd(ii).lt.7.75.and.
  11744      $               ob_spd(iip1).lt.7.75.and.
  11745      $               abs(idt(ii)-idt(iip1)).gt.120) then
  11746 c
  11747 c                   light and variable ok
  11748 c
  11749                   elseif(ob_spd(ii).lt.2.55.and.
  11750      $                   ob_spd(iip1).lt.2.55) then
  11751 c
  11752 c                   light and variable ok
  11753 c
  11754                   elseif(ob_spd(ii).lt.7.75.and.
  11755      $                   ht_ft(ii).lt.10000.0.and.
  11756      $                   (ht_ft(iip1)-ht_ft(ii)).gt.8000.0) then
  11757 c
  11758 c                   large shear in low-res ascent probably ok
  11759 c
  11760                   else
  11761 c
  11762                     c_qc(ii)(7:7) = 'B'
  11763                     n_bad360(ktype) = n_bad360(ktype) + 1

Page 258         Source Listing                  INVALID_QC
2017-04-18 11:07                                 acftobs_qc.f

  11764 c
  11765                     l_print = .true.
  11766                     if(l_print) then
  11767                       write(io8,*)
  11768                       write(io8,*) 'Bad north wind found-3-ii = ',ii
  11769                     endif
  11770                   endif
  11771                 endif
  11772 c
  11773 c             If neither ob is valid or from same flight, reject ob
  11774 c             -----------------------------------------------------
  11775               else
  11776 c
  11777                 c_qc(ii)(7:7) = 'B'
  11778                 n_bad360(ktype) = n_bad360(ktype) + 1
  11779 c
  11780                 l_print = .true.
  11781                 if(l_print) then
  11782                   write(io8,*)
  11783                   write(io8,*) 'Bad north wind found-4-ii = ',ii
  11784                 endif
  11785               endif
  11786 c
  11787 c           If first or last ob, reject ob
  11788 c           ------------------------------
  11789             else
  11790 c
  11791               c_qc(ii)(7:7) = 'B'
  11792               n_bad360(ktype) = n_bad360(ktype) + 1
  11793 c
  11794               l_print = .true.
  11795               if(l_print) then
  11796                 write(io8,*)
  11797                 write(io8,*) 'Bad north wind found-5-ii = ',ii
  11798               endif
  11799             endif
  11800 c
  11801 c Check for erroneous 180 deg wind directions
  11802 c -------------------------------------------
  11803           elseif(ifix(ob_dir(ii)).eq.180.and.
  11804      $           itype(ii).ne.i_man_airep.and.
  11805      $           itype(ii).ne.i_man_Yairep) then
  11806 c
  11807 c           Perform other checks if previous and following obs available
  11808 c           ------------------------------------------------------------
  11809             if(iim1.ne.0.and.iip1.ne.0) then
  11810 c
  11811 c             Check if previous and following obs from same flight
  11812 c             ----------------------------------------------------
  11813               if(c_acftreg(ii)(1:8).eq.c_acftreg(iim1)(1:8).and.
  11814      $           c_acftid(ii)(1:8).eq.c_acftid(iim1)(1:8).and.
  11815      $           c_acftreg(ii)(1:8).eq.c_acftreg(iip1)(1:8).and.
  11816      $           c_acftid(ii)(1:8).eq.c_acftid(iip1)(1:8).and.
  11817      $           ob_dir(iim1).ne.amiss.and.
  11818      $           ifix(ob_dir(iim1)).ne.0.and.
  11819      $           ob_dir(iip1).ne.amiss.and.
  11820      $           ifix(ob_dir(iip1)).ne.0) then

Page 259         Source Listing                  INVALID_QC
2017-04-18 11:07                                 acftobs_qc.f

  11821 c
  11822 c               Reject ob if neither neighbor has a southerly component
  11823 c               -------------------------------------------------------
  11824                 if((ifix(ob_dir(iim1)).lt.90.or.
  11825      $              ifix(ob_dir(iim1)).gt.270).and.
  11826      $             (ifix(ob_dir(iip1)).lt.90.or.
  11827      $              ifix(ob_dir(iip1)).gt.270)) then
  11828 c
  11829                   if(ob_spd(ii).lt.7.75.and.
  11830      $               (ob_spd(iim1).lt.7.75.or.
  11831      $                ob_spd(iip1).lt.7.75).and.
  11832      $               abs(idt(ii)-idt(iim1)).gt.120.and.
  11833      $               abs(idt(ii)-idt(iip1)).gt.120) then
  11834 c
  11835 c                   light and variable ok
  11836 c
  11837                   elseif(ob_spd(ii).lt.2.55.and.
  11838      $                   (ob_spd(iim1).lt.2.55.or.
  11839      $                    ob_spd(iip1).lt.2.55)) then
  11840 c
  11841 c                   light and variable ok
  11842 c
  11843                   elseif(ob_spd(ii).lt.7.75.and.
  11844      $                   ht_ft(ii).lt.10000.0.and.
  11845      $                   (ht_ft(iim1)-ht_ft(ii)).gt.8000.0.and.
  11846      $                   (ht_ft(iip1)-ht_ft(ii)).gt.8000.0) then
  11847 c
  11848 c                   large shear in low-res descent-ascent probably ok
  11849 c
  11850                   else
  11851 c
  11852                     c_qc(ii)(7:7) = 'B'
  11853                     n_bad180(ktype) = n_bad180(ktype) + 1
  11854 c
  11855                     l_print = .true.
  11856                     if(l_print) then
  11857                       write(io8,*)
  11858                       write(io8,*) 'Bad south wind found-1-ii = ',ii
  11859                       write(io8,*) 'dirs = ',ob_dir(iim1),ob_dir(ii)
  11860      $,                             ob_dir(iip1)
  11861                     endif
  11862                   endif
  11863                 endif
  11864 c
  11865 c             Check if previous ob from same flight
  11866 c             -------------------------------------
  11867               elseif(c_acftreg(ii)(1:8).eq.c_acftreg(iim1)(1:8).and.
  11868      $               c_acftid(ii)(1:8).eq.c_acftid(iim1)(1:8).and.
  11869      $               ob_dir(iim1).ne.amiss.and.
  11870      $               ifix(ob_dir(iim1)).ne.0) then
  11871 c
  11872 c               Reject ob if neighbor does not have a southerly wind
  11873 c               ----------------------------------------------------
  11874                 if(ifix(ob_dir(iim1)).lt.90.or.
  11875      $             ifix(ob_dir(iim1)).gt.270) then
  11876 c
  11877                   if(ob_spd(ii).lt.7.75.and.

Page 260         Source Listing                  INVALID_QC
2017-04-18 11:07                                 acftobs_qc.f

  11878      $               ob_spd(iim1).lt.7.75.and.
  11879      $               abs(idt(ii)-idt(iim1)).gt.120) then
  11880 c
  11881 c                   light and variable ok
  11882 c
  11883                   elseif(ob_spd(ii).lt.2.55.and.
  11884      $                   ob_spd(iim1).lt.2.55) then
  11885 c
  11886 c                   light and variable ok
  11887 c
  11888                   elseif(ob_spd(ii).lt.7.75.and.
  11889      $                   ht_ft(ii).lt.10000.0.and.
  11890      $                   (ht_ft(iim1)-ht_ft(ii)).gt.8000.0) then
  11891 c
  11892 c                   large shear in low-res descent probably ok
  11893 c
  11894                   else
  11895 c
  11896                     c_qc(ii)(7:7) = 'B'
  11897                     n_bad180(ktype) = n_bad180(ktype) + 1
  11898 c
  11899                     l_print = .true.
  11900                     if(l_print) then
  11901                       write(io8,*)
  11902                       write(io8,*) 'Bad south wind found-2-ii = ',ii
  11903                     endif
  11904                   endif
  11905                 endif
  11906 c
  11907 c             Check if following ob from same flight
  11908 c             --------------------------------------
  11909               elseif(c_acftreg(ii)(1:8).eq.c_acftreg(iip1)(1:8).and.
  11910      $               c_acftid(ii)(1:8).eq.c_acftid(iip1)(1:8).and.
  11911      $               ob_dir(iip1).ne.amiss.and.
  11912      $               ifix(ob_dir(iip1)).ne.0) then
  11913 c
  11914 c               Reject ob if neighbor does not have a southerly wind
  11915 c               ----------------------------------------------------
  11916                 if(ifix(ob_dir(iip1)).lt.90.or.
  11917      $             ifix(ob_dir(iip1)).gt.270) then
  11918 c
  11919                   if(ob_spd(ii).lt.7.75.and.
  11920      $               ob_spd(iip1).lt.7.75.and.
  11921      $               abs(idt(ii)-idt(iim1)).gt.120) then
  11922 c
  11923 c                   light and variable ok
  11924 c
  11925                   elseif(ob_spd(ii).lt.2.55.and.
  11926      $                   ob_spd(iip1).lt.2.55) then
  11927 c
  11928 c                   light and variable ok
  11929 c
  11930                   elseif(ob_spd(ii).lt.7.75.and.
  11931      $                   ht_ft(ii).lt.10000.0.and.
  11932      $                   (ht_ft(iip1)-ht_ft(ii)).gt.8000.0) then
  11933 c
  11934 c                   large shear in low-res ascent probably ok

Page 261         Source Listing                  INVALID_QC
2017-04-18 11:07                                 acftobs_qc.f

  11935 c
  11936                   else
  11937 c
  11938                     c_qc(ii)(7:7) = 'B'
  11939                     n_bad180(ktype) = n_bad180(ktype) + 1
  11940 c
  11941                     l_print = .true.
  11942                     if(l_print) then
  11943                       write(io8,*)
  11944                       write(io8,*) 'Bad south wind found-3-ii = ',ii
  11945                     endif
  11946                   endif
  11947                 endif
  11948 c
  11949 c             If neither ob is valid or from same flight, reject ob
  11950 c             -----------------------------------------------------
  11951               else
  11952 c
  11953                 c_qc(ii)(7:7) = 'B'
  11954                 n_bad180(ktype) = n_bad180(ktype) + 1
  11955 c
  11956                 l_print = .true.
  11957                 if(l_print) then
  11958                   write(io8,*)
  11959                   write(io8,*) 'Bad south wind found-4-ii = ',ii
  11960                 endif
  11961               endif
  11962 c
  11963 c           If first or last ob, reject ob
  11964 c           ------------------------------
  11965             else
  11966 c
  11967               c_qc(ii)(7:7) = 'B'
  11968               n_bad180(ktype) = n_bad180(ktype) + 1
  11969 c
  11970               l_print = .true.
  11971               if(l_print) then
  11972                 write(io8,*)
  11973                 write(io8,*) 'Bad south wind found-5-ii = ',ii
  11974               endif
  11975             endif
  11976           endif
  11977 c
  11978         endif
  11979 c
  11980 c Print selected rejected reports
  11981 c -------------------------------
  11982         if(l_print) then
  11983 c
  11984 c          if(iob.gt.1) then
  11985 c            iim1 = indx(iob-1)
  11986 c          else
  11987 c            iim1 = indx(1)
  11988 c          endif
  11989 c          if(iob.lt.numreps) then
  11990 c            iip1 = indx(iob+1)
  11991 c          else

Page 262         Source Listing                  INVALID_QC
2017-04-18 11:07                                 acftobs_qc.f

  11992 c            iip1 = indx(numreps)
  11993 c          endif
  11994 c
  11995           if(iim1.eq.0) iim1 = ii
  11996           if(iip1.eq.0) iip1 = ii
  11997 c
  11998           write(io8,8002) iim1,c_insty_ob(itype(iim1))
  11999      x,        c_acftreg(iim1),c_acftid(iim1)
  12000      x,        idt(iim1),alat(iim1),alon(iim1)
  12001      x,        pres(iim1),ht_ft(iim1)
  12002      x,        t_prcn(iim1),ob_t(iim1),xiv_t(iim1),ichk_t(iim1)
  12003      x,        ob_q(iim1),xiv_q(iim1),ichk_q(iim1)
  12004      x,        ob_dir(iim1),xiv_d(iim1),ichk_d(iim1)
  12005      x,        ob_spd(iim1),xiv_s(iim1),ichk_s(iim1)
  12006      x,        c_qc(iim1)
  12007           write(io8,8002) ii,c_insty_ob(itype(ii))
  12008      x,        c_acftreg(ii),c_acftid(ii)
  12009      x,        idt(ii),alat(ii),alon(ii)
  12010      x,        pres(ii),ht_ft(ii)
  12011      x,        t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
  12012      x,        ob_q(ii),xiv_q(ii),ichk_q(ii)
  12013      x,        ob_dir(ii),xiv_d(ii),ichk_d(ii)
  12014      x,        ob_spd(ii),xiv_s(ii),ichk_s(ii)
  12015      x,        c_qc(ii)
  12016           write(io8,8002) iip1,c_insty_ob(itype(iip1))
  12017      x,        c_acftreg(iip1),c_acftid(iip1)
  12018      x,        idt(iip1),alat(iip1),alon(iip1)
  12019      x,        pres(iip1),ht_ft(iip1)
  12020      x,        t_prcn(iip1),ob_t(iip1),xiv_t(iip1),ichk_t(iip1)
  12021      x,        ob_q(iip1),xiv_q(iip1),ichk_q(iip1)
  12022      x,        ob_dir(iip1),xiv_d(iip1),ichk_d(iip1)
  12023      x,        ob_spd(iip1),xiv_s(iip1),ichk_s(iip1)
  12024      x,        c_qc(iip1)
  12025  8002     format(i6,1x,a8,1x,a8,1x,a9,1x,i7,1x,2f11.5,1x
  12026      x,        f8.1,1x,f7.0,1x,f5.2,4(2(1x,f8.2),1x,i5),1x
  12027      x,        '!',a11,'!')
  12028         endif
  12029 c
  12030 c     End loop over reports
  12031 c     ---------------------
  12032       enddo
  12033 c
  12034 c Write out bad reports
  12035 c ---------------------
  12036       if(.not.l_operational) then
  12037         write(io32,*)
  12038         write(io32,*) 'Invalid reports'
  12039         write(io32,*) '---------------'
  12040         write(io32,3001)
  12041  3001   format(' index  type    tail num   flight     time       lat'
  12042      x,        '        lon       pres  height '
  12043      x,        't-prcn   temp     innov  ichk'
  12044      x,        ' spec hum    innov  ichk'
  12045      x,        '   ob_dir    innov  ichk'
  12046      x,        '   ob_spd    innov  ichk'
  12047      x,        '   qc flag')
  12048       endif

Page 263         Source Listing                  INVALID_QC
2017-04-18 11:07                                 acftobs_qc.f

  12049 c
  12050       kbad = 0
  12051 c
  12052 c     Loop over reports
  12053 c     -----------------
  12054       do iob = 1,numreps
  12055         ii = indx(iob)
  12056 c
  12057 c       Count number of reports considered
  12058 c       ----------------------------------
  12059         if(itype(ii).eq.i_acars.or.
  12060      $     itype(ii).eq.i_acars_asc.or.
  12061      $     itype(ii).eq.i_acars_lvl.or.
  12062      $     itype(ii).eq.i_acars_des) then
  12063           nrep_Ac = nrep_Ac + 1
  12064         elseif(itype(ii).eq.i_mdcrs.or.
  12065      $         itype(ii).eq.i_mdcrs_asc.or.
  12066      $         itype(ii).eq.i_mdcrs_lvl.or.
  12067      $         itype(ii).eq.i_mdcrs_des) then
  12068           nrep_Md = nrep_Md + 1
  12069         elseif(itype(ii).eq.i_man_airep.or.
  12070      $         itype(ii).eq.i_man_Yairep) then
  12071           nrep_Ma = nrep_Ma + 1
  12072         elseif(itype(ii).eq.i_airep.or.
  12073      $         itype(ii).eq.i_airep_asc.or.
  12074      $         itype(ii).eq.i_airep_lvl.or.
  12075      $         itype(ii).eq.i_airep_des) then
  12076           nrep_Ar = nrep_Ar + 1
  12077         elseif(itype(ii).eq.i_amdar.or.
  12078      $         itype(ii).eq.i_amdar_asc.or.
  12079      $         itype(ii).eq.i_amdar_lvl.or.
  12080      $         itype(ii).eq.i_amdar_des) then
  12081           nrep_Am = nrep_Am + 1
  12082         else
  12083           write(io8,*)
  12084           write(io8,*) 'Bad itype: ',itype(ii),' for ii = ',ii
  12085         endif
  12086 c
  12087 c       Count number of reports rejected as invalid
  12088 c       -------------------------------------------
  12089         if(c_qc(ii)(1:1).eq.'B'.or.
  12090      $     c_qc(ii)(5:5).eq.'B'.or.
  12091      $     c_qc(ii)(2:2).eq.'M'.or.
  12092      $     c_qc(ii)(3:3).eq.'M'.or.
  12093      $     c_qc(ii)(4:4).eq.'M'.or.
  12094      $     c_qc(ii)(5:5).eq.'M'.or.
  12095      $     c_qc(ii)(6:8).eq.'MMM'.or.
  12096      $     c_qc(ii)(3:4).eq.'BB') then
  12097 c
  12098           if(itype(ii).eq.i_mdcrs.or.
  12099      $       itype(ii).eq.i_mdcrs_asc.or.
  12100      $       itype(ii).eq.i_mdcrs_lvl.or.
  12101      $       itype(ii).eq.i_mdcrs_des) then
  12102             nbad_Md = nbad_Md + 1
  12103             ktype = 1
  12104 c
  12105           elseif(itype(ii).eq.i_acars.or.

Page 264         Source Listing                  INVALID_QC
2017-04-18 11:07                                 acftobs_qc.f

  12106      $           itype(ii).eq.i_acars_asc.or.
  12107      $           itype(ii).eq.i_acars_lvl.or.
  12108      $           itype(ii).eq.i_acars_des) then
  12109             nbad_Ac = nbad_Ac + 1
  12110             ktype = 2
  12111 c
  12112           elseif(itype(ii).eq.i_amdar.or.
  12113      $           itype(ii).eq.i_amdar_asc.or.
  12114      $           itype(ii).eq.i_amdar_lvl.or.
  12115      $           itype(ii).eq.i_amdar_des) then
  12116             nbad_Am = nbad_Am + 1
  12117             ktype = 3
  12118 c
  12119           elseif(itype(ii).eq.i_airep.or.
  12120      $           itype(ii).eq.i_airep_asc.or.
  12121      $           itype(ii).eq.i_airep_lvl.or.
  12122      $           itype(ii).eq.i_airep_des) then
  12123             nbad_Ar = nbad_Ar + 1
  12124             ktype = 4
  12125 c
  12126           elseif(itype(ii).eq.i_man_airep.or.
  12127      $           itype(ii).eq.i_man_Yairep) then
  12128             nbad_Ma = nbad_Ma + 1
  12129             ktype = 5
  12130 c
  12131           else
  12132             write(io8,*)
  12133             write(io8,*) 'Bad itype: ',itype(ii),' for ii = ',ii
  12134           endif
  12135 c
  12136 c         Flag bad report for reorder subroutine and output rejects
  12137 c         ---------------------------------------------------------
  12138           csort(ii)(1:5) = 'badob'
  12139 c
  12140           kbad(ktype) = kbad(ktype) + 1
  12141 c
  12142           if(.not.l_operational) then
  12143             write(io32,3002) ii,c_insty_ob(itype(ii))
  12144      x,        c_acftreg(ii),c_acftid(ii)
  12145      x,        idt(ii),alat(ii),alon(ii)
  12146      x,        pres(ii),ht_ft(ii)
  12147      x,        t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
  12148      x,        ob_q(ii),xiv_q(ii),ichk_q(ii)
  12149      x,        ob_dir(ii),xiv_d(ii),ichk_d(ii)
  12150      x,        ob_spd(ii),xiv_s(ii),ichk_s(ii)
  12151      x,        c_qc(ii)
  12152  3002       format(i6,1x,a8,1x,a8,1x,a9,1x,i7,1x,2f11.5,1x,f8.1,1x,f7.0
  12153      x,          1x,f5.2,4(2(1x,f8.2),1x,i5),1x,'!',a11,'!')
  12154           endif
  12155         endif
  12156       enddo
  12157 c
  12158 c     Loop over reports
  12159 c     -----------------
  12160       if(.not.l_operational) then
  12161         write(io32,*)
  12162         write(io32,*) 'Invalid temperatures (-9C)'

Page 265         Source Listing                  INVALID_QC
2017-04-18 11:07                                 acftobs_qc.f

  12163         write(io32,*) '--------------------------'
  12164         write(io32,3001)
  12165 c
  12166         do iob = 1,numreps
  12167           ii = indx(iob)
  12168 c
  12169 c         Count number of reports rejected as invalid
  12170 c         -------------------------------------------
  12171           if(c_qc(ii)(6:6).eq.'I') then
  12172 c
  12173 c           Output rejected temperatures
  12174 c           ----------------------------
  12175             write(io32,3002) ii,c_insty_ob(itype(ii))
  12176      x,        c_acftreg(ii),c_acftid(ii)
  12177      x,        idt(ii),alat(ii),alon(ii)
  12178      x,        pres(ii),ht_ft(ii)
  12179      x,        t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
  12180      x,        ob_q(ii),xiv_q(ii),ichk_q(ii)
  12181      x,        ob_dir(ii),xiv_d(ii),ichk_d(ii)
  12182      x,        ob_spd(ii),xiv_s(ii),ichk_s(ii)
  12183      x,        c_qc(ii)
  12184 c
  12185 c           Count number of rejected temps by tail number
  12186 c           ---------------------------------------------
  12187             mm = 1
  12188             do while(mm.le.kreg)
  12189               if(c_acftreg(ii).eq.creg_reg(mm)) then 
  12190 c
  12191                 if(ktype.gt.0.and.ktype.le.5) then
  12192                   ntemp_reg(mm,ktype) = ntemp_reg(mm,ktype) + 1
  12193                 endif
  12194                 mm = kreg + 1
  12195               endif
  12196               mm = mm + 1
  12197             enddo
  12198           endif
  12199         enddo
  12200       endif
  12201 c
  12202 c     Output statistics
  12203 c     -----------------
  12204       if(.not.l_operational) then
  12205         write(io32,*)
  12206         write(io32,*)'  Number of invalid MDCRS    reps rejected = '
  12207      $,                   kbad(1)
  12208 ccccdak        write(io32,*)'  Number of invalid ACARS    reps rejected = '
  12209         write(io32,*)'  Number of invalid TAMDAR   reps rejected = '
  12210      $,                   kbad(2)
  12211         write(io32,*)'  Number of invalid AMDAR    reps rejected = '
  12212      $,                   kbad(3)
  12213         write(io32,*)'  Number of invalid AIREP    reps rejected = '
  12214      $,                   kbad(4)
  12215         write(io32,*)'  Number of invalid manAIREP reps rejected = '
  12216      $,                   kbad(5)
  12217       endif
  12218 c
  12219       write(io8,*)

Page 266         Source Listing                  INVALID_QC
2017-04-18 11:07                                 acftobs_qc.f

  12220       write(io8,*) '  Invalid reports--rejected'
  12221       write(io8,*) '  -------------------------'
  12222       write(io8,*)'  Number of invalid MDCRS    reps rejected = '
  12223      $,                   kbad(1)
  12224 ccccdak      write(io8,*)'  Number of invalid ACARS    reps rejected = '
  12225       write(io8,*)'  Number of invalid TAMDAR   reps rejected = '
  12226      $,                   kbad(2)
  12227       write(io8,*)'  Number of invalid AMDAR    reps rejected = '
  12228      $,                   kbad(3)
  12229       write(io8,*)'  Number of invalid AIREP    reps rejected = '
  12230      $,                   kbad(4)
  12231       write(io8,*)'  Number of invalid manAIREP reps rejected = '
  12232      $,                   kbad(5)
  12233 c
  12234 c     Output detailed stats
  12235 c     ---------------------
  12236       write(*,*)
  12237       write(*,*) 'Invalid check data counts--',cdtg_an
  12238       write(*,*) '-------------------------------------'
  12239       write(*,'(1x,a55)')
  12240 ccccdak     $ 'Type of check     MDCRS   ACARS   AMDAR   AIREP     man'
  12241      $ 'Type of check     MDCRS  TAMDAR   AMDAR   AIREP     man'
  12242       write(*,'(1x,a55)')
  12243      $ '--------------- ------- ------- ------- ------- -------'
  12244       write(*,'('' Num considered '',5(1x,i7))')
  12245      $     nrep_Md,nrep_Ac,nrep_Am,nrep_Ar,nrep_Ma
  12246       write(*,'('' Total invalid  '',5(1x,i7))')
  12247      $     nbad_Md,nbad_Ac,nbad_Am,nbad_Ar,nbad_Ma
  12248       write(*,'(1x,a55)')
  12249      $ '--------------- ------- ------- ------- ------- -------'
  12250 c
  12251       write(io8,*)
  12252       write(io8,*) 'Invalid check data counts'
  12253       write(io8,*) '-------------------------'
  12254       write(io8,'(1x,a55)')
  12255 ccccdak     $ 'Type of check     MDCRS   ACARS   AMDAR   AIREP     man'
  12256      $ 'Type of check     MDCRS  TAMDAR   AMDAR   AIREP     man'
  12257       write(io8,'(1x,a55)')
  12258      $ '--------------- ------- ------- ------- ------- -------'
  12259       write(io8,'(''Num considered '',5(1x,i7))')
  12260      $     nrep_Md,nrep_Ac,nrep_Am,nrep_Ar,nrep_Ma
  12261       write(io8,'(''Total invalid  '',5(1x,i7))')
  12262      $     nbad_Md,nbad_Ac,nbad_Am,nbad_Ar,nbad_Ma
  12263       write(io8,'(1x,a55)')
  12264      $ '--------------- ------- ------- ------- ------- -------'
  12265       write(io8,'(''Empty reports  '',5(1x,i7))')
  12266      $     n_empty(1),n_empty(2),n_empty(3),n_empty(4),n_empty(5)
  12267       write(io8,'(''Zero tmp/winds '',5(1x,i7))') n_zero_tmp(1)
  12268      $,    n_zero_tmp(2),n_zero_tmp(3),n_zero_tmp(4),n_zero_tmp(5)
  12269       write(io8,'(''Zero alt/winds '',5(1x,i7))') n_zero_alt(1)
  12270      $,    n_zero_alt(2),n_zero_alt(3),n_zero_alt(4),n_zero_alt(5)
  12271       write(io8,'(''Zero lat/lon   '',5(1x,i7))') n_zero_pos(1)
  12272      $,    n_zero_pos(2),n_zero_pos(3),n_zero_pos(4),n_zero_pos(5)
  12273       write(io8,'(''Missing ids    '',24x,2(1x,i7),8x)')
  12274      $     n_xx999_Ar,n_xx999_Ma
  12275       write(io8,'(''Blank ids      '',1x,i7,8x,3(1x,i7))')
  12276      $     n_blank_Md,n_blank_Am,n_blank_Ar,n_blank_Ma

Page 267         Source Listing                  INVALID_QC
2017-04-18 11:07                                 acftobs_qc.f

  12277       write(io8,'(''Bad decode     '',5(1x,i7))')
  12278      $     n_bad_decode(1),n_bad_decode(2),n_bad_decode(3)
  12279      $,    n_bad_decode(4),n_bad_decode(5)
  12280       write(io8,'(''Missing time   '',5(1x,i7))')
  12281      $     n_miss_time(1),n_miss_time(2),n_miss_time(3)
  12282      $,    n_miss_time(4),n_miss_time(5)
  12283       write(io8,'(''Missing pos    '',5(1x,i7))')
  12284      $     n_miss_pos(1),n_miss_pos(2),n_miss_pos(3)
  12285      $,    n_miss_pos(4),n_miss_pos(5)
  12286       write(io8,'(''Missing pres   '',5(1x,i7))')
  12287      $     n_miss_pres(1),n_miss_pres(2),n_miss_pres(3)
  12288      $,    n_miss_pres(4),n_miss_pres(5)
  12289       write(io8,'(''Small pres     '',5(1x,i7))')
  12290      $     n_small_pres(1),n_small_pres(2),n_small_pres(3)
  12291      $,    n_small_pres(4),n_small_pres(5)
  12292       write(io8,'(''Low AIREPs     '',5(1x,i7))')
  12293      $     n_low_airep(1),n_low_airep(2),n_low_airep(3)
  12294      $,    n_low_airep(4),n_low_airep(5)
  12295       write(io8,'(1x,a55)')
  12296      $ '--------------- ------- ------- ------- ------- -------'
  12297       write(io8,'(''-9C temps      '',5(1x,i7))')
  12298      $     n_minus9C(1),n_minus9C(2),n_minus9C(3)
  12299      $,    n_minus9C(4),n_minus9C(5)
  12300       write(io8,'(1x,a55)')
  12301      $ '--------------- ------- ------- ------- ------- -------'
  12302       write(io8,'(''Bad north wind '',5(1x,i7))')
  12303      $     n_bad360(1),n_bad360(2),n_bad360(3)
  12304      $,    n_bad360(4),n_bad360(5)
  12305       write(io8,'(''Bad south wind '',5(1x,i7))')
  12306      $     n_bad180(1),n_bad180(2),n_bad180(3)
  12307      $,    n_bad180(4),n_bad180(5)
  12308       write(io8,'(1x,a55)')
  12309      $ '--------------- ------- ------- ------- ------- -------'
  12310 c
  12311       kbadtot = kbad(1) + kbad(2) + kbad(3)
  12312      $        + kbad(4) + kbad(5) 
  12313 c
  12314       write(io8,*)
  12315       write(io8,*) numreps,' good reports processed'
  12316       write(io8,*) kbadtot,' reports failed qc in invalid check'
  12317 c
  12318       return
  12319       end

Page 268         Source Listing                  INVALID_QC
2017-04-18 11:07 Entry Points                    acftobs_qc.f



ENTRY POINTS

  Name                   
                         
 invalid_qc_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 10                         Label  11026                                                          11039                             
 15                         Label  11048                                                          11061                             
 20                         Label  11070                                                          11083                             
 25                         Label  11092                                                          11105                             
 3001                       Label  12041                                                          12040,12164                       
 3002                       Label  12152                                                          12143,12175                       
 8002                       Label  12025                                                          11998,12007,12016                 
 ABS                        Func   11224                                scalar                    11224,11225,11316,11347,11599,1160
                                                                                                  0,11659,11660,11701,11745,11832,11
                                                                                                  833,11879,11921                   
 ALAT                       Dummy  10801    R(8)            8     1     0        ARG,INOUT        11224,11255,11258,12000,12009,1201
                                                                                                  8,12145,12177                     
 ALON                       Dummy  10801    R(8)            8     1     0        ARG,INOUT        11225,11256,11259,12000,12009,1201
                                                                                                  8,12145,12177                     
 AMISS                      Dummy  10804    R(4)            4           scalar   ARG,INOUT        11255,11256,11258,11259,11272,1133
                                                                                                  0,11331,11332,11335,11354,11371,11
                                                                                                  566,11580,11581,11584,11585,11636,
                                                                                                  11637,11640,11641,11689,11690,1173
                                                                                                  3,11734,11817,11819,11869,11911   
 CDTG_AN                    Dummy  10805    CHAR            10          scalar   ARG,INOUT        12237                             
 CREG_REG                   Dummy  10802    CHAR            8     1     0        ARG,INOUT        12189                             
 CSORT                      Dummy  10804    CHAR            25    1     0        ARG,INOUT        12138                             
 C_ACFTID                   Dummy  10800    CHAR            9     1     0        ARG,INOUT        11144,11145,11290,11291,11436,1145
                                                                                                  7,11470,11537,11577,11579,11633,11
                                                                                                  635,11688,11732,11814,11816,11868,
                                                                                                  11910,11999,12008,12017,12144,1217
                                                                                                  6                                 
 C_ACFTREG                  Dummy  10800    CHAR            8     1     0        ARG,INOUT        11172,11197,11435,11456,11469,1153
                                                                                                  6,11576,11578,11632,11634,11687,11
                                                                                                  731,11813,11815,11867,11909,11999,
                                                                                                  12008,12017,12144,12176,12189     
 C_INSTY_OB                 Func   10859    CHAR            16          scalar                    11998,12007,12016,12143,12175     
 C_QC                       Dummy  10800    CHAR            11    1     0        ARG,INOUT        11028,11029,11030,11031,11032,1103
                                                                                                  3,11034,11035,11036,11037,11050,11
                                                                                                  051,11052,11053,11054,11055,11056,
                                                                                                  11057,11058,11059,11072,11073,1107
                                                                                                  4,11075,11076,11077,11078,11079,11
                                                                                                  080,11081,11094,11095,11096,11097,
                                                                                                  11098,11099,11100,11101,11102,1110
                                                                                                  3,11147,11174,11200,11211,11228,11
                                                                                                  242,11258,11259,11274,11300,11318,
                                                                                                  11334,11335,11353,11354,11370,1137
                                                                                                  1,11423,11424,11449,11450,11487,11
                                                                                                  488,11492,11493,11497,11498,11515,

Page 269         Source Listing                  INVALID_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  11516,11520,11521,11550,11551,1161
                                                                                                  9,11674,11718,11762,11777,11791,11
                                                                                                  852,11896,11938,11953,11967,12006,
                                                                                                  12015,12024,12089,12090,12091,1209
                                                                                                  2,12093,12094,12095,12096,12151,12
                                                                                                  171,12183                         
 HT_FT                      Dummy  10801    R(4)            4     1     0        ARG,INOUT        11272,11287,11316,11366,11414,1161
                                                                                                  1,11612,11613,11711,11712,11755,11
                                                                                                  756,11844,11845,11846,11889,11890,
                                                                                                  11931,11932,12001,12010,12019,1214
                                                                                                  6,12178                           
 ICHK_D                     Dummy  10803    I(4)            4     1     0        ARG,INOUT        12004,12013,12022,12149,12181     
 ICHK_Q                     Dummy  10803    I(4)            4     1     0        ARG,INOUT        12003,12012,12021,12148,12180     
 ICHK_S                     Dummy  10803    I(4)            4     1     0        ARG,INOUT        12005,12014,12023,12150,12182     
 ICHK_T                     Dummy  10803    I(4)            4     1     0        ARG,INOUT        12002,12011,12020,12147,12179     
 IDT                        Dummy  10803    I(4)            4     1     0        ARG,INOUT        11240,11599,11600,11659,11660,1170
                                                                                                  1,11745,11832,11833,11879,11921,12
                                                                                                  000,12009,12018,12145,12177       
 IFIX                       Func   11348                                scalar                    11348,11349,11366,11367,11368,1139
                                                                                                  7,11439,11460,11477,11540,11563,11
                                                                                                  564,11565,11582,11583,11586,11587,
                                                                                                  11591,11592,11593,11594,11638,1163
                                                                                                  9,11642,11643,11649,11650,11651,11
                                                                                                  652,11691,11692,11696,11697,11735,
                                                                                                  11736,11740,11741,11803,11818,1182
                                                                                                  0,11824,11825,11826,11827,11870,11
                                                                                                  874,11875,11912,11916,11917       
 II                         Local  10873    I(4)            4           scalar                    11021,11113,11114,11115,11116,1111
                                                                                                  9,11120,11121,11122,11125,11126,11
                                                                                                  127,11128,11131,11132,11133,11134,
                                                                                                  11137,11138,11144,11145,11147,1117
                                                                                                  2,11174,11197,11200,11211,11224,11
                                                                                                  225,11228,11240,11242,11255,11256,
                                                                                                  11258,11259,11272,11274,11287,1128
                                                                                                  8,11289,11290,11291,11296,11300,11
                                                                                                  313,11314,11315,11316,11318,11330,
                                                                                                  11331,11332,11334,11335,11347,1134
                                                                                                  8,11349,11350,11351,11353,11354,11
                                                                                                  366,11367,11368,11370,11371,11388,
                                                                                                  11397,11398,11414,11420,11423,1142
                                                                                                  4,11435,11436,11446,11449,11450,11
                                                                                                  456,11457,11460,11461,11469,11470,
                                                                                                  11484,11492,11493,11512,11520,1152
                                                                                                  1,11536,11537,11547,11550,11551,11
                                                                                                  563,11564,11565,11566,11567,11568,
                                                                                                  11576,11577,11578,11579,11596,1159
                                                                                                  9,11600,11604,11610,11611,11612,11
                                                                                                  613,11619,11625,11632,11633,11634,
                                                                                                  11635,11654,11659,11660,11664,1167
                                                                                                  4,11680,11687,11688,11699,11701,11
                                                                                                  705,11710,11711,11712,11718,11724,
                                                                                                  11731,11732,11743,11745,11749,1175
                                                                                                  4,11755,11756,11762,11768,11777,11
                                                                                                  783,11791,11797,11803,11804,11805,
                                                                                                  11813,11814,11815,11816,11829,1183

Page 270         Source Listing                  INVALID_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  2,11833,11837,11843,11844,11845,11
                                                                                                  846,11852,11858,11859,11867,11868,
                                                                                                  11877,11879,11883,11888,11889,1189
                                                                                                  0,11896,11902,11909,11910,11919,11
                                                                                                  921,11925,11930,11931,11932,11938,
                                                                                                  11944,11953,11959,11967,11973,1199
                                                                                                  5,11996,12007,12008,12009,12010,12
                                                                                                  011,12012,12013,12014,12015,12055,
                                                                                                  12059,12060,12061,12062,12064,1206
                                                                                                  5,12066,12067,12069,12070,12072,12
                                                                                                  073,12074,12075,12077,12078,12079,
                                                                                                  12080,12084,12089,12090,12091,1209
                                                                                                  2,12093,12094,12095,12096,12098,12
                                                                                                  099,12100,12101,12105,12106,12107,
                                                                                                  12108,12112,12113,12114,12115,1211
                                                                                                  9,12120,12121,12122,12126,12127,12
                                                                                                  133,12138,12143,12144,12145,12146,
                                                                                                  12147,12148,12149,12150,12151,1216
                                                                                                  7,12171,12175,12176,12177,12178,12
                                                                                                  179,12180,12181,12182,12183,12189 
 IIM1                       Local  10875    I(4)            4           scalar                    11027,11028,11029,11030,11031,1103
                                                                                                  2,11033,11034,11035,11036,11037,11
                                                                                                  042,11401,11403,11430,11435,11436,
                                                                                                  11438,11439,11440,11456,11457,1145
                                                                                                  9,11487,11488,11515,11516,11572,11
                                                                                                  576,11577,11580,11581,11582,11583,
                                                                                                  11591,11592,11597,11599,11605,1161
                                                                                                  2,11632,11633,11636,11637,11638,11
                                                                                                  639,11656,11659,11666,11687,11688,
                                                                                                  11689,11690,11691,11692,11696,1169
                                                                                                  7,11700,11701,11706,11712,11809,11
                                                                                                  813,11814,11817,11818,11824,11825,
                                                                                                  11830,11832,11838,11845,11859,1186
                                                                                                  7,11868,11869,11870,11874,11875,11
                                                                                                  878,11879,11884,11890,11921,11995,
                                                                                                  11998,11999,12000,12001,12002,1200
                                                                                                  3,12004,12005,12006               
 IIM2                       Local  10874    I(4)            4           scalar                    11049,11050,11051,11052,11053,1105
                                                                                                  4,11055,11056,11057,11058,11059,11
                                                                                                  064,11644,11649,11650,11655,11665 
 IIP1                       Local  10876    I(4)            4           scalar                    11071,11072,11073,11074,11075,1107
                                                                                                  6,11077,11078,11079,11080,11081,11
                                                                                                  086,11407,11409,11465,11469,11470,
                                                                                                  11476,11477,11478,11497,11498,1153
                                                                                                  1,11536,11537,11539,11540,11541,11
                                                                                                  572,11578,11579,11584,11585,11586,
                                                                                                  11587,11593,11594,11598,11600,1160
                                                                                                  6,11613,11634,11635,11640,11641,11
                                                                                                  642,11643,11657,11660,11667,11731,
                                                                                                  11732,11733,11734,11735,11736,1174
                                                                                                  0,11741,11744,11745,11750,11756,11
                                                                                                  809,11815,11816,11819,11820,11826,
                                                                                                  11827,11831,11833,11839,11846,1186
                                                                                                  0,11909,11910,11911,11912,11916,11
                                                                                                  917,11920,11926,11932,11996,12016,

Page 271         Source Listing                  INVALID_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  12017,12018,12019,12020,12021,1202
                                                                                                  2,12023,12024                     
 IIP2                       Local  10877    I(4)            4           scalar                    11093,11094,11095,11096,11097,1109
                                                                                                  8,11099,11100,11101,11102,11103,11
                                                                                                  108,11645,11651,11652,11658,11668 
 IMISS                      Dummy  10804    I(4)            4           scalar   ARG,INOUT        11240                             
 INDX                       Dummy  10804    I(4)            4     1     0        ARG,INOUT        11021,11027,11049,11071,11093,1140
                                                                                                  3,11409,12055,12167               
 INSTY_OB_FUN               Func   10861    I(4)            4           scalar                    10958,10959,10960,10961,10962,1096
                                                                                                  3,10964,10965,10966,10967,10968,10
                                                                                                  969,10970,10971,10972,10973,10974,
                                                                                                  10975                             
 INVALID_QC                 Subr   10800                                                                                            
 IO32                       Dummy  10804    I(4)            4           scalar   ARG,INOUT        12037,12038,12039,12040,12143,1216
                                                                                                  1,12162,12163,12164,12175,12205,12
                                                                                                  206,12209,12211,12213,12215       
 IO8                        Dummy  10804    I(4)            4           scalar   ARG,INOUT        11158,11159,11191,11192,11205,1120
                                                                                                  6,11217,11218,11234,11235,11248,11
                                                                                                  249,11266,11267,11280,11281,11295,
                                                                                                  11296,11306,11307,11324,11325,1134
                                                                                                  1,11342,11360,11361,11377,11378,11
                                                                                                  418,11419,11444,11445,11482,11483,
                                                                                                  11510,11511,11545,11546,11624,1162
                                                                                                  5,11679,11680,11723,11724,11767,11
                                                                                                  768,11782,11783,11796,11797,11857,
                                                                                                  11858,11859,11901,11902,11943,1194
                                                                                                  4,11958,11959,11972,11973,11998,12
                                                                                                  007,12016,12083,12084,12132,12133,
                                                                                                  12219,12220,12221,12222,12225,1222
                                                                                                  7,12229,12231,12251,12252,12253,12
                                                                                                  254,12257,12259,12261,12263,12265,
                                                                                                  12267,12269,12271,12273,12275,1227
                                                                                                  7,12280,12283,12286,12289,12292,12
                                                                                                  295,12297,12300,12302,12305,12308,
                                                                                                  12314,12315,12316                 
 IOB                        Local  10872    I(4)            4           scalar                    11015,11021,11025,11069,11400,1140
                                                                                                  3,11406,11409,12054,12055,12166,12
                                                                                                  167                               
 ITYPE                      Dummy  10803    I(4)            4     1     0        ARG,INOUT        11113,11114,11115,11116,11119,1112
                                                                                                  0,11121,11122,11125,11126,11127,11
                                                                                                  128,11131,11132,11133,11134,11137,
                                                                                                  11138,11288,11289,11313,11314,1131
                                                                                                  5,11350,11351,11398,11440,11461,11
                                                                                                  478,11541,11567,11568,11804,11805,
                                                                                                  11998,12007,12016,12059,12060,1206
                                                                                                  1,12062,12064,12065,12066,12067,12
                                                                                                  069,12070,12072,12073,12074,12075,
                                                                                                  12077,12078,12079,12080,12084,1209
                                                                                                  8,12099,12100,12101,12105,12106,12
                                                                                                  107,12108,12112,12113,12114,12115,
                                                                                                  12119,12120,12121,12122,12126,1212
                                                                                                  7,12133,12143,12175               
 I_ACARS                    Local  10882    I(4)            4           scalar                    10958,11122,12059,12105           
 I_ACARS_ASC                Local  10886    I(4)            4           scalar                    10960,11120,12060,12106           
 I_ACARS_DES                Local  10888    I(4)            4           scalar                    10961,11121,12062,12108           

Page 272         Source Listing                  INVALID_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 I_ACARS_LVL                Local  10884    I(4)            4           scalar                    10959,11119,12061,12107           
 I_AIREP                    Local  10895    I(4)            4           scalar                    10968,11134,11313,12072,12119     
 I_AIREP_ASC                Local  10897    I(4)            4           scalar                    10970,11132,12073,12120           
 I_AIREP_DES                Local  10898    I(4)            4           scalar                    10971,11133,12075,12122           
 I_AIREP_LVL                Local  10896    I(4)            4           scalar                    10969,11131,12074,12121           
 I_AMDAR                    Local  10899    I(4)            4           scalar                    10972,11128,12077,12112           
 I_AMDAR_ASC                Local  10901    I(4)            4           scalar                    10974,11126,12078,12113           
 I_AMDAR_DES                Local  10902    I(4)            4           scalar                    10975,11127,12080,12115           
 I_AMDAR_LVL                Local  10900    I(4)            4           scalar                    10973,11125,12079,12114           
 I_MAN_AIREP                Local  10893    I(4)            4           scalar                    10966,11137,11288,11314,11350,1156
                                                                                                  7,11804,12069,12126               
 I_MAN_YAIREP               Local  10894    I(4)            4           scalar                    10967,11138,11289,11315,11351,1156
                                                                                                  8,11805,12070,12127               
 I_MDCRS                    Local  10889    I(4)            4           scalar                    10962,11116,11398,11440,11461,1147
                                                                                                  8,11541,12064,12098               
 I_MDCRS_ASC                Local  10891    I(4)            4           scalar                    10964,11114,12065,12099           
 I_MDCRS_DES                Local  10892    I(4)            4           scalar                    10965,11115,12067,12101           
 I_MDCRS_LVL                Local  10890    I(4)            4           scalar                    10963,11113,12066,12100           
 KBAD                       Local  10879    I(4)            4     1     5                         12050,12140,12207,12210,12212,1221
                                                                                                  4,12216,12223,12226,12228,12230,12
                                                                                                  232,12311,12312                   
 KBADTOT                    Dummy  10803    I(4)            4           scalar   ARG,INOUT        12311,12316                       
 KNT                        Local  10945    I(4)            4           scalar                    11025,11026,11027,11038,11047,1104
                                                                                                  8,11049,11060,11069,11070,11071,11
                                                                                                  082,11091,11092,11093,11104       
 KREG                       Dummy  10802    I(4)            4           scalar   ARG,INOUT        12188,12194                       
 KTYPE                      Local  10829    I(4)            4           scalar                    11117,11123,11129,11135,11139,1114
                                                                                                  9,11152,11176,11179,11182,11185,11
                                                                                                  198,11213,11230,11244,11262,11276,
                                                                                                  11302,11320,11337,11356,11373,1142
                                                                                                  5,11451,11489,11494,11499,11517,11
                                                                                                  522,11552,11620,11675,11719,11763,
                                                                                                  11778,11792,11853,11897,11939,1195
                                                                                                  4,11968,12103,12110,12117,12124,12
                                                                                                  129,12140,12191,12192             
 L_INIT                     Dummy  10804    L(4)            4           scalar   ARG,INOUT        10979                             
 L_MINUS9C                  Dummy  10805    L(4)            4     1     0        ARG,INOUT        11388,11438,11459,11476,11539     
 L_OPERATIONAL              Dummy  10804    L(4)            4           scalar   ARG,INOUT        12036,12142,12160,12204           
 L_PRINT                    Local  10949    L(4)            4           scalar                    11017,11156,11157,11189,11190,1120
                                                                                                  3,11204,11215,11216,11232,11233,11
                                                                                                  246,11247,11264,11265,11278,11279,
                                                                                                  11293,11294,11304,11305,11322,1132
                                                                                                  3,11339,11340,11358,11359,11375,11
                                                                                                  376,11416,11417,11442,11443,11480,
                                                                                                  11481,11508,11509,11543,11544,1162
                                                                                                  2,11623,11677,11678,11721,11722,11
                                                                                                  765,11766,11780,11781,11794,11795,
                                                                                                  11855,11856,11899,11900,11941,1194
                                                                                                  2,11956,11957,11970,11971,11982   
 MAXFLT                     Dummy  10802    I(4)            4           scalar   ARG,INOUT        10942,10943                       
 MAX_REPS                   Dummy  10800    I(4)            4           scalar   ARG,INOUT        10822,10828,10830,10831,10832,1083
                                                                                                  3,10834,10835,10836,10837,10838,10
                                                                                                  839,10840,10841,10842,10843,10844,
                                                                                                  10845,10846,10847,10848,10849,1085
                                                                                                  0,10851,10855                     

Page 273         Source Listing                  INVALID_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MM                         Local  10941    I(4)            4           scalar                    12187,12188,12189,12192,12194,1219
                                                                                                  6                                 
 NBAD_AC                    Local  10933    I(4)            4           scalar                    11006,12109,12247,12262           
 NBAD_AM                    Local  10937    I(4)            4           scalar                    11010,12116,12247,12262           
 NBAD_AR                    Local  10936    I(4)            4           scalar                    11009,12123,12247,12262           
 NBAD_MA                    Local  10935    I(4)            4           scalar                    11008,12128,12247,12262           
 NBAD_MD                    Local  10934    I(4)            4           scalar                    11007,12102,12247,12262           
 NREP_AC                    Local  10927    I(4)            4           scalar                    11001,12063,12245,12260           
 NREP_AM                    Local  10931    I(4)            4           scalar                    11005,12081,12245,12260           
 NREP_AR                    Local  10930    I(4)            4           scalar                    11004,12076,12245,12260           
 NREP_MA                    Local  10929    I(4)            4           scalar                    11003,12071,12245,12260           
 NREP_MD                    Local  10928    I(4)            4           scalar                    11002,12068,12245,12260           
 NTEMP_REG                  Dummy  10802    I(4)            4     2     0        ARG,INOUT        12192                             
 NUMREPS                    Dummy  10800    I(4)            4           scalar   ARG,INOUT        11015,11070,11092,11406,12054,1216
                                                                                                  6,12315                           
 N_BAD180                   Local  10917    I(4)            4     1     5                         10992,11853,11897,11939,11954,1196
                                                                                                  8,12306,12307                     
 N_BAD360                   Local  10916    I(4)            4     1     5                         10991,11620,11675,11719,11763,1177
                                                                                                  8,11792,12303,12304               
 N_BAD_DECODE               Local  10908    I(4)            4     1     5                         10984,11201,11213,12278,12279     
 N_BLANK_AM                 Local  10924    I(4)            4           scalar                    10999,11180,12276                 
 N_BLANK_AR                 Local  10921    I(4)            4           scalar                    10996,11183,12276                 
 N_BLANK_MA                 Local  10922    I(4)            4           scalar                    10997,11186,12276                 
 N_BLANK_MD                 Local  10923    I(4)            4           scalar                    10998,11177,12276                 
 N_EMPTY                    Local  10904    I(4)            4     1     5                         10980,11337,12266                 
 N_LOW_AIREP                Local  10913    I(4)            4     1     5                         10989,11320,12293,12294           
 N_MINUS9C                  Dummy  10803    I(4)            4     1     5        ARG,INOUT        10990,11425,11451,11489,11494,1149
                                                                                                  9,11517,11522,11552,12298,12299   
 N_MISS_POS                 Local  10910    I(4)            4     1     5                         10986,11262,12284,12285           
 N_MISS_PRES                Local  10911    I(4)            4     1     5                         10987,11276,12287,12288           
 N_MISS_TIME                Local  10909    I(4)            4     1     5                         10985,11244,12281,12282           
 N_SMALL_PRES               Local  10912    I(4)            4     1     5                         10988,11302,12290,12291           
 N_XX999_AR                 Local  10919    I(4)            4           scalar                    10994,11150,12274                 
 N_XX999_MA                 Local  10920    I(4)            4           scalar                    10995,11153,12274                 
 N_ZERO_ALT                 Local  10906    I(4)            4     1     5                         10982,11373,12269,12270           
 N_ZERO_POS                 Local  10907    I(4)            4     1     5                         10983,11230,12271,12272           
 N_ZERO_TMP                 Local  10905    I(4)            4     1     5                         10981,11356,12267,12268           
 OB_DIR                     Dummy  10801    R(4)            4     1     0        ARG,INOUT        11331,11348,11367,11563,11564,1158
                                                                                                  0,11582,11583,11584,11586,11587,11
                                                                                                  591,11592,11593,11594,11636,11638,
                                                                                                  11639,11640,11642,11643,11649,1165
                                                                                                  0,11651,11652,11689,11691,11692,11
                                                                                                  696,11697,11733,11735,11736,11740,
                                                                                                  11741,11803,11817,11818,11819,1182
                                                                                                  0,11824,11825,11826,11827,11859,11
                                                                                                  860,11869,11870,11874,11875,11911,
                                                                                                  11912,11916,11917,12004,12013,1202
                                                                                                  2,12149,12181                     
 OB_Q                       Dummy  10801    R(4)            4     1     0        ARG,INOUT        11335,11354,11371,12003,12012,1202
                                                                                                  1,12148,12180                     
 OB_SPD                     Dummy  10801    R(4)            4     1     0        ARG,INOUT        11332,11349,11368,11565,11566,1158
                                                                                                  1,11585,11596,11597,11598,11604,11
                                                                                                  605,11606,11610,11637,11641,11654,
                                                                                                  11655,11656,11657,11658,11664,1166
                                                                                                  5,11666,11667,11668,11690,11699,11

Page 274         Source Listing                  INVALID_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  700,11705,11706,11710,11734,11743,
                                                                                                  11744,11749,11750,11754,11829,1183
                                                                                                  0,11831,11837,11838,11839,11843,11
                                                                                                  877,11878,11883,11884,11888,11919,
                                                                                                  11920,11925,11926,11930,12005,1201
                                                                                                  4,12023,12150,12182               
 OB_T                       Dummy  10801    R(4)            4     1     0        ARG,INOUT        11330,11347,12002,12011,12020,1214
                                                                                                  7,12179                           
 PRES                       Dummy  10801    R(4)            4     1     0        ARG,INOUT        11272,11287,12001,12010,12019,1214
                                                                                                  6,12178                           
 T_PRCN                     Dummy  10801    R(4)            4     1     0        ARG,INOUT        11397,11439,11460,11477,11540,1200
                                                                                                  2,12011,12020,12147,12179         
 XIV_D                      Dummy  10802    R(4)            4     1     0        ARG,INOUT        12004,12013,12022,12149,12181     
 XIV_Q                      Dummy  10802    R(4)            4     1     0        ARG,INOUT        12003,12012,12021,12148,12180     
 XIV_S                      Dummy  10802    R(4)            4     1     0        ARG,INOUT        12005,12014,12023,12150,12182     
 XIV_T                      Dummy  10802    R(4)            4     1     0        ARG,INOUT        12002,12011,12020,12147,12179     

Page 275         Source Listing                  INVALID_QC
2017-04-18 11:07                                 acftobs_qc.f

  12320 c
  12321 c ###################################################################
  12322 c                            subroutine stk_val_qc
  12323 c ###################################################################
  12324 c   
  12325       subroutine stk_val_qc(numreps,max_reps,indx,csort,amiss,cdtg_an
  12326      $,          c_acftreg,c_acftid,c_qc
  12327      $,          alat,alon,pres,ht_ft,t_prcn,ob_t,ob_q,ob_dir,ob_spd
  12328      $,          xiv_t,xiv_q,xiv_d,xiv_s
  12329      $,          idt,itype,ichk_t,ichk_q,ichk_d,ichk_s
  12330      $,          kflight,maxflt,nobs_flt,iobs_flt
  12331      $,          kreg,creg_reg,nwhol_reg,ntemp_reg,nwind_reg
  12332      $,          kbadtot,io8,io33,l_operational,l_init,l_ncep)
  12333 c
  12334 c     Check for flights with stuck values
  12335 c     (defined as a flight with three or more reports where all reports have the 
  12336 c     same time, lat, lon, pres, ob_t, ob_dir, or ob_spd)
  12337 c
  12338       implicit none
  12339 c
  12340 c Declaration statements
  12341 c ----------------------
  12342       integer      max_reps            ! maximum number of reports
  12343 c
  12344       character*11 c_qc(max_reps)      ! internal qc flags
  12345 c
  12346 c     Data arrays
  12347 c     -----------
  12348       integer      numreps             ! actual number of reports
  12349       character*10 cdtg_an             ! date time group for analysis
  12350       integer      itype(max_reps)     ! type of aircraft data
  12351       integer      idt(max_reps)       ! time in seconds to analysis time 
  12352       character*8  c_acftreg(max_reps) ! aircraft registration (tail) number
  12353       character*9  c_acftid(max_reps)  ! aircraft flight number
  12354       real*8       alat(max_reps)      ! latitude
  12355      $,            alon(max_reps)      ! longitude
  12356       real         pres(max_reps)      ! pressure
  12357      $,            ht_ft(max_reps)     ! height in feet
  12358       real         t_prcn(max_reps)    ! temperature precision
  12359       real         ob_t(max_reps)      ! temperature
  12360      $,            ob_q(max_reps)      ! specific humidity
  12361      $,            ob_dir(max_reps)    ! wind direction
  12362      $,            ob_spd(max_reps)    ! wind speed
  12363       real         xiv_t(max_reps)     ! temperature innovation (ob - bk)
  12364      $,            xiv_q(max_reps)     ! specific humidity innovation (ob - bk)
  12365      $,            xiv_d(max_reps)     ! wind direction innovation (ob - bk)
  12366      $,            xiv_s(max_reps)     ! wind speed innovation (ob - bk)
  12367       integer      ichk_t(max_reps)    ! NRL QC flag for temperature ob
  12368      $,            ichk_q(max_reps)    ! NRL QC flag for specific humidity ob
  12369      $,            ichk_d(max_reps)    ! NRL QC flag for wind direction ob
  12370      $,            ichk_s(max_reps)    ! NRL QC flag for wind speed ob
  12371       character*25 csort(max_reps)     ! sort variable    
  12372 c
  12373 c     Pointers
  12374 c     --------
  12375       integer      indx(max_reps)      ! pointer index for good reports
  12376 c

Page 276         Source Listing                  STK_VAL_QC
2017-04-18 11:07                                 acftobs_qc.f

  12377 c     Functions
  12378 c     ---------
  12379       character*16 c_insty_ob          ! function to convert integer instrument 
  12380                                        !   type to character instrument type
  12381       integer      insty_ob_fun        ! function to convert character
  12382                                        !   instrument type to integer
  12383 c
  12384 c     Flight statistics
  12385 c     -----------------
  12386       integer      maxflt              ! max number of flights allowed
  12387       integer      nobs_flt(maxflt)    ! number of reports per flight
  12388      $,            iobs_flt(maxflt)    ! index for first report in each flight
  12389      $,            kflight             ! number of flights in dataset
  12390       integer      istart              ! index for 1st rep in current flight 
  12391      $,            iistart             ! index from pointer array for istart
  12392      $,            iend                ! index for last rep in current flight
  12393      $,            iiend               ! index from pointer array for iend
  12394 c
  12395 c     Tail number statistics
  12396 c     ----------------------
  12397       integer      kreg                ! actual number of tail#s in dataset
  12398      $,            mreg                ! index pointing to current tail number
  12399       character*8  creg_reg(maxflt)    ! tail numbers
  12400       integer      nwhol_reg(maxflt,5) ! number of reports w. temp in whole deg
  12401       integer      ntemp_reg(maxflt,5) ! number of reports w. rejected temp
  12402       integer      nwind_reg(maxflt,5) ! number of reports w. rejected winds
  12403 c
  12404 c     Counters
  12405 c     --------
  12406       integer      nstk_time(5)        ! number of reports with stuck time
  12407      $,            nstk_both(5)        ! number of reports with both stuck time and position
  12408      $,            nstk_posn(5)        ! number of reports with stuck position
  12409      $,            nstk_alat(5)        ! number of reports with stuck latitude
  12410      $,            nstk_alon(5)        ! number of reports with stuck longitude
  12411      $,            nstk_pres(5)        ! number of reports with stuck pressure
  12412      $,            nstk_val(5)         ! number of reports with stuck temp and winds
  12413      $,            nstk_temp(5)        ! number of reports with stuck temperature
  12414      $,            nstk_wdir(5)        ! number of reports with stuck direction
  12415      $,            nstk_wspd(5)        ! number of reports with stuck speed
  12416      $,            nstk_moist(5)       ! number of reports with stuck moisture
  12417      $,            nstk_whol(5)        ! number of reports w. temp in whole deg
  12418       integer      kbad(5)             ! counter for number of bad reports
  12419      $,            kbadt(5)            ! counter for number of bad temperatures
  12420      $,            kbadw(5)            ! counter for number of bad winds
  12421      $,            kbadtot             ! counter for total number of bad reports
  12422 ccccdak      integer      nrep_Ac             ! number of acars reports considered
  12423       integer      nrep_Ac             ! number of tamdar reports considered
  12424      $,            nrep_Md             ! number of mdcrs reports considered
  12425      $,            nrep_Ma             ! number of manual airep reports considered
  12426      $,            nrep_Ar             ! number of airep reports considered
  12427      $,            nrep_Am             ! number of amdar reports considered
  12428 ccccdak      integer      nstk_Ac             ! number of acars reports rejected
  12429       integer      nstk_Ac             ! number of tamdar reports rejected
  12430      $,            nstk_Md             ! number of mdcrs reports rejected
  12431      $,            nstk_Ma             ! number of manual airep reports rejected
  12432      $,            nstk_Ar             ! number of airep reports rejected
  12433      $,            nstk_Am             ! number of amdar reports rejected

Page 277         Source Listing                  STK_VAL_QC
2017-04-18 11:07                                 acftobs_qc.f

  12434 c
  12435 c     Instrument types
  12436 c     ----------------
  12437 ccccdak      integer      i_acars             ! instrument type for acars
  12438       integer      i_acars             ! instrument type for tamdar
  12439 ccccdak     $,            i_acars_lvl         ! instrument type for acars--level flt
  12440      $,            i_acars_lvl         ! instrument type for tamdar--level flt
  12441 ccccdak     $,            i_acars_asc         ! instrument type for acars--ascent
  12442      $,            i_acars_asc         ! instrument type for tamdar--ascent
  12443 ccccdak     $,            i_acars_des         ! instrument type for acars--descent
  12444      $,            i_acars_des         ! instrument type for tamdar--descent
  12445      $,            i_mdcrs             ! instrument type for mdcrs
  12446      $,            i_mdcrs_lvl         ! instrument type for mdcrs--level flt
  12447      $,            i_mdcrs_asc         ! instrument type for mdcrs--ascent
  12448      $,            i_mdcrs_des         ! instrument type for mdcrs--descent
  12449      $,            i_man_airep         ! instrument type for manual aireps
  12450      $,            i_man_Yairep        ! instrument type for manual aireps (YRXX)
  12451      $,            i_airep             ! instrument type for airep
  12452      $,            i_airep_lvl         ! instrument type for airep--level flt
  12453      $,            i_airep_asc         ! instrument type for airep--ascent
  12454      $,            i_airep_des         ! instrument type for airep--descent
  12455      $,            i_amdar             ! instrument type for amdar
  12456      $,            i_amdar_lvl         ! instrument type for amdar--level flt
  12457      $,            i_amdar_asc         ! instrument type for amdar--ascent
  12458      $,            i_amdar_des         ! instrument type for amdar--descent
  12459 c
  12460 c     Other variables
  12461 c     ---------------
  12462       integer      io8                 ! i/o unit number for log file
  12463       integer      io33                ! i/o unit number for stuck check
  12464 c
  12465       real         amiss               ! real missing value flag
  12466 c
  12467       integer      iob,kk,mm           ! do loop indices 
  12468      $,            ii,jj               ! index pointing to current report
  12469      $,            iim1                ! index pointing to previous report
  12470      $,            iobfirst            ! index for first stuck time
  12471      $,            ioblast             ! index for last stuck time
  12472      $,            iifirst             ! index for first stuck latitude
  12473      $,            iilast              ! index for last stuck latitude
  12474 c
  12475 ccccdak      integer      k_ACARS             ! number of ACARS/MDCRS reports
  12476       integer      k_ACARS             ! number of TAMDAR/MDCRS reports
  12477      $,            k_AIREP             ! number of AIREP reports
  12478      $,            k_manAIREP          ! number of manual AIREP reports
  12479      $,            k_AMDAR             ! number of AMDAR reports
  12480      $,            k_stuck             ! counter for number of stuck reports
  12481      $,            ktype               ! ob type
  12482 c
  12483       integer      istk_time           ! value of stuck clock
  12484       real*8       alat_min            ! min value of latitude during flight
  12485      $,            alat_max            ! max value of latitude during flight
  12486      $,            alon_min            ! min value of longitude during flight
  12487      $,            alon_max            ! max value of longitude during flight
  12488      $,            stk_alat            ! value of stuck latitude
  12489      $,            stk_alon            ! value of stuck longitude
  12490       real         ht_max              ! max height during flight

Page 278         Source Listing                  STK_VAL_QC
2017-04-18 11:07                                 acftobs_qc.f

  12491      $,            ht_min              ! min height during flight
  12492      $,            ht_max_stuck        ! max height during stuck portion
  12493      $,            ht_min_stuck        ! min height during stuck portion
  12494      $,            temp_min            ! min temperature during flight
  12495      $,            temp_max            ! max tempetature during flight
  12496      $,            ob_min              ! min value of parameter during flight
  12497      $,            ob_max              ! max value of parameter during flight
  12498      $,            stk_pres            ! value of stuck pressure
  12499      $,            stk_alt             ! value of stuck altitude
  12500      $,            stk_temp            ! value of stuck temperature
  12501      $,            stk_wdir            ! value of stuck direction
  12502      $,            stk_wspd            ! value of stuck speed
  12503      $,            stk_moist           ! value of stuck moisture
  12504 c
  12505 c     Switches
  12506 c     --------
  12507       logical      stuck               ! true if variable found to be stuck
  12508 c
  12509       logical      l_init              ! initialize counters if true
  12510      $,            l_operational       ! run QC in operational mode if true
  12511      $,            l_ncep              ! run QC w/ NCEP preferences if true
  12512 c
  12513 c # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  12514 c
  12515 c Initialize aircraft data types
  12516 c ------------------------------
  12517       i_acars      = insty_ob_fun('acars')
  12518       i_acars_lvl  = insty_ob_fun('acars_lvl') 
  12519       i_acars_asc  = insty_ob_fun('acars_asc') 
  12520       i_acars_des  = insty_ob_fun('acars_des') 
  12521       i_mdcrs      = insty_ob_fun('mdcrs')
  12522       i_mdcrs_lvl  = insty_ob_fun('mdcrs_lvl') 
  12523       i_mdcrs_asc  = insty_ob_fun('mdcrs_asc') 
  12524       i_mdcrs_des  = insty_ob_fun('mdcrs_des')
  12525       i_man_airep  = insty_ob_fun('man-airep') 
  12526       i_man_Yairep = insty_ob_fun('man-Yairep') 
  12527       i_airep      = insty_ob_fun('airep')
  12528       i_airep_lvl  = insty_ob_fun('airep_lvl')
  12529       i_airep_asc  = insty_ob_fun('airep_asc')
  12530       i_airep_des  = insty_ob_fun('airep_des')
  12531       i_amdar      = insty_ob_fun('amdar')
  12532       i_amdar_lvl  = insty_ob_fun('amdar_lvl')
  12533       i_amdar_asc  = insty_ob_fun('amdar_asc')
  12534       i_amdar_des  = insty_ob_fun('amdar_des')
  12535 c
  12536 c Initialize counters
  12537 c -------------------
  12538       if(l_init) then
  12539         nstk_time = 0
  12540         nstk_both = 0
  12541         nstk_posn = 0
  12542         nstk_alat = 0
  12543         nstk_alon = 0
  12544         nstk_pres = 0
  12545         nstk_val = 0
  12546         nstk_temp = 0
  12547         nstk_wdir = 0

Page 279         Source Listing                  STK_VAL_QC
2017-04-18 11:07                                 acftobs_qc.f

  12548         nstk_wspd = 0
  12549         nstk_moist = 0
  12550 c
  12551         nstk_whol = 0
  12552         kbadt = 0
  12553         kbadw = 0
  12554         nrep_Ac = 0
  12555         nrep_Md = 0
  12556         nrep_Ma = 0
  12557         nrep_Ar = 0
  12558         nrep_Am = 0
  12559         nstk_Ac = 0
  12560         nstk_Md = 0
  12561         nstk_Ma = 0
  12562         nstk_Ar = 0
  12563         nstk_Am = 0
  12564       endif
  12565 c
  12566       nwhol_reg = 0
  12567       ntemp_reg = 0
  12568       nwind_reg = 0
  12569 c
  12570 c Begin loop over flights
  12571 c -----------------------
  12572       do kk = 1,kflight
  12573 c
  12574 c Initialize variables
  12575 c --------------------
  12576         istart = iobs_flt(kk)
  12577         iistart = indx(istart)
  12578         iend = iobs_flt(kk) + nobs_flt(kk) - 1
  12579         iiend = indx(iend)
  12580 c
  12581 c Handle case where only one or two reports are present for flight
  12582 c ----------------------------------------------------------------
  12583         if(nobs_flt(kk).eq.0) then
  12584 c          write(io8,*)
  12585 c          write(io8,*) 'No good obs for flight ',kflight
  12586         elseif(nobs_flt(kk).eq.1) then
  12587 c         write(io8,*) 
  12588 c         write(io8,*) 'Only one report present for flight ',kflight
  12589         elseif(nobs_flt(kk).eq.2) then
  12590 c         write(io8,*) 
  12591 c         write(io8,*) 'Only two reports present for flight ',kflight
  12592 c
  12593 c Handle case where three or more reports are present for flight
  12594 c --------------------------------------------------------------
  12595         else
  12596 c
  12597 c Check if clock is stuck
  12598 c (ignore both single manAIREPs, and whole flights of manAIREPs)
  12599 c --------------------------------------------------------------
  12600           k_ACARS = 0
  12601           k_AIREP = 0
  12602           k_manAIREP = 0
  12603           k_AMDAR = 0
  12604           ht_min = ht_ft(iistart)

Page 280         Source Listing                  STK_VAL_QC
2017-04-18 11:07                                 acftobs_qc.f

  12605           ht_max = ht_ft(iistart)
  12606           temp_min = ob_t(iistart)
  12607           temp_max = ob_t(iistart)
  12608 c
  12609 ccccdak         First find first ACARS/MDCRS/AIREP report and count reports by category
  12610 c         First find first TAMDAR/MDCRS/AIREP report and count reports by category
  12611 c         ------------------------------------------------------------------------
  12612           do iob=istart,iend
  12613             ii = indx(iob)
  12614             if(ht_ft(ii).lt.ht_min)  ht_min = ht_ft(ii)
  12615             if(ht_ft(ii).gt.ht_max)  ht_max = ht_ft(ii)
  12616             if(ob_t(ii).lt.temp_min) temp_min = ob_t(ii)
  12617             if(ob_t(ii).gt.temp_max) temp_max = ob_t(ii)
  12618 c
  12619             if(itype(ii).eq.i_acars.or.
  12620      $         itype(ii).eq.i_acars_lvl.or.
  12621      $         itype(ii).eq.i_acars_asc.or.
  12622      $         itype(ii).eq.i_acars_des.or.
  12623      $         itype(ii).eq.i_mdcrs.or.
  12624      $         itype(ii).eq.i_mdcrs_lvl.or.
  12625      $         itype(ii).eq.i_mdcrs_asc.or.
  12626      $         itype(ii).eq.i_mdcrs_des) then
  12627 c
  12628               k_ACARS = k_ACARS + 1
  12629 c
  12630             elseif(itype(ii).eq.i_airep.or.
  12631      $             itype(ii).eq.i_airep_lvl.or.
  12632      $             itype(ii).eq.i_airep_asc.or.
  12633      $             itype(ii).eq.i_airep_des) then
  12634 c 
  12635               k_AIREP = k_AIREP + 1
  12636 c
  12637             elseif(itype(ii).eq.i_amdar.or.
  12638      $             itype(ii).eq.i_amdar_lvl.or.
  12639      $             itype(ii).eq.i_amdar_asc.or.
  12640      $             itype(ii).eq.i_amdar_des) then
  12641 c 
  12642               k_AMDAR = k_AMDAR + 1
  12643 c
  12644             elseif(itype(ii).eq.i_man_airep.or.
  12645      $             itype(ii).eq.i_man_Yairep) then
  12646 c
  12647               k_manAIREP = k_manAIREP + 1
  12648 c
  12649             endif
  12650           enddo
  12651 c
  12652 ccccdak         If more than 3 ACARS/MDCRS/AIREP/AMDAR reports are present, look for stuck clock
  12653 c         If more than 3 TAMDAR/MDCRS/AIREP/AMDAR reports are present, look for stuck clock
  12654 c         ---------------------------------------------------------------------------------
  12655           if((k_ACARS+k_AIREP+k_AMDAR).ge.3) then
  12656             stuck = .true.
  12657             k_stuck = 0
  12658             istk_time = -999 999
  12659             iobfirst = -999 999
  12660             ioblast = -999 999
  12661             ht_min_stuck =  999 999.

Page 281         Source Listing                  STK_VAL_QC
2017-04-18 11:07                                 acftobs_qc.f

  12662             ht_max_stuck = -999 999.
  12663 c
  12664             do iob=istart+1,iend
  12665               ii = indx(iob)
  12666               iim1 = indx(iob-1)
  12667 c
  12668 c             Skip over isolated man_airep reports
  12669 c             ------------------------------------
  12670               if((itype(ii).eq.i_man_airep.or.
  12671      $            itype(ii).eq.i_man_Yairep).and.
  12672      $           k_ACARS+k_AIREP+k_AMDAR.gt.0) then
  12673 c
  12674 c             Set "stuck" to false if times not equal and re-initialize stats
  12675 c             ---------------------------------------------------------------
  12676               elseif(idt(iim1).ne.idt(ii)) then
  12677 c
  12678 c               If a portion of the flight is stuck, set QC flags
  12679 c               -------------------------------------------------
  12680                 if(k_stuck.ge.3.and.
  12681      $             istk_time.ne.-999 999.and.
  12682      $             ((istk_time.eq.0.and.
  12683      $               (itype(ii).eq.i_acars.or.
  12684      $                itype(ii).eq.i_acars_lvl.or.
  12685      $                itype(ii).eq.i_acars_asc.or.
  12686      $                itype(ii).eq.i_acars_des.or.
  12687      $                itype(ii).eq.i_mdcrs.or.
  12688      $                itype(ii).eq.i_mdcrs_lvl.or.
  12689      $                itype(ii).eq.i_mdcrs_asc.or.
  12690      $                itype(ii).eq.i_mdcrs_des)).or.
  12691      $              ht_max_stuck-ht_min_stuck.lt.100..or.
  12692      $              ht_max_stuck-ht_min_stuck.gt.9000.) ) then
  12693 c
  12694                   do jj=iobfirst,ioblast
  12695                     ii = indx(jj)
  12696                     c_qc(ii)(2:2) = 'K'
  12697                   enddo
  12698 c
  12699                   write(io8,*)
  12700                   write(io8,*) 'Flight with > 3 constant times'
  12701                   do jj=istart,iend
  12702                     ii = indx(jj)
  12703                     write(io8,3002) ii,c_insty_ob(itype(ii))
  12704      x,                c_acftreg(ii),c_acftid(ii)
  12705      x,                idt(ii),alat(ii),alon(ii)
  12706      x,                pres(ii),ht_ft(ii)
  12707      x,                t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
  12708      x,                ob_q(ii),xiv_q(ii),ichk_q(ii)
  12709      x,                ob_dir(ii),xiv_d(ii),ichk_d(ii)
  12710      x,                ob_spd(ii),xiv_s(ii),ichk_s(ii)
  12711      x,                c_qc(ii)
  12712                   enddo
  12713                 endif
  12714 c
  12715                 stuck = .false.
  12716                 k_stuck = 0
  12717                 istk_time = -999 999
  12718                 iobfirst = -999 999

Page 282         Source Listing                  STK_VAL_QC
2017-04-18 11:07                                 acftobs_qc.f

  12719                 ioblast = -999 999
  12720                 ht_min_stuck =  999 999.
  12721                 ht_max_stuck = -999 999.
  12722 c
  12723 c             Accumulate statistics for stuck segments
  12724 c             ----------------------------------------
  12725               else
  12726                 k_stuck = k_stuck + 1
  12727                 istk_time = idt(ii)
  12728                 if(iobfirst.eq.-999 999) then
  12729                   iobfirst = iob-1
  12730                   if(ht_ft(iim1).lt.ht_min_stuck) 
  12731      $               ht_min_stuck = ht_ft(iim1)
  12732                   if(ht_ft(iim1).gt.ht_max_stuck) 
  12733      $               ht_max_stuck = ht_ft(iim1)
  12734                 endif
  12735                 ioblast = iob
  12736                 if(ht_ft(ii).lt.ht_min_stuck) ht_min_stuck = ht_ft(ii)
  12737                 if(ht_ft(ii).gt.ht_max_stuck) ht_max_stuck = ht_ft(ii)
  12738               endif                
  12739             enddo
  12740 c
  12741 c           If entire flight is stuck and flight is long enough, set QC flags
  12742 c           -----------------------------------------------------------------
  12743             if(stuck.and.
  12744      $         ((k_ACARS+k_AIREP+k_AMDAR).ge.3.or.
  12745      $          (k_ACARS+k_AIREP+k_AMDAR).eq.0).and.
  12746      $         (idt(iistart).eq.0.or.
  12747      $          ht_max-ht_min.lt.100..or.
  12748      $          ht_max-ht_min.gt.9000.)) then
  12749 c
  12750               do iob=istart,iend
  12751                 ii = indx(iob)
  12752                 c_qc(ii)(2:2) = 'K'
  12753               enddo
  12754 c
  12755 c           Otherwise, if only a portion of the flight is stuck, set QC flags
  12756 c           -----------------------------------------------------------------
  12757             elseif(k_stuck.ge.3.and.
  12758      $             istk_time.ne.-999 999.and.
  12759      $             ((istk_time.eq.0.and.
  12760      $               (itype(ii).eq.i_acars.or.
  12761      $                itype(ii).eq.i_acars_lvl.or.
  12762      $                itype(ii).eq.i_acars_asc.or.
  12763      $                itype(ii).eq.i_acars_des.or.
  12764      $                itype(ii).eq.i_mdcrs.or.
  12765      $                itype(ii).eq.i_mdcrs_lvl.or.
  12766      $                itype(ii).eq.i_mdcrs_asc.or.
  12767      $                itype(ii).eq.i_mdcrs_des)).or.
  12768      $              ht_max_stuck-ht_min_stuck.lt.100..or.
  12769      $              ht_max_stuck-ht_min_stuck.gt.9000.) ) then
  12770 c
  12771               do iob=iobfirst,ioblast
  12772                 ii = indx(iob)
  12773                 c_qc(ii)(2:2) = 'K'
  12774               enddo
  12775 c

Page 283         Source Listing                  STK_VAL_QC
2017-04-18 11:07                                 acftobs_qc.f

  12776               write(io8,*)
  12777               write(io8,*) 'Flight with > 3 constant times'
  12778               do iob=istart,iend
  12779                 ii = indx(iob)
  12780                 write(io8,3002) ii,c_insty_ob(itype(ii))
  12781      x,            c_acftreg(ii),c_acftid(ii)
  12782      x,            idt(ii),alat(ii),alon(ii)
  12783      x,            pres(ii),ht_ft(ii)
  12784      x,            t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
  12785      x,            ob_q(ii),xiv_q(ii),ichk_q(ii)
  12786      x,            ob_dir(ii),xiv_d(ii),ichk_d(ii)
  12787      x,            ob_spd(ii),xiv_s(ii),ichk_s(ii)
  12788      x,            c_qc(ii)
  12789               enddo
  12790             endif
  12791           endif
  12792 c
  12793 c Perform remaining tests only for flights with four or more reports
  12794 c ------------------------------------------------------------------
  12795           if(nobs_flt(kk).gt.3) then
  12796 c
  12797 c           Check if position is stuck
  12798 c           --------------------------
  12799             stuck = .true.
  12800             k_stuck = 0
  12801 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  12802             stk_alat = -999 999
  12803             stk_alon = -999 999
  12804             iobfirst = -999 999
  12805             ioblast = -999 999
  12806             iifirst = -999 999
  12807             iilast = -999 999
  12808             alat_min =  999 999
  12809             alat_max = -999 999
  12810             alon_min =  999 999
  12811             alon_max = -999 999
  12812 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  12813             ht_min_stuck =  999 999
  12814             ht_max_stuck = -999 999
  12815 c
  12816             do iob=istart+1,iend
  12817               ii = indx(iob)
  12818               iim1 = indx(iob-1)
  12819 c
  12820 c             Skip over isolated man_airep reports
  12821 c             ------------------------------------
  12822               if((itype(ii).eq.i_man_airep.or.
  12823      $            itype(ii).eq.i_man_Yairep).and.
  12824      $            k_ACARS+k_AIREP+k_AMDAR.gt.0) then
  12825 c
  12826 c             Skip over reports with previously averaged positions
  12827 c             ----------------------------------------------------
  12828               elseif(ichk_t(ii).eq.-4) then
  12829 !vvvv^ DAK-future change perhaps to account for incr. lat/lon precision
  12830 c
  12831 c             Set "stuck" to false if lat/lons not equal and re-initialize stats
  12832 c             ------------------------------------------------------------------

Page 284         Source Listing                  STK_VAL_QC
2017-04-18 11:07                                 acftobs_qc.f

  12833               elseif((abs(alat(iim1)-alat(ii)).gt.0.015.and.
  12834      $                alat(iim1).ne.amiss.and.
  12835      $                alat(ii).ne.amiss).or.
  12836      $               (abs(alon(iim1)-alon(ii)).gt.0.015.and.
  12837      $                alon(iim1).ne.amiss.and.
  12838      $                alon(ii).ne.amiss)) then
  12839 c
  12840 c               If a portion of the flight is stuck, set QC flags
  12841 c               -------------------------------------------------
  12842                 if(k_stuck.ge.3.and.
  12843      $             stk_alat.ne.-999 999.and.
  12844      $             stk_alon.ne.-999 999.and.
  12845      $             stk_alat.ne.amiss.and.
  12846      $             stk_alon.ne.amiss.and.
  12847      $             abs(alat_max-alat_min).lt.0.015.and.
  12848      $             abs(alon_max-alon_min).lt.0.015.and.
  12849      $             (abs(stk_alat).lt.0.005.or.
  12850      $              abs(stk_alon).lt.0.005.or.
  12851 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  12852      $              ht_max_stuck-ht_min_stuck.lt.100..or.
  12853      $              ((itype(ii).ne.i_amdar.and.
  12854      $                itype(ii).ne.i_amdar_lvl.and.
  12855      $                itype(ii).ne.i_amdar_asc.and.
  12856      $                itype(ii).ne.i_amdar_des).and.
  12857      $               ht_max_stuck-ht_min_stuck.gt.9000.).or.
  12858      $              ((itype(ii).eq.i_amdar.or.
  12859      $                itype(ii).eq.i_amdar_lvl.or.
  12860      $                itype(ii).eq.i_amdar_asc.or.
  12861      $                itype(ii).eq.i_amdar_des).and.
  12862      $               ht_max_stuck-ht_min_stuck.gt.12000.)) ) then
  12863 c
  12864                   do jj=iobfirst,ioblast
  12865                     ii = indx(jj)
  12866                     c_qc(ii)(3:4) = 'KK'
  12867                   enddo
  12868 c
  12869                   write(io8,*)
  12870                   write(io8,*) 'Flight with > 3 constant positions'
  12871                   do jj=istart,iend
  12872                     ii = indx(jj)
  12873                     write(io8,3002) ii,c_insty_ob(itype(ii))
  12874      x,                c_acftreg(ii),c_acftid(ii)
  12875      x,                idt(ii),alat(ii),alon(ii)
  12876      x,                pres(ii),ht_ft(ii)
  12877      x,                t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
  12878      x,                ob_q(ii),xiv_q(ii),ichk_q(ii)
  12879      x,                ob_dir(ii),xiv_d(ii),ichk_d(ii)
  12880      x,                ob_spd(ii),xiv_s(ii),ichk_s(ii)
  12881      x,                c_qc(ii)
  12882                   enddo
  12883                 endif
  12884 c
  12885                 stuck = .false.
  12886                 k_stuck = 0
  12887 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  12888                 stk_alat = -999 999
  12889                 stk_alon = -999 999

Page 285         Source Listing                  STK_VAL_QC
2017-04-18 11:07                                 acftobs_qc.f

  12890 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  12891                 iobfirst = -999 999
  12892                 ioblast = -999 999
  12893                 iifirst = -999 999
  12894                 iilast = -999 999
  12895 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  12896                 alat_min =  999 999
  12897                 alat_max = -999 999
  12898                 alon_min =  999 999
  12899                 alon_max = -999 999
  12900 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  12901                 ht_min_stuck =  999 999
  12902                 ht_max_stuck = -999 999
  12903 c
  12904 c             Accumulate statistics for stuck segments
  12905 c             ----------------------------------------
  12906               else
  12907 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  12908                 k_stuck = k_stuck + 1
  12909                 stk_alat = alat(ii)
  12910                 stk_alon = alon(ii)
  12911                 if(iobfirst.eq.-999 999) then
  12912                   iobfirst = iob-1
  12913                   if(alat(iim1).lt.alat_min.and.
  12914      $               alat(iim1).ne.amiss) alat_min = alat(iim1)
  12915                   if(alat(iim1).gt.alat_max.and.
  12916      $               alat(iim1).ne.amiss) alat_max = alat(iim1)
  12917                   if(alon(iim1).lt.alon_min.and.
  12918      $               alon(iim1).ne.amiss) alon_min = alon(iim1)
  12919                   if(alon(iim1).gt.alon_max.and.
  12920      $               alon(iim1).ne.amiss) alon_max = alon(iim1)
  12921                   if(ht_ft(iim1).lt.ht_min_stuck) 
  12922      $               ht_min_stuck = ht_ft(iim1)
  12923                   if(ht_ft(iim1).gt.ht_max_stuck) 
  12924      $               ht_max_stuck = ht_ft(iim1)
  12925                 endif
  12926                 ioblast = iob
  12927                 if(iifirst.eq.-999 999) iifirst = iim1
  12928                 iilast = ii
  12929                 if(alat(ii).lt.alat_min.and.
  12930      $             alat(ii).ne.amiss) alat_min = alat(ii)
  12931                 if(alat(ii).gt.alat_max.and.
  12932      $             alat(ii).ne.amiss) alat_max = alat(ii)
  12933                 if(alon(ii).lt.alon_min.and.
  12934      $             alon(ii).ne.amiss) alon_min = alon(ii)
  12935                 if(alon(ii).gt.alon_max.and.
  12936      $             alon(ii).ne.amiss) alon_max = alon(ii)
  12937                 if(ht_ft(ii).lt.ht_min_stuck) ht_min_stuck = ht_ft(ii)
  12938                 if(ht_ft(ii).gt.ht_max_stuck) ht_max_stuck = ht_ft(ii)
  12939               endif
  12940             enddo
  12941 c
  12942 c           If entire flight is stuck and flight is long enough, set QC flags
  12943 c           -----------------------------------------------------------------
  12944             if(stuck.and.
  12945      $         alat(iistart).ne.amiss.and.
  12946      $         alon(iistart).ne.amiss.and.

Page 286         Source Listing                  STK_VAL_QC
2017-04-18 11:07                                 acftobs_qc.f

  12947      $         abs(alat_max-alat_min).lt.0.015.and.
  12948      $         abs(alon_max-alon_min).lt.0.015.and.
  12949      $         (k_ACARS+k_AIREP+k_AMDAR.ge.3.or.
  12950      $          k_ACARS+k_AIREP+k_AMDAR.eq.0).and.
  12951      $         (abs(alat(iistart)).lt.0.005.or.
  12952      $          abs(alon(iistart)).lt.0.005.or.
  12953 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  12954      $          ht_max-ht_min.lt.100..or.
  12955      $          ((itype(ii).ne.i_amdar.and.
  12956      $            itype(ii).ne.i_amdar_lvl.and.
  12957      $            itype(ii).ne.i_amdar_asc.and.
  12958      $            itype(ii).ne.i_amdar_des).and.
  12959      $           ht_max-ht_min.gt.9000.).or.
  12960      $          ((itype(ii).eq.i_amdar.or.
  12961      $            itype(ii).eq.i_amdar_lvl.or.
  12962      $            itype(ii).eq.i_amdar_asc.or.
  12963      $            itype(ii).eq.i_amdar_des).and.
  12964      $           ht_max-ht_min.gt.12000.)) ) then
  12965 c
  12966               do iob=istart,iend
  12967                 ii = indx(iob)
  12968                 c_qc(ii)(3:4) = 'KK'
  12969               enddo
  12970 c
  12971 c           Otherwise, if only a portion of the flight is stuck, set QC flags
  12972 c           -----------------------------------------------------------------
  12973             elseif(k_stuck.ge.3.and.
  12974 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  12975      $             stk_alat.ne.-999 999.and.
  12976      $             stk_alon.ne.-999 999.and.
  12977      $             stk_alat.ne.amiss.and.
  12978      $             stk_alon.ne.amiss.and.
  12979      $             abs(alat_max-alat_min).lt.0.015.and.
  12980      $             abs(alon_max-alon_min).lt.0.015.and.
  12981      $             (abs(stk_alat).lt.0.005.or.
  12982      $              abs(stk_alon).lt.0.005.or.
  12983 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  12984      $              ht_max_stuck-ht_min_stuck.lt.100..or.
  12985      $              ((itype(ii).ne.i_amdar.and.
  12986      $                itype(ii).ne.i_amdar_lvl.and.
  12987      $                itype(ii).ne.i_amdar_asc.and.
  12988      $                itype(ii).ne.i_amdar_des).and.
  12989      $               ht_max_stuck-ht_min_stuck.gt.9000.).or.
  12990      $              ((itype(ii).eq.i_amdar.or.
  12991      $                itype(ii).eq.i_amdar_lvl.or.
  12992      $                itype(ii).eq.i_amdar_asc.or.
  12993      $                itype(ii).eq.i_amdar_des).and.
  12994      $               ht_max_stuck-ht_min_stuck.gt.12000.)) ) then
  12995 c
  12996               do iob=iobfirst,ioblast
  12997                 ii = indx(iob)
  12998                 c_qc(ii)(3:4) = 'KK'
  12999               enddo
  13000 c
  13001               write(io8,*)
  13002               write(io8,*) 'Flight with > 3 constant positions'
  13003               do iob=istart,iend

Page 287         Source Listing                  STK_VAL_QC
2017-04-18 11:07                                 acftobs_qc.f

  13004                 ii = indx(iob)
  13005                 write(io8,3002) ii,c_insty_ob(itype(ii))
  13006      x,            c_acftreg(ii),c_acftid(ii)
  13007      x,            idt(ii),alat(ii),alon(ii)
  13008      x,            pres(ii),ht_ft(ii)
  13009      x,            t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
  13010      x,            ob_q(ii),xiv_q(ii),ichk_q(ii)
  13011      x,            ob_dir(ii),xiv_d(ii),ichk_d(ii)
  13012      x,            ob_spd(ii),xiv_s(ii),ichk_s(ii)
  13013      x,            c_qc(ii)
  13014               enddo
  13015             endif
  13016 c
  13017 c           Check if latitude is stuck
  13018 c           --------------------------
  13019             stuck = .true.
  13020             k_stuck = 0
  13021 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  13022             stk_alat = -999 999
  13023             iobfirst = -999 999
  13024             ioblast = -999 999
  13025             iifirst = -999 999
  13026             iilast = -999 999
  13027             alat_min =  999 999
  13028             alat_max = -999 999
  13029 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  13030             ht_min_stuck =  999 999
  13031             ht_max_stuck = -999 999
  13032 c
  13033             do iob=istart+1,iend
  13034               ii = indx(iob)
  13035               iim1 = indx(iob-1)
  13036 c
  13037 c             Skip over isolated man_airep reports
  13038 c             ------------------------------------
  13039               if((itype(ii).eq.i_man_airep.or.
  13040      $            itype(ii).eq.i_man_Yairep).and.
  13041      $            k_ACARS+k_AIREP+k_AMDAR.gt.0) then
  13042 c
  13043 c             Skip over reports with previously averaged positions
  13044 c             ----------------------------------------------------
  13045               elseif(ichk_t(ii).eq.-4) then
  13046 c
  13047 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  13048 c             Set "stuck" to false if lats not equal and re-initialize stats
  13049 c             --------------------------------------------------------------
  13050               elseif(abs(alat(iim1)-alat(ii)).gt.0.005.and.
  13051      $               alat(iim1).ne.amiss.and.
  13052      $               alat(ii).ne.amiss) then
  13053 cc
  13054 cc               If a portion of the flight is stuck, set QC flags
  13055 cc               -------------------------------------------------
  13056 c                if(k_stuck.ge.3.and.
  13057 c     $             stk_alat.ne.-999 999.and.
  13058 c     $             stk_alat.ne.amiss.and.
  13059 c     $             abs(alat_max-alat_min).lt.0.005.and.
  13060 c     $             abs(nint(stk_alat)-stk_alat).gt.0.005.and.

Page 288         Source Listing                  STK_VAL_QC
2017-04-18 11:07                                 acftobs_qc.f

  13061 c     $             abs(idt(iilast)-idt(iifirst)).gt.1800.and.
  13062 c     $             (abs(stk_alat).lt.0.005.or.
  13063 c     $              ht_max_stuck-ht_min_stuck.lt.100..or.
  13064 c     $              ht_max_stuck-ht_min_stuck.gt.9000.) ) then
  13065 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  13066 cc
  13067 c                  do jj=iobfirst,ioblast
  13068 c                    ii = indx(jj)
  13069 c                    c_qc(ii)(3:3) = 'K'
  13070 c                  enddo
  13071 cc
  13072 c                  write(io8,*)
  13073 c                  write(io8,*) 'Flight with > 3 constant latitudes'
  13074 c                  do jj=istart,iend
  13075 c                    ii = indx(jj)
  13076 c                    write(io8,3002) ii,c_insty_ob(itype(ii))
  13077 c     x,                c_acftreg(ii),c_acftid(ii)
  13078 c     x,                idt(ii),alat(ii),alon(ii)
  13079 c     x,                pres(ii),ht_ft(ii)
  13080 c     x,                t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
  13081 c     x,                ob_q(ii),xiv_q(ii),ichk_q(ii)
  13082 c     x,                ob_dir(ii),xiv_d(ii),ichk_d(ii)
  13083 c     x,                ob_spd(ii),xiv_s(ii),ichk_s(ii)
  13084 c     x,                c_qc(ii)
  13085 c                  enddo
  13086 c                endif
  13087 c
  13088                 stuck = .false.
  13089                 k_stuck = 0
  13090 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  13091                 stk_alat = -999 999
  13092                 iobfirst = -999 999
  13093                 ioblast = -999 999
  13094                 iifirst = -999 999
  13095                 iilast = -999 999
  13096                 alat_min =  999 999
  13097                 alat_max = -999 999
  13098 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  13099                 ht_min_stuck =  999 999
  13100                 ht_max_stuck = -999 999
  13101 c
  13102 c             Accumulate statistics for stuck segments
  13103 c             ----------------------------------------
  13104               elseif(c_qc(ii)(3:3).ne.'K') then
  13105                 k_stuck = k_stuck + 1
  13106 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  13107                 stk_alat = alat(ii)
  13108                 if(iobfirst.eq.-999 999) then
  13109                   iobfirst = iob-1
  13110                   if(alat(iim1).lt.alat_min.and.
  13111      $               alat(iim1).ne.amiss) alat_min = alat(iim1)
  13112                   if(alat(iim1).gt.alat_max.and.
  13113      $               alat(iim1).ne.amiss) alat_max = alat(iim1)
  13114 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  13115                   if(ht_ft(iim1).lt.ht_min_stuck) 
  13116      $               ht_min_stuck = ht_ft(iim1)
  13117                   if(ht_ft(iim1).gt.ht_max_stuck) 

Page 289         Source Listing                  STK_VAL_QC
2017-04-18 11:07                                 acftobs_qc.f

  13118      $               ht_max_stuck = ht_ft(iim1)
  13119                 endif
  13120                 ioblast = iob
  13121                 if(iifirst.eq.-999 999) iifirst = iim1
  13122                 iilast = ii
  13123 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  13124                 if(alat(ii).lt.alat_min.and.
  13125      $             alat(ii).ne.amiss) alat_min = alat(ii)
  13126                 if(alat(ii).gt.alat_max.and.
  13127      $             alat(ii).ne.amiss) alat_max = alat(ii)
  13128 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  13129                 if(ht_ft(ii).lt.ht_min_stuck) ht_min_stuck = ht_ft(ii)
  13130                 if(ht_ft(ii).gt.ht_max_stuck) ht_max_stuck = ht_ft(ii)
  13131               endif
  13132             enddo
  13133 c
  13134 c           Don't reject flights with constant lat rounded to nearest deg
  13135 c           or flights with elapsed time less than 30 minutes (1800 seconds)
  13136 c           --------------------------------------------------------------
  13137             if(stuck.and.
  13138 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  13139      $         alat(iistart).ne.amiss.and.
  13140      $         abs(alat_max-alat_min).lt.0.005.and.
  13141      $         abs(nint(alat(iistart))-alat(iistart)).gt.0.005.and.
  13142      $         abs(idt(iiend)-idt(iistart)).gt.1800.and.
  13143      $         (k_ACARS+k_AIREP+k_AMDAR.ge.3.or.
  13144      $          k_ACARS+k_AIREP+k_AMDAR.eq.0).and.
  13145      $         (abs(alat(iistart)).lt.0.005.or.
  13146 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  13147      $          ht_max-ht_min.lt.100..or.
  13148      $          ht_max-ht_min.gt.9000.)) then
  13149 c
  13150               do iob=istart,iend
  13151                 ii = indx(iob)
  13152                 c_qc(ii)(3:3) = 'K'
  13153               enddo
  13154 cc
  13155 cc           Otherwise, if only a portion of the flight is stuck, set QC flags
  13156 cc           -----------------------------------------------------------------
  13157 c            elseif(k_stuck.ge.3.and.
  13158 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  13159 c     $             stk_alat.ne.-999 999.and.
  13160 c     $             stk_alat.ne.amiss.and.
  13161 c     $             abs(alat_max-alat_min).lt.0.005.and.
  13162 c     $             abs(nint(stk_alat)-stk_alat).gt.0.005.and.
  13163 c     $             abs(idt(iilast)-idt(iifirst)).gt.1800.and.
  13164 c     $             (abs(stk_alat).lt.0.005.or.
  13165 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  13166 c     $              ht_max_stuck-ht_min_stuck.lt.100..or.
  13167 c     $              ht_max_stuck-ht_min_stuck.gt.9000.) ) then
  13168 cc
  13169 c              do iob=iobfirst,ioblast
  13170 c                ii = indx(iob)
  13171 c                c_qc(ii)(3:3) = 'K'
  13172 c              enddo
  13173 cc
  13174 c              write(io8,*)

Page 290         Source Listing                  STK_VAL_QC
2017-04-18 11:07                                 acftobs_qc.f

  13175 c              write(io8,*) 'Flight with > 3 constant latitudes'
  13176 c              do iob=istart,iend
  13177 c                ii = indx(iob)
  13178 c                write(io8,3002) ii,c_insty_ob(itype(ii))
  13179 c     x,            c_acftreg(ii),c_acftid(ii)
  13180 c     x,            idt(ii),alat(ii),alon(ii)
  13181 c     x,            pres(ii),ht_ft(ii)
  13182 c     x,            t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
  13183 c     x,            ob_q(ii),xiv_q(ii),ichk_q(ii)
  13184 c     x,            ob_dir(ii),xiv_d(ii),ichk_d(ii)
  13185 c     x,            ob_spd(ii),xiv_s(ii),ichk_s(ii)
  13186 c     x,            c_qc(ii)
  13187 c              enddo
  13188 c
  13189             endif  
  13190 c
  13191 c           Check if longitude is stuck
  13192 c           ---------------------------
  13193             stuck = .true.
  13194             k_stuck = 0
  13195 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  13196             stk_alon = -999 999
  13197             iobfirst = -999 999
  13198             ioblast = -999 999
  13199             iifirst = -999 999
  13200             iilast = -999 999
  13201             alon_min =  999 999
  13202             alon_max = -999 999
  13203 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  13204             ht_min_stuck =  999 999
  13205             ht_max_stuck = -999 999
  13206 c
  13207             do iob=istart+1,iend
  13208               ii = indx(iob)
  13209               iim1 = indx(iob-1)
  13210 c
  13211 c             Skip over isolated man_airep reports
  13212 c             ------------------------------------
  13213               if((itype(ii).eq.i_man_airep.or.
  13214      $            itype(ii).eq.i_man_Yairep).and.
  13215      $            k_ACARS+k_AIREP+k_AMDAR.gt.0) then
  13216 c
  13217 c             Skip over reports with previously averaged positions
  13218 c             ----------------------------------------------------
  13219               elseif(ichk_t(ii).eq.-4) then
  13220 c
  13221 c             Set "stuck" to false if lons not equal and re-initialize stats
  13222 c             --------------------------------------------------------------
  13223 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  13224               elseif(abs(alon(iim1)-alon(ii)).gt.0.005.and.
  13225      $               alon(iim1).ne.amiss.and.
  13226      $               alon(ii).ne.amiss) then
  13227 cc
  13228 cc               If a portion of the flight is stuck, set QC flags
  13229 cc               -------------------------------------------------
  13230 c                if(k_stuck.ge.3.and.
  13231 c     $             stk_alon.ne.-999 999.and.

Page 291         Source Listing                  STK_VAL_QC
2017-04-18 11:07                                 acftobs_qc.f

  13232 c     $             stk_alon.ne.amiss.and.
  13233 c     $             abs(alon_max-alon_min).lt.0.005.and.
  13234 c     $             abs(nint(stk_alon)-stk_alon).gt.0.005.and.
  13235 c     $             abs(idt(iilast)-idt(iifirst)).gt.1800.and.
  13236 c     $             (abs(stk_alon).lt.0.005.or.
  13237 c     $              ht_max_stuck-ht_min_stuck.lt.100..or.
  13238 c     $              ht_max_stuck-ht_min_stuck.gt.9000.) ) then
  13239 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  13240 cc
  13241 c                  do jj=iobfirst,ioblast
  13242 c                    ii = indx(jj)
  13243 c                    c_qc(ii)(4:4) = 'K'
  13244 c                  enddo
  13245 cc
  13246 c                  write(io8,*)
  13247 c                  write(io8,*) 'Flight with > 3 constant longitudes'
  13248 c                  do jj=istart,iend
  13249 c                    ii = indx(jj)
  13250 c                    write(io8,3002) ii,c_insty_ob(itype(ii))
  13251 c     x,                c_acftreg(ii),c_acftid(ii)
  13252 c     x,                idt(ii),alat(ii),alon(ii)
  13253 c     x,                pres(ii),ht_ft(ii)
  13254 c     x,                t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
  13255 c     x,                ob_q(ii),xiv_q(ii),ichk_q(ii)
  13256 c     x,                ob_dir(ii),xiv_d(ii),ichk_d(ii)
  13257 c     x,                ob_spd(ii),xiv_s(ii),ichk_s(ii)
  13258 c     x,                c_qc(ii)
  13259 c                  enddo
  13260 c                endif
  13261 c
  13262                 stuck = .false.
  13263                 k_stuck = 0
  13264 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  13265                 stk_alon = -999 999
  13266                 iobfirst = -999 999
  13267                 ioblast = -999 999
  13268                 iifirst = -999 999
  13269                 iilast = -999 999
  13270                 alon_min =  999 999
  13271                 alon_max = -999 999
  13272 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  13273                 ht_min_stuck =  999 999
  13274                 ht_max_stuck = -999 999
  13275 c
  13276 c             Accumulate statistics for stuck segments
  13277 c             ----------------------------------------
  13278               elseif(c_qc(ii)(4:4).ne.'K') then
  13279                 k_stuck = k_stuck + 1
  13280                 stk_alon = alon(ii)
  13281                 if(iobfirst.eq.-999 999) then
  13282                   iobfirst = iob-1
  13283 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  13284                   if(alon(iim1).lt.alon_min.and.
  13285      $               alon(iim1).ne.amiss) alon_min = alon(iim1)
  13286                   if(alon(iim1).gt.alon_max.and.
  13287      $               alon(iim1).ne.amiss) alon_max = alon(iim1)
  13288 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision

Page 292         Source Listing                  STK_VAL_QC
2017-04-18 11:07                                 acftobs_qc.f

  13289                   if(ht_ft(iim1).lt.ht_min_stuck) 
  13290      $               ht_min_stuck = ht_ft(iim1)
  13291                   if(ht_ft(iim1).gt.ht_max_stuck) 
  13292      $               ht_max_stuck = ht_ft(iim1)
  13293                 endif
  13294                 ioblast = iob
  13295                 if(iifirst.eq.-999 999) iifirst = iim1
  13296                 iilast = ii
  13297 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  13298                 if(alon(ii).lt.alon_min.and.
  13299      $             alon(ii).ne.amiss) alon_min = alon(ii)
  13300                 if(alon(ii).gt.alon_max.and.
  13301      $             alon(ii).ne.amiss) alon_max = alon(ii)
  13302 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  13303                 if(ht_ft(ii).lt.ht_min_stuck) ht_min_stuck = ht_ft(ii)
  13304                 if(ht_ft(ii).gt.ht_max_stuck) ht_max_stuck = ht_ft(ii)
  13305               endif
  13306             enddo
  13307 c
  13308 c           Don't reject flights with constant lon rounded to nearest deg
  13309 c           or flights with elapsed time less than 30 minutes (1800 seconds)
  13310 c           --------------------------------------------------------------
  13311             if(stuck.and.
  13312 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  13313      $         alon(iistart).ne.amiss.and.
  13314      $         abs(alon_max-alon_min).lt.0.005.and.
  13315      $         abs(nint(alon(iistart))-alon(iistart)).gt.0.005.and.
  13316      $         abs(idt(iiend)-idt(iistart)).gt.1800.and.
  13317 c     $         abs(alon(iiend)-alon(iistart)).lt.0.005.and.
  13318      $         (k_ACARS+k_AIREP+k_AMDAR.ge.3.or.
  13319      $          k_ACARS+k_AIREP+k_AMDAR.eq.0).and.
  13320      $         (abs(alon(iistart)).lt.0.005.or.
  13321 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  13322      $          ht_max-ht_min.lt.100..or.
  13323      $          ht_max-ht_min.gt.9000.)) then
  13324 c
  13325               do iob=istart,iend
  13326                 ii = indx(iob)
  13327                 c_qc(ii)(4:4) = 'K'
  13328               enddo
  13329 cc
  13330 cc           Otherwise, if only a portion of the flight is stuck, set QC flags
  13331 cc           -----------------------------------------------------------------
  13332 c            elseif(k_stuck.ge.3.and.
  13333 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  13334 c     $             stk_alon.ne.-999 999.and.
  13335 c     $             stk_alon.ne.amiss.and.
  13336 c     $             abs(alon_max-alon_min).lt.0.005.and.
  13337 c     $             abs(nint(stk_alon)-stk_alon).gt.0.005.and.
  13338 c     $             abs(idt(iilast)-idt(iifirst)).gt.1800.and.
  13339 c     $             (abs(stk_alon).lt.0.005.or.
  13340 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  13341 c     $              ht_max_stuck-ht_min_stuck.lt.100..or.
  13342 c     $              ht_max_stuck-ht_min_stuck.gt.9000.) ) then
  13343 c
  13344 c              do iob=iobfirst,ioblast
  13345 c                ii = indx(iob)

Page 293         Source Listing                  STK_VAL_QC
2017-04-18 11:07                                 acftobs_qc.f

  13346 c                c_qc(ii)(4:4) = 'K'
  13347 c              enddo
  13348 cc
  13349 c              write(io8,*)
  13350 c              write(io8,*) 'Flight with > 3 constant longitudes'
  13351 c              do iob=istart,iend
  13352 c                ii = indx(iob)
  13353 c                write(io8,3002) ii,c_insty_ob(itype(ii))
  13354 c     x,            c_acftreg(ii),c_acftid(ii)
  13355 c     x,            idt(ii),alat(ii),alon(ii)
  13356 c     x,            pres(ii),ht_ft(ii)
  13357 c     x,            t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
  13358 c     x,            ob_q(ii),xiv_q(ii),ichk_q(ii)
  13359 c     x,            ob_dir(ii),xiv_d(ii),ichk_d(ii)
  13360 c     x,            ob_spd(ii),xiv_s(ii),ichk_s(ii)
  13361 c     x,            c_qc(ii)
  13362 c              enddo
  13363 c
  13364             endif  
  13365 c
  13366 c           Check if pressure is stuck 
  13367 c           (constant ok if at upper levels)
  13368 c           (The check for stuck segments is commented out)
  13369 c           -----------------------------------------------
  13370             stuck = .true.
  13371             k_stuck = 0
  13372             stk_pres = -999 999
  13373             iobfirst = -999 999
  13374             ioblast = -999 999
  13375             iifirst = -999 999
  13376             iilast = -999 999
  13377             ob_min =  999 999
  13378             ob_max = -999 999
  13379 c
  13380             do iob=istart+1,iend
  13381               ii = indx(iob)
  13382               iim1 = indx(iob-1)
  13383 c
  13384 c             Skip over isolated man_airep reports
  13385 c             ------------------------------------
  13386               if((itype(ii).eq.i_man_airep.or.
  13387      $            itype(ii).eq.i_man_Yairep).and.
  13388      $            k_ACARS+k_AIREP+k_AMDAR.gt.0) then
  13389 c
  13390 c             Set "stuck" to false if pressures not equal and re-initialize stats
  13391 c             -------------------------------------------------------------------
  13392               elseif(abs(pres(iim1)-pres(ii)).gt.0.05.and.
  13393      $               pres(iim1).ne.amiss.and.
  13394      $               pres(ii).ne.amiss) then
  13395                 stuck = .false.
  13396                 k_stuck = 0
  13397                 stk_pres = -999 999
  13398                 iobfirst = -999 999
  13399                 ioblast = -999 999
  13400                 iifirst = -999 999
  13401                 iilast = -999 999
  13402                 ob_min =  999 999

Page 294         Source Listing                  STK_VAL_QC
2017-04-18 11:07                                 acftobs_qc.f

  13403                 ob_max = -999 999
  13404 c
  13405 c             Accumulate statistics for stuck segments
  13406 c             ----------------------------------------
  13407               else
  13408 c                k_stuck = k_stuck + 1
  13409 c                stk_pres = pres(ii)
  13410                 if(iobfirst.eq.-999 999) then
  13411                   iobfirst = iob-1
  13412                   if(pres(iim1).lt.ob_min.and.
  13413      $               pres(iim1).ne.amiss) ob_min = pres(iim1)
  13414                   if(pres(iim1).gt.ob_max.and.
  13415      $               pres(iim1).ne.amiss) ob_max = pres(iim1)
  13416                 endif
  13417 c                ioblast = iob
  13418 c                if(iifirst.eq.-999 999) iifirst = iim1
  13419 c                iilast = ii
  13420                 if(pres(ii).lt.ob_min.and.
  13421      $             pres(ii).ne.amiss) ob_min = pres(ii)
  13422                 if(pres(ii).gt.ob_max.and.
  13423      $             pres(ii).ne.amiss) ob_max = pres(ii)
  13424 c
  13425               endif
  13426             enddo
  13427 c
  13428 c           Don't reject flights with pressure less than 750 mb
  13429 c           ---------------------------------------------------
  13430             if(stuck.and.
  13431      $         pres(iistart).gt.750..and.
  13432      $         pres(iistart).ne.amiss.and.
  13433 c     $         abs(pres(iiend)-pres(iistart)).lt.0.05.and.
  13434      $         abs(ob_max-ob_min).lt.0.05.and.
  13435      $         abs(idt(iiend)-idt(iistart)).gt.1800.and.
  13436      $         (k_ACARS+k_AIREP+k_AMDAR.ge.3.or.
  13437      $          k_ACARS+k_AIREP+k_AMDAR.eq.0)) then
  13438 c
  13439               do iob=istart,iend
  13440                 ii = indx(iob)
  13441                 c_qc(ii)(5:5) = 'K'
  13442               enddo
  13443 cc
  13444 cc           Otherwise, if only a portion of the flight is stuck, set QC flags
  13445 cc           -----------------------------------------------------------------
  13446 c            elseif(k_stuck.ge.3.and.
  13447 c     $             stk_pres.ne.-999 999.and.
  13448 c     $             stk_pres.ne.amiss.and.
  13449 c     $             abs(ob_max-ob_min).lt.0.05.and.
  13450 c     $             abs(idt(iilast)-idt(iifirst)).gt.1800.and.
  13451 c     $             stk_pres.gt.750.) then
  13452 cc
  13453 c              do iob=iobfirst,ioblast
  13454 c                ii = indx(iob)
  13455 c                c_qc(ii)(5:5) = 'K'
  13456 c              enddo
  13457 cc
  13458 c              stuck = .true.
  13459 cc

Page 295         Source Listing                  STK_VAL_QC
2017-04-18 11:07                                 acftobs_qc.f

  13460 c              write(io8,*)
  13461 c              write(io8,*) 'Flight with > 3 constant pressures'
  13462 c              do iob=istart,iend
  13463 c                ii = indx(iob)
  13464 c                write(io8,3002) ii,c_insty_ob(itype(ii))
  13465 c     x,            c_acftreg(ii),c_acftid(ii)
  13466 c     x,            idt(ii),alat(ii),alon(ii)
  13467 c     x,            pres(ii),ht_ft(ii)
  13468 c     x,            t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
  13469 c     x,            ob_q(ii),xiv_q(ii),ichk_q(ii)
  13470 c     x,            ob_dir(ii),xiv_d(ii),ichk_d(ii)
  13471 c     x,            ob_spd(ii),xiv_s(ii),ichk_s(ii)
  13472 c     x,            c_qc(ii)
  13473 c              enddo
  13474 c
  13475             endif  
  13476 c
  13477 c           Check if altitude is stuck 
  13478 c           (constant ok if at upper levels)
  13479 c           (The check for stuck segments is commented out)
  13480 c           -----------------------------------------------
  13481             if(.not.stuck) then
  13482 c
  13483               stuck = .true.
  13484               k_stuck = 0
  13485               stk_alt = -999 999
  13486               iobfirst = -999 999
  13487               ioblast = -999 999
  13488               iifirst = -999 999
  13489               iilast = -999 999
  13490               ob_min =  999 999
  13491               ob_max = -999 999
  13492 c
  13493               do iob=istart+1,iend
  13494                 ii = indx(iob)
  13495                 iim1 = indx(iob-1)
  13496 c
  13497 c               Skip over isolated man_airep reports
  13498 c               ------------------------------------
  13499                 if((itype(ii).eq.i_man_airep.or.
  13500      $              itype(ii).eq.i_man_Yairep).and.
  13501      $              k_ACARS+k_AIREP+k_AMDAR.gt.0) then
  13502 c
  13503 c               Set "stuck" to false if heights not equal and re-initialize stats
  13504 c               -----------------------------------------------------------------
  13505                 elseif(ifix(ht_ft(iim1)/10.).ne.
  13506      $                 ifix(ht_ft(ii)/10.).and.
  13507      $                 ht_ft(iim1).ne.amiss.and.
  13508      $                 ht_ft(ii).ne.amiss) then
  13509                   stuck = .false.
  13510                   k_stuck = 0
  13511                   stk_alt = -999 999
  13512                   iobfirst = -999 999
  13513                   ioblast = -999 999
  13514                   iifirst = -999 999
  13515                   iilast = -999 999
  13516                   ob_min =  999 999

Page 296         Source Listing                  STK_VAL_QC
2017-04-18 11:07                                 acftobs_qc.f

  13517                   ob_max = -999 999
  13518 c
  13519 c               Accumulate statistics for stuck segments
  13520 c               ----------------------------------------
  13521                 else
  13522 c                  k_stuck = k_stuck + 1
  13523 c                  stk_alt = ht_ft(ii)
  13524                   if(iobfirst.eq.-999 999) then
  13525                     iobfirst = iob-1
  13526                     if(ht_ft(iim1).lt.ob_min.and.
  13527      $                 ht_ft(iim1).ne.amiss) ob_min = ht_ft(iim1)
  13528                     if(ht_ft(iim1).gt.ob_max.and.
  13529      $                 ht_ft(iim1).ne.amiss) ob_max = ht_ft(iim1)
  13530                   endif
  13531 c                  ioblast = iob
  13532 c                  if(iifirst.eq.-999 999) iifirst = iim1
  13533 c                  iilast = ii
  13534                   if(ht_ft(ii).lt.ob_min.and.
  13535      $               ht_ft(ii).ne.amiss) ob_min = ht_ft(ii)
  13536                   if(ht_ft(ii).gt.ob_max.and.
  13537      $               ht_ft(ii).ne.amiss) ob_max = ht_ft(ii)
  13538 c
  13539                 endif
  13540               enddo
  13541 c
  13542 c             Don't reject flights with altitude greater than 8000'
  13543 c             -----------------------------------------------------
  13544               if(stuck.and.
  13545      $           ht_ft(iistart).lt.8000..and.
  13546      $           ht_ft(iistart).ne.amiss.and.
  13547 c     $           ifix(ht_ft(iiend)/10.).eq.ifix(ht_ft(iistart)/10.).and.
  13548      $           ifix(ob_max/10.).eq.ifix(ob_min/10.).and.
  13549      $           abs(idt(iiend)-idt(iistart)).gt.1800.and.
  13550      $           (k_ACARS+k_AIREP+k_AMDAR.ge.3.or.
  13551      $            k_ACARS+k_AIREP+k_AMDAR.eq.0)) then
  13552 c
  13553                 do iob=istart,iend
  13554                   ii = indx(iob)
  13555                   c_qc(ii)(5:5) = 'K'
  13556                 enddo
  13557 cc
  13558 cc             Otherwise, if only a portion of the flight is stuck, set QC flags
  13559 cc             -----------------------------------------------------------------
  13560 c              elseif(k_stuck.ge.3.and.
  13561 c     $               stk_alt.ne.-999 999.and.
  13562 c     $               stk_alt.ne.amiss.and.
  13563 c     $               ifix(ob_max/10.).eq.ifix(ob_min/10.).and.
  13564 c     $               abs(idt(iilast)-idt(iifirst)).gt.1800.and.
  13565 c     $               stk_alt.lt.8000.) then
  13566 cc
  13567 c                do iob=iobfirst,ioblast
  13568 c                  ii = indx(iob)
  13569 c                  c_qc(ii)(5:5) = 'K'
  13570 c                enddo
  13571 cc
  13572 c                write(io8,*)
  13573 c                write(io8,*) 'Flight with > 3 constant altitudes'

Page 297         Source Listing                  STK_VAL_QC
2017-04-18 11:07                                 acftobs_qc.f

  13574 c                do iob=istart,iend
  13575 c                  ii = indx(iob)
  13576 c                  write(io8,3002) ii,c_insty_ob(itype(ii))
  13577 c     x,              c_acftreg(ii),c_acftid(ii)
  13578 c     x,              idt(ii),alat(ii),alon(ii)
  13579 c     x,              pres(ii),ht_ft(ii)
  13580 c     x,              t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
  13581 c     x,              ob_q(ii),xiv_q(ii),ichk_q(ii)
  13582 c     x,              ob_dir(ii),xiv_d(ii),ichk_d(ii)
  13583 c     x,              ob_spd(ii),xiv_s(ii),ichk_s(ii)
  13584 c     x,              c_qc(ii)
  13585 c                enddo
  13586 c
  13587               endif  
  13588             endif
  13589 c
  13590 c           Check if temperature is stuck or reported in whole deg
  13591 c           (The check for stuck segments is commented out)
  13592 c           ------------------------------------------------------
  13593             stuck = .true.
  13594             k_stuck = 0
  13595             stk_temp = -999 999
  13596             iobfirst = -999 999
  13597             ioblast = -999 999
  13598             iifirst = -999 999
  13599             iilast = -999 999
  13600             ob_min =  999 999
  13601             ob_max = -999 999
  13602             ht_min_stuck =  999 999
  13603             ht_max_stuck = -999 999
  13604 c
  13605             do iob=istart+1,iend
  13606               ii = indx(iob)
  13607               iim1 = indx(iob-1)
  13608 c
  13609 c             Skip over isolated man_airep reports
  13610 c             ------------------------------------
  13611               if((itype(ii).eq.i_man_airep.or.
  13612      $            itype(ii).eq.i_man_Yairep).and.
  13613      $            k_ACARS+k_AIREP+k_AMDAR.gt.0) then
  13614 c
  13615 c             Skip over temperatures already rejected
  13616 c             ---------------------------------------
  13617               elseif(c_qc(ii)(6:6).eq.'B'.or.
  13618      $               c_qc(ii)(6:6).eq.'b'.or.
  13619      $               c_qc(ii)(6:6).eq.'E'.or.
  13620      $               c_qc(ii)(6:6).eq.'I') then
  13621 c
  13622 c             Set "stuck" to false if temps not equal and re-initialize stats
  13623 c             ---------------------------------------------------------------
  13624               elseif(abs(ob_t(iim1)-ob_t(ii)).gt.0.05.and.
  13625      $               ob_t(iim1).ne.amiss.and.
  13626      $               ob_t(ii).ne.amiss) then
  13627 c
  13628                 stuck = .false.
  13629                 k_stuck = 0
  13630                 stk_temp = -999 999

Page 298         Source Listing                  STK_VAL_QC
2017-04-18 11:07                                 acftobs_qc.f

  13631                 iobfirst = -999 999
  13632                 ioblast = -999 999
  13633                 iifirst = -999 999
  13634                 iilast = -999 999
  13635                 ob_min =  999 999
  13636                 ob_max = -999 999
  13637                 ht_min_stuck =  999 999
  13638                 ht_max_stuck = -999 999
  13639 c
  13640 c             Accumulate statistics for stuck segments
  13641 c             ----------------------------------------
  13642               else
  13643 c                k_stuck = k_stuck + 1
  13644 c                stk_temp = ob_t(ii)
  13645                 if(iobfirst.eq.-999 999.and.
  13646      $             ob_t(iim1).ne.amiss) then
  13647                   iobfirst = iob-1
  13648                   ioblast = iob-1
  13649                   if(ob_t(iim1).lt.ob_min.and.
  13650      $               ob_t(iim1).ne.amiss) ob_min = ob_t(iim1)
  13651                   if(ob_t(iim1).gt.ob_max.and.
  13652      $               ob_t(iim1).ne.amiss) ob_max = ob_t(iim1)
  13653 c                  if(ht_ft(iim1).lt.ht_min_stuck) 
  13654 c     $               ht_min_stuck = ht_ft(iim1)
  13655 c                  if(ht_ft(iim1).gt.ht_max_stuck) 
  13656 c     $               ht_max_stuck = ht_ft(iim1)
  13657                 endif
  13658                 if(ob_t(ii).ne.amiss) ioblast = iob
  13659 c                if(iifirst.eq.-999 999) iifirst = iim1
  13660 c                iilast = ii
  13661                 if(ob_t(ii).lt.ob_min.and.
  13662      $             ob_t(ii).ne.amiss) ob_min = ob_t(ii)
  13663                 if(ob_t(ii).gt.ob_max.and.
  13664      $             ob_t(ii).ne.amiss) ob_max = ob_t(ii)
  13665 c                if(ht_ft(ii).lt.ht_min_stuck) ht_min_stuck = ht_ft(ii)
  13666 c                if(ht_ft(ii).gt.ht_max_stuck) ht_max_stuck = ht_ft(ii)
  13667 c
  13668               endif
  13669             enddo
  13670 c
  13671 c           Don't reject flights with a height difference of less than 1500'
  13672 c           --------------------------------------------------------------
  13673             if(stuck.and.
  13674      $         k_stuck.gt.0.and.
  13675      $         ob_t(iistart).ne.amiss.and.
  13676      $         iobfirst.ne.ioblast.and.
  13677      $         (ht_max-ht_min.gt.1500..or.
  13678      $          ht_max.gt.25000.).and.
  13679      $         abs(ob_max-ob_min).lt.0.05.and.
  13680      $         (k_ACARS+k_AIREP+k_AMDAR.ge.3.or.
  13681      $          k_ACARS+k_AIREP+k_AMDAR.eq.0)) then
  13682 c
  13683               do iob=istart,iend
  13684                 ii = indx(iob)
  13685                 if(c_qc(ii)(6:6).ne.'B'.and.
  13686      $             c_qc(ii)(6:6).ne.'b'.and.
  13687      $             c_qc(ii)(6:6).ne.'E'.and.

Page 299         Source Listing                  STK_VAL_QC
2017-04-18 11:07                                 acftobs_qc.f

  13688      $             c_qc(ii)(6:6).ne.'I') c_qc(ii)(6:6) = 'K'
  13689               enddo
  13690 cc
  13691 cc           Otherwise, if only a portion of the flight is stuck, set QC flags
  13692 cc           -----------------------------------------------------------------
  13693 c            elseif(k_stuck.ge.3.and.
  13694 c     $             stk_temp.ne.-999 999.and.
  13695 c     $             stk_temp.ne.amiss.and.
  13696 c     $             abs(ob_max-ob_min).lt.0.05.and.
  13697 c     $             (ht_max_stuck-ht_min_stuck.gt.1500..or.
  13698 c     $              ht_max_stuck.gt.25000.)) then
  13699 cc
  13700 c              do iob=iobfirst,ioblast
  13701 c                ii = indx(iob)
  13702 c                c_qc(ii)(6:6) = 'K'
  13703 c              enddo
  13704 cc
  13705 c              write(io8,*)
  13706 c              write(io8,*) 'Flight with > 3 constant temperatures'
  13707 c              do iob=istart,iend
  13708 c                ii = indx(iob)
  13709 c                write(io8,3002) ii,c_insty_ob(itype(ii))
  13710 c     x,            c_acftreg(ii),c_acftid(ii)
  13711 c     x,            idt(ii),alat(ii),alon(ii)
  13712 c     x,            pres(ii),ht_ft(ii)
  13713 c     x,            t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
  13714 c     x,            ob_q(ii),xiv_q(ii),ichk_q(ii)
  13715 c     x,            ob_dir(ii),xiv_d(ii),ichk_d(ii)
  13716 c     x,            ob_spd(ii),xiv_s(ii),ichk_s(ii)
  13717 c     x,            c_qc(ii)
  13718 c              enddo
  13719 c
  13720             endif  
  13721 c
  13722 ccccdak           Recompute temperature reported in whole degrees for ACARS/MDCRS
  13723 c           Recompute temperature reported in whole degrees for TAMDAR/MDCRS
  13724 c           Mark as bad for other types
  13725 c           ----------------------------------------------------------------
  13726             if(temp_min.gt.266.0.and.
  13727      $         temp_max.lt.278.0.and.
  13728      $         (.not.stuck).and.
  13729      $         ht_max.gt.25000.) then
  13730 c
  13731               do mm=1,kreg
  13732                 if(c_acftreg(iistart).eq.creg_reg(mm)) mreg = mm
  13733               enddo
  13734 c
  13735               do iob=istart,iend
  13736                 ii = indx(iob)
  13737                 if(itype(ii).eq.i_acars.or.
  13738      $             itype(ii).eq.i_acars_lvl.or.
  13739      $             itype(ii).eq.i_acars_asc.or.
  13740      $             itype(ii).eq.i_acars_des.or.
  13741      $             itype(ii).eq.i_mdcrs.or.
  13742      $             itype(ii).eq.i_mdcrs_lvl.or.
  13743      $             itype(ii).eq.i_mdcrs_asc.or.
  13744      $             itype(ii).eq.i_mdcrs_des) then

Page 300         Source Listing                  STK_VAL_QC
2017-04-18 11:07                                 acftobs_qc.f

  13745                   ob_t(ii) = (ob_t(ii) - 273.16) * 10. + 273.16
  13746 c                  write(io8,*) '  temperature recomputed'
  13747                   c_qc(ii)(6:6) = 'R'
  13748                   t_prcn(ii) = 1.00
  13749                 else
  13750 c                  write(io8,*) '  temperature marked bad'
  13751                   c_qc(ii)(6:6) = 'b'
  13752                 endif
  13753 c
  13754 c               Count number of corrected/rejected temperatures
  13755 c               -----------------------------------------------
  13756                 if(c_acftreg(ii).eq.creg_reg(mreg)) then
  13757 c
  13758                   if(itype(ii).eq.i_mdcrs.or.
  13759      $               itype(ii).eq.i_mdcrs_lvl.or.
  13760      $               itype(ii).eq.i_mdcrs_asc.or.
  13761      $               itype(ii).eq.i_mdcrs_des) then
  13762                     nwhol_reg(mreg,1) = nwhol_reg(mreg,1) + 1
  13763 c
  13764                   elseif(itype(ii).eq.i_acars.or.
  13765      $                   itype(ii).eq.i_acars_lvl.or.
  13766      $                   itype(ii).eq.i_acars_asc.or.
  13767      $                   itype(ii).eq.i_acars_des) then
  13768                     nwhol_reg(mreg,2) = nwhol_reg(mreg,2) + 1
  13769 c
  13770                   elseif(itype(ii).eq.i_amdar.or. 
  13771      $                   itype(ii).eq.i_amdar_lvl.or.
  13772      $                   itype(ii).eq.i_amdar_asc.or.
  13773      $                   itype(ii).eq.i_amdar_des) then
  13774                     nwhol_reg(mreg,3) = nwhol_reg(mreg,3) + 1
  13775 c
  13776                   elseif(itype(ii).eq.i_airep.or.
  13777      $                   itype(ii).eq.i_airep_lvl.or.
  13778      $                   itype(ii).eq.i_airep_asc.or.
  13779      $                   itype(ii).eq.i_airep_des) then
  13780                     nwhol_reg(mreg,4) = nwhol_reg(mreg,4) + 1
  13781 c
  13782                   elseif(itype(ii).eq.i_man_airep.or.
  13783      $                   itype(ii).eq.i_man_Yairep) then
  13784                     nwhol_reg(mreg,5) = nwhol_reg(mreg,5) + 1
  13785                   endif
  13786 c
  13787                 else
  13788                   do mm=1,kreg
  13789                     if(c_acftreg(ii).eq.creg_reg(mm)) then 
  13790 c
  13791                       if(itype(ii).eq.i_mdcrs.or.
  13792      $                   itype(ii).eq.i_mdcrs_lvl.or.
  13793      $                   itype(ii).eq.i_mdcrs_asc.or.
  13794      $                   itype(ii).eq.i_mdcrs_des) then
  13795                         nwhol_reg(mm,1) = nwhol_reg(mm,1) + 1
  13796 c
  13797                       elseif(itype(ii).eq.i_acars.or.
  13798      $                       itype(ii).eq.i_acars_lvl.or.
  13799      $                       itype(ii).eq.i_acars_asc.or.
  13800      $                       itype(ii).eq.i_acars_des) then
  13801                         nwhol_reg(mm,2) = nwhol_reg(mm,2) + 1

Page 301         Source Listing                  STK_VAL_QC
2017-04-18 11:07                                 acftobs_qc.f

  13802 c
  13803                       elseif(itype(ii).eq.i_amdar.or. 
  13804      $                       itype(ii).eq.i_amdar_lvl.or.
  13805      $                       itype(ii).eq.i_amdar_asc.or.
  13806      $                       itype(ii).eq.i_amdar_des) then
  13807                         nwhol_reg(mm,3) = nwhol_reg(mm,3) + 1
  13808 c
  13809                       elseif(itype(ii).eq.i_airep.or.
  13810      $                       itype(ii).eq.i_airep_lvl.or.
  13811      $                       itype(ii).eq.i_airep_asc.or.
  13812      $                       itype(ii).eq.i_airep_des) then
  13813                         nwhol_reg(mm,4) = nwhol_reg(mm,4) + 1
  13814 c
  13815                       elseif(itype(ii).eq.i_man_airep.or.
  13816      $                       itype(ii).eq.i_man_Yairep) then
  13817                         nwhol_reg(mm,5) = nwhol_reg(mm,5) + 1
  13818                       endif
  13819                     endif
  13820                   enddo
  13821                 endif
  13822               enddo
  13823             endif
  13824 c
  13825 c           Check if wind direction is stuck
  13826 c           (The check for stuck segments is commented out)
  13827 c           -----------------------------------------------
  13828             stuck = .true.
  13829             k_stuck = 0
  13830             stk_wdir = -999 999
  13831             iobfirst = -999 999
  13832             ioblast = -999 999
  13833             iifirst = -999 999
  13834             iilast = -999 999
  13835             ob_min =  999 999
  13836             ob_max = -999 999
  13837             ht_min_stuck =  999 999
  13838             ht_max_stuck = -999 999
  13839 c
  13840             do iob=istart+1,iend
  13841               ii = indx(iob)
  13842               iim1 = indx(iob-1)
  13843 c
  13844 c             Skip over isolated man_airep reports
  13845 c             ------------------------------------
  13846               if((itype(ii).eq.i_man_airep.or.
  13847      $            itype(ii).eq.i_man_Yairep).and.
  13848      $            k_ACARS+k_AIREP+k_AMDAR.gt.0) then
  13849 c
  13850 c             Skip over winds already rejected
  13851 c             --------------------------------
  13852               elseif(c_qc(ii)(7:7).eq.'B'.or.
  13853      $               c_qc(ii)(7:7).eq.'E'.or.
  13854      $               c_qc(ii)(8:8).eq.'E') then
  13855 c
  13856 c             Set "stuck" to false if directions not equal and re-initialize stats
  13857 c             --------------------------------------------------------------------
  13858               elseif(abs(ob_dir(iim1)-ob_dir(ii)).gt.0.5.and.

Page 302         Source Listing                  STK_VAL_QC
2017-04-18 11:07                                 acftobs_qc.f

  13859      $               ob_dir(iim1).ne.amiss.and.
  13860      $               ob_dir(ii).ne.amiss) then
  13861                 stuck = .false.
  13862                 k_stuck = 0
  13863                 stk_wdir = -999 999
  13864                 iobfirst = -999 999
  13865                 ioblast = -999 999
  13866                 iifirst = -999 999
  13867                 iilast = -999 999
  13868                 ob_min =  999 999
  13869                 ob_max = -999 999
  13870                 ht_min_stuck =  999 999
  13871                 ht_max_stuck = -999 999
  13872 c
  13873 c             Accumulate statistics for stuck segments
  13874 c             ----------------------------------------
  13875               else
  13876 c                k_stuck = k_stuck + 1
  13877 c                stk_wdir = ob_dir(ii)
  13878                 if(iobfirst.eq.-999 999) then
  13879                   iobfirst = iob-1
  13880                   if(ob_dir(iim1).lt.ob_min.and.
  13881      $               ob_dir(iim1).ne.amiss) ob_min = ob_dir(iim1)
  13882                   if(ob_dir(iim1).gt.ob_max.and.
  13883      $               ob_dir(iim1).ne.amiss) ob_max = ob_dir(iim1)
  13884 c                  if(ht_ft(iim1).lt.ht_min_stuck) 
  13885 c     $               ht_min_stuck = ht_ft(iim1)
  13886 c                  if(ht_ft(iim1).gt.ht_max_stuck) 
  13887 c     $               ht_max_stuck = ht_ft(iim1)
  13888                 endif
  13889 c                ioblast = iob
  13890 c                if(iifirst.eq.-999 999) iifirst = iim1
  13891 c                iilast = ii
  13892                 if(ob_dir(ii).lt.ob_min.and.
  13893      $             ob_dir(ii).ne.amiss) ob_min = ob_dir(ii)
  13894                 if(ob_dir(ii).gt.ob_max.and.
  13895      $             ob_dir(ii).ne.amiss) ob_max = ob_dir(ii)
  13896 c                if(ht_ft(ii).lt.ht_min_stuck) ht_min_stuck = ht_ft(ii)
  13897 c                if(ht_ft(ii).gt.ht_max_stuck) ht_max_stuck = ht_ft(ii)
  13898 c
  13899               endif
  13900             enddo
  13901 c
  13902 c           Don't reject flights with constant dir rounded to nearest 10 deg
  13903 c           --------------------------------------------------------------
  13904             if(stuck.and.
  13905      $         ob_dir(iistart).ne.amiss.and.
  13906      $         (abs(nint(ob_dir(iistart)/10.)*10
  13907      $          -ob_dir(iistart)).gt.0.5).and.
  13908 c     $         abs(ob_dir(iiend)-ob_dir(iistart)).lt.0.5.and.
  13909      $         abs(ob_max-ob_min).lt.0.5.and.
  13910      $         (k_ACARS+k_AIREP+k_AMDAR.ge.3.or.
  13911      $          k_ACARS+k_AIREP+k_AMDAR.eq.0).and.
  13912      $         (ht_max-ht_min.lt.100..or.
  13913      $          ht_max-ht_min.gt.9000.)) then
  13914 c
  13915               do iob=istart,iend

Page 303         Source Listing                  STK_VAL_QC
2017-04-18 11:07                                 acftobs_qc.f

  13916                 ii = indx(iob)
  13917                 c_qc(ii)(7:7) = 'K'
  13918               enddo
  13919 cc
  13920 cc           Otherwise, if only a portion of the flight is stuck, set QC flags
  13921 cc           -----------------------------------------------------------------
  13922 c            elseif(k_stuck.ge.3.and.
  13923 c     $             stk_wdir.ne.-999 999.and.
  13924 c     $             stk_wdir.ne.amiss.and.
  13925 c     $             (abs(nint(stk_wdir/10.)*10-stk_wdir).gt.0.5).and.
  13926 c     $             abs(ob_max-ob_min).lt.0.5.and.
  13927 c     $             (ht_max_stuck-ht_min_stuck.lt.100..or.
  13928 c     $              ht_max_stuck-ht_min_stuck.gt.9000.) ) then
  13929 cc
  13930 c              do iob=iobfirst,ioblast
  13931 c                ii = indx(iob)
  13932 c                c_qc(ii)(7:7) = 'K'
  13933 c              enddo
  13934 cc
  13935 c              write(io8,*)
  13936 c              write(io8,*) 'Flight with > 3 constant wind directions'
  13937 c              do iob=istart,iend
  13938 c                ii = indx(iob)
  13939 c                write(io8,3002) ii,c_insty_ob(itype(ii))
  13940 c     x,            c_acftreg(ii),c_acftid(ii)
  13941 c     x,            idt(ii),alat(ii),alon(ii)
  13942 c     x,            pres(ii),ht_ft(ii)
  13943 c     x,            t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
  13944 c     x,            ob_q(ii),xiv_q(ii),ichk_q(ii)
  13945 c     x,            ob_dir(ii),xiv_d(ii),ichk_d(ii)
  13946 c     x,            ob_spd(ii),xiv_s(ii),ichk_s(ii)
  13947 c     x,            c_qc(ii)
  13948 c              enddo
  13949 c
  13950             endif  
  13951 c
  13952 c           Check if wind speed is stuck
  13953 c           (The check for stuck segments is commented out)
  13954 c           -----------------------------------------------
  13955             stuck = .true.
  13956             k_stuck = 0
  13957             stk_wspd = -999 999
  13958             iobfirst = -999 999
  13959             ioblast = -999 999
  13960             iifirst = -999 999
  13961             iilast = -999 999
  13962             ob_min =  999 999
  13963             ob_max = -999 999
  13964             ht_min_stuck =  999 999
  13965             ht_max_stuck = -999 999
  13966 c
  13967             do iob=istart+1,iend
  13968               ii = indx(iob)
  13969               iim1 = indx(iob-1)
  13970 c
  13971 c             Skip over isolated man_airep reports
  13972 c             ------------------------------------

Page 304         Source Listing                  STK_VAL_QC
2017-04-18 11:07                                 acftobs_qc.f

  13973               if((itype(ii).eq.i_man_airep.or.
  13974      $            itype(ii).eq.i_man_Yairep).and.
  13975      $            k_ACARS+k_AIREP+k_AMDAR.gt.0) then
  13976 c
  13977 c             Skip over winds already rejected
  13978 c             --------------------------------
  13979               elseif(c_qc(ii)(7:7).eq.'B'.or.
  13980      $               c_qc(ii)(7:7).eq.'E'.or.
  13981      $               c_qc(ii)(7:7).eq.'K'.or.
  13982      $               c_qc(ii)(8:8).eq.'E') then
  13983 c
  13984 c             Set "stuck" to false if speeds not equal and re-initialize stats
  13985 c             ----------------------------------------------------------------
  13986               elseif(abs(ob_spd(iim1)-ob_spd(ii)).gt.0.05.and.
  13987      $               ob_spd(iim1).ne.amiss.and.
  13988      $               ob_spd(ii).ne.amiss) then
  13989                 stuck = .false.
  13990                 k_stuck = 0
  13991                 stk_wspd = -999 999
  13992                 iobfirst = -999 999
  13993                 ioblast = -999 999
  13994                 iifirst = -999 999
  13995                 iilast = -999 999
  13996                 ob_min =  999 999
  13997                 ob_max = -999 999
  13998                 ht_min_stuck =  999 999
  13999                 ht_max_stuck = -999 999
  14000 c
  14001 c             Accumulate statistics for stuck segments
  14002 c             ----------------------------------------
  14003               else
  14004 c                k_stuck = k_stuck + 1
  14005 c                stk_wspd = ob_spd(ii)
  14006                 if(iobfirst.eq.-999 999) then
  14007                   iobfirst = iob-1
  14008                   if(ob_spd(iim1).lt.ob_min.and.
  14009      $               ob_spd(iim1).ne.amiss) ob_min = ob_spd(iim1)
  14010                   if(ob_spd(iim1).gt.ob_max.and.
  14011      $               ob_spd(iim1).ne.amiss) ob_max = ob_spd(iim1)
  14012 c                  if(ht_ft(iim1).lt.ht_min_stuck) 
  14013 c     $               ht_min_stuck = ht_ft(iim1)
  14014 c                  if(ht_ft(iim1).gt.ht_max_stuck) 
  14015 c     $               ht_max_stuck = ht_ft(iim1)
  14016                 endif
  14017 c                ioblast = iob
  14018 c                if(iifirst.eq.-999 999) iifirst = iim1
  14019 c                iilast = ii
  14020                 if(ob_spd(ii).lt.ob_min.and.
  14021      $             ob_spd(ii).ne.amiss) ob_min = ob_spd(ii)
  14022                 if(ob_spd(ii).gt.ob_max.and.
  14023      $             ob_spd(ii).ne.amiss) ob_max = ob_spd(ii)
  14024 c                if(ht_ft(ii).lt.ht_min_stuck) ht_min_stuck = ht_ft(ii)
  14025 c                if(ht_ft(ii).gt.ht_max_stuck) ht_max_stuck = ht_ft(ii)
  14026 c
  14027               endif
  14028             enddo
  14029 c

Page 305         Source Listing                  STK_VAL_QC
2017-04-18 11:07                                 acftobs_qc.f

  14030 c           Don't reject flights with constant direction rounded to the nearest 10 deg
  14031 c           --------------------------------------------------------------------------
  14032             if(stuck.and.
  14033      $         ob_spd(iistart).ne.amiss.and.
  14034      $         (ob_dir(iistart).ne.-999 999.and.
  14035      $          (ob_dir(iistart).eq.0.0.or.
  14036      $           abs(nint(ob_dir(iistart)/10.)*10
  14037      $                   -ob_dir(iistart)).gt.0.5).or.
  14038      $          ob_dir(iiend).ne.-999 999.and.
  14039      $          (ob_dir(iiend).eq.0.0.or.
  14040      $           abs(nint(ob_dir(iiend)/10.)*10
  14041      $                   -ob_dir(iiend)).gt.0.5)).and.
  14042 c     $         abs(ob_spd(iiend)-ob_spd(iistart)).lt.0.05.and.
  14043      $         abs(ob_max-ob_min).lt.0.05.and.
  14044      $         (k_ACARS+k_AIREP+k_AMDAR.ge.3.or.
  14045      $          k_ACARS+k_AIREP+k_AMDAR.eq.0).and.
  14046      $         (ht_max-ht_min.lt.100..or.
  14047      $          ht_max-ht_min.gt.9000.)) then
  14048 c
  14049               do iob=istart,iend
  14050                 ii = indx(iob)
  14051                 c_qc(ii)(8:8) = 'K'
  14052               enddo
  14053 cc
  14054 cc           Otherwise, if only a portion of the flight is stuck, set QC flags
  14055 cc           -----------------------------------------------------------------
  14056 c            elseif(k_stuck.ge.3.and.
  14057 c     $             stk_wspd.ne.-999 999.and.
  14058 c     $             stk_wspd.ne.amiss.and.
  14059 c     $             ((ob_dir(iifirst).ne.-999 999.and.
  14060 c     $               (ob_dir(iifirst).eq.0.0.or.
  14061 c     $                abs(nint(ob_dir(iifirst)/10.)*10
  14062 c     $                        -ob_dir(iifirst)).gt.0.5)).or.
  14063 c     $              (ob_dir(iilast).ne.-999 999.and.
  14064 c     $               (ob_dir(iilast).eq.0.0.or.
  14065 c     $                abs(nint(ob_dir(iilast)/10.)*10
  14066 c     $                        -ob_dir(iilast)).gt.0.5))).and.
  14067 c     $              abs(ob_max-ob_min).lt.0.05.and.
  14068 c     $              (ht_max_stuck-ht_min_stuck.lt.100..or.
  14069 c     $               ht_max_stuck-ht_min_stuck.gt.9000.)) then
  14070 cc
  14071 c              do iob=iobfirst,ioblast
  14072 c                ii = indx(iob)
  14073 c                c_qc(ii)(8:8) = 'K'
  14074 c              enddo
  14075 cc
  14076 c              write(io8,*)
  14077 c              write(io8,*) 'Flight with > 3 constant wind speeds'
  14078 c              do iob=istart,iend
  14079 c                ii = indx(iob)
  14080 c                write(io8,3002) ii,c_insty_ob(itype(ii))
  14081 c     x,            c_acftreg(ii),c_acftid(ii)
  14082 c     x,            idt(ii),alat(ii),alon(ii)
  14083 c     x,            pres(ii),ht_ft(ii)
  14084 c     x,            t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
  14085 c     x,            ob_q(ii),xiv_q(ii),ichk_q(ii)
  14086 c     x,            ob_dir(ii),xiv_d(ii),ichk_d(ii)

Page 306         Source Listing                  STK_VAL_QC
2017-04-18 11:07                                 acftobs_qc.f

  14087 c     x,            ob_spd(ii),xiv_s(ii),ichk_s(ii)
  14088 c     x,            c_qc(ii)
  14089 c              enddo
  14090 c
  14091             endif  
  14092 c
  14093 c           Check if moisture is stuck
  14094 c           (The check for stuck segments is commented out)
  14095 c           -----------------------------------------------
  14096             stuck = .true.
  14097             k_stuck = 0
  14098             stk_moist = -999 999
  14099             iobfirst = -999 999
  14100             ioblast = -999 999
  14101             iifirst = -999 999
  14102             iilast = -999 999
  14103             ob_min =  999 999
  14104             ob_max = -999 999
  14105             ht_min_stuck =  999 999
  14106             ht_max_stuck = -999 999
  14107 c
  14108             do iob=istart+1,iend
  14109               ii = indx(iob)
  14110               iim1 = indx(iob-1)
  14111 c
  14112 c             Skip over isolated man_airep reports
  14113 c             ------------------------------------
  14114               if((itype(ii).eq.i_man_airep.or.
  14115      $            itype(ii).eq.i_man_Yairep).and.
  14116      $            k_ACARS+k_AIREP+k_AMDAR.gt.0) then
  14117 c
  14118 c             Set "stuck" to false if moistures not equal and re-initialize stats
  14119 c             Exclude missing values
  14120 c             -------------------------------------------------------------------
  14121               elseif(abs(ob_q(iim1)-ob_q(ii)).gt.0.005.and.
  14122      $               ob_q(iim1).ne.amiss.and.
  14123      $               ob_q(ii).ne.amiss.and.
  14124      $               ichk_q(ii).ne.-9.and.
  14125      $               ichk_q(ii).ne.9.and.
  14126      $               ichk_q(ii).ne.-1.and.
  14127      $               .not.(ob_q(ii).lt.0.005.and.ichk_q(ii).eq.-7)) then
  14128 c
  14129                 stuck = .false.
  14130                 k_stuck = 0
  14131                 stk_moist = -999 999
  14132                 iobfirst = -999 999
  14133                 ioblast = -999 999
  14134                 iifirst = -999 999
  14135                 iilast = -999 999
  14136                 ob_min =  999 999
  14137                 ob_max = -999 999
  14138                 ht_min_stuck =  999 999
  14139                 ht_max_stuck = -999 999
  14140 c
  14141 c             Accumulate statistics for stuck segments
  14142 c             ----------------------------------------
  14143               else

Page 307         Source Listing                  STK_VAL_QC
2017-04-18 11:07                                 acftobs_qc.f

  14144 c                k_stuck = k_stuck + 1
  14145 c                stk_moist = ob_q(ii)
  14146                 if(iobfirst.eq.-999 999) then
  14147                   iobfirst = iob-1
  14148                   if(ob_q(iim1).lt.ob_min.and.
  14149      $               ob_q(iim1).ne.amiss) ob_min = ob_q(iim1)
  14150                   if(ob_q(iim1).gt.ob_max.and.
  14151      $               ob_q(iim1).ne.amiss) ob_max = ob_q(iim1)
  14152 c                  if(ht_ft(iim1).lt.ht_min_stuck) 
  14153 c     $               ht_min_stuck = ht_ft(iim1)
  14154 c                  if(ht_ft(iim1).gt.ht_max_stuck) 
  14155 c     $               ht_max_stuck = ht_ft(iim1)
  14156                 endif
  14157 c                ioblast = iob
  14158 c                if(iifirst.eq.-999 999) iifirst = iim1
  14159 c                iilast = ii
  14160                 if(ob_q(ii).lt.ob_min.and.
  14161      $             ob_q(ii).ne.amiss) ob_min = ob_q(ii)
  14162                 if(ob_q(ii).gt.ob_max.and.
  14163      $             ob_q(ii).ne.amiss) ob_max = ob_q(ii)
  14164 c                if(ht_ft(ii).lt.ht_min_stuck) ht_min_stuck = ht_ft(ii)
  14165 c                if(ht_ft(ii).gt.ht_max_stuck) ht_max_stuck = ht_ft(ii)
  14166 c
  14167               endif
  14168             enddo
  14169 c
  14170 c           Don't reject flights with moisture = 0 (=> missing)
  14171 c           ---------------------------------------------------
  14172             if(stuck.and.
  14173      $         ob_q(iistart).ne.amiss.and.
  14174      $         abs(ob_q(iistart)).gt.0.005.and.
  14175 c     $         abs(ob_q(iiend)-ob_q(iistart)).lt.0.005.and.
  14176      $         abs(ob_max-ob_min).lt.0.005.and.
  14177      $         (k_ACARS+k_AIREP+k_AMDAR.ge.3.or.
  14178      $          k_ACARS+k_AIREP+k_AMDAR.eq.0).and.
  14179      $         (ht_max-ht_min.lt.100..or.
  14180      $          ht_max-ht_min.gt.9000.)) then
  14181 
  14182               do iob=istart,iend
  14183                 ii = indx(iob)
  14184                 if(c_qc(ii)(9:9).eq.'-') c_qc(ii)(9:9) = 'K'
  14185               enddo
  14186 cc
  14187 cc           Otherwise, if only a portion of the flight is stuck, set QC flags
  14188 cc           -----------------------------------------------------------------
  14189 c            elseif(k_stuck.ge.3.and.
  14190 c     $             stk_moist.ne.-999 999.and.
  14191 c     $             stk_moist.ne.amiss.and.
  14192 c     $             stk_moist.gt.0.005.and.
  14193 c     $             abs(ob_max-ob_min).lt.0.005.and.
  14194 c     $             (ht_max_stuck-ht_min_stuck.lt.100..or.
  14195 c     $              ht_max_stuck-ht_min_stuck.gt.9000.)) then
  14196 cc
  14197 c              do iob=iobfirst,ioblast
  14198 c                ii = indx(iob)
  14199 c                c_qc(ii)(9:9) = 'K'
  14200 c              enddo

Page 308         Source Listing                  STK_VAL_QC
2017-04-18 11:07                                 acftobs_qc.f

  14201 cc
  14202 c              write(io8,*)
  14203 c              write(io8,*) 'Flight with > 3 constant moisture'
  14204 c              do iob=istart,iend
  14205 c                ii = indx(iob)
  14206 c                write(io8,3002) ii,c_insty_ob(itype(ii))
  14207 c     x,            c_acftreg(ii),c_acftid(ii)
  14208 c     x,            idt(ii),alat(ii),alon(ii)
  14209 c     x,            pres(ii),ht_ft(ii)
  14210 c     x,            t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
  14211 c     x,            ob_q(ii),xiv_q(ii),ichk_q(ii)
  14212 c     x,            ob_dir(ii),xiv_d(ii),ichk_d(ii)
  14213 c     x,            ob_spd(ii),xiv_s(ii),ichk_s(ii)
  14214 c     x,            c_qc(ii)
  14215 c              enddo
  14216 c
  14217             endif  
  14218 c
  14219           endif
  14220         endif
  14221       enddo
  14222 c
  14223 c Write out bad reports
  14224 c ---------------------
  14225       if(.not.l_operational) then
  14226         write(io33,*)
  14227         write(io33,*) 'Reports with temperatures in whole degrees'
  14228         write(io33,*) '------------------------------------------'
  14229         write(io33,3001)
  14230  3001   format(' index  type    tail num   flight     time       lat'
  14231      x,      '        lon       pres  height '
  14232      x,      't-prcn   temp     innov  ichk'
  14233      x,      ' spec hum    innov  ichk'
  14234      x,      '   ob_dir    innov  ichk'
  14235      x,      '   ob_spd    innov  ichk'
  14236      x,      '   qc flag')
  14237       endif
  14238 c
  14239       do iob = 1,numreps
  14240         ii   = indx(iob)
  14241 c
  14242         if(c_qc(ii)(6:6).eq.'R'.or.
  14243      $     c_qc(ii)(6:6).eq.'b') then
  14244 c
  14245           if(.not.l_operational) then
  14246             write(io33,3002) ii,c_insty_ob(itype(ii))
  14247      x,        c_acftreg(ii),c_acftid(ii)
  14248      x,        idt(ii),alat(ii),alon(ii)
  14249      x,        pres(ii),ht_ft(ii)
  14250      x,        t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
  14251      x,        ob_q(ii),xiv_q(ii),ichk_q(ii)
  14252      x,        ob_dir(ii),xiv_d(ii),ichk_d(ii)
  14253      x,        ob_spd(ii),xiv_s(ii),ichk_s(ii)
  14254      x,        c_qc(ii)
  14255  3002       format(i6,1x,a8,1x,a8,1x,a9,1x,i7,1x,2f11.5,1x,f8.1,1x,f7.0
  14256      x,          1x,f5.2,4(2(1x,f8.2),1x,i5),1x,'!',a11,'!')
  14257           endif

Page 309         Source Listing                  STK_VAL_QC
2017-04-18 11:07                                 acftobs_qc.f

  14258 c
  14259 c         Count number of recomputed or marked reports
  14260 c         --------------------------------------------
  14261           if(itype(ii).eq.i_mdcrs.or.
  14262      $       itype(ii).eq.i_mdcrs_lvl.or.
  14263      $       itype(ii).eq.i_mdcrs_asc.or.
  14264      $       itype(ii).eq.i_mdcrs_des) then
  14265             nstk_whol(1) = nstk_whol(1) + 1
  14266 c
  14267           elseif(itype(ii).eq.i_acars.or.
  14268      $           itype(ii).eq.i_acars_lvl.or.
  14269      $           itype(ii).eq.i_acars_asc.or.
  14270      $           itype(ii).eq.i_acars_des) then
  14271             nstk_whol(2) = nstk_whol(2) + 1
  14272 c
  14273           elseif(itype(ii).eq.i_amdar.or. 
  14274      $           itype(ii).eq.i_amdar_lvl.or.
  14275      $           itype(ii).eq.i_amdar_asc.or.
  14276      $           itype(ii).eq.i_amdar_des) then
  14277             nstk_whol(3) = nstk_whol(3) + 1
  14278 c
  14279           elseif(itype(ii).eq.i_airep.or.
  14280      $           itype(ii).eq.i_airep_lvl.or.
  14281      $           itype(ii).eq.i_airep_asc.or.
  14282      $           itype(ii).eq.i_airep_des) then
  14283             nstk_whol(4) = nstk_whol(4) + 1
  14284 c
  14285           elseif(itype(ii).eq.i_man_airep.or.
  14286      $           itype(ii).eq.i_man_Yairep) then
  14287             nstk_whol(5) = nstk_whol(5) + 1
  14288           endif
  14289 c
  14290         endif
  14291       enddo
  14292 c
  14293       if(.not.l_operational) then
  14294         write(io33,*)
  14295         write(io33,*) '  Number of MDCRS    in whole deg =',nstk_whol(1)
  14296 ccccdak        write(io33,*) '  Number of ACARS    in whole deg =',nstk_whol(2)
  14297         write(io33,*) '  Number of TAMDAR   in whole deg =',nstk_whol(2)
  14298         write(io33,*) '  Number of AMDAR    in whole deg =',nstk_whol(3)
  14299         write(io33,*) '  Number of AIREP    in whole deg =',nstk_whol(4)
  14300         write(io33,*) '  Number of manAIREP in whole deg =',nstk_whol(5)
  14301 c
  14302         write(io33,*)
  14303         write(io33,*) 'Reports with stuck values (K)'
  14304         write(io33,*) '-----------------------------'
  14305         write(io33,3001)
  14306       endif
  14307 c
  14308       kbad = 0
  14309 c
  14310       do iob = 1,numreps
  14311         ii   = indx(iob)
  14312 c
  14313         if(itype(ii).eq.i_mdcrs.or.
  14314      $     itype(ii).eq.i_mdcrs_lvl.or.

Page 310         Source Listing                  STK_VAL_QC
2017-04-18 11:07                                 acftobs_qc.f

  14315      $     itype(ii).eq.i_mdcrs_asc.or.
  14316      $     itype(ii).eq.i_mdcrs_des) then
  14317           ktype = 1
  14318 c
  14319         elseif(itype(ii).eq.i_acars.or.
  14320      $         itype(ii).eq.i_acars_lvl.or.
  14321      $         itype(ii).eq.i_acars_asc.or.
  14322      $         itype(ii).eq.i_acars_des) then
  14323           ktype = 2
  14324 c
  14325         elseif(itype(ii).eq.i_amdar.or. 
  14326      $         itype(ii).eq.i_amdar_lvl.or.
  14327      $         itype(ii).eq.i_amdar_asc.or.
  14328      $         itype(ii).eq.i_amdar_des) then
  14329           ktype = 3
  14330 c
  14331         elseif(itype(ii).eq.i_airep.or.
  14332      $         itype(ii).eq.i_airep_lvl.or.
  14333      $         itype(ii).eq.i_airep_asc.or.
  14334      $         itype(ii).eq.i_airep_des) then
  14335           ktype = 4
  14336 c
  14337         elseif(itype(ii).eq.i_man_airep.or.
  14338      $         itype(ii).eq.i_man_Yairep) then
  14339           ktype = 5
  14340         endif
  14341 c
  14342         if(ktype.eq.1) then
  14343           nrep_Md = nrep_Md + 1
  14344         elseif(ktype.eq.2) then
  14345           nrep_Ac = nrep_Ac + 1
  14346         elseif(ktype.eq.3) then
  14347           nrep_Am = nrep_Am + 1
  14348         elseif(ktype.eq.4) then
  14349           nrep_Ar = nrep_Ar + 1
  14350         elseif(ktype.eq.5) then
  14351           nrep_Ma = nrep_Ma + 1
  14352         endif
  14353 c
  14354         if(c_qc(ii)(2:2).eq.'K'.or.
  14355      $     c_qc(ii)(3:3).eq.'K'.or.
  14356      $     c_qc(ii)(4:4).eq.'K'.or.
  14357      $     c_qc(ii)(5:5).eq.'K'.or.
  14358      $     c_qc(ii)(6:6).eq.'K'.or.
  14359      $     c_qc(ii)(7:7).eq.'K'.or.
  14360      $     c_qc(ii)(8:8).eq.'K'.or.
  14361      $     c_qc(ii)(9:9).eq.'K') then
  14362 c
  14363           if(.not.l_operational) then
  14364             write(io33,3002) ii,c_insty_ob(itype(ii))
  14365      x,          c_acftreg(ii),c_acftid(ii)
  14366      x,          idt(ii),alat(ii),alon(ii)
  14367      x,          pres(ii),ht_ft(ii)
  14368      x,          t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
  14369      x,          ob_q(ii),xiv_q(ii),ichk_q(ii)
  14370      x,          ob_dir(ii),xiv_d(ii),ichk_d(ii)
  14371      x,          ob_spd(ii),xiv_s(ii),ichk_s(ii)

Page 311         Source Listing                  STK_VAL_QC
2017-04-18 11:07                                 acftobs_qc.f

  14372      x,          c_qc(ii)
  14373           endif
  14374 c
  14375 c         Count number of rejects
  14376 c         -----------------------
  14377           if(c_qc(ii)(2:4).eq.'KKK') then
  14378             nstk_both(ktype) = nstk_both(ktype) + 1
  14379           elseif(c_qc(ii)(2:2).eq.'K') then
  14380             nstk_time(ktype) = nstk_time(ktype) + 1
  14381           elseif(c_qc(ii)(3:4).eq.'KK') then
  14382             nstk_posn(ktype) = nstk_posn(ktype) + 1
  14383           elseif(c_qc(ii)(3:3).eq.'K') then
  14384             nstk_alat(ktype) = nstk_alat(ktype) + 1
  14385           elseif(c_qc(ii)(4:4).eq.'K') then
  14386             nstk_alon(ktype) = nstk_alon(ktype) + 1
  14387           elseif(c_qc(ii)(5:5).eq.'K') then
  14388             nstk_pres(ktype) = nstk_pres(ktype) + 1
  14389           elseif(c_qc(ii)(6:6).eq.'K'.and.
  14390      $           (c_qc(ii)(7:7).eq.'K'.or.
  14391      $            c_qc(ii)(8:8).eq.'K')) then
  14392             nstk_val(ktype) = nstk_val(ktype) + 1
  14393           else
  14394             if(c_qc(ii)(6:6).eq.'K') then
  14395               nstk_temp(ktype) = nstk_temp(ktype) + 1
  14396             endif
  14397             if(c_qc(ii)(7:7).eq.'K') then
  14398               nstk_wdir(ktype) = nstk_wdir(ktype) + 1
  14399             endif
  14400             if(c_qc(ii)(8:8).eq.'K') then
  14401               nstk_wspd(ktype) = nstk_wspd(ktype) + 1
  14402             endif
  14403             if(c_qc(ii)(9:9).eq.'K') then
  14404               nstk_moist(ktype) = nstk_moist(ktype) + 1
  14405             endif
  14406           endif
  14407 c
  14408 c         Count number of rejected temps/winds by tail number
  14409 c         ---------------------------------------------------
  14410           mm = 1
  14411           do while(mm.le.kreg)
  14412             if(c_acftreg(ii).eq.creg_reg(mm)) then 
  14413 c
  14414               if(ktype.gt.0.and.ktype.le.5) then
  14415                 if(c_qc(ii)(6:6).eq.'K'.and.
  14416      $             c_qc(ii)(2:2).ne.'K'.and.
  14417      $             c_qc(ii)(3:3).ne.'K'.and.
  14418      $             c_qc(ii)(4:4).ne.'K'.and.
  14419      $             c_qc(ii)(5:5).ne.'K')
  14420      $            ntemp_reg(mm,ktype) = ntemp_reg(mm,ktype) + 1
  14421                 if((c_qc(ii)(7:7).eq.'K'.or.
  14422      $             c_qc(ii)(8:8).eq.'K').and.
  14423      $             c_qc(ii)(2:2).ne.'K'.and.
  14424      $             c_qc(ii)(3:3).ne.'K'.and.
  14425      $             c_qc(ii)(4:4).ne.'K'.and.
  14426      $             c_qc(ii)(5:5).ne.'K')
  14427      $            nwind_reg(mm,ktype) = nwind_reg(mm,ktype) + 1
  14428               endif

Page 312         Source Listing                  STK_VAL_QC
2017-04-18 11:07                                 acftobs_qc.f

  14429               mm = kreg + 1
  14430             endif
  14431             mm = mm + 1
  14432           enddo
  14433         endif
  14434 c
  14435 c       Reject reports with stuck time, lat, lon, pres
  14436 c       Also reject report if both temperature and winds are stuck
  14437 c       ----------------------------------------------------------
  14438         if(c_qc(ii)(2:2).eq.'K'.or.
  14439      $     c_qc(ii)(3:3).eq.'K'.or.
  14440      $     c_qc(ii)(4:4).eq.'K'.or.
  14441      $     c_qc(ii)(5:5).eq.'K'.or.
  14442      $     (c_qc(ii)(6:6).eq.'K'.and.
  14443      $      (c_qc(ii)(7:7).eq.'K'.or.
  14444      $       c_qc(ii)(8:8).eq.'K'))) then
  14445 c
  14446           csort(ii)(1:5) = 'badob'
  14447 c
  14448           kbad(ktype) = kbad(ktype) + 1
  14449 c
  14450           if(ktype.eq.1) then
  14451             nstk_Md = nstk_Md + 1
  14452           elseif(ktype.eq.2) then
  14453             nstk_Ac = nstk_Ac + 1
  14454           elseif(ktype.eq.3) then
  14455             nstk_Am = nstk_Am + 1
  14456           elseif(ktype.eq.4) then
  14457             nstk_Ar = nstk_Ar + 1
  14458           elseif(ktype.eq.5) then
  14459             nstk_Ma = nstk_Ma + 1
  14460           endif
  14461 c
  14462 c       Count reports with stuck temperature, wind direction, and wind speed
  14463 c       --------------------------------------------------------------------
  14464         else
  14465           if(c_qc(ii)(6:6).eq.'K') then
  14466             kbadt(ktype) = kbadt(ktype) + 1
  14467           endif
  14468           if(c_qc(ii)(7:7).eq.'K'.or.
  14469      $       c_qc(ii)(8:8).eq.'K') then
  14470             kbadw(ktype) = kbadw(ktype) + 1
  14471           endif
  14472         endif
  14473 c
  14474       enddo
  14475 c
  14476       if(.not.l_operational) then
  14477         write(io33,*)
  14478         write(io33,*)'  Number of stuck MDCRS    reps rejected=',kbad(1)
  14479 ccccdak        write(io33,*)'  Number of stuck ACARS    reps rejected=',kbad(2)
  14480         write(io33,*)'  Number of stuck TAMDAR   reps rejected=',kbad(2)
  14481         write(io33,*)'  Number of stuck AMDAR    reps rejected=',kbad(3)
  14482         write(io33,*)'  Number of stuck AIREP    reps rejected=',kbad(4)
  14483         write(io33,*)'  Number of stuck manAIREP reps rejected=',kbad(5)
  14484         write(io33,*)'  Number of stuck MDCRS    temps marked=',kbadt(1)
  14485 ccccdak        write(io33,*)'  Number of stuck ACARS    temps marked=',kbadt(2)

Page 313         Source Listing                  STK_VAL_QC
2017-04-18 11:07                                 acftobs_qc.f

  14486         write(io33,*)'  Number of stuck TAMDAR   temps marked=',kbadt(2)
  14487         write(io33,*)'  Number of stuck AMDAR    temps marked=',kbadt(3)
  14488         write(io33,*)'  Number of stuck AIREP    temps marked=',kbadt(4)
  14489         write(io33,*)'  Number of stuck manAIREP temps marked=',kbadt(5)
  14490         write(io33,*)'  Number of stuck MDCRS    winds marked=',kbadw(1)
  14491 ccccdak        write(io33,*)'  Number of stuck ACARS    winds marked=',kbadw(2)
  14492         write(io33,*)'  Number of stuck TAMDAR   winds marked=',kbadw(2)
  14493         write(io33,*)'  Number of stuck AMDAR    winds marked=',kbadw(3)
  14494         write(io33,*)'  Number of stuck AIREP    winds marked=',kbadw(4)
  14495         write(io33,*)'  Number of stuck manAIREP winds marked=',kbadw(5)
  14496       endif       
  14497 c
  14498       write(io8,*)
  14499       write(io8,*) '  Reports with stuck values'
  14500       write(io8,*) '  -------------------------'
  14501       write(io8,*)'  Number of stuck MDCRS    reps rejected = ',kbad(1)
  14502 ccccdak      write(io8,*)'  Number of stuck ACARS    reps rejected = ',kbad(2)
  14503       write(io8,*)'  Number of stuck TAMDAR   reps rejected = ',kbad(2)
  14504       write(io8,*)'  Number of stuck AMDAR    reps rejected = ',kbad(3)
  14505       write(io8,*)'  Number of stuck AIREP    reps rejected = ',kbad(4)
  14506       write(io8,*)'  Number of stuck manAIREP reps rejected = ',kbad(5)
  14507       write(io8,*)'  Number of stuck MDCRS    temps marked = ',kbadt(1)
  14508 ccccdak      write(io8,*)'  Number of stuck ACARS    temps marked = ',kbadt(2)
  14509       write(io8,*)'  Number of stuck TAMDAR   temps marked = ',kbadt(2)
  14510       write(io8,*)'  Number of stuck AMDAR    temps marked = ',kbadt(3)
  14511       write(io8,*)'  Number of stuck AIREP    temps marked = ',kbadt(4)
  14512       write(io8,*)'  Number of stuck manAIREP temps marked = ',kbadt(5)
  14513       write(io8,*)'  Number of stuck MDCRS    winds marked = ',kbadw(1)
  14514 ccccdak      write(io8,*)'  Number of stuck ACARS    winds marked = ',kbadw(2)
  14515       write(io8,*)'  Number of stuck TAMDAR   winds marked = ',kbadw(2)
  14516       write(io8,*)'  Number of stuck AMDAR    winds marked = ',kbadw(3)
  14517       write(io8,*)'  Number of stuck AIREP    winds marked = ',kbadw(4)
  14518       write(io8,*)'  Number of stuck manAIREP winds marked = ',kbadw(5)
  14519 c
  14520 c     Output reports with good moisture
  14521 c     ---------------------------------
  14522       if(.not.l_operational) then
  14523         write(io33,*)
  14524         write(io33,*) 'Reports with valid moisture'
  14525         write(io33,*) '---------------------------'
  14526         write(io33,3001)
  14527       endif
  14528 c
  14529       do iob = 1,numreps
  14530         ii   = indx(iob)
  14531 c
  14532 
  14533 cc smb 8/18/05 - ichk arrays were declared as reals, should have been integer
  14534 cc fixed 8/19/05.
  14535 cc	if(l_ncep.and.ob_q(ii).eq.amiss) then
  14536 cc	  ichk_q(ii) = -9
  14537 cc	endif
  14538 
  14539         if(ob_q(ii).eq.amiss.and.
  14540      $     (ichk_q(ii).eq.-9.or.
  14541      $      ichk_q(ii).eq.9)) then
  14542 c

Page 314         Source Listing                  STK_VAL_QC
2017-04-18 11:07                                 acftobs_qc.f

  14543 c         missing moisture and QC flag signals missing data
  14544 c
  14545         elseif((ifix(ob_q(ii)*100).eq.0.or.ob_q(ii).eq.amiss).and.
  14546      $    ichk_q(ii).eq.-7.and.
  14547      $    (c_acftreg(ii)(4:5).eq.'WU'.or.
  14548      $     c_acftreg(ii)(4:5).eq.'GU')) then
  14549 c
  14550 c         moisture qc flag = -7 means invalid input parameter
  14551 c
  14552         elseif(.not.l_operational) then
  14553           write(io33,3002) ii,c_insty_ob(itype(ii))
  14554      x,        c_acftreg(ii),c_acftid(ii)
  14555      x,        idt(ii),alat(ii),alon(ii)
  14556      x,        pres(ii),ht_ft(ii)
  14557      x,        t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
  14558      x,        ob_q(ii),xiv_q(ii),ichk_q(ii)
  14559      x,        ob_dir(ii),xiv_d(ii),ichk_d(ii)
  14560      x,        ob_spd(ii),xiv_s(ii),ichk_s(ii)
  14561      x,        c_qc(ii)
  14562         endif
  14563       enddo
  14564 c
  14565 c     Output tail number counts
  14566 c     -------------------------
  14567       write(io8,*) 
  14568       write(io8,*) '  Tail numbers for reports with temp in whole deg'
  14569 ccccdak      write(io8,*) '  Tail Num  MDCRS  ACARS  AMDAR  AIREP  MAN  '
  14570       write(io8,*) '  Tail Num  MDCRS  TAMDAR AMDAR  AIREP  MAN  '
  14571       write(io8,*) '  -------------------------------------------'
  14572 c
  14573       do mm=1,kreg
  14574         if( nwhol_reg(mm,1)+nwhol_reg(mm,2)+nwhol_reg(mm,3)
  14575      $     +nwhol_reg(mm,4)+nwhol_reg(mm,5).gt.0) then
  14576           write(io8,'(2x,a8,5(1x,i6))') 
  14577      $      creg_reg(mm),(nwhol_reg(mm,kk),kk=1,5)
  14578         endif
  14579       enddo
  14580 c
  14581       write(io8,*) 
  14582       write(io8,*) '  Tail numbers for reports with stuck temperature'
  14583 ccccdak      write(io8,*) '  Tail Num  MDCRS  ACARS  AMDAR  AIREP  MAN  '
  14584       write(io8,*) '  Tail Num  MDCRS  TAMDAR AMDAR  AIREP  MAN  '
  14585       write(io8,*) '  -------------------------------------------'
  14586 c
  14587       do mm=1,kreg
  14588         if( ntemp_reg(mm,1)+ntemp_reg(mm,2)+ntemp_reg(mm,3)
  14589      $     +ntemp_reg(mm,4)+ntemp_reg(mm,5).gt.0) then
  14590           write(io8,'(2x,a8,5(1x,i6))') 
  14591      $      creg_reg(mm),(ntemp_reg(mm,kk),kk=1,5)
  14592         endif
  14593       enddo
  14594 c
  14595       write(io8,*) 
  14596       write(io8,*) '  Tail numbers for reports with stuck winds'
  14597 ccccdak      write(io8,*) '  Tail Num  MDCRS  ACARS  AMDAR  AIREP  MAN  '
  14598       write(io8,*) '  Tail Num  MDCRS  TAMDAR AMDAR  AIREP  MAN  '
  14599       write(io8,*) '  -------------------------------------------'

Page 315         Source Listing                  STK_VAL_QC
2017-04-18 11:07                                 acftobs_qc.f

  14600 c
  14601       do mm=1,kreg
  14602         if( nwind_reg(mm,1)+nwind_reg(mm,2)+nwind_reg(mm,3)
  14603      $     +nwind_reg(mm,4)+nwind_reg(mm,5).gt.0) then
  14604           write(io8,'(2x,a8,5(1x,i6))') 
  14605      $      creg_reg(mm),(nwind_reg(mm,kk),kk=1,5)
  14606         endif
  14607       enddo
  14608 c
  14609       write(*,*)
  14610       write(*,*) 'Stuck value check data counts--',cdtg_an
  14611       write(*,*) '-----------------------------------------'
  14612       write(*,'(1x,a55)')
  14613 ccccdak     $ 'Type of check     MDCRS   ACARS   AMDAR   AIREP     man'
  14614      $ 'Type of check     MDCRS  TAMDAR   AMDAR   AIREP     man'
  14615       write(*,'(1x,a55)')
  14616      $ '--------------- ------- ------- ------- ------- -------'
  14617       write(*,'('' Num considered '',5(1x,i7))')
  14618      $     nrep_Md,nrep_Ac,nrep_Am,nrep_Ar,nrep_Ma
  14619       write(*,'('' Total invalid  '',5(1x,i7))')
  14620      $     nstk_Md,nstk_Ac,nstk_Am,nstk_Ar,nstk_Ma
  14621       write(*,'(1x,a55)')
  14622      $ '--------------- ------- ------- ------- ------- -------'
  14623       write(*,'('' Temps in wh deg'',5(1x,i7))')
  14624      $            (nstk_whol(ii),ii=1,5)
  14625       write(*,'(1x,a55)')
  14626      $ '--------------- ------- ------- ------- ------- -------'
  14627 c
  14628       write(io8,*)
  14629       write(io8,*) 'Stuck value check data counts'
  14630       write(io8,*) '-----------------------------'
  14631       write(io8,'(1x,a55)')
  14632 ccccdak     $ 'Type of check     MDCRS   ACARS   AMDAR   AIREP     man'
  14633      $ 'Type of check     MDCRS  TAMDAR   AMDAR   AIREP     man'
  14634       write(io8,'(1x,a55)')
  14635      $ '--------------- ------- ------- ------- ------- -------'
  14636       write(io8,'(''Num considered '',5(1x,i7))')
  14637      $            nrep_Md,nrep_Ac,nrep_Am,nrep_Ar,nrep_Ma
  14638       write(io8,'(''Total rejected '',5(1x,i7))')
  14639      $            nstk_Md,nstk_Ac,nstk_Am,nstk_Ar,nstk_Ma
  14640       write(io8,'(1x,a55)')
  14641      $ '--------------- ------- ------- ------- ------- -------'
  14642       write(io8,'(''Temps in wh deg'',5(1x,i7))')
  14643      $            (nstk_whol(ii),ii=1,5)
  14644       write(io8,'(1x,a55)')
  14645      $ '--------------- ------- ------- ------- ------- -------'
  14646 c
  14647       write(io8,'(''Stuck time     '',5(1x,i7))')
  14648      $          (nstk_time(ii),ii=1,5)
  14649       write(io8,'(''Stuck position '',5(1x,i7))')
  14650      $          (nstk_posn(ii),ii=1,5)
  14651       write(io8,'(''Stuck time&posn'',5(1x,i7))')
  14652      $          (nstk_both(ii),ii=1,5)
  14653       write(io8,'(''Stuck latitude '',5(1x,i7))')
  14654      $          (nstk_alat(ii),ii=1,5)
  14655       write(io8,'(''Stuck longitude'',5(1x,i7))')
  14656      $          (nstk_alon(ii),ii=1,5)

Page 316         Source Listing                  STK_VAL_QC
2017-04-18 11:07                                 acftobs_qc.f

  14657       write(io8,'(''Stuck pressure '',5(1x,i7))')
  14658      $          (nstk_pres(ii),ii=1,5)
  14659       write(io8,'(''Stuck values   '',5(1x,i7))')
  14660      $          (nstk_val(ii),ii=1,5)
  14661       write(io8,'(''Stuck temp     '',5(1x,i7))')
  14662      $          (nstk_temp(ii),ii=1,5)
  14663       write(io8,'(''Stuck direction'',5(1x,i7))')
  14664      $          (nstk_wdir(ii),ii=1,5)
  14665       write(io8,'(''Stuck speed    '',5(1x,i7))')
  14666      $          (nstk_wspd(ii),ii=1,5)
  14667       write(io8,'(''Stuck moisture '',5(1x,i7))')
  14668      $          (nstk_moist(ii),ii=1,5)
  14669       write(io8,'(1x,a55)')
  14670      $ '--------------- ------- ------- ------- ------- -------'
  14671 c
  14672       kbadtot = kbad(1) + kbad(2) + kbad(3)
  14673      $        + kbad(4) + kbad(5) 
  14674 c
  14675       write(io8,*)
  14676       write(io8,*) numreps,' good reports processed'
  14677       write(io8,*) kbadtot,' reports failed qc in stuck value check'
  14678 c
  14679       return
  14680       end


ENTRY POINTS

  Name                   
                         
 stk_val_qc_             

Page 317         Source Listing                  STK_VAL_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 3001                       Label  14230                                                          14229,14305,14526                 
 3002                       Label  14255                                                          12703,12780,12873,13005,14246,1436
                                                                                                  4,14553                           
 ABS                        Func   12833                                scalar                    12833,12836,12847,12848,12849,1285
                                                                                                  0,12947,12948,12951,12952,12979,12
                                                                                                  980,12981,12982,13050,13140,13141,
                                                                                                  13142,13145,13224,13314,13315,1331
                                                                                                  6,13320,13392,13434,13435,13549,13
                                                                                                  624,13679,13858,13906,13909,13986,
                                                                                                  14036,14040,14043,14121,14174,1417
                                                                                                  6                                 
 ALAT                       Dummy  12327    R(8)            8     1     0        ARG,INOUT        12705,12782,12833,12834,12835,1287
                                                                                                  5,12909,12913,12914,12915,12916,12
                                                                                                  929,12930,12931,12932,12945,12951,
                                                                                                  13007,13050,13051,13052,13107,1311
                                                                                                  0,13111,13112,13113,13124,13125,13
                                                                                                  126,13127,13139,13141,13145,14248,
                                                                                                  14366,14555                       
 ALAT_MAX                   Local  12485    R(8)            8           scalar                    12809,12847,12897,12915,12916,1293
                                                                                                  1,12932,12947,12979,13028,13097,13
                                                                                                  112,13113,13126,13127,13140       
 ALAT_MIN                   Local  12484    R(8)            8           scalar                    12808,12847,12896,12913,12914,1292
                                                                                                  9,12930,12947,12979,13027,13096,13
                                                                                                  110,13111,13124,13125,13140       
 ALON                       Dummy  12327    R(8)            8     1     0        ARG,INOUT        12705,12782,12836,12837,12838,1287
                                                                                                  5,12910,12917,12918,12919,12920,12
                                                                                                  933,12934,12935,12936,12946,12952,
                                                                                                  13007,13224,13225,13226,13280,1328
                                                                                                  4,13285,13286,13287,13298,13299,13
                                                                                                  300,13301,13313,13315,13320,14248,
                                                                                                  14366,14555                       
 ALON_MAX                   Local  12487    R(8)            8           scalar                    12811,12848,12899,12919,12920,1293
                                                                                                  5,12936,12948,12980,13202,13271,13
                                                                                                  286,13287,13300,13301,13314       
 ALON_MIN                   Local  12486    R(8)            8           scalar                    12810,12848,12898,12917,12918,1293
                                                                                                  3,12934,12948,12980,13201,13270,13
                                                                                                  284,13285,13298,13299,13314       
 AMISS                      Dummy  12325    R(4)            4           scalar   ARG,INOUT        12834,12835,12837,12838,12845,1284
                                                                                                  6,12914,12916,12918,12920,12930,12
                                                                                                  932,12934,12936,12945,12946,12977,
                                                                                                  12978,13051,13052,13111,13113,1312
                                                                                                  5,13127,13139,13225,13226,13285,13
                                                                                                  287,13299,13301,13313,13393,13394,
                                                                                                  13413,13415,13421,13423,13432,1350
                                                                                                  7,13508,13527,13529,13535,13537,13
                                                                                                  546,13625,13626,13646,13650,13652,
                                                                                                  13658,13662,13664,13675,13859,1386
                                                                                                  0,13881,13883,13893,13895,13905,13
                                                                                                  987,13988,14009,14011,14021,14023,
                                                                                                  14033,14122,14123,14149,14151,1416
                                                                                                  1,14163,14173,14539,14545         

Page 318         Source Listing                  STK_VAL_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CDTG_AN                    Dummy  12325    CHAR            10          scalar   ARG,INOUT        14610                             
 CREG_REG                   Dummy  12331    CHAR            8     1     0        ARG,INOUT        13732,13756,13789,14412,14577,1459
                                                                                                  1,14605                           
 CSORT                      Dummy  12325    CHAR            25    1     0        ARG,INOUT        14446                             
 C_ACFTID                   Dummy  12326    CHAR            9     1     0        ARG,INOUT        12704,12781,12874,13006,14247,1436
                                                                                                  5,14554                           
 C_ACFTREG                  Dummy  12326    CHAR            8     1     0        ARG,INOUT        12704,12781,12874,13006,13732,1375
                                                                                                  6,13789,14247,14365,14412,14547,14
                                                                                                  548,14554                         
 C_INSTY_OB                 Func   12379    CHAR            16          scalar                    12703,12780,12873,13005,14246,1436
                                                                                                  4,14553                           
 C_QC                       Dummy  12326    CHAR            11    1     0        ARG,INOUT        12696,12711,12752,12773,12788,1286
                                                                                                  6,12881,12968,12998,13013,13104,13
                                                                                                  152,13278,13327,13441,13555,13617,
                                                                                                  13618,13619,13620,13685,13686,1368
                                                                                                  7,13688,13747,13751,13852,13853,13
                                                                                                  854,13917,13979,13980,13981,13982,
                                                                                                  14051,14184,14242,14243,14254,1435
                                                                                                  4,14355,14356,14357,14358,14359,14
                                                                                                  360,14361,14372,14377,14379,14381,
                                                                                                  14383,14385,14387,14389,14390,1439
                                                                                                  1,14394,14397,14400,14403,14415,14
                                                                                                  416,14417,14418,14419,14421,14422,
                                                                                                  14423,14424,14425,14426,14438,1443
                                                                                                  9,14440,14441,14442,14443,14444,14
                                                                                                  465,14468,14469,14561             
 HT_FT                      Dummy  12327    R(4)            4     1     0        ARG,INOUT        12604,12605,12614,12615,12706,1273
                                                                                                  0,12731,12732,12733,12736,12737,12
                                                                                                  783,12876,12921,12922,12923,12924,
                                                                                                  12937,12938,13008,13115,13116,1311
                                                                                                  7,13118,13129,13130,13289,13290,13
                                                                                                  291,13292,13303,13304,13505,13506,
                                                                                                  13507,13508,13526,13527,13528,1352
                                                                                                  9,13534,13535,13536,13537,13545,13
                                                                                                  546,14249,14367,14556             
 HT_MAX                     Local  12490    R(4)            4           scalar                    12605,12615,12747,12748,12954,1295
                                                                                                  9,12964,13147,13148,13322,13323,13
                                                                                                  677,13678,13729,13912,13913,14046,
                                                                                                  14047,14179,14180                 
 HT_MAX_STUCK               Local  12492    R(4)            4           scalar                    12662,12691,12692,12721,12732,1273
                                                                                                  3,12737,12768,12769,12814,12852,12
                                                                                                  857,12862,12902,12923,12924,12938,
                                                                                                  12984,12989,12994,13031,13100,1311
                                                                                                  7,13118,13130,13205,13274,13291,13
                                                                                                  292,13304,13603,13638,13838,13871,
                                                                                                  13965,13999,14106,14139           
 HT_MIN                     Local  12491    R(4)            4           scalar                    12604,12614,12747,12748,12954,1295
                                                                                                  9,12964,13147,13148,13322,13323,13
                                                                                                  677,13912,13913,14046,14047,14179,
                                                                                                  14180                             
 HT_MIN_STUCK               Local  12493    R(4)            4           scalar                    12661,12691,12692,12720,12730,1273
                                                                                                  1,12736,12768,12769,12813,12852,12
                                                                                                  857,12862,12901,12921,12922,12937,
                                                                                                  12984,12989,12994,13030,13099,1311
                                                                                                  5,13116,13129,13204,13273,13289,13

Page 319         Source Listing                  STK_VAL_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  290,13303,13602,13637,13837,13870,
                                                                                                  13964,13998,14105,14138           
 ICHK_D                     Dummy  12329    I(4)            4     1     0        ARG,INOUT        12709,12786,12879,13011,14252,1437
                                                                                                  0,14559                           
 ICHK_Q                     Dummy  12329    I(4)            4     1     0        ARG,INOUT        12708,12785,12878,13010,14124,1412
                                                                                                  5,14126,14127,14251,14369,14540,14
                                                                                                  541,14546,14558                   
 ICHK_S                     Dummy  12329    I(4)            4     1     0        ARG,INOUT        12710,12787,12880,13012,14253,1437
                                                                                                  1,14560                           
 ICHK_T                     Dummy  12329    I(4)            4     1     0        ARG,INOUT        12707,12784,12828,12877,13009,1304
                                                                                                  5,13219,14250,14368,14557         
 IDT                        Dummy  12329    I(4)            4     1     0        ARG,INOUT        12676,12705,12727,12746,12782,1287
                                                                                                  5,13007,13142,13316,13435,13549,14
                                                                                                  248,14366,14555                   
 IEND                       Local  12392    I(4)            4           scalar                    12578,12579,12612,12664,12701,1275
                                                                                                  0,12778,12816,12871,12966,13003,13
                                                                                                  033,13150,13207,13325,13380,13439,
                                                                                                  13493,13553,13605,13683,13735,1384
                                                                                                  0,13915,13967,14049,14108,14182   
 IFIX                       Func   13505                                scalar                    13505,13506,13548,14545           
 II                         Local  12468    I(4)            4           scalar                    12613,12614,12615,12616,12617,1261
                                                                                                  9,12620,12621,12622,12623,12624,12
                                                                                                  625,12626,12630,12631,12632,12633,
                                                                                                  12637,12638,12639,12640,12644,1264
                                                                                                  5,12665,12670,12671,12676,12683,12
                                                                                                  684,12685,12686,12687,12688,12689,
                                                                                                  12690,12695,12696,12702,12703,1270
                                                                                                  4,12705,12706,12707,12708,12709,12
                                                                                                  710,12711,12727,12736,12737,12751,
                                                                                                  12752,12760,12761,12762,12763,1276
                                                                                                  4,12765,12766,12767,12772,12773,12
                                                                                                  779,12780,12781,12782,12783,12784,
                                                                                                  12785,12786,12787,12788,12817,1282
                                                                                                  2,12823,12828,12833,12835,12836,12
                                                                                                  838,12853,12854,12855,12856,12858,
                                                                                                  12859,12860,12861,12865,12866,1287
                                                                                                  2,12873,12874,12875,12876,12877,12
                                                                                                  878,12879,12880,12881,12909,12910,
                                                                                                  12928,12929,12930,12931,12932,1293
                                                                                                  3,12934,12935,12936,12937,12938,12
                                                                                                  955,12956,12957,12958,12960,12961,
                                                                                                  12962,12963,12967,12968,12985,1298
                                                                                                  6,12987,12988,12990,12991,12992,12
                                                                                                  993,12997,12998,13004,13005,13006,
                                                                                                  13007,13008,13009,13010,13011,1301
                                                                                                  2,13013,13034,13039,13040,13045,13
                                                                                                  050,13052,13104,13107,13122,13124,
                                                                                                  13125,13126,13127,13129,13130,1315
                                                                                                  1,13152,13208,13213,13214,13219,13
                                                                                                  224,13226,13278,13280,13296,13298,
                                                                                                  13299,13300,13301,13303,13304,1332
                                                                                                  6,13327,13381,13386,13387,13392,13
                                                                                                  394,13420,13421,13422,13423,13440,
                                                                                                  13441,13494,13499,13500,13506,1350
                                                                                                  8,13534,13535,13536,13537,13554,13

Page 320         Source Listing                  STK_VAL_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  555,13606,13611,13612,13617,13618,
                                                                                                  13619,13620,13624,13626,13658,1366
                                                                                                  1,13662,13663,13664,13684,13685,13
                                                                                                  686,13687,13688,13736,13737,13738,
                                                                                                  13739,13740,13741,13742,13743,1374
                                                                                                  4,13745,13747,13748,13751,13756,13
                                                                                                  758,13759,13760,13761,13764,13765,
                                                                                                  13766,13767,13770,13771,13772,1377
                                                                                                  3,13776,13777,13778,13779,13782,13
                                                                                                  783,13789,13791,13792,13793,13794,
                                                                                                  13797,13798,13799,13800,13803,1380
                                                                                                  4,13805,13806,13809,13810,13811,13
                                                                                                  812,13815,13816,13841,13846,13847,
                                                                                                  13852,13853,13854,13858,13860,1389
                                                                                                  2,13893,13894,13895,13916,13917,13
                                                                                                  968,13973,13974,13979,13980,13981,
                                                                                                  13982,13986,13988,14020,14021,1402
                                                                                                  2,14023,14050,14051,14109,14114,14
                                                                                                  115,14121,14123,14124,14125,14126,
                                                                                                  14127,14160,14161,14162,14163,1418
                                                                                                  3,14184,14240,14242,14243,14246,14
                                                                                                  247,14248,14249,14250,14251,14252,
                                                                                                  14253,14254,14261,14262,14263,1426
                                                                                                  4,14267,14268,14269,14270,14273,14
                                                                                                  274,14275,14276,14279,14280,14281,
                                                                                                  14282,14285,14286,14311,14313,1431
                                                                                                  4,14315,14316,14319,14320,14321,14
                                                                                                  322,14325,14326,14327,14328,14331,
                                                                                                  14332,14333,14334,14337,14338,1435
                                                                                                  4,14355,14356,14357,14358,14359,14
                                                                                                  360,14361,14364,14365,14366,14367,
                                                                                                  14368,14369,14370,14371,14372,1437
                                                                                                  7,14379,14381,14383,14385,14387,14
                                                                                                  389,14390,14391,14394,14397,14400,
                                                                                                  14403,14412,14415,14416,14417,1441
                                                                                                  8,14419,14421,14422,14423,14424,14
                                                                                                  425,14426,14438,14439,14440,14441,
                                                                                                  14442,14443,14444,14446,14465,1446
                                                                                                  8,14469,14530,14539,14540,14541,14
                                                                                                  545,14546,14547,14548,14553,14554,
                                                                                                  14555,14556,14557,14558,14559,1456
                                                                                                  0,14561,14624,14643,14648,14650,14
                                                                                                  652,14654,14656,14658,14660,14662,
                                                                                                  14664,14666,14668                 
 IIEND                      Local  12393    I(4)            4           scalar                    12579,13142,13316,13435,13549,1403
                                                                                                  8,14039,14040,14041               
 IIFIRST                    Local  12472    I(4)            4           scalar                    12806,12893,12927,13025,13094,1312
                                                                                                  1,13199,13268,13295,13375,13400,13
                                                                                                  488,13514,13598,13633,13833,13866,
                                                                                                  13960,13994,14101,14134           
 IILAST                     Local  12473    I(4)            4           scalar                    12807,12894,12928,13026,13095,1312
                                                                                                  2,13200,13269,13296,13376,13401,13
                                                                                                  489,13515,13599,13634,13834,13867,
                                                                                                  13961,13995,14102,14135           
 IIM1                       Local  12469    I(4)            4           scalar                    12666,12676,12730,12731,12732,1273

Page 321         Source Listing                  STK_VAL_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  3,12818,12833,12834,12836,12837,12
                                                                                                  913,12914,12915,12916,12917,12918,
                                                                                                  12919,12920,12921,12922,12923,1292
                                                                                                  4,12927,13035,13050,13051,13110,13
                                                                                                  111,13112,13113,13115,13116,13117,
                                                                                                  13118,13121,13209,13224,13225,1328
                                                                                                  4,13285,13286,13287,13289,13290,13
                                                                                                  291,13292,13295,13382,13392,13393,
                                                                                                  13412,13413,13414,13415,13495,1350
                                                                                                  5,13507,13526,13527,13528,13529,13
                                                                                                  607,13624,13625,13646,13649,13650,
                                                                                                  13651,13652,13842,13858,13859,1388
                                                                                                  0,13881,13882,13883,13969,13986,13
                                                                                                  987,14008,14009,14010,14011,14110,
                                                                                                  14121,14122,14148,14149,14150,1415
                                                                                                  1                                 
 IISTART                    Local  12391    I(4)            4           scalar                    12577,12604,12605,12606,12607,1274
                                                                                                  6,12945,12946,12951,12952,13139,13
                                                                                                  141,13142,13145,13313,13315,13316,
                                                                                                  13320,13431,13432,13435,13545,1354
                                                                                                  6,13549,13675,13732,13905,13906,13
                                                                                                  907,14033,14034,14035,14036,14037,
                                                                                                  14173,14174                       
 INDX                       Dummy  12325    I(4)            4     1     0        ARG,INOUT        12577,12579,12613,12665,12666,1269
                                                                                                  5,12702,12751,12772,12779,12817,12
                                                                                                  818,12865,12872,12967,12997,13004,
                                                                                                  13034,13035,13151,13208,13209,1332
                                                                                                  6,13381,13382,13440,13494,13495,13
                                                                                                  554,13606,13607,13684,13736,13841,
                                                                                                  13842,13916,13968,13969,14050,1410
                                                                                                  9,14110,14183,14240,14311,14530   
 INSTY_OB_FUN               Func   12381    I(4)            4           scalar                    12517,12518,12519,12520,12521,1252
                                                                                                  2,12523,12524,12525,12526,12527,12
                                                                                                  528,12529,12530,12531,12532,12533,
                                                                                                  12534                             
 IO33                       Dummy  12332    I(4)            4           scalar   ARG,INOUT        14226,14227,14228,14229,14246,1429
                                                                                                  4,14295,14297,14298,14299,14300,14
                                                                                                  302,14303,14304,14305,14364,14477,
                                                                                                  14478,14480,14481,14482,14483,1448
                                                                                                  4,14486,14487,14488,14489,14490,14
                                                                                                  492,14493,14494,14495,14523,14524,
                                                                                                  14525,14526,14553                 
 IO8                        Dummy  12332    I(4)            4           scalar   ARG,INOUT        12699,12700,12703,12776,12777,1278
                                                                                                  0,12869,12870,12873,13001,13002,13
                                                                                                  005,14498,14499,14500,14501,14503,
                                                                                                  14504,14505,14506,14507,14509,1451
                                                                                                  0,14511,14512,14513,14515,14516,14
                                                                                                  517,14518,14567,14568,14570,14571,
                                                                                                  14576,14581,14582,14584,14585,1459
                                                                                                  0,14595,14596,14598,14599,14604,14
                                                                                                  628,14629,14630,14631,14634,14636,
                                                                                                  14638,14640,14642,14644,14647,1464
                                                                                                  9,14651,14653,14655,14657,14659,14
                                                                                                  661,14663,14665,14667,14669,14675,
                                                                                                  14676,14677                       

Page 322         Source Listing                  STK_VAL_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 IOB                        Local  12467    I(4)            4           scalar                    12612,12613,12664,12665,12666,1272
                                                                                                  9,12735,12750,12751,12771,12772,12
                                                                                                  778,12779,12816,12817,12818,12912,
                                                                                                  12926,12966,12967,12996,12997,1300
                                                                                                  3,13004,13033,13034,13035,13109,13
                                                                                                  120,13150,13151,13207,13208,13209,
                                                                                                  13282,13294,13325,13326,13380,1338
                                                                                                  1,13382,13411,13439,13440,13493,13
                                                                                                  494,13495,13525,13553,13554,13605,
                                                                                                  13606,13607,13647,13648,13658,1368
                                                                                                  3,13684,13735,13736,13840,13841,13
                                                                                                  842,13879,13915,13916,13967,13968,
                                                                                                  13969,14007,14049,14050,14108,1410
                                                                                                  9,14110,14147,14182,14183,14239,14
                                                                                                  240,14310,14311,14529,14530       
 IOBFIRST                   Local  12470    I(4)            4           scalar                    12659,12694,12718,12728,12729,1277
                                                                                                  1,12804,12864,12891,12911,12912,12
                                                                                                  996,13023,13092,13108,13109,13197,
                                                                                                  13266,13281,13282,13373,13398,1341
                                                                                                  0,13411,13486,13512,13524,13525,13
                                                                                                  596,13631,13645,13647,13676,13831,
                                                                                                  13864,13878,13879,13958,13992,1400
                                                                                                  6,14007,14099,14132,14146,14147   
 IOBLAST                    Local  12471    I(4)            4           scalar                    12660,12694,12719,12735,12771,1280
                                                                                                  5,12864,12892,12926,12996,13024,13
                                                                                                  093,13120,13198,13267,13294,13374,
                                                                                                  13399,13487,13513,13597,13632,1364
                                                                                                  8,13658,13676,13832,13865,13959,13
                                                                                                  993,14100,14133                   
 IOBS_FLT                   Dummy  12330    I(4)            4     1     0        ARG,INOUT        12576,12578                       
 ISTART                     Local  12390    I(4)            4           scalar                    12576,12577,12612,12664,12701,1275
                                                                                                  0,12778,12816,12871,12966,13003,13
                                                                                                  033,13150,13207,13325,13380,13439,
                                                                                                  13493,13553,13605,13683,13735,1384
                                                                                                  0,13915,13967,14049,14108,14182   
 ISTK_TIME                  Local  12483    I(4)            4           scalar                    12658,12681,12682,12717,12727,1275
                                                                                                  8,12759                           
 ITYPE                      Dummy  12329    I(4)            4     1     0        ARG,INOUT        12619,12620,12621,12622,12623,1262
                                                                                                  4,12625,12626,12630,12631,12632,12
                                                                                                  633,12637,12638,12639,12640,12644,
                                                                                                  12645,12670,12671,12683,12684,1268
                                                                                                  5,12686,12687,12688,12689,12690,12
                                                                                                  703,12760,12761,12762,12763,12764,
                                                                                                  12765,12766,12767,12780,12822,1282
                                                                                                  3,12853,12854,12855,12856,12858,12
                                                                                                  859,12860,12861,12873,12955,12956,
                                                                                                  12957,12958,12960,12961,12962,1296
                                                                                                  3,12985,12986,12987,12988,12990,12
                                                                                                  991,12992,12993,13005,13039,13040,
                                                                                                  13213,13214,13386,13387,13499,1350
                                                                                                  0,13611,13612,13737,13738,13739,13
                                                                                                  740,13741,13742,13743,13744,13758,
                                                                                                  13759,13760,13761,13764,13765,1376
                                                                                                  6,13767,13770,13771,13772,13773,13
                                                                                                  776,13777,13778,13779,13782,13783,

Page 323         Source Listing                  STK_VAL_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  13791,13792,13793,13794,13797,1379
                                                                                                  8,13799,13800,13803,13804,13805,13
                                                                                                  806,13809,13810,13811,13812,13815,
                                                                                                  13816,13846,13847,13973,13974,1411
                                                                                                  4,14115,14246,14261,14262,14263,14
                                                                                                  264,14267,14268,14269,14270,14273,
                                                                                                  14274,14275,14276,14279,14280,1428
                                                                                                  1,14282,14285,14286,14313,14314,14
                                                                                                  315,14316,14319,14320,14321,14322,
                                                                                                  14325,14326,14327,14328,14331,1433
                                                                                                  2,14333,14334,14337,14338,14364,14
                                                                                                  553                               
 I_ACARS                    Local  12438    I(4)            4           scalar                    12517,12619,12683,12760,13737,1376
                                                                                                  4,13797,14267,14319               
 I_ACARS_ASC                Local  12442    I(4)            4           scalar                    12519,12621,12685,12762,13739,1376
                                                                                                  6,13799,14269,14321               
 I_ACARS_DES                Local  12444    I(4)            4           scalar                    12520,12622,12686,12763,13740,1376
                                                                                                  7,13800,14270,14322               
 I_ACARS_LVL                Local  12440    I(4)            4           scalar                    12518,12620,12684,12761,13738,1376
                                                                                                  5,13798,14268,14320               
 I_AIREP                    Local  12451    I(4)            4           scalar                    12527,12630,13776,13809,14279,1433
                                                                                                  1                                 
 I_AIREP_ASC                Local  12453    I(4)            4           scalar                    12529,12632,13778,13811,14281,1433
                                                                                                  3                                 
 I_AIREP_DES                Local  12454    I(4)            4           scalar                    12530,12633,13779,13812,14282,1433
                                                                                                  4                                 
 I_AIREP_LVL                Local  12452    I(4)            4           scalar                    12528,12631,13777,13810,14280,1433
                                                                                                  2                                 
 I_AMDAR                    Local  12455    I(4)            4           scalar                    12531,12637,12853,12858,12955,1296
                                                                                                  0,12985,12990,13770,13803,14273,14
                                                                                                  325                               
 I_AMDAR_ASC                Local  12457    I(4)            4           scalar                    12533,12639,12855,12860,12957,1296
                                                                                                  2,12987,12992,13772,13805,14275,14
                                                                                                  327                               
 I_AMDAR_DES                Local  12458    I(4)            4           scalar                    12534,12640,12856,12861,12958,1296
                                                                                                  3,12988,12993,13773,13806,14276,14
                                                                                                  328                               
 I_AMDAR_LVL                Local  12456    I(4)            4           scalar                    12532,12638,12854,12859,12956,1296
                                                                                                  1,12986,12991,13771,13804,14274,14
                                                                                                  326                               
 I_MAN_AIREP                Local  12449    I(4)            4           scalar                    12525,12644,12670,12822,13039,1321
                                                                                                  3,13386,13499,13611,13782,13815,13
                                                                                                  846,13973,14114,14285,14337       
 I_MAN_YAIREP               Local  12450    I(4)            4           scalar                    12526,12645,12671,12823,13040,1321
                                                                                                  4,13387,13500,13612,13783,13816,13
                                                                                                  847,13974,14115,14286,14338       
 I_MDCRS                    Local  12445    I(4)            4           scalar                    12521,12623,12687,12764,13741,1375
                                                                                                  8,13791,14261,14313               
 I_MDCRS_ASC                Local  12447    I(4)            4           scalar                    12523,12625,12689,12766,13743,1376
                                                                                                  0,13793,14263,14315               
 I_MDCRS_DES                Local  12448    I(4)            4           scalar                    12524,12626,12690,12767,13744,1376
                                                                                                  1,13794,14264,14316               
 I_MDCRS_LVL                Local  12446    I(4)            4           scalar                    12522,12624,12688,12765,13742,1375
                                                                                                  9,13792,14262,14314               
 JJ                         Local  12468    I(4)            4           scalar                    12694,12695,12701,12702,12864,1286

Page 324         Source Listing                  STK_VAL_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  5,12871,12872                     
 KBAD                       Local  12418    I(4)            4     1     5                         14308,14448,14478,14480,14481,1448
                                                                                                  2,14483,14501,14503,14504,14505,14
                                                                                                  506,14672,14673                   
 KBADT                      Local  12419    I(4)            4     1     5                         12552,14466,14484,14486,14487,1448
                                                                                                  8,14489,14507,14509,14510,14511,14
                                                                                                  512                               
 KBADTOT                    Dummy  12332    I(4)            4           scalar   ARG,INOUT        14672,14677                       
 KBADW                      Local  12420    I(4)            4     1     5                         12553,14470,14490,14492,14493,1449
                                                                                                  4,14495,14513,14515,14516,14517,14
                                                                                                  518                               
 KFLIGHT                    Dummy  12330    I(4)            4           scalar   ARG,INOUT        12572                             
 KK                         Local  12467    I(4)            4           scalar                    12572,12576,12578,12583,12586,1258
                                                                                                  9,12795,14577,14591,14605         
 KREG                       Dummy  12331    I(4)            4           scalar   ARG,INOUT        13731,13788,14411,14429,14573,1458
                                                                                                  7,14601                           
 KTYPE                      Local  12481    I(4)            4           scalar                    14317,14323,14329,14335,14339,1434
                                                                                                  2,14344,14346,14348,14350,14378,14
                                                                                                  380,14382,14384,14386,14388,14392,
                                                                                                  14395,14398,14401,14404,14414,1442
                                                                                                  0,14427,14448,14450,14452,14454,14
                                                                                                  456,14458,14466,14470             
 K_ACARS                    Local  12476    I(4)            4           scalar                    12600,12628,12655,12672,12744,1274
                                                                                                  5,12824,12949,12950,13041,13143,13
                                                                                                  144,13215,13318,13319,13388,13436,
                                                                                                  13437,13501,13550,13551,13613,1368
                                                                                                  0,13681,13848,13910,13911,13975,14
                                                                                                  044,14045,14116,14177,14178       
 K_AIREP                    Local  12477    I(4)            4           scalar                    12601,12635,12655,12672,12744,1274
                                                                                                  5,12824,12949,12950,13041,13143,13
                                                                                                  144,13215,13318,13319,13388,13436,
                                                                                                  13437,13501,13550,13551,13613,1368
                                                                                                  0,13681,13848,13910,13911,13975,14
                                                                                                  044,14045,14116,14177,14178       
 K_AMDAR                    Local  12479    I(4)            4           scalar                    12603,12642,12655,12672,12744,1274
                                                                                                  5,12824,12949,12950,13041,13143,13
                                                                                                  144,13215,13318,13319,13388,13436,
                                                                                                  13437,13501,13550,13551,13613,1368
                                                                                                  0,13681,13848,13910,13911,13975,14
                                                                                                  044,14045,14116,14177,14178       
 K_MANAIREP                 Local  12478    I(4)            4           scalar                    12602,12647                       
 K_STUCK                    Local  12480    I(4)            4           scalar                    12657,12680,12716,12726,12757,1280
                                                                                                  0,12842,12886,12908,12973,13020,13
                                                                                                  089,13105,13194,13263,13279,13371,
                                                                                                  13396,13484,13510,13594,13629,1367
                                                                                                  4,13829,13862,13956,13990,14097,14
                                                                                                  130                               
 L_INIT                     Dummy  12332    L(4)            4           scalar   ARG,INOUT        12538                             
 L_NCEP                     Dummy  12332    L(4)            4           scalar   ARG,INOUT                                          
 L_OPERATIONAL              Dummy  12332    L(4)            4           scalar   ARG,INOUT        14225,14245,14293,14363,14476,1452
                                                                                                  2,14552                           
 MAXFLT                     Dummy  12330    I(4)            4           scalar   ARG,INOUT        12387,12388,12399,12400,12401,1240
                                                                                                  2                                 
 MAX_REPS                   Dummy  12325    I(4)            4           scalar   ARG,INOUT        12344,12350,12351,12352,12353,1235
                                                                                                  4,12355,12356,12357,12358,12359,12

Page 325         Source Listing                  STK_VAL_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  360,12361,12362,12363,12364,12365,
                                                                                                  12366,12367,12368,12369,12370,1237
                                                                                                  1,12375                           
 MM                         Local  12467    I(4)            4           scalar                    13731,13732,13788,13789,13795,1380
                                                                                                  1,13807,13813,13817,14410,14411,14
                                                                                                  412,14420,14427,14429,14431,14573,
                                                                                                  14574,14575,14577,14587,14588,1458
                                                                                                  9,14591,14601,14602,14603,14605   
 MREG                       Local  12398    I(4)            4           scalar                    13732,13756,13762,13768,13774,1378
                                                                                                  0,13784                           
 NINT                       Func   13141                                scalar                    13141,13315,13906,14036,14040     
 NOBS_FLT                   Dummy  12330    I(4)            4     1     0        ARG,INOUT        12578,12583,12586,12589,12795     
 NREP_AC                    Local  12423    I(4)            4           scalar                    12554,14345,14618,14637           
 NREP_AM                    Local  12427    I(4)            4           scalar                    12558,14347,14618,14637           
 NREP_AR                    Local  12426    I(4)            4           scalar                    12557,14349,14618,14637           
 NREP_MA                    Local  12425    I(4)            4           scalar                    12556,14351,14618,14637           
 NREP_MD                    Local  12424    I(4)            4           scalar                    12555,14343,14618,14637           
 NSTK_AC                    Local  12429    I(4)            4           scalar                    12559,14453,14620,14639           
 NSTK_ALAT                  Local  12409    I(4)            4     1     5                         12542,14384,14654                 
 NSTK_ALON                  Local  12410    I(4)            4     1     5                         12543,14386,14656                 
 NSTK_AM                    Local  12433    I(4)            4           scalar                    12563,14455,14620,14639           
 NSTK_AR                    Local  12432    I(4)            4           scalar                    12562,14457,14620,14639           
 NSTK_BOTH                  Local  12407    I(4)            4     1     5                         12540,14378,14652                 
 NSTK_MA                    Local  12431    I(4)            4           scalar                    12561,14459,14620,14639           
 NSTK_MD                    Local  12430    I(4)            4           scalar                    12560,14451,14620,14639           
 NSTK_MOIST                 Local  12416    I(4)            4     1     5                         12549,14404,14668                 
 NSTK_POSN                  Local  12408    I(4)            4     1     5                         12541,14382,14650                 
 NSTK_PRES                  Local  12411    I(4)            4     1     5                         12544,14388,14658                 
 NSTK_TEMP                  Local  12413    I(4)            4     1     5                         12546,14395,14662                 
 NSTK_TIME                  Local  12406    I(4)            4     1     5                         12539,14380,14648                 
 NSTK_VAL                   Local  12412    I(4)            4     1     5                         12545,14392,14660                 
 NSTK_WDIR                  Local  12414    I(4)            4     1     5                         12547,14398,14664                 
 NSTK_WHOL                  Local  12417    I(4)            4     1     5                         12551,14265,14271,14277,14283,1428
                                                                                                  7,14295,14297,14298,14299,14300,14
                                                                                                  624,14643                         
 NSTK_WSPD                  Local  12415    I(4)            4     1     5                         12548,14401,14666                 
 NTEMP_REG                  Dummy  12331    I(4)            4     2     0        ARG,INOUT        12567,14420,14588,14589,14591     
 NUMREPS                    Dummy  12325    I(4)            4           scalar   ARG,INOUT        14239,14310,14529,14676           
 NWHOL_REG                  Dummy  12331    I(4)            4     2     0        ARG,INOUT        12566,13762,13768,13774,13780,1378
                                                                                                  4,13795,13801,13807,13813,13817,14
                                                                                                  574,14575,14577                   
 NWIND_REG                  Dummy  12331    I(4)            4     2     0        ARG,INOUT        12568,14427,14602,14603,14605     
 OB_DIR                     Dummy  12327    R(4)            4     1     0        ARG,INOUT        12709,12786,12879,13011,13858,1385
                                                                                                  9,13860,13880,13881,13882,13883,13
                                                                                                  892,13893,13894,13895,13905,13906,
                                                                                                  13907,14034,14035,14036,14037,1403
                                                                                                  8,14039,14040,14041,14252,14370,14
                                                                                                  559                               
 OB_MAX                     Local  12497    R(4)            4           scalar                    13378,13403,13414,13415,13422,1342
                                                                                                  3,13434,13491,13517,13528,13529,13
                                                                                                  536,13537,13548,13601,13636,13651,
                                                                                                  13652,13663,13664,13679,13836,1386
                                                                                                  9,13882,13883,13894,13895,13909,13
                                                                                                  963,13997,14010,14011,14022,14023,
                                                                                                  14043,14104,14137,14150,14151,1416

Page 326         Source Listing                  STK_VAL_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  2,14163,14176                     
 OB_MIN                     Local  12496    R(4)            4           scalar                    13377,13402,13412,13413,13420,1342
                                                                                                  1,13434,13490,13516,13526,13527,13
                                                                                                  534,13535,13548,13600,13635,13649,
                                                                                                  13650,13661,13662,13679,13835,1386
                                                                                                  8,13880,13881,13892,13893,13909,13
                                                                                                  962,13996,14008,14009,14020,14021,
                                                                                                  14043,14103,14136,14148,14149,1416
                                                                                                  0,14161,14176                     
 OB_Q                       Dummy  12327    R(4)            4     1     0        ARG,INOUT        12708,12785,12878,13010,14121,1412
                                                                                                  2,14123,14127,14148,14149,14150,14
                                                                                                  151,14160,14161,14162,14163,14173,
                                                                                                  14174,14251,14369,14539,14545,1455
                                                                                                  8                                 
 OB_SPD                     Dummy  12327    R(4)            4     1     0        ARG,INOUT        12710,12787,12880,13012,13986,1398
                                                                                                  7,13988,14008,14009,14010,14011,14
                                                                                                  020,14021,14022,14023,14033,14253,
                                                                                                  14371,14560                       
 OB_T                       Dummy  12327    R(4)            4     1     0        ARG,INOUT        12606,12607,12616,12617,12707,1278
                                                                                                  4,12877,13009,13624,13625,13626,13
                                                                                                  646,13649,13650,13651,13652,13658,
                                                                                                  13661,13662,13663,13664,13675,1374
                                                                                                  5,14250,14368,14557               
 PRES                       Dummy  12327    R(4)            4     1     0        ARG,INOUT        12706,12783,12876,13008,13392,1339
                                                                                                  3,13394,13412,13413,13414,13415,13
                                                                                                  420,13421,13422,13423,13431,13432,
                                                                                                  14249,14367,14556                 
 STK_ALAT                   Local  12488    R(8)            8           scalar                    12802,12843,12845,12849,12888,1290
                                                                                                  9,12975,12977,12981,13022,13091,13
                                                                                                  107                               
 STK_ALON                   Local  12489    R(8)            8           scalar                    12803,12844,12846,12850,12889,1291
                                                                                                  0,12976,12978,12982,13196,13265,13
                                                                                                  280                               
 STK_ALT                    Local  12499    R(4)            4           scalar                    13485,13511                       
 STK_MOIST                  Local  12503    R(4)            4           scalar                    14098,14131                       
 STK_PRES                   Local  12498    R(4)            4           scalar                    13372,13397                       
 STK_TEMP                   Local  12500    R(4)            4           scalar                    13595,13630                       
 STK_VAL_QC                 Subr   12325                                                                                            
 STK_WDIR                   Local  12501    R(4)            4           scalar                    13830,13863                       
 STK_WSPD                   Local  12502    R(4)            4           scalar                    13957,13991                       
 STUCK                      Local  12507    L(4)            4           scalar                    12656,12715,12743,12799,12885,1294
                                                                                                  4,13019,13088,13137,13193,13262,13
                                                                                                  311,13370,13395,13430,13481,13483,
                                                                                                  13509,13544,13593,13628,13673,1372
                                                                                                  8,13828,13861,13904,13955,13989,14
                                                                                                  032,14096,14129,14172             
 TEMP_MAX                   Local  12495    R(4)            4           scalar                    12607,12617,13727                 
 TEMP_MIN                   Local  12494    R(4)            4           scalar                    12606,12616,13726                 
 T_PRCN                     Dummy  12327    R(4)            4     1     0        ARG,INOUT        12707,12784,12877,13009,13748,1425
                                                                                                  0,14368,14557                     
 XIV_D                      Dummy  12328    R(4)            4     1     0        ARG,INOUT        12709,12786,12879,13011,14252,1437
                                                                                                  0,14559                           
 XIV_Q                      Dummy  12328    R(4)            4     1     0        ARG,INOUT        12708,12785,12878,13010,14251,1436
                                                                                                  9,14558                           
 XIV_S                      Dummy  12328    R(4)            4     1     0        ARG,INOUT        12710,12787,12880,13012,14253,1437

Page 327         Source Listing                  STK_VAL_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  1,14560                           
 XIV_T                      Dummy  12328    R(4)            4     1     0        ARG,INOUT        12707,12784,12877,13009,14250,1436
                                                                                                  8,14557                           

Page 328         Source Listing                  STK_VAL_QC
2017-04-18 11:07                                 acftobs_qc.f

  14681 c
  14682 c ###################################################################
  14683 c                            subroutine grchek_qc
  14684 c ###################################################################
  14685 c   
  14686       subroutine grchek_qc(numreps,max_reps,indx,csort,amiss,cdtg_an
  14687      $,          c_acftreg,c_acftid,c_qc
  14688      $,          alat,alon,pres,ht_ft,t_prcn,ob_t,ob_q,ob_dir,ob_spd
  14689      $,          xiv_t,xiv_q,xiv_d,xiv_s
  14690      $,          idt,itype,ichk_t,ichk_q,ichk_d,ichk_s
  14691      $,          cbadtemp,nbadtemp
  14692      $,          cblkwind,nblkwind,cblktemp,nblktemp,kbadtot,io8,io34
  14693      $,          maxflt,kreg,creg_reg,nwhol_reg,nwind_reg
  14694      $,          ft2m,l_operational,l_init)
  14695 c
  14696 c Perform gross checks on aircraft data
  14697 c 
  14698       implicit none
  14699 c
  14700 c Declaration statements
  14701 c ----------------------
  14702       integer      max_reps            ! maximum number of reports
  14703 c
  14704       character*11 c_qc(max_reps)      ! internal qc flags
  14705 c
  14706 c     Data arrays
  14707 c     -----------
  14708       integer      numreps             ! actual number of reports
  14709       character*10 cdtg_an             ! date time group for analysis
  14710       integer      itype(max_reps)     ! type of aircraft data
  14711       integer      idt(max_reps)       ! time in seconds to analysis time 
  14712       character*8  c_acftreg(max_reps) ! aircraft registration (tail) number
  14713       character*9  c_acftid(max_reps)  ! aircraft flight number
  14714       real*8       alat(max_reps)      ! latitude
  14715      $,            alon(max_reps)      ! longitude
  14716       real         pres(max_reps)      ! pressure
  14717      $,            ht_ft(max_reps)     ! height in feet
  14718       real         t_prcn(max_reps)    ! temperature precision
  14719       real         ob_t(max_reps)      ! temperature
  14720      $,            ob_q(max_reps)      ! specific humidity
  14721      $,            ob_dir(max_reps)    ! wind direction
  14722      $,            ob_spd(max_reps)    ! wind speed
  14723       real         xiv_t(max_reps)     ! temperature innovation (ob - bk)
  14724      $,            xiv_q(max_reps)     ! specific humidity innovation (ob - bk)
  14725      $,            xiv_d(max_reps)     ! wind direction innovation (ob - bk)
  14726      $,            xiv_s(max_reps)     ! wind speed innovation (ob - bk)
  14727       integer      ichk_t(max_reps)    ! NRL QC flag for temperature ob
  14728      $,            ichk_q(max_reps)    ! NRL QC flag for specific humidity ob
  14729      $,            ichk_d(max_reps)    ! NRL QC flag for wind direction ob
  14730      $,            ichk_s(max_reps)    ! NRL QC flag for wind speed ob
  14731       character*25 csort(max_reps)     ! sort variable    
  14732 c
  14733 c     Pointers
  14734 c     --------
  14735       integer      indx(max_reps)      ! pointer index for good reports
  14736 c
  14737 c     Tail number statistics

Page 329         Source Listing                  GRCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  14738 c     ----------------------
  14739       integer      kreg                ! actual number of tail#s in dataset
  14740      $,            mm                  ! index pointing to current tail number
  14741       integer      maxflt              ! max number of flights allowed
  14742       character*8  creg_reg(maxflt)    ! tail numbers
  14743       integer      nwhol_reg(maxflt,5) ! number of reports w. temp in whole deg
  14744       integer      nwind_reg(maxflt,5) ! number of reports w. rejected winds
  14745 c
  14746 c     Functions
  14747 c     ---------
  14748       character*16 c_insty_ob          ! function to convert integer instrument 
  14749                                        !   type to character instrument type
  14750       integer      insty_ob_fun        ! function to convert character
  14751                                        !   instrument type to integer
  14752 c
  14753 c     Black list arrays
  14754 c     -----------------
  14755       integer      nbadtemp            ! # of acft with temps in whole degrees
  14756      $,            nblkwind            ! # of acft blacklisted for wind errors
  14757      $,            nblktemp            ! # of acft blacklisted for temp errors
  14758       character*8  cbadtemp(nbadtemp)  ! acft reports temp in whole deg C
  14759      $,            cblkwind(nblkwind)  ! winds blacklisted
  14760      $,            cblktemp(nblktemp)  ! temperatures blacklisted
  14761 c
  14762 c     Other variables
  14763 c     ---------------
  14764       integer      io8                 ! i/o unit number for log file
  14765       integer      io34                ! i/o unit number for gross errors
  14766 c
  14767       real         amiss               ! real missing value flag
  14768 c
  14769       integer      iob                 ! do loop index 
  14770      $,            ii                  ! index pointing to current report
  14771      $,            iim1                ! index pointing to previous report
  14772      $,            iip1                ! index pointing to following report
  14773       integer      idt1_00z            ! relative time equal to 00Z (pos) 
  14774      $,            idt2_00z            ! relative time equal to 00Z (neg)
  14775 c
  14776       integer      nac                 ! do loop index
  14777       integer      nrep(5)             ! number of reports considered
  14778       integer      kbad(5)             ! counter for number of bad reports
  14779      $,            n_sus_time(5)       ! counter for suspect times
  14780      $,            n_bad_pos(5)        ! counter for bad latitudes or longitudes
  14781      $,            n_sus_lat(5)        ! counter for suspect latitudes
  14782      $,            n_sus_lon(5)        ! counter for suspect longitudes
  14783      $,            n_sus_alt(5)        ! counter for suspect altitudes
  14784      $,            n_bad_alt(5)        ! counter for bad altitudes/pressures
  14785      $,            n_inc_alt(5)        ! counter for inconsistent altitudes
  14786      $,            n_bad_UAL(5)        ! counter for bad UAL surface reports
  14787      $,            n_list_temp(5)      ! counter for black-listed temperatures
  14788      $,            n_whole_temp(5)     ! counter for whole-degree temperatures
  14789      $,            n_mis_temp(5)       ! counter for missing temperatures
  14790      $,            n_bad_temp(5)       ! counter for bad temperatures
  14791      $,            n_cold_temp(5)      ! counter for anomalous cold temperatures
  14792      $,            n_list_wind(5)      ! counter for black-listed winds
  14793      $,            n_mis_dir(5)        ! counter for missing directions
  14794      $,            n_bad_dir(5)        ! counter for bad directions

Page 330         Source Listing                  GRCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  14795      $,            n_inc_dir(5)        ! counter for inconsistent directions
  14796      $,            n_mis_spd(5)        ! counter for missing speeds
  14797      $,            n_inc_spd(5)        ! counter for inconsistent speeds
  14798      $,            n_calm_spd(5)       ! counter for rejected calm speeds
  14799      $,            n_bad_spd(5)        ! counter for bad speeds
  14800      $,            n_mis_moist(5)      ! counter for missing moisture
  14801      $,            n_bad_moist(5)      ! counter for bad moisture
  14802      $,            n_sus_moist(5)      ! counter for suspect moisture
  14803      $,            n_bad_rep(5)        ! counter for reports with both bad winds
  14804                                        !     and bad temperatures
  14805      $,            kbadtot             ! counter for total number of bad reps
  14806 c
  14807       real         tmax                ! max allowable temperature
  14808      $,            tmin                ! min allowable temperature
  14809      $,            wmax                ! max allowable windspeed
  14810      $,            ft2m                ! ft to meters conversion factor
  14811      $,            height_ft           ! computed height in feet
  14812      $,            height_m            ! computed height in meters
  14813      $,            t                   ! temperature in centigrade
  14814      $,            es                  ! saturation vapor pressure
  14815      $,            qs                  ! saturation specific humidity
  14816 c
  14817 ccccdak      integer      i_acars             ! instrument type for acars
  14818       integer      i_acars             ! instrument type for tamdar
  14819 ccccdak     $,            i_acars_lvl         ! instrument type for acars--level flt
  14820      $,            i_acars_lvl         ! instrument type for tamdar--level flt
  14821 ccccdak     $,            i_acars_asc         ! instrument type for acars--ascent
  14822      $,            i_acars_asc         ! instrument type for tamdar--ascent
  14823 ccccdak     $,            i_acars_des         ! instrument type for acars--descent
  14824      $,            i_acars_des         ! instrument type for tamdar--descent
  14825      $,            i_mdcrs             ! instrument type for mdcrs
  14826      $,            i_mdcrs_lvl         ! instrument type for mdcrs--level flt
  14827      $,            i_mdcrs_asc         ! instrument type for mdcrs--ascent
  14828      $,            i_mdcrs_des         ! instrument type for mdcrs--descent
  14829      $,            i_man_airep         ! instrument type for manual aireps
  14830      $,            i_man_Yairep        ! instrument type for manual aireps (YRXX)
  14831      $,            i_airep             ! instrument type for airep
  14832      $,            i_airep_lvl         ! instrument type for airep--level flt
  14833      $,            i_airep_asc         ! instrument type for airep--ascent
  14834      $,            i_airep_des         ! instrument type for airep--descent
  14835      $,            i_amdar             ! instrument type for amdar
  14836      $,            i_amdar_lvl         ! instrument type for amdar--level flt
  14837      $,            i_amdar_asc         ! instrument type for amdar--ascent
  14838      $,            i_amdar_des         ! instrument type for amdar--descent
  14839       integer      ktype               ! instrument type index
  14840 c
  14841 c     Switches
  14842 c     --------
  14843       logical      l_print             ! print values if true
  14844      $,            l_init              ! initialize counters if true
  14845 ccccdak     $,            l_ii_acars          ! true if ii rep is type acars
  14846      $,            l_ii_acars          ! true if ii rep is type tamdar
  14847      $,            l_ii_mdcrs          ! true if ii rep is type mdcrs
  14848      $,            l_ii_airep          ! true if ii rep is type airep
  14849      $,            l_ii_man            ! true if ii rep is type manual airep
  14850      $,            l_ii_amdar          ! true if ii rep is type amdar
  14851      $,            l_operational       ! run QC in operational mode if true

Page 331         Source Listing                  GRCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  14852 c
  14853 c # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  14854 c
  14855 c Initialize variables
  14856 c --------------------
  14857       if(l_init) then
  14858         nrep = 0
  14859         n_sus_time = 0
  14860         n_bad_pos = 0
  14861         n_sus_lat = 0
  14862         n_sus_lon = 0
  14863         n_sus_alt = 0
  14864         n_bad_alt = 0
  14865         n_inc_alt = 0
  14866         n_bad_UAL = 0
  14867         n_list_temp = 0
  14868         n_mis_temp = 0
  14869         n_bad_temp = 0
  14870         n_cold_temp = 0
  14871         n_list_wind = 0
  14872         n_mis_dir = 0
  14873         n_bad_dir = 0
  14874         n_inc_dir = 0
  14875         n_mis_spd = 0
  14876         n_inc_spd = 0
  14877         n_calm_spd = 0
  14878         n_bad_spd = 0
  14879         n_mis_moist = 0
  14880         n_bad_moist = 0
  14881         n_sus_moist = 0
  14882         n_bad_rep = 0
  14883         n_whole_temp = 0
  14884         kbad = 0
  14885       endif
  14886 c
  14887       nwhol_reg = 0
  14888       nwind_reg = 0
  14889 c
  14890 c Compute relative time equal to 00z
  14891 c ----------------------------------
  14892       read(cdtg_an,'(8x,i2)') idt1_00z
  14893       idt1_00z = idt1_00z * 3600 
  14894       idt2_00z = 0 - idt1_00z 
  14895 c
  14896 c Initialize aircraft data types
  14897 c ------------------------------
  14898       i_acars      = insty_ob_fun('acars')
  14899       i_acars_lvl  = insty_ob_fun('acars_lvl') 
  14900       i_acars_asc  = insty_ob_fun('acars_asc') 
  14901       i_acars_des  = insty_ob_fun('acars_des') 
  14902       i_mdcrs      = insty_ob_fun('mdcrs')
  14903       i_mdcrs_lvl  = insty_ob_fun('mdcrs_lvl') 
  14904       i_mdcrs_asc  = insty_ob_fun('mdcrs_asc') 
  14905       i_mdcrs_des  = insty_ob_fun('mdcrs_des')
  14906       i_man_airep  = insty_ob_fun('man-airep') 
  14907       i_man_Yairep = insty_ob_fun('man-Yairep') 
  14908       i_airep      = insty_ob_fun('airep')

Page 332         Source Listing                  GRCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  14909       i_airep_lvl  = insty_ob_fun('airep_lvl')
  14910       i_airep_asc  = insty_ob_fun('airep_asc')
  14911       i_airep_des  = insty_ob_fun('airep_des')
  14912       i_amdar      = insty_ob_fun('amdar')
  14913       i_amdar_lvl  = insty_ob_fun('amdar_lvl')
  14914       i_amdar_asc  = insty_ob_fun('amdar_asc')
  14915       i_amdar_des  = insty_ob_fun('amdar_des')
  14916 c
  14917 c Loop over reports
  14918 c -----------------
  14919       do iob=1,numreps
  14920         ii = indx(iob)
  14921         l_print = .false.
  14922 c
  14923 c Set up logical variables used in testing
  14924 c ----------------------------------------
  14925         l_ii_mdcrs = .false.
  14926         l_ii_acars = .false.
  14927         l_ii_amdar = .false.
  14928         l_ii_airep = .false.
  14929         l_ii_man   = .false.
  14930 c
  14931 c       ii report is MDCRS?
  14932 c       -------------------
  14933         if(itype(ii).eq.i_mdcrs.or.
  14934      $     itype(ii).eq.i_mdcrs_lvl.or.
  14935      $     itype(ii).eq.i_mdcrs_des.or.
  14936      $     itype(ii).eq.i_mdcrs_asc) then
  14937           l_ii_mdcrs = .true.
  14938           ktype = 1
  14939 c
  14940 ccccdak       report is ACARS?
  14941 c       report is TAMDAR?
  14942 c       -------------------
  14943         elseif(itype(ii).eq.i_acars.or.
  14944      $         itype(ii).eq.i_acars_lvl.or.
  14945      $         itype(ii).eq.i_acars_des.or.
  14946      $         itype(ii).eq.i_acars_asc) then
  14947           l_ii_acars = .true.
  14948           ktype = 2
  14949 c
  14950 c       ii report is AMDAR?
  14951 c       -------------------
  14952         elseif(itype(ii).eq.i_amdar.or.
  14953      $         itype(ii).eq.i_amdar_lvl.or.
  14954      $         itype(ii).eq.i_amdar_des.or.
  14955      $         itype(ii).eq.i_amdar_asc) then
  14956           l_ii_amdar = .true.
  14957           ktype = 3
  14958 c
  14959 c       ii report is AIREP?
  14960 c       -------------------
  14961         elseif(itype(ii).eq.i_airep.or.
  14962      $         itype(ii).eq.i_airep_lvl.or.
  14963      $         itype(ii).eq.i_airep_des.or.
  14964      $         itype(ii).eq.i_airep_asc) then
  14965           l_ii_airep = .true.

Page 333         Source Listing                  GRCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  14966           ktype = 4
  14967 c
  14968 c       ii report is manual AIREP?
  14969 c       --------------------------
  14970         elseif(itype(ii).eq.i_man_airep.or.
  14971      $         itype(ii).eq.i_man_Yairep) then
  14972           l_ii_man = .true.
  14973           ktype = 5
  14974         endif
  14975 c
  14976 c Compute height in feet from pressure for pressure/altitude check
  14977 c ----------------------------------------------------------------
  14978         call p2ht_qc(pres(ii),height_m,amiss)
  14979         call ht2fl_qc(height_m,height_ft,amiss,ft2m)
  14980 c
  14981 c        write(io8,*) 'p2ht test--tail#,pressure,computed ht,obs ht'
  14982 c        write(io8,*) c_acftreg(ii),pres(ii),height_ft,ht_ft(ii)
  14983 c
  14984 c First perform checks that reject the whole report
  14985 c -------------------------------------------------
  14986 c
  14987 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  14988 c Reject reports with unphysical latitudes
  14989 c ----------------------------------------
  14990         if(alat(ii).gt.90.0.or.alat(ii).lt.-90.0) then
  14991           l_print = .true.
  14992           if(l_print) write(io8,*) 'Latitude bad'
  14993           c_qc(ii)(3:3) = 'B'
  14994           n_bad_pos(ktype) = n_bad_pos(ktype) + 1
  14995 c
  14996 c Reject reports with unphysical longitudes
  14997 c -----------------------------------------
  14998         elseif(alon(ii).gt.360.0.or.alon(ii).lt.0.0) then
  14999           l_print = .true.
  15000           if(l_print) write(io8,*) 'Longitude bad'
  15001           c_qc(ii)(4:4) = 'B'
  15002           n_bad_pos(ktype) = n_bad_pos(ktype) + 1
  15003 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  15004 c
  15005 c Reject reports with unphysical or inconsistent pressures/altitudes
  15006 c ------------------------------------------------------------------
  15007         elseif(pres(ii).gt.1080..or.pres(ii).lt.50.) then
  15008           l_print = .true.
  15009           if(l_print) write(io8,*) 'Pressure bad'
  15010           if(c_qc(ii)(5:5).eq.'R') pres(ii) = amiss
  15011           if(c_qc(ii)(5:5).eq.'r') ht_ft(ii) = amiss
  15012           c_qc(ii)(5:5) = 'B'
  15013           n_bad_alt(ktype) = n_bad_alt(ktype) + 1
  15014 c
  15015         elseif(abs(height_ft-ht_ft(ii)).gt.25.0) then
  15016           l_print = .true.
  15017           if(l_print) write(io8,*) 'Pressure and height inconsistent'
  15018           c_qc(ii)(5:5) = 'I'
  15019           n_inc_alt(ktype) = n_inc_alt(ktype) + 1
  15020 c
  15021 c Reject surface UAL aireps
  15022 c (1/27/00)  These are actually erroneous reports from UAL Airbus A320/A319

Page 334         Source Listing                  GRCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  15023 c            aircraft that Tinker has incorrectly re-encoded into AIREP format.
  15024 c            In these reports, the altitude is divided by 10, temperature is
  15025 c            missing, the values listed as windspeed are actually wind 
  15026 c            direction, and it's not clear what is listed as wind direction.
  15027 c -----------------------------------------------------------------------------
  15028         elseif((l_ii_man.or.l_ii_airep).and.
  15029      $         c_acftid(ii)(1:3).eq.'UAL'.and.
  15030      $         ht_ft(ii).lt.5000.0.and.
  15031      $         ob_t(ii).eq.amiss) then
  15032           l_print = .true.
  15033           if(l_print) write(io8,*) 'Bad UAL surface report'
  15034           c_qc(ii)(1:1) = 'B'
  15035           n_bad_UAL(ktype) = n_bad_UAL(ktype) + 1
  15036 c
  15037 c Now, perform checks on individual parameters in remaining reports
  15038 c -----------------------------------------------------------------
  15039         else
  15040 c
  15041 c Exclude missing temperatures
  15042 c ----------------------------
  15043           if(ob_t(ii).eq.amiss) then
  15044 c            l_print = .true.
  15045             if(l_print) write(io8,*) 'Temperature missing'
  15046             c_qc(ii)(6:6) = 'M'
  15047             n_mis_temp(ktype) = n_mis_temp(ktype) + 1
  15048 c
  15049 c Check list of aircraft reporting temperature in whole deg
  15050 c Re-compute temperature to correct
  15051 c (Since most of the aircraft were fixed by mid-1999, stop
  15052 c   doing this check after 1 Oct 1999)
  15053 c ---------------------------------------------------------
  15054           elseif(cdtg_an.lt.'1999100100') then
  15055             do nac = 1,nbadtemp
  15056               if(c_acftreg(ii).eq.cbadtemp(nac)) then
  15057 c               l_print = .true.
  15058                 if(l_print) write(io8,*)'On list with temp in whole deg'
  15059                 c_qc(ii)(10:10) = 'C'
  15060 c
  15061 ccccdak               Recompute temperature for ACARS or MDCRS reports
  15062 c               Recompute temperature for TAMDAR or MDCRS reports
  15063 c               (Since AIREPs are reported only to nearest degree,
  15064 c                don't bother to recompute temperature--inadequate precision!)
  15065 c               ---------------------------------------------------------------------
  15066 c
  15067 c               Don't bother with temperatures already fixed or rejected
  15068 c               --------------------------------------------------------
  15069                 if(c_qc(ii)(6:6).ne.'R'.and.
  15070      $             c_qc(ii)(6:6).ne.'b'.and.
  15071      $             c_qc(ii)(6:6).ne.'E'.and.
  15072      $             c_qc(ii)(6:6).ne.'I'.and.
  15073      $             c_qc(ii)(6:6).ne.'K') then
  15074 c
  15075 c                 If temperatures are outside of limits, assume that the
  15076 c                   error was corrected on this aircraft
  15077 c                 ------------------------------------------------------
  15078                   if(ob_t(ii).lt.266.0.or.ob_t(ii).gt.278.0) then
  15079                     l_print = .true.

Page 335         Source Listing                  GRCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  15080                     if(l_print) then
  15081                       write(io8,*) 'On list with temp in whole deg'
  15082                       write(io8,*) '  Temperature not within bounds!!!'
  15083                     endif
  15084 c
  15085 ccccdak                 If bad temperature occurred in an ACARS, MDCRS, or
  15086 c                 If bad temperature occurred in an TAMDAR, MDCRS, or
  15087 c                   AMDAR report, fix it
  15088 c                 ---------------------------------------------------
  15089                   elseif(l_ii_acars.or.l_ii_mdcrs.or.l_ii_amdar) then
  15090                     ob_t(ii) = (ob_t(ii) - 273.16) * 10. + 273.16
  15091                     l_print = .true.
  15092                     if(l_print) write(io8,*) ' temperature recomputed'
  15093                     t_prcn(ii) = 1.00
  15094                     c_qc(ii)(6:6) = 'R'
  15095                     n_whole_temp(ktype) = n_whole_temp(ktype) + 1
  15096 c
  15097 c                   Count number of whole-degree temps by tail number
  15098 c                   -------------------------------------------------
  15099                     mm = 1
  15100                     do while(mm.le.kreg)
  15101                       if(c_acftreg(ii).eq.creg_reg(mm)) then 
  15102                         nwhol_reg(mm,ktype) = nwhol_reg(mm,ktype) + 1
  15103                         mm = kreg + 1
  15104                       endif
  15105                       mm = mm + 1
  15106                     enddo
  15107 c
  15108 c                 If bad temperature occurred in an AIREP, reject it
  15109 c                 --------------------------------------------------
  15110                   else
  15111                     l_print = .true.
  15112                     if(l_print) then
  15113                       write(io8,*) 'On list with temp in whole deg'
  15114                       write(io8,*) '  temperature marked bad'
  15115                     endif
  15116                     c_qc(ii)(6:6) = 'b'
  15117                     n_whole_temp(ktype) = n_whole_temp(ktype) + 1
  15118                   endif
  15119                 endif
  15120 c
  15121               endif
  15122             enddo
  15123           endif
  15124 c
  15125 c QC temperature--Moninger algorithm
  15126 c ----------------------------------
  15127           if(c_qc(ii)(6:6).ne.'b'.and.
  15128      $       c_qc(ii)(6:6).ne.'E'.and.
  15129      $       c_qc(ii)(6:6).ne.'I'.and.
  15130      $       c_qc(ii)(6:6).ne.'K'.and.
  15131      $       c_qc(ii)(6:6).ne.'B'.and.
  15132      $       c_qc(ii)(6:6).ne.'M') then
  15133 c
  15134 c Check for anomalously cold temperatures accompanied by missing winds
  15135 c --------------------------------------------------------------------
  15136             if(ob_t(ii).lt.205.0.and.

Page 336         Source Listing                  GRCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  15137      $         ob_spd(ii).eq.amiss.and.
  15138      $         ob_dir(ii).eq.amiss) then
  15139               l_print = .true.
  15140               if(l_print) then
  15141                 write(io8,*)
  15142                 write(io8,*) 'Cold temperature with missing winds'
  15143               endif
  15144               c_qc(ii)(6:6) = 'B'
  15145               n_cold_temp(ktype) = n_cold_temp(ktype) + 1
  15146 c
  15147 c           QC upper-level temperatures
  15148 c           ---------------------------
  15149             else
  15150               if(ht_ft(ii).gt.35000.) then
  15151                 if(ob_t(ii).gt.253.16-0.005.or.
  15152      $             ob_t(ii).lt.173.15+0.005) then
  15153                   l_print = .true.
  15154                   if(l_print) write(io8,*) 'Temperature bad--173  253'
  15155                   c_qc(ii)(6:6) = 'B'
  15156                   n_bad_temp(ktype) = n_bad_temp(ktype) + 1
  15157 c
  15158                 else
  15159                   if(c_qc(ii)(6:6).eq.'-') c_qc(ii)(6:6) = '.'
  15160                 endif
  15161 c
  15162 c             QC lower-level temperatures
  15163 c             ---------------------------
  15164               else
  15165                 tmax =  60. - 80. * (ht_ft(ii)           / 35000.)
  15166                 tmax = tmax + 273.16
  15167                 tmin = -60. - 40. * (ht_ft(ii) - 18000.) / 17000.
  15168                 tmin = tmin + 273.16
  15169                 if(ht_ft(ii).lt.18000.) tmin = 213.16
  15170                 if(ob_t(ii).gt.tmax.or.ob_t(ii).lt.tmin) then
  15171                   l_print = .true.
  15172                   if(l_print) write(io8,*) 'Temperature bad--',tmin,tmax
  15173                   c_qc(ii)(6:6) = 'B'
  15174                   n_bad_temp(ktype) = n_bad_temp(ktype) + 1
  15175 c
  15176                 else
  15177                   if(c_qc(ii)(6:6).eq.'-') c_qc(ii)(6:6) = '.'
  15178                 endif
  15179               endif
  15180             endif
  15181           endif
  15182 c
  15183 c Check if aircraft is on black list for temp errors
  15184 c --------------------------------------------------
  15185           if(c_qc(ii)(10:10).eq.'-') c_qc(ii)(10:10) = '.'
  15186 c
  15187           do nac = 1,nblktemp
  15188             if(c_acftreg(ii).eq.cblktemp(nac)) then
  15189 c              l_print = .true.
  15190               if(l_print) write(io8,*) 'Black-listed for temp errors'
  15191               c_qc(ii)(10:10) = 'T'
  15192               n_list_temp(ktype) = n_list_temp(ktype) + 1
  15193             endif

Page 337         Source Listing                  GRCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  15194           enddo
  15195 cc
  15196 cc QC temperature--RAOB algorithm
  15197 cc ------------------------------
  15198 c        if(ob_t(ii).ne.amiss) then
  15199 cc     $     c_qc(ii)(6:6).ne.'b'.and.
  15200 cc     $     c_qc(ii)(6:6).ne.'E'.and.
  15201 cc     $     c_qc(ii)(6:6).ne.'I'.and.
  15202 cc     $     c_qc(ii)(6:6).ne.'K') then
  15203 c
  15204 c          if(pres(ii).le.300.0.or.
  15205 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  15206 c     $       (pres(ii).le.400.0.and.alat(ii).gt.45.0)) then
  15207 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  15208 c            if(ob_t(ii).le.173.15.or.ob_t(ii).ge.268.15) then
  15209 c              l_print = .true.
  15210 c              if(l_print) write(io8,*) 'Temperature bad by RAOB check'
  15211 c              if(l_print.and.c_qc(ii)(6:6).ne.'B')
  15212 c     $          write(io8,*) '  Report not rejected by Moninger check'
  15213 c            endif
  15214 cc
  15215 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  15216 c          elseif(abs(alat(ii)).le.45.0) then
  15217 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  15218 c            if(pres(ii).le.400.) then
  15219 c              tmax = 268.15 + (pres(ii) - 300.) / 100. * 5.0
  15220 c              if(ob_t(ii).le.173.15.or.ob_t(ii).ge.tmax) then
  15221 c                l_print = .true.
  15222 c                if(l_print) write(io8,*) 'Temperature bad by RAOB check'
  15223 c                if(l_print.and.c_qc(ii)(6:6).ne.'B')
  15224 c     $            write(io8,*) '  Report not rejected by Moninger check'
  15225 c              endif
  15226 c            elseif(pres(ii).le.500.0) then
  15227 c              tmin = 173.16 + (pres(ii) - 400.) / 100. * 5.0
  15228 c              tmax = 273.16 + (pres(ii) - 400.) / 100. * 10.0
  15229 c              if(ob_t(ii).le.tmin.or.ob_t(ii).ge.tmax) then
  15230 c                l_print = .true.
  15231 c                if(l_print) write(io8,*) 'Temperature bad by RAOB check'
  15232 c                if(l_print.and.c_qc(ii)(6:6).ne.'B')
  15233 c     $            write(io8,*) '  Report not rejected by Moninger check'
  15234 c              endif
  15235 c            elseif(pres(ii).le.700.0) then
  15236 c              tmin = 178.15 + (pres(ii) - 500.) / 200. * 15.0
  15237 c              tmax = 283.15 + (pres(ii) - 500.) / 200. * 20.0
  15238 c              if(ob_t(ii).le.tmin.or.ob_t(ii).ge.tmax) then
  15239 c                l_print = .true.
  15240 c                if(l_print) write(io8,*) 'Temperature bad by RAOB check'
  15241 c                if(l_print.and.c_qc(ii)(6:6).ne.'B')
  15242 c     $            write(io8,*) '  Report not rejected by Moninger check'
  15243 c              endif
  15244 c            elseif(pres(ii).le.850.0) then
  15245 c              tmin = 193.15 + (pres(ii) - 700.) / 150. * 15.0
  15246 c              tmax = 303.15 + (pres(ii) - 700.) / 150. * 10.0
  15247 c              if(ob_t(ii).le.tmin.or.ob_t(ii).ge.tmax) then
  15248 c                l_print = .true.
  15249 c                if(l_print) write(io8,*) 'Temperature bad by RAOB check'
  15250 c                if(l_print.and.c_qc(ii)(6:6).ne.'B')

Page 338         Source Listing                  GRCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  15251 c     $            write(io8,*) '  Report not rejected by Moninger check'
  15252 c              endif
  15253 c            elseif(pres(ii).le.1000.0) then
  15254 c              tmin = 208.15 + (pres(ii) - 850.) / 150. * 15.0
  15255 c              tmax = 313.15 + (pres(ii) - 850.) / 150. * 20.0
  15256 c              if(ob_t(ii).le.tmin.or.ob_t(ii).ge.tmax) then
  15257 c                l_print = .true.
  15258 c                if(l_print) write(io8,*) 'Temperature bad by RAOB check'
  15259 c                if(l_print.and.c_qc(ii)(6:6).ne.'B')
  15260 c     $            write(io8,*) '  Report not rejected by Moninger check'
  15261 c              endif
  15262 c            elseif(pres(ii).gt.1000.0) then
  15263 c              if(ob_t(ii).le.223.15.or.ob_t(ii).ge.333.15) then
  15264 c                l_print = .true.
  15265 c                if(l_print) write(io8,*) 'Temperature bad by RAOB check'
  15266 c                if(l_print.and.c_qc(ii)(6:6).ne.'B')
  15267 c     $            write(io8,*) '  Report not rejected by Moninger check'
  15268 c              endif
  15269 c            endif
  15270 cc
  15271 c          else
  15272 c            if(pres(ii).le.500.0) then
  15273 c              tmax = 268.15 + (pres(ii) - 400.) / 100. * 10.0
  15274 c              if(ob_t(ii).le.173.15.or.ob_t(ii).ge.tmax) then
  15275 c                l_print = .true.
  15276 c                if(l_print) write(io8,*) 'Temperature bad by RAOB check'
  15277 c                if(l_print.and.c_qc(ii)(6:6).ne.'B')
  15278 c     $            write(io8,*) '  Report not rejected by Moninger check'
  15279 c              endif
  15280 c            elseif(pres(ii).le.700.0) then
  15281 c              tmin = 173.15 + (pres(ii) - 500.) / 200. * 10.0
  15282 c              tmax = 278.15 + (pres(ii) - 500.) / 200. * 15.0
  15283 c              if(ob_t(ii).le.tmin.or.ob_t(ii).ge.tmax) then
  15284 c                l_print = .true.
  15285 c                if(l_print) write(io8,*) 'Temperature bad by RAOB check'
  15286 c                if(l_print.and.c_qc(ii)(6:6).ne.'B')
  15287 c     $            write(io8,*) '  Report not rejected by Moninger check'
  15288 c              endif
  15289 c            elseif(pres(ii).le.850.0) then
  15290 c              tmax = 293.15 + (pres(ii) - 700.) / 150. * 10.0
  15291 c              if(ob_t(ii).le.183.15.or.ob_t(ii).ge.tmax) then
  15292 c                l_print = .true.
  15293 c                if(l_print) write(io8,*) 'Temperature bad by RAOB check'
  15294 c                if(l_print.and.c_qc(ii)(6:6).ne.'B')
  15295 c     $            write(io8,*) '  Report not rejected by Moninger check'
  15296 c              endif
  15297 c            elseif(pres(ii).le.1000.0) then
  15298 c              tmax = 303.15 + (pres(ii) - 850.) / 150. * 20.0
  15299 c              if(ob_t(ii).le.183.15.or.ob_t(ii).ge.tmax) then
  15300 c                l_print = .true.
  15301 c                if(l_print) write(io8,*) 'Temperature bad by RAOB check'
  15302 c                if(l_print.and.c_qc(ii)(6:6).ne.'B')
  15303 c     $            write(io8,*) '  Report not rejected by Moninger check'
  15304 c              endif
  15305 c            elseif(pres(ii).gt.1000.0) then
  15306 c              if(ob_t(ii).le.183.15.or.ob_t(ii).ge.323.15) then
  15307 c                l_print = .true.

Page 339         Source Listing                  GRCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  15308 c                if(l_print) write(io8,*) 'Temperature bad by RAOB check'
  15309 c                if(l_print.and.c_qc(ii)(6:6).ne.'B')
  15310 c     $            write(io8,*) '  Report not rejected by Moninger check'
  15311 c              endif
  15312 c            endif
  15313 c
  15314 c          endif
  15315 c        endif
  15316 c
  15317 c         Perform remaining tests only if temperature not rejected
  15318 c         --------------------------------------------------------
  15319           if(c_qc(ii)(6:6).ne.'B') then
  15320 cc
  15321 cc Check list of aircraft flipping winds
  15322 cc (Test skipped since list of aircraft used actual tail numbers 
  15323 cc    rather than pseudo-numbers!)
  15324 cc -------------------------------------
  15325 c        do nac = 1,nbadwind
  15326 c          if(c_acftreg(ii).eq.cbadwind(nac)) then
  15327 c            write(io8,*)
  15328 c            write(io8,*) c_acftreg(ii),' in rep # ',ii,
  15329 c     $                ' on list of acft with flipped winds'
  15330 c            c_qc(ii)(10:10) = 'F'
  15331 c          endif
  15332 c        enddo
  15333 cc
  15334 cc Check list of aircraft reporting decimal lat/lons
  15335 cc No correction performed at present
  15336 cc (Test skipped since list of aircraft used actual tail numbers 
  15337 cc    rather than the pseudo-numbers used currently!)
  15338 cc -------------------------------------------------------------
  15339 c        do nac = 1,nbadlat
  15340 c          if(c_acftreg(ii).eq.cbadlat(nac)) then
  15341 c            write(io8,*)
  15342 c            write(io8,*) c_acftreg(ii),' in rep # ',ii,
  15343 c     $                ' on list of acft with decimal lat/lons'
  15344 c            c_qc(ii)(10:10) = 'L'
  15345 c          endif
  15346 c        enddo
  15347 c
  15348 c QC relative time
  15349 c ----------------
  15350             if(idt(ii).eq.idt1_00z.or.
  15351      $         idt(ii).eq.idt2_00z) then
  15352 c              l_print = .true.
  15353               if(l_print) write(io8,*) 'Time equal to 00Z'
  15354               c_qc(ii)(2:2) = 'S'
  15355               n_sus_time(ktype) = n_sus_time(ktype) + 1
  15356             else
  15357               if(c_qc(ii)(2:2).eq.'-') c_qc(ii)(2:2) = '.'
  15358             endif
  15359 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  15360 c
  15361 c QC latitude
  15362 c -----------
  15363             if(abs(alat(ii)).lt.0.005) then
  15364               l_print = .false.

Page 340         Source Listing                  GRCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  15365               if(l_print) write(io8,*) 'Latitude zero'
  15366               c_qc(ii)(3:3) = 'S'
  15367               n_sus_lat(ktype) = n_sus_lat(ktype) + 1
  15368             else
  15369               if(c_qc(ii)(3:3).eq.'-') c_qc(ii)(3:3) = '.'
  15370             endif
  15371 c
  15372 c QC longitude
  15373 c ------------
  15374             if(abs(alon(ii)).lt.0.005) then
  15375               l_print = .false.
  15376               if(l_print) write(io8,*) 'Longitude zero'
  15377               c_qc(ii)(4:4) = 'S'
  15378               n_sus_lon(ktype) = n_sus_lon(ktype) + 1
  15379             else
  15380               if(c_qc(ii)(4:4).eq.'-') c_qc(ii)(4:4) = '.'
  15381             endif
  15382 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  15383 c
  15384 c Set zero altitude to suspect
  15385 c ----------------------------
  15386             if(abs(ht_ft(ii)).lt.0.5) then
  15387               l_print = .true.
  15388               if(l_print) write(io8,*) 'Altitude zero'
  15389               c_qc(ii)(5:5) = 'S'
  15390               n_sus_alt(ktype) = n_sus_alt(ktype) + 1
  15391             else
  15392               if(c_qc(ii)(5:5).eq.'-') c_qc(ii)(5:5) = '.'
  15393             endif
  15394 c
  15395 c QC winds--Moninger algorithm
  15396 c ----------------------------
  15397 c
  15398 c           QC direction
  15399 c           ------------
  15400 c            if(ob_dir(ii).eq.0.0) then
  15401 c              ob_dir(ii) = 360.
  15402 c
  15403             if(ob_dir(ii).eq.amiss) then
  15404 c              l_print = .true.
  15405               if(l_print) write(io8,*) 'Wind direction missing'
  15406               c_qc(ii)(7:7) = 'M'
  15407               n_mis_dir(ktype) = n_mis_dir(ktype) + 1
  15408 c
  15409             elseif(c_qc(ii)(7:7).ne.'K'.and.
  15410      $             c_qc(ii)(7:7).ne.'E'.and.
  15411      $             c_qc(ii)(7:7).ne.'B') then
  15412               if(ob_dir(ii).lt.0.0.or.ob_dir(ii).gt.360.0) then
  15413                 l_print = .true.
  15414                 if(l_print) write(io8,*) 'Wind direction bad',ob_dir(ii)
  15415                 c_qc(ii)(7:7) = 'B'
  15416                 n_bad_dir(ktype) = n_bad_dir(ktype) + 1
  15417 c
  15418 c               Count number of rejected winds by tail number
  15419 c               ---------------------------------------------
  15420                 mm = 1
  15421                 do while(mm.le.kreg)

Page 341         Source Listing                  GRCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  15422                   if(c_acftreg(ii).eq.creg_reg(mm)) then
  15423                     nwind_reg(mm,ktype) = nwind_reg(mm,ktype) + 1
  15424                     mm = kreg + 1
  15425                   endif
  15426                   mm = mm + 1
  15427                 enddo
  15428 c
  15429               else
  15430                 if(c_qc(ii)(7:7).eq.'-') c_qc(ii)(7:7) = '.'
  15431               endif
  15432             endif
  15433 c
  15434 c           QC speed
  15435 c           --------
  15436 c
  15437 c           First flag missing wind speeds
  15438 c           ------------------------------
  15439             if(ob_spd(ii).eq.amiss) then
  15440 c              l_print = .true.
  15441               if(l_print) write(io8,*) 'Wind speed missing'
  15442               c_qc(ii)(8:8) = 'M'
  15443               n_mis_spd(ktype) = n_mis_spd(ktype) + 1
  15444 c
  15445 c             Flag inconsistent directions--speed missing, direction not
  15446 c             ----------------------------------------------------------
  15447               if(c_qc(ii)(7:7).ne.'M'.and.
  15448      $           c_qc(ii)(7:7).ne.'B'.and.
  15449      $           c_qc(ii)(7:7).ne.'E'.and.
  15450      $           c_qc(ii)(7:7).ne.'K') then
  15451 c                l_print = .true.
  15452                 if(l_print) write(io8,*) 'Wind direction not missing'
  15453                 c_qc(ii)(7:7) = 'I'
  15454                 n_inc_dir(ktype) = n_inc_dir(ktype) + 1
  15455 c
  15456 c               Count number of rejected winds by tail number
  15457 c               ---------------------------------------------
  15458                 mm = 1
  15459                 do while(mm.le.kreg)
  15460                   if(c_acftreg(ii).eq.creg_reg(mm)) then
  15461                     nwind_reg(mm,ktype) = nwind_reg(mm,ktype) + 1
  15462                     mm = kreg + 1
  15463                   endif
  15464                   mm = mm + 1
  15465                 enddo
  15466 c
  15467               endif
  15468 c
  15469 c           Exclude previously rejected wind speeds
  15470 c           ---------------------------------------
  15471             elseif(c_qc(ii)(8:8).ne.'K'.and.
  15472      $             c_qc(ii)(8:8).ne.'E') then
  15473 c
  15474 c             Flag inconsistent speeds--direction missing, speed not
  15475 c             ------------------------------------------------------
  15476               if(ob_dir(ii).eq.amiss) then
  15477 c                l_print = .true.
  15478                 if(l_print) write(io8,*) 'Wind speed not missing'

Page 342         Source Listing                  GRCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  15479                 c_qc(ii)(8:8) = 'I'
  15480                 n_inc_spd(ktype) = n_inc_spd(ktype) + 1
  15481 c
  15482 c               Count number of rejected winds by tail number
  15483 c               ---------------------------------------------
  15484                 mm = 1
  15485                 do while(mm.le.kreg)
  15486                   if(c_acftreg(ii).eq.creg_reg(mm)) then
  15487                     nwind_reg(mm,ktype) = nwind_reg(mm,ktype) + 1
  15488                     mm = kreg + 1
  15489                   endif
  15490                   mm = mm + 1
  15491                 enddo
  15492 c
  15493 c             Flag negative winds speeds
  15494 c             --------------------------
  15495               elseif(ob_spd(ii).lt.0.0) then
  15496                 l_print = .true.
  15497                 if(l_print) write(io8,*) 'Wind speed negative'
  15498                 c_qc(ii)(8:8) = 'B'
  15499                 n_bad_spd(ktype) = n_bad_spd(ktype) + 1
  15500 c
  15501 c               Count number of rejected winds by tail number
  15502 c               ---------------------------------------------
  15503                 mm = 1
  15504                 do while(mm.le.kreg)
  15505                   if(c_acftreg(ii).eq.creg_reg(mm)) then
  15506                     nwind_reg(mm,ktype) = nwind_reg(mm,ktype) + 1
  15507                     mm = kreg + 1
  15508                   endif
  15509                   mm = mm + 1
  15510                 enddo
  15511 c
  15512 c             Reject all calm winds
  15513 c             ---------------------
  15514               elseif(ob_spd(ii).lt.0.05.and.
  15515      $               ob_dir(ii).lt.0.05) then
  15516 c                if(pres(ii).lt.700.) l_print = .true.
  15517                 l_print = .false.
  15518                 if(l_print) write(io8,*) 'Wind speed and direction zero'
  15519                 c_qc(ii)(8:8) = 'B'
  15520                 n_calm_spd(ktype) = n_calm_spd(ktype) + 1
  15521 c
  15522 c               Count number of rejected winds by tail number
  15523 c               ---------------------------------------------
  15524                 mm = 1
  15525                 do while(mm.le.kreg)
  15526                   if(c_acftreg(ii).eq.creg_reg(mm)) then
  15527                     nwind_reg(mm,ktype) = nwind_reg(mm,ktype) + 1
  15528                     mm = kreg + 1
  15529                   endif
  15530                   mm = mm + 1
  15531                 enddo
  15532 c
  15533 c             QC wind speeds
  15534 c             --------------
  15535               else

Page 343         Source Listing                  GRCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  15536                 if(ht_ft(ii).lt.30000.) then
  15537                   wmax = 70. + 230. * ht_ft(ii) / 30000.
  15538                 elseif(ht_ft(ii).lt.40000.) then
  15539                   wmax = 300.
  15540                 elseif(ht_ft(ii).lt.45000.) then
  15541                   wmax = 300. - 100. * (ht_ft(ii) - 40000.) / 5000.
  15542                 else
  15543                   wmax = 200.
  15544                 endif
  15545                 wmax = wmax * 0.5144          ! convert max from knots to m/s
  15546                 if(ob_spd(ii).gt.wmax) then
  15547                   l_print = .true.
  15548                   if(l_print) write(io8,*) 'Wind speed > wmax = ',wmax
  15549                   c_qc(ii)(8:8) = 'B'
  15550                   n_bad_spd(ktype) = n_bad_spd(ktype) + 1
  15551 c
  15552 c                 Count number of rejected winds by tail number
  15553 c                 ---------------------------------------------
  15554                   mm = 1
  15555                   do while(mm.le.kreg)
  15556                     if(c_acftreg(ii).eq.creg_reg(mm)) then
  15557                       nwind_reg(mm,ktype) = nwind_reg(mm,ktype) + 1
  15558                       mm = kreg + 1
  15559                     endif
  15560                     mm = mm + 1
  15561                   enddo
  15562 c
  15563                 else
  15564                   if(c_qc(ii)(8:8).eq.'-') c_qc(ii)(8:8) = '.'
  15565                 endif
  15566               endif
  15567             endif
  15568 c
  15569 c Check if aircraft is on black list for wind errors
  15570 c --------------------------------------------------
  15571             do nac = 1,nblkwind
  15572               if(c_acftreg(ii).eq.cblkwind(nac)) then
  15573 c                l_print = .true.
  15574                 if(l_print) write(io8,*) 'Black-listed for wind errors'
  15575 c
  15576                 if(c_qc(ii)(10:10).eq.'T') then
  15577                   c_qc(ii)(10:10) = 'O'
  15578                 else
  15579                   c_qc(ii)(10:10) = 'W'
  15580                 endif
  15581                 n_list_wind(ktype) = n_list_wind(ktype) + 1
  15582               endif
  15583             enddo
  15584 cc
  15585 cc QC speed--RAOB algorithm
  15586 cc ------------------------
  15587 c        if(ob_spd(ii).ne.amiss.and.
  15588 c     $     ob_spd(ii).ne.0.0.and.
  15589 c     $     c_qc(ii)(8:8).ne.'K'.and.
  15590 c     $     c_qc(ii)(8:8).ne.'E') then
  15591 cc
  15592 c          if(pres(ii).ge.700.0) then

Page 344         Source Listing                  GRCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  15593 c            if(ob_spd(ii).gt.100.0) then
  15594 c              l_print = .true.
  15595 c              if(l_print) write(io8,*) 'Windspeed bad by RAOB check'
  15596 c              if(l_print.and.c_qc(ii)(8:8).ne.'B')
  15597 c     $          write(io8,*) '  Report not rejected by Moninger check'
  15598 c            endif
  15599 cc
  15600 c          elseif(pres(ii).ge.500.0) then
  15601 c            wmax = 100.0 + (700.0 - pres(ii)) / 200. * 20.0
  15602 c            if(ob_spd(ii).ge.wmax) then
  15603 c              l_print = .true.
  15604 c              if(l_print) write(io8,*) 'Windspeed bad by RAOB check'
  15605 c              if(l_print.and.c_qc(ii)(8:8).ne.'B')
  15606 c     $          write(io8,*) '  Report not rejected by Moninger check'
  15607 c            endif
  15608 cc
  15609 c          elseif(pres(ii).ge.300.0) then
  15610 c            wmax = 120.0 + (500.0 - pres(ii)) / 200. * 60.0
  15611 c            if(ob_spd(ii).ge.wmax) then
  15612 c              l_print = .true.
  15613 c              if(l_print) write(io8,*) 'Windspeed bad by RAOB check'
  15614 c              if(l_print.and.c_qc(ii)(8:8).ne.'B')
  15615 c     $          write(io8,*) '  Report not rejected by Moninger check'
  15616 c            endif
  15617 cc
  15618 c          elseif(pres(ii).ge.200.0) then
  15619 c            if(ob_spd(ii).ge.180.0) then
  15620 c              l_print = .true.
  15621 c              if(l_print) write(io8,*) 'Windspeed bad by RAOB check'
  15622 c              if(l_print.and.c_qc(ii)(8:8).ne.'B')
  15623 c     $          write(io8,*) '  Report not rejected by Moninger check'
  15624 c            endif
  15625 cc
  15626 c          elseif(pres(ii).ge.100.0) then
  15627 c            if(ob_spd(ii).ge.170.0) then
  15628 c              l_print = .true.
  15629 c              if(l_print) write(io8,*) 'Windspeed bad by RAOB check'
  15630 c              if(l_print.and.c_qc(ii)(8:8).ne.'B')
  15631 c     $          write(io8,*) '  Report not rejected by Moninger check'
  15632 c            endif
  15633 c          endif
  15634 c        endif
  15635 c
  15636 c QC moisture
  15637 c -----------
  15638 c
  15639 c           Exclude values already flagged as constant
  15640 c           ------------------------------------------
  15641             if(c_qc(ii)(9:9).ne.'K') then
  15642 c
  15643 c             Check for missing values
  15644 c             (treat moisture qc flag = 1 (non-measurement mode) as missing)
  15645 c             (treat moisture qc flag = 9 (sensor not installed) as missing)
  15646 c             --------------------------------------------------------------
  15647               if(ob_q(ii).eq.amiss.or.
  15648      $           ichk_q(ii).eq.-9.or.
  15649      $           ichk_q(ii).eq.9.or.

Page 345         Source Listing                  GRCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  15650      $           ichk_q(ii).eq.-1) then
  15651 c
  15652 c                l_print = .true.
  15653                 if(l_print) write(io8,*) 'Moisture not present'
  15654                 c_qc(ii)(9:9) = 'M'
  15655                 n_mis_moist(ktype) = n_mis_moist(ktype) + 1
  15656 c
  15657 c             Assume zero moisture with qc flag of 7 signify missing ob
  15658 c             ---------------------------------------------------------
  15659               elseif(ob_q(ii).lt.0.005.and.ichk_q(ii).eq.-7) then
  15660 c
  15661 c                l_print = .true.
  15662                 if(l_print) write(io8,*) 'Moisture not present, = 0'
  15663                 c_qc(ii)(9:9) = 'M'
  15664                 n_mis_moist(ktype) = n_mis_moist(ktype) + 1
  15665 c
  15666 c             QC remaining values
  15667 c             -------------------
  15668               else
  15669 c
  15670                 if(ichk_q(ii).ne. 0.and.
  15671      $             ichk_q(ii).ne.-2.and.
  15672      $             ichk_q(ii).ne.-3.and.
  15673      $             ichk_q(ii).ne.-4.and.
  15674      $             ichk_q(ii).ne.-5.and.
  15675      $             ichk_q(ii).ne.-6.and.
  15676      $             ichk_q(ii).ne.-7.and.
  15677      $             ichk_q(ii).ne.-8.and.
  15678      $             ichk_q(ii).ne.908) l_print = .true.
  15679 c
  15680                 if(l_print) 
  15681      $            write(io8,*) 'Moisture qc flag = ',ichk_q(ii),ii
  15682 c
  15683 c               Compute saturation specific humidity to test for supersaturation
  15684 c               Reference: http://www.ofcm.gov/fmh3/text/appendd.htm
  15685 c               ----------------------------------------------------------------
  15686                 if(c_qc(ii)(6:6).ne.'K'.and.
  15687      $             c_qc(ii)(6:6).ne.'E'.and.
  15688      $             c_qc(ii)(6:6).ne.'I'.and.
  15689      $             c_qc(ii)(6:6).ne.'M'.and.
  15690      $             c_qc(ii)(6:6).ne.'B'.and.
  15691      $             c_qc(ii)(6:6).ne.'b'.and.
  15692      $             c_qc(ii)(10:10).ne.'T'.and.
  15693      $             c_qc(ii)(10:10).ne.'O') then
  15694 c
  15695                   t = ob_t(ii) - 273.16
  15696 c                     temperature in centigrade
  15697                   es = 6.1121 * exp( (17.502 * t) / (t + 240.97) )
  15698 c                      saturation vapor pressure
  15699                   qs = .622 * es / pres(ii) * 1000.
  15700 c                      saturation specific humidity (g/kg)
  15701                 else
  15702                   qs = amiss
  15703                 endif
  15704 c
  15705 c               Examine values of moisture qc flag
  15706 c               (meaning of flag values is from BUFR table 0 33 26)

Page 346         Source Listing                  GRCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  15707 c                 (1 => Normal operations--non-measurement mode)
  15708 c                 (9 => Sensor not installed)
  15709 c                 (10-62 are reserved values; 63 => missing value)
  15710 c               ---------------------------------------------------
  15711                 if(ichk_q(ii).eq.-2) then
  15712                   if(l_print) write(io8,*) '  Small RH'
  15713                   c_qc(ii)(9:9) = '2'
  15714 c
  15715                 elseif(ichk_q(ii).eq.-3) then
  15716                   if(l_print) write(io8,*) '  Element wet'
  15717                   c_qc(ii)(9:9) = '3'
  15718 c
  15719                 elseif(ichk_q(ii).eq.-4) then
  15720                   if(l_print) write(io8,*) '  Element contaminated'
  15721                   c_qc(ii)(9:9) = 'B'
  15722                   n_bad_moist(ktype) = n_bad_moist(ktype) + 1
  15723 c
  15724                 elseif(ichk_q(ii).eq.-5) then
  15725                   if(l_print) write(io8,*) '  Heater failed'
  15726                   c_qc(ii)(9:9) = 'B'
  15727                   n_bad_moist(ktype) = n_bad_moist(ktype) + 1
  15728 c
  15729                 elseif(ichk_q(ii).eq.-6) then
  15730                   if(l_print) 
  15731      $              write(io8,*) '  Heater failed, wet/contam. element'
  15732                   c_qc(ii)(9:9) = 'B'
  15733                   n_bad_moist(ktype) = n_bad_moist(ktype) + 1
  15734 c
  15735                 elseif(ichk_q(ii).eq.-7) then
  15736                   if(l_print) write(io8,*) '  Invalid input parameters '
  15737                   c_qc(ii)(9:9) = 'B'
  15738                   n_bad_moist(ktype) = n_bad_moist(ktype) + 1
  15739 c
  15740                 elseif(ichk_q(ii).eq.-8) then
  15741                   if(l_print) write(io8,*) '  Numeric error'
  15742                   c_qc(ii)(9:9) = 'B'
  15743                   n_bad_moist(ktype) = n_bad_moist(ktype) + 1
  15744 c
  15745                 elseif(qs.eq.amiss) then
  15746                   if(l_print) write(io8,*) '  Cannot check supersat.'
  15747                   c_qc(ii)(9:9) = 'N'
  15748 c
  15749                 elseif(ob_q(ii)-qs.gt.0.01) then
  15750 	            l_print = .true.
  15751                   if(l_print) 
  15752      $            write(io8,*) '  Supersaturation present--qs = ',qs
  15753                   c_qc(ii)(9:9) = 'S'
  15754                   n_sus_moist(ktype) = n_sus_moist(ktype) + 1
  15755 c
  15756                 else
  15757                   if(c_qc(ii)(9:9).eq.'-') c_qc(ii)(9:9) = '.'
  15758                 endif
  15759               endif
  15760             endif
  15761           endif
  15762         endif
  15763 c

Page 347         Source Listing                  GRCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  15764 c       Print offending report with neighbors if desired
  15765 c       ------------------------------------------------
  15766         if(l_print) then
  15767 c
  15768           if(iob.eq.1) then
  15769             iim1 = 0
  15770           else  
  15771             iim1 = indx(iob-1)
  15772           endif
  15773 c
  15774           if(iob.eq.numreps) then
  15775             iip1 = 0
  15776           else
  15777             iip1 = indx(iob+1)
  15778           endif
  15779 c
  15780           if(iim1.ne.0) write (io8,8001) iim1,c_insty_ob(itype(iim1))
  15781      x,      c_acftreg(iim1),c_acftid(iim1)
  15782      x,      idt(iim1),alat(iim1),alon(iim1),pres(iim1),ht_ft(iim1)
  15783      x,      t_prcn(iim1),ob_t(iim1),xiv_t(iim1),ichk_t(iim1)
  15784      x,      ob_q(iim1),xiv_q(iim1),ichk_q(iim1)
  15785      x,      ob_dir(iim1),xiv_d(iim1),ichk_d(iim1)
  15786      x,      ob_spd(iim1),xiv_s(iim1),ichk_s(iim1)
  15787      x,      c_qc(iim1),csort(iim1)
  15788 c
  15789           write (io8,8001) ii,c_insty_ob(itype(ii))
  15790      x,      c_acftreg(ii),c_acftid(ii)
  15791      x,      idt(ii),alat(ii),alon(ii),pres(ii),ht_ft(ii)
  15792      x,      t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
  15793      x,      ob_q(ii),xiv_q(ii),ichk_q(ii)
  15794      x,      ob_dir(ii),xiv_d(ii),ichk_d(ii)
  15795      x,      ob_spd(ii),xiv_s(ii),ichk_s(ii)
  15796      x,      c_qc(ii),csort(ii)
  15797 c
  15798           if(iip1.ne.0) write (io8,8001) iip1,c_insty_ob(itype(iip1))
  15799      x,      c_acftreg(iip1),c_acftid(iip1)
  15800      x,      idt(iip1),alat(iip1),alon(iip1),pres(iip1),ht_ft(iip1)
  15801      x,      t_prcn(iip1),ob_t(iip1),xiv_t(iip1),ichk_t(iip1)
  15802      x,      ob_q(iip1),xiv_q(iip1),ichk_q(iip1)
  15803      x,      ob_dir(iip1),xiv_d(iip1),ichk_d(iip1)
  15804      x,      ob_spd(iip1),xiv_s(iip1),ichk_s(iip1)
  15805      x,      c_qc(iip1),csort(iip1)
  15806 c
  15807  8001     format(i6,1x,a8,1x,a8,1x,a9,1x
  15808      x,      i7,1x,2f11.5,1x,f8.1,1x,f7.0,1x
  15809      x,      f5.2,4(2(1x,f8.2),1x,i5)
  15810      x,      1x,'!',a11,'!',1x,a25)
  15811           write(io8,*)
  15812         endif
  15813 c
  15814 c End loop over reports
  15815 c ---------------------
  15816       enddo
  15817 c
  15818 c Write out and count bad data here
  15819 c ---------------------------------
  15820       write(io34,*)

Page 348         Source Listing                  GRCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  15821       write(io34,*) 'Data that failed gross checks'
  15822       write(io34,*) '(rejected reports not included subsequently'
  15823       write(io34,*) '-------------------------------------------'
  15824       write(io34,3001)
  15825  3001 format(' index  type    tail num   flight     time       lat'
  15826      x,      '        lon       pres  height '
  15827      x,      't-prcn   temp     innov  ichk'
  15828      x,      ' spec hum    innov  ichk'
  15829      x,      '   ob_dir    innov  ichk'
  15830      x,      '   ob_spd    innov  ichk'
  15831      x,      '   qc flag')
  15832 c
  15833 c     Loop over obs
  15834 c     -------------
  15835       do iob=1,numreps
  15836         ii = indx(iob)
  15837 c
  15838         l_print = .false.
  15839 c
  15840 c       Set index
  15841 c       ---------
  15842         if(itype(ii).eq.i_mdcrs.or.
  15843      $     itype(ii).eq.i_mdcrs_asc.or.
  15844      $     itype(ii).eq.i_mdcrs_lvl.or.
  15845      $     itype(ii).eq.i_mdcrs_des) then
  15846           ktype = 1
  15847 c
  15848         elseif(itype(ii).eq.i_acars.or.
  15849      $         itype(ii).eq.i_acars_asc.or.
  15850      $         itype(ii).eq.i_acars_lvl.or.
  15851      $         itype(ii).eq.i_acars_des) then
  15852           ktype = 2
  15853 c
  15854         elseif(itype(ii).eq.i_amdar.or.
  15855      $         itype(ii).eq.i_amdar_asc.or.
  15856      $         itype(ii).eq.i_amdar_lvl.or.
  15857      $         itype(ii).eq.i_amdar_des) then
  15858           ktype = 3
  15859 c
  15860         elseif(itype(ii).eq.i_airep.or.
  15861      $         itype(ii).eq.i_airep_asc.or.
  15862      $         itype(ii).eq.i_airep_lvl.or.
  15863      $         itype(ii).eq.i_airep_des) then
  15864           ktype = 4
  15865 c
  15866         elseif(itype(ii).eq.i_man_airep.or.
  15867      $         itype(ii).eq.i_man_Yairep) then
  15868           ktype = 5
  15869 c
  15870         else
  15871           write(io8,*)
  15872           write(io8,*) 'Bad itype: ',itype(ii),' for ii = ',ii
  15873           ktype = 5
  15874         endif
  15875 c
  15876 c       Add up number of reports considered
  15877 c       -----------------------------------

Page 349         Source Listing                  GRCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  15878         nrep(ktype) = nrep(ktype) + 1
  15879 c
  15880 c       Rejected reports
  15881 c       ----------------
  15882         if(c_qc(ii)(3:3).eq.'B'.or.
  15883      $     c_qc(ii)(4:4).eq.'B'.or.
  15884      $     c_qc(ii)(5:5).eq.'B'.or.
  15885      $     c_qc(ii)(5:5).eq.'I'.or.
  15886      $     c_qc(ii)(1:1).eq.'B'.or.
  15887      $     c_qc(ii)(6:6).eq.'B') then
  15888 c
  15889           csort(ii)(1:5) = 'badob'
  15890 c
  15891 c       Invalid reports--no data
  15892 c       ------------------------
  15893         elseif((c_qc(ii)(6:6).eq.'K'.or.
  15894      $          c_qc(ii)(10:10).eq.'T'.or.
  15895      $          c_qc(ii)(10:10).eq.'O'.or.
  15896      $          c_qc(ii)(6:6).eq.'M'.or.
  15897      $          c_qc(ii)(6:6).eq.'E'.or.
  15898      $          c_qc(ii)(6:6).eq.'I'.or.
  15899      $          c_qc(ii)(6:6).eq.'B'.or.
  15900      $          c_qc(ii)(6:6).eq.'b').and.
  15901 c
  15902      $         (c_qc(ii)(7:7).eq.'K'.or.
  15903      $          c_qc(ii)(8:8).eq.'K'.or.
  15904      $          c_qc(ii)(10:10).eq.'W'.or.
  15905      $          c_qc(ii)(10:10).eq.'O'.or.
  15906      $          c_qc(ii)(7:7).eq.'M'.or.
  15907      $          c_qc(ii)(8:8).eq.'M'.or.
  15908      $          c_qc(ii)(7:7).eq.'E'.or.
  15909      $          c_qc(ii)(8:8).eq.'E'.or.
  15910      $          c_qc(ii)(7:7).eq.'B'.or.
  15911      $          c_qc(ii)(8:8).eq.'B'.or.
  15912      $          c_qc(ii)(7:7).eq.'I'.or.
  15913      $          c_qc(ii)(8:8).eq.'I')) then
  15914 c
  15915           csort(ii)(1:5) = 'badob'
  15916           n_bad_rep(ktype) = n_bad_rep(ktype) + 1
  15917 c
  15918         endif
  15919 c
  15920 c       Output and count rejected obs
  15921 c       -----------------------------
  15922         if(.not.l_operational) then
  15923 c
  15924           if(csort(ii)(1:5).eq.'badob') then
  15925             kbad(ktype) = kbad(ktype) + 1
  15926 c
  15927             write(io34,3002) ii,c_insty_ob(itype(ii))
  15928      x,        c_acftreg(ii),c_acftid(ii)
  15929      x,        idt(ii),alat(ii),alon(ii),pres(ii),ht_ft(ii)
  15930      x,        t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
  15931      x,        ob_q(ii),xiv_q(ii),ichk_q(ii)
  15932      x,        ob_dir(ii),xiv_d(ii),ichk_d(ii)
  15933      x,        ob_spd(ii),xiv_s(ii),ichk_s(ii)
  15934      x,        c_qc(ii)

Page 350         Source Listing                  GRCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  15935  3002       format(i6,1x,a8,1x,a8,1x,a9,1x
  15936      x,      i7,1x,2f11.5,1x,f8.1,1x,f7.0,1x
  15937      x,      f5.2,4(2(1x,f8.2),1x,i5)
  15938      x,      1x,'!',a11,'!')
  15939           endif
  15940         endif
  15941 c
  15942       enddo
  15943 c
  15944 c     Output tail number counts
  15945 c     -------------------------
  15946       write(io8,*) 
  15947       write(io8,*) '  Tail numbers for reports with temp in whole deg'
  15948 ccccdak      write(io8,*) '  Tail Num  MDCRS  ACARS  AMDAR  AIREP  MAN  '
  15949       write(io8,*) '  Tail Num  MDCRS  TAMDAR AMDAR  AIREP  MAN  '
  15950       write(io8,*) '  -------------------------------------------'
  15951 c
  15952       do mm=1,kreg
  15953         if( nwhol_reg(mm,1)+nwhol_reg(mm,2)+nwhol_reg(mm,3)
  15954      $     +nwhol_reg(mm,4)+nwhol_reg(mm,5).gt.0) then
  15955           write(io8,'(2x,a8,5(1x,i6))') 
  15956      $      creg_reg(mm),(nwhol_reg(mm,ii),ii=1,5)
  15957         endif
  15958       enddo
  15959 c
  15960       write(io8,*) 
  15961       write(io8,*) '  Tail numbers for reports with bad winds'
  15962 ccccdak      write(io8,*) '  Tail Num  MDCRS  ACARS  AMDAR  AIREP  MAN  '
  15963       write(io8,*) '  Tail Num  MDCRS  TAMDAR AMDAR  AIREP  MAN  '
  15964       write(io8,*) '  -------------------------------------------'
  15965 c
  15966       do mm=1,kreg
  15967         if( nwind_reg(mm,1)+nwind_reg(mm,2)+nwind_reg(mm,3)
  15968      $     +nwind_reg(mm,4)+nwind_reg(mm,5).gt.0) then
  15969           write(io8,'(2x,a8,5(1x,i6))') 
  15970      $      creg_reg(mm),(nwind_reg(mm,ii),ii=1,5)
  15971         endif
  15972       enddo
  15973 c
  15974       write(*,*)
  15975       write(*,*) 'Gross check data counts--',cdtg_an
  15976       write(*,*) '-----------------------------------'
  15977       write(*,'(1x,a55)')
  15978 ccccdak     $ 'Type of check     MDCRS   ACARS   AMDAR   AIREP     man'
  15979      $ 'Type of check     MDCRS  TAMDAR   AMDAR   AIREP     man'
  15980       write(*,'(1x,a55)')
  15981      $ '--------------- ------- ------- ------- ------- -------'
  15982       write(*,'('' Num considered '',5(1x,i7))')
  15983      $            (nrep(ii),ii=1,5)
  15984       write(*,'('' Total rejected '',5(1x,i7))')
  15985      $           (kbad(ii),ii=1,5)
  15986       write(*,'(1x,a55)')
  15987      $ '--------------- ------- ------- ------- ------- -------'
  15988 c
  15989       if(.not.l_operational) then
  15990       write(io34,*)
  15991       write(io34,*) 'Gross check data counts'

Page 351         Source Listing                  GRCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  15992       write(io34,*) '-----------------------'
  15993       write(io34,'(1x,a55)')
  15994 ccccdak     $ 'Type of check     MDCRS   ACARS   AMDAR   AIREP     man'
  15995      $ 'Type of check     MDCRS  TAMDAR   AMDAR   AIREP     man'
  15996       write(io34,'(1x,a55)')
  15997      $ '--------------- ------- ------- ------- ------- -------'
  15998       write(io34,'(''Num considered '',5(1x,i7))')
  15999      $            (nrep(ii),ii=1,5)
  16000       write(io34,'(''Total rejected '',5(1x,i7))')
  16001      $           (kbad(ii),ii=1,5)
  16002       write(io34,'(1x,a55)')
  16003      $ '--------------- ------- ------- ------- ------- -------'
  16004       endif
  16005 c
  16006       write(io8,*)
  16007       write(io8,*) 'Gross check data counts'
  16008       write(io8,*) '-----------------------'
  16009       write(io8,'(1x,a55)')
  16010 ccccdak     $ 'Type of check     MDCRS   ACARS   AMDAR   AIREP     man'
  16011      $ 'Type of check     MDCRS  TAMDAR   AMDAR   AIREP     man'
  16012       write(io8,'(1x,a55)')
  16013      $ '--------------- ------- ------- ------- ------- -------'
  16014       write(io8,'(''Num considered '',5(1x,i7))')
  16015      $            (nrep(ii),ii=1,5)
  16016       write(io8,'(''Total rejected '',5(1x,i7))')
  16017      $           (kbad(ii),ii=1,5)
  16018       write(io8,'(1x,a55)')
  16019      $ '--------------- ------- ------- ------- ------- -------'
  16020 c
  16021       write(io8,'(''Bad lat/lon    '',5(1x,i7))')
  16022      $           (n_bad_pos(ii),ii=1,5)
  16023       write(io8,'(''Bad alt        '',5(1x,i7))')
  16024      $           (n_bad_alt(ii),ii=1,5)
  16025       write(io8,'(''Incons alt     '',5(1x,i7))')
  16026      $           (n_inc_alt(ii),ii=1,5)
  16027       write(io8,'(''Bad sfc UAL    '',5(1x,i7))')
  16028      $           (n_bad_UAL(ii),ii=1,5)
  16029       write(io8,'(''Bad temp       '',5(1x,i7))')
  16030      $           (n_bad_temp(ii),ii=1,5)
  16031       write(io8,'(''Cold temp      '',5(1x,i7))')
  16032      $           (n_cold_temp(ii),ii=1,5)
  16033       write(io8,'(''Report bad     '',5(1x,i7))')
  16034      $           (n_bad_rep(ii),ii=1,5)
  16035       write(io8,'(1x,a55)')
  16036      $ '--------------- ------- ------- ------- ------- -------'
  16037       write(io8,'(''Wh-deg temp    '',5(1x,i7))')
  16038      $           (n_whole_temp(ii),ii=1,5)
  16039       write(io8,'(1x,a55)')
  16040      $ '--------------- ------- ------- ------- ------- -------'
  16041       write(io8,'(''Bad dir        '',5(1x,i7))')
  16042      $           (n_bad_dir(ii),ii=1,5)
  16043       write(io8,'(''Incons dir     '',5(1x,i7))')
  16044      $           (n_inc_dir(ii),ii=1,5)
  16045       write(io8,'(''Bad spd        '',5(1x,i7))')
  16046      $           (n_bad_spd(ii),ii=1,5)
  16047       write(io8,'(''Calm spd       '',5(1x,i7))')
  16048      $           (n_calm_spd(ii),ii=1,5)

Page 352         Source Listing                  GRCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  16049       write(io8,'(''Incons spd     '',5(1x,i7))')
  16050      $           (n_inc_spd(ii),ii=1,5)
  16051       write(io8,'(''Bad moist      '',5(1x,i7))')
  16052      $           (n_bad_moist(ii),ii=1,5)
  16053       write(io8,'(1x,a55)')
  16054      $ '--------------- ------- ------- ------- ------- -------'
  16055       write(io8,'(''Listed temp    '',5(1x,i7))')
  16056      $           (n_list_temp(ii),ii=1,5)
  16057       write(io8,'(''Listed wind    '',5(1x,i7))')
  16058      $           (n_list_wind(ii),ii=1,5)
  16059       write(io8,'(1x,a55)')
  16060      $ '--------------- ------- ------- ------- ------- -------'
  16061       write(io8,'(''Missing temp   '',5(1x,i7))')
  16062      $           (n_mis_temp(ii),ii=1,5)
  16063       write(io8,'(''Missing dir    '',5(1x,i7))')
  16064      $           (n_mis_dir(ii),ii=1,5)
  16065       write(io8,'(''Missing spd    '',5(1x,i7))')
  16066      $           (n_mis_spd(ii),ii=1,5)
  16067       write(io8,'(''Missing moist  '',5(1x,i7))')
  16068      $           (n_mis_moist(ii),ii=1,5)
  16069       write(io8,'(1x,a55)')
  16070      $ '--------------- ------- ------- ------- ------- -------'
  16071       write(io8,'(''Suspect time   '',5(1x,i7))')
  16072      $           (n_sus_time(ii),ii=1,5)
  16073       write(io8,'(''Suspect lat    '',5(1x,i7))')
  16074      $           (n_sus_lat(ii),ii=1,5)
  16075       write(io8,'(''Suspect lon    '',5(1x,i7))')
  16076      $           (n_sus_lon(ii),ii=1,5)
  16077       write(io8,'(''Suspect alt    '',5(1x,i7))')
  16078      $           (n_sus_alt(ii),ii=1,5)
  16079       write(io8,'(''Suspect moist  '',5(1x,i7))')
  16080      $           (n_sus_moist(ii),ii=1,5)
  16081       write(io8,'(1x,a55)')
  16082      $ '--------------- ------- ------- ------- ------- -------'
  16083 c
  16084       kbadtot = kbad(1) + kbad(2) + kbad(3)
  16085      $        + kbad(4) + kbad(5)
  16086 c
  16087       write(io8,*)
  16088       write(io8,*) numreps,' good reports processed'
  16089       write(io8,*) kbadtot,' reports failed qc in gross check'
  16090 c
  16091       return
  16092       end

Page 353         Source Listing                  GRCHEK_QC
2017-04-18 11:07 Entry Points                    acftobs_qc.f



ENTRY POINTS

  Name                  
                        
 grchek_qc_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 3001                       Label  15825                                                          15824                             
 3002                       Label  15935                                                          15927                             
 8001                       Label  15807                                                          15780,15789,15798                 
 ABS                        Func   15015                                scalar                    15015,15363,15374,15386           
 ALAT                       Dummy  14688    R(8)            8     1     0        ARG,INOUT        14990,15363,15782,15791,15800,1592
                                                                                                  9                                 
 ALON                       Dummy  14688    R(8)            8     1     0        ARG,INOUT        14998,15374,15782,15791,15800,1592
                                                                                                  9                                 
 AMISS                      Dummy  14686    R(4)            4           scalar   ARG,INOUT        14978,14979,15010,15011,15031,1504
                                                                                                  3,15137,15138,15403,15439,15476,15
                                                                                                  647,15702,15745                   
 CBADTEMP                   Dummy  14691    CHAR            8     1     0        ARG,INOUT        15056                             
 CBLKTEMP                   Dummy  14692    CHAR            8     1     0        ARG,INOUT        15188                             
 CBLKWIND                   Dummy  14692    CHAR            8     1     0        ARG,INOUT        15572                             
 CDTG_AN                    Dummy  14686    CHAR            10          scalar   ARG,INOUT        14892,15054,15975                 
 CREG_REG                   Dummy  14693    CHAR            8     1     0        ARG,INOUT        15101,15422,15460,15486,15505,1552
                                                                                                  6,15556,15956,15970               
 CSORT                      Dummy  14686    CHAR            25    1     0        ARG,INOUT        15787,15796,15805,15889,15915,1592
                                                                                                  4                                 
 C_ACFTID                   Dummy  14687    CHAR            9     1     0        ARG,INOUT        15029,15781,15790,15799,15928     
 C_ACFTREG                  Dummy  14687    CHAR            8     1     0        ARG,INOUT        15056,15101,15188,15422,15460,1548
                                                                                                  6,15505,15526,15556,15572,15781,15
                                                                                                  790,15799,15928                   
 C_INSTY_OB                 Func   14748    CHAR            16          scalar                    15780,15789,15798,15927           
 C_QC                       Dummy  14687    CHAR            11    1     0        ARG,INOUT        14993,15001,15010,15011,15012,1501
                                                                                                  8,15034,15046,15059,15069,15070,15
                                                                                                  071,15072,15073,15094,15116,15127,
                                                                                                  15128,15129,15130,15131,15132,1514
                                                                                                  4,15155,15159,15173,15177,15185,15
                                                                                                  191,15319,15354,15357,15366,15369,
                                                                                                  15377,15380,15389,15392,15406,1540
                                                                                                  9,15410,15411,15415,15430,15442,15
                                                                                                  447,15448,15449,15450,15453,15471,
                                                                                                  15472,15479,15498,15519,15549,1556
                                                                                                  4,15576,15577,15579,15641,15654,15
                                                                                                  663,15686,15687,15688,15689,15690,
                                                                                                  15691,15692,15693,15713,15717,1572
                                                                                                  1,15726,15732,15737,15742,15747,15
                                                                                                  753,15757,15787,15796,15805,15882,
                                                                                                  15883,15884,15885,15886,15887,1589
                                                                                                  3,15894,15895,15896,15897,15898,15
                                                                                                  899,15900,15902,15903,15904,15905,
                                                                                                  15906,15907,15908,15909,15910,1591
                                                                                                  1,15912,15913,15934               

Page 354         Source Listing                  GRCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ES                         Local  14814    R(4)            4           scalar                    15697,15699                       
 EXP                        Func   15697                                scalar                    15697                             
 FT2M                       Dummy  14694    R(4)            4           scalar   ARG,INOUT        14979                             
 GRCHEK_QC                  Subr   14686                                                                                            
 HEIGHT_FT                  Local  14811    R(4)            4           scalar                    14979,15015                       
 HEIGHT_M                   Local  14812    R(4)            4           scalar                    14978,14979                       
 HT2FL_QC                   Subr   14979                                                          14979                             
 HT_FT                      Dummy  14688    R(4)            4     1     0        ARG,INOUT        15011,15015,15030,15150,15165,1516
                                                                                                  7,15169,15386,15536,15537,15538,15
                                                                                                  540,15541,15782,15791,15800,15929 
 ICHK_D                     Dummy  14690    I(4)            4     1     0        ARG,INOUT        15785,15794,15803,15932           
 ICHK_Q                     Dummy  14690    I(4)            4     1     0        ARG,INOUT        15648,15649,15650,15659,15670,1567
                                                                                                  1,15672,15673,15674,15675,15676,15
                                                                                                  677,15678,15681,15711,15715,15719,
                                                                                                  15724,15729,15735,15740,15784,1579
                                                                                                  3,15802,15931                     
 ICHK_S                     Dummy  14690    I(4)            4     1     0        ARG,INOUT        15786,15795,15804,15933           
 ICHK_T                     Dummy  14690    I(4)            4     1     0        ARG,INOUT        15783,15792,15801,15930           
 IDT                        Dummy  14690    I(4)            4     1     0        ARG,INOUT        15350,15351,15782,15791,15800,1592
                                                                                                  9                                 
 IDT1_00Z                   Local  14773    I(4)            4           scalar                    14892,14893,14894,15350           
 IDT2_00Z                   Local  14774    I(4)            4           scalar                    14894,15351                       
 II                         Local  14770    I(4)            4           scalar                    14920,14933,14934,14935,14936,1494
                                                                                                  3,14944,14945,14946,14952,14953,14
                                                                                                  954,14955,14961,14962,14963,14964,
                                                                                                  14970,14971,14978,14990,14993,1499
                                                                                                  8,15001,15007,15010,15011,15012,15
                                                                                                  015,15018,15029,15030,15031,15034,
                                                                                                  15043,15046,15056,15059,15069,1507
                                                                                                  0,15071,15072,15073,15078,15090,15
                                                                                                  093,15094,15101,15116,15127,15128,
                                                                                                  15129,15130,15131,15132,15136,1513
                                                                                                  7,15138,15144,15150,15151,15152,15
                                                                                                  155,15159,15165,15167,15169,15170,
                                                                                                  15173,15177,15185,15188,15191,1531
                                                                                                  9,15350,15351,15354,15357,15363,15
                                                                                                  366,15369,15374,15377,15380,15386,
                                                                                                  15389,15392,15403,15406,15409,1541
                                                                                                  0,15411,15412,15414,15415,15422,15
                                                                                                  430,15439,15442,15447,15448,15449,
                                                                                                  15450,15453,15460,15471,15472,1547
                                                                                                  6,15479,15486,15495,15498,15505,15
                                                                                                  514,15515,15519,15526,15536,15537,
                                                                                                  15538,15540,15541,15546,15549,1555
                                                                                                  6,15564,15572,15576,15577,15579,15
                                                                                                  641,15647,15648,15649,15650,15654,
                                                                                                  15659,15663,15670,15671,15672,1567
                                                                                                  3,15674,15675,15676,15677,15678,15
                                                                                                  681,15686,15687,15688,15689,15690,
                                                                                                  15691,15692,15693,15695,15699,1571
                                                                                                  1,15713,15715,15717,15719,15721,15
                                                                                                  724,15726,15729,15732,15735,15737,
                                                                                                  15740,15742,15747,15749,15753,1575
                                                                                                  7,15789,15790,15791,15792,15793,15
                                                                                                  794,15795,15796,15836,15842,15843,

Page 355         Source Listing                  GRCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  15844,15845,15848,15849,15850,1585
                                                                                                  1,15854,15855,15856,15857,15860,15
                                                                                                  861,15862,15863,15866,15867,15872,
                                                                                                  15882,15883,15884,15885,15886,1588
                                                                                                  7,15889,15893,15894,15895,15896,15
                                                                                                  897,15898,15899,15900,15902,15903,
                                                                                                  15904,15905,15906,15907,15908,1590
                                                                                                  9,15910,15911,15912,15913,15915,15
                                                                                                  924,15927,15928,15929,15930,15931,
                                                                                                  15932,15933,15934,15956,15970,1598
                                                                                                  3,15985,15999,16001,16015,16017,16
                                                                                                  022,16024,16026,16028,16030,16032,
                                                                                                  16034,16038,16042,16044,16046,1604
                                                                                                  8,16050,16052,16056,16058,16062,16
                                                                                                  064,16066,16068,16072,16074,16076,
                                                                                                  16078,16080                       
 IIM1                       Local  14771    I(4)            4           scalar                    15769,15771,15780,15781,15782,1578
                                                                                                  3,15784,15785,15786,15787         
 IIP1                       Local  14772    I(4)            4           scalar                    15775,15777,15798,15799,15800,1580
                                                                                                  1,15802,15803,15804,15805         
 INDX                       Dummy  14686    I(4)            4     1     0        ARG,INOUT        14920,15771,15777,15836           
 INSTY_OB_FUN               Func   14750    I(4)            4           scalar                    14898,14899,14900,14901,14902,1490
                                                                                                  3,14904,14905,14906,14907,14908,14
                                                                                                  909,14910,14911,14912,14913,14914,
                                                                                                  14915                             
 IO34                       Dummy  14692    I(4)            4           scalar   ARG,INOUT        15820,15821,15822,15823,15824,1592
                                                                                                  7,15990,15991,15992,15993,15996,15
                                                                                                  998,16000,16002                   
 IO8                        Dummy  14692    I(4)            4           scalar   ARG,INOUT        14992,15000,15009,15017,15033,1504
                                                                                                  5,15058,15081,15082,15092,15113,15
                                                                                                  114,15141,15142,15154,15172,15190,
                                                                                                  15353,15365,15376,15388,15405,1541
                                                                                                  4,15441,15452,15478,15497,15518,15
                                                                                                  548,15574,15653,15662,15681,15712,
                                                                                                  15716,15720,15725,15731,15736,1574
                                                                                                  1,15746,15752,15780,15789,15798,15
                                                                                                  811,15871,15872,15946,15947,15949,
                                                                                                  15950,15955,15960,15961,15963,1596
                                                                                                  4,15969,16006,16007,16008,16009,16
                                                                                                  012,16014,16016,16018,16021,16023,
                                                                                                  16025,16027,16029,16031,16033,1603
                                                                                                  5,16037,16039,16041,16043,16045,16
                                                                                                  047,16049,16051,16053,16055,16057,
                                                                                                  16059,16061,16063,16065,16067,1606
                                                                                                  9,16071,16073,16075,16077,16079,16
                                                                                                  081,16087,16088,16089             
 IOB                        Local  14769    I(4)            4           scalar                    14919,14920,15768,15771,15774,1577
                                                                                                  7,15835,15836                     
 ITYPE                      Dummy  14690    I(4)            4     1     0        ARG,INOUT        14933,14934,14935,14936,14943,1494
                                                                                                  4,14945,14946,14952,14953,14954,14
                                                                                                  955,14961,14962,14963,14964,14970,
                                                                                                  14971,15780,15789,15798,15842,1584
                                                                                                  3,15844,15845,15848,15849,15850,15
                                                                                                  851,15854,15855,15856,15857,15860,
                                                                                                  15861,15862,15863,15866,15867,1587

Page 356         Source Listing                  GRCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  2,15927                           
 I_ACARS                    Local  14818    I(4)            4           scalar                    14898,14943,15848                 
 I_ACARS_ASC                Local  14822    I(4)            4           scalar                    14900,14946,15849                 
 I_ACARS_DES                Local  14824    I(4)            4           scalar                    14901,14945,15851                 
 I_ACARS_LVL                Local  14820    I(4)            4           scalar                    14899,14944,15850                 
 I_AIREP                    Local  14831    I(4)            4           scalar                    14908,14961,15860                 
 I_AIREP_ASC                Local  14833    I(4)            4           scalar                    14910,14964,15861                 
 I_AIREP_DES                Local  14834    I(4)            4           scalar                    14911,14963,15863                 
 I_AIREP_LVL                Local  14832    I(4)            4           scalar                    14909,14962,15862                 
 I_AMDAR                    Local  14835    I(4)            4           scalar                    14912,14952,15854                 
 I_AMDAR_ASC                Local  14837    I(4)            4           scalar                    14914,14955,15855                 
 I_AMDAR_DES                Local  14838    I(4)            4           scalar                    14915,14954,15857                 
 I_AMDAR_LVL                Local  14836    I(4)            4           scalar                    14913,14953,15856                 
 I_MAN_AIREP                Local  14829    I(4)            4           scalar                    14906,14970,15866                 
 I_MAN_YAIREP               Local  14830    I(4)            4           scalar                    14907,14971,15867                 
 I_MDCRS                    Local  14825    I(4)            4           scalar                    14902,14933,15842                 
 I_MDCRS_ASC                Local  14827    I(4)            4           scalar                    14904,14936,15843                 
 I_MDCRS_DES                Local  14828    I(4)            4           scalar                    14905,14935,15845                 
 I_MDCRS_LVL                Local  14826    I(4)            4           scalar                    14903,14934,15844                 
 KBAD                       Local  14778    I(4)            4     1     5                         14884,15925,15985,16001,16017,1608
                                                                                                  4,16085                           
 KBADTOT                    Dummy  14692    I(4)            4           scalar   ARG,INOUT        16084,16089                       
 KREG                       Dummy  14693    I(4)            4           scalar   ARG,INOUT        15100,15103,15421,15424,15459,1546
                                                                                                  2,15485,15488,15504,15507,15525,15
                                                                                                  528,15555,15558,15952,15966       
 KTYPE                      Local  14839    I(4)            4           scalar                    14938,14948,14957,14966,14973,1499
                                                                                                  4,15002,15013,15019,15035,15047,15
                                                                                                  095,15102,15117,15145,15156,15174,
                                                                                                  15192,15355,15367,15378,15390,1540
                                                                                                  7,15416,15423,15443,15454,15461,15
                                                                                                  480,15487,15499,15506,15520,15527,
                                                                                                  15550,15557,15581,15655,15664,1572
                                                                                                  2,15727,15733,15738,15743,15754,15
                                                                                                  846,15852,15858,15864,15868,15873,
                                                                                                  15878,15916,15925                 
 L_II_ACARS                 Local  14846    L(4)            4           scalar                    14926,14947,15089                 
 L_II_AIREP                 Local  14848    L(4)            4           scalar                    14928,14965,15028                 
 L_II_AMDAR                 Local  14850    L(4)            4           scalar                    14927,14956,15089                 
 L_II_MAN                   Local  14849    L(4)            4           scalar                    14929,14972,15028                 
 L_II_MDCRS                 Local  14847    L(4)            4           scalar                    14925,14937,15089                 
 L_INIT                     Dummy  14694    L(4)            4           scalar   ARG,INOUT        14857                             
 L_OPERATIONAL              Dummy  14694    L(4)            4           scalar   ARG,INOUT        15922,15989                       
 L_PRINT                    Local  14843    L(4)            4           scalar                    14921,14991,14992,14999,15000,1500
                                                                                                  8,15009,15016,15017,15032,15033,15
                                                                                                  045,15058,15079,15080,15091,15092,
                                                                                                  15111,15112,15139,15140,15153,1515
                                                                                                  4,15171,15172,15190,15353,15364,15
                                                                                                  365,15375,15376,15387,15388,15405,
                                                                                                  15413,15414,15441,15452,15478,1549
                                                                                                  6,15497,15517,15518,15547,15548,15
                                                                                                  574,15653,15662,15678,15680,15712,
                                                                                                  15716,15720,15725,15730,15736,1574
                                                                                                  1,15746,15750,15751,15766,15838   
 MAXFLT                     Dummy  14693    I(4)            4           scalar   ARG,INOUT        14742,14743,14744                 
 MAX_REPS                   Dummy  14686    I(4)            4           scalar   ARG,INOUT        14704,14710,14711,14712,14713,1471

Page 357         Source Listing                  GRCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  4,14715,14716,14717,14718,14719,14
                                                                                                  720,14721,14722,14723,14724,14725,
                                                                                                  14726,14727,14728,14729,14730,1473
                                                                                                  1,14735                           
 MM                         Local  14740    I(4)            4           scalar                    15099,15100,15101,15102,15103,1510
                                                                                                  5,15420,15421,15422,15423,15424,15
                                                                                                  426,15458,15459,15460,15461,15462,
                                                                                                  15464,15484,15485,15486,15487,1548
                                                                                                  8,15490,15503,15504,15505,15506,15
                                                                                                  507,15509,15524,15525,15526,15527,
                                                                                                  15528,15530,15554,15555,15556,1555
                                                                                                  7,15558,15560,15952,15953,15954,15
                                                                                                  956,15966,15967,15968,15970       
 NAC                        Local  14776    I(4)            4           scalar                    15055,15056,15187,15188,15571,1557
                                                                                                  2                                 
 NBADTEMP                   Dummy  14691    I(4)            4           scalar   ARG,INOUT        14758,15055                       
 NBLKTEMP                   Dummy  14692    I(4)            4           scalar   ARG,INOUT        14760,15187                       
 NBLKWIND                   Dummy  14692    I(4)            4           scalar   ARG,INOUT        14759,15571                       
 NREP                       Local  14777    I(4)            4     1     5                         14858,15878,15983,15999,16015     
 NUMREPS                    Dummy  14686    I(4)            4           scalar   ARG,INOUT        14919,15774,15835,16088           
 NWHOL_REG                  Dummy  14693    I(4)            4     2     0        ARG,INOUT        14887,15102,15953,15954,15956     
 NWIND_REG                  Dummy  14693    I(4)            4     2     0        ARG,INOUT        14888,15423,15461,15487,15506,1552
                                                                                                  7,15557,15967,15968,15970         
 N_BAD_ALT                  Local  14784    I(4)            4     1     5                         14864,15013,16024                 
 N_BAD_DIR                  Local  14794    I(4)            4     1     5                         14873,15416,16042                 
 N_BAD_MOIST                Local  14801    I(4)            4     1     5                         14880,15722,15727,15733,15738,1574
                                                                                                  3,16052                           
 N_BAD_POS                  Local  14780    I(4)            4     1     5                         14860,14994,15002,16022           
 N_BAD_REP                  Local  14803    I(4)            4     1     5                         14882,15916,16034                 
 N_BAD_SPD                  Local  14799    I(4)            4     1     5                         14878,15499,15550,16046           
 N_BAD_TEMP                 Local  14790    I(4)            4     1     5                         14869,15156,15174,16030           
 N_BAD_UAL                  Local  14786    I(4)            4     1     5                         14866,15035,16028                 
 N_CALM_SPD                 Local  14798    I(4)            4     1     5                         14877,15520,16048                 
 N_COLD_TEMP                Local  14791    I(4)            4     1     5                         14870,15145,16032                 
 N_INC_ALT                  Local  14785    I(4)            4     1     5                         14865,15019,16026                 
 N_INC_DIR                  Local  14795    I(4)            4     1     5                         14874,15454,16044                 
 N_INC_SPD                  Local  14797    I(4)            4     1     5                         14876,15480,16050                 
 N_LIST_TEMP                Local  14787    I(4)            4     1     5                         14867,15192,16056                 
 N_LIST_WIND                Local  14792    I(4)            4     1     5                         14871,15581,16058                 
 N_MIS_DIR                  Local  14793    I(4)            4     1     5                         14872,15407,16064                 
 N_MIS_MOIST                Local  14800    I(4)            4     1     5                         14879,15655,15664,16068           
 N_MIS_SPD                  Local  14796    I(4)            4     1     5                         14875,15443,16066                 
 N_MIS_TEMP                 Local  14789    I(4)            4     1     5                         14868,15047,16062                 
 N_SUS_ALT                  Local  14783    I(4)            4     1     5                         14863,15390,16078                 
 N_SUS_LAT                  Local  14781    I(4)            4     1     5                         14861,15367,16074                 
 N_SUS_LON                  Local  14782    I(4)            4     1     5                         14862,15378,16076                 
 N_SUS_MOIST                Local  14802    I(4)            4     1     5                         14881,15754,16080                 
 N_SUS_TIME                 Local  14779    I(4)            4     1     5                         14859,15355,16072                 
 N_WHOLE_TEMP               Local  14788    I(4)            4     1     5                         14883,15095,15117,16038           
 OB_DIR                     Dummy  14688    R(4)            4     1     0        ARG,INOUT        15138,15403,15412,15414,15476,1551
                                                                                                  5,15785,15794,15803,15932         
 OB_Q                       Dummy  14688    R(4)            4     1     0        ARG,INOUT        15647,15659,15749,15784,15793,1580
                                                                                                  2,15931                           
 OB_SPD                     Dummy  14688    R(4)            4     1     0        ARG,INOUT        15137,15439,15495,15514,15546,1578
                                                                                                  6,15795,15804,15933               

Page 358         Source Listing                  GRCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 OB_T                       Dummy  14688    R(4)            4     1     0        ARG,INOUT        15031,15043,15078,15090,15136,1515
                                                                                                  1,15152,15170,15695,15783,15792,15
                                                                                                  801,15930                         
 P2HT_QC                    Subr   14978                                                          14978                             
 PRES                       Dummy  14688    R(4)            4     1     0        ARG,INOUT        14978,15007,15010,15699,15782,1579
                                                                                                  1,15800,15929                     
 QS                         Local  14815    R(4)            4           scalar                    15699,15702,15745,15749,15752     
 T                          Local  14813    R(4)            4           scalar                    15695,15697                       
 TMAX                       Local  14807    R(4)            4           scalar                    15165,15166,15170,15172           
 TMIN                       Local  14808    R(4)            4           scalar                    15167,15168,15169,15170,15172     
 T_PRCN                     Dummy  14688    R(4)            4     1     0        ARG,INOUT        15093,15783,15792,15801,15930     
 WMAX                       Local  14809    R(4)            4           scalar                    15537,15539,15541,15543,15545,1554
                                                                                                  6,15548                           
 XIV_D                      Dummy  14689    R(4)            4     1     0        ARG,INOUT        15785,15794,15803,15932           
 XIV_Q                      Dummy  14689    R(4)            4     1     0        ARG,INOUT        15784,15793,15802,15931           
 XIV_S                      Dummy  14689    R(4)            4     1     0        ARG,INOUT        15786,15795,15804,15933           
 XIV_T                      Dummy  14689    R(4)            4     1     0        ARG,INOUT        15783,15792,15801,15930           

Page 359         Source Listing                  GRCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  16093 c
  16094 c ###################################################################
  16095 c                            subroutine poschek_qc
  16096 c ###################################################################
  16097 c   
  16098       subroutine poschek_qc(numreps,max_reps,indx,csort,imiss,amiss
  16099      $,          idt_updn,c_acftreg,c_acftid,cidmiss,c_qc,cdtg_an
  16100      $,          alat,alon,pres,ht_ft,t_prcn,ob_t,ob_q,ob_dir,ob_spd
  16101      $,          xiv_t,xiv_q,xiv_d,xiv_s
  16102      $,          idt,itype,ichk_t,ichk_q,ichk_d,ichk_s
  16103      $,          kflight,maxflt,nobs_flt,iobs_flt,kbadtot,io8,io35
  16104      $,          l_operational,l_init)
  16105 c
  16106 c     Check near duplicate reports with different positions/altitudes/times
  16107 c     and pick the best one
  16108 c     Also, look for redundant data and reject it
  16109 c
  16110       implicit none
  16111 c
  16112 c Declaration statements
  16113 c ----------------------
  16114       integer      max_reps            ! maximum number of reports
  16115 c
  16116       character*11 c_qc(max_reps)      ! internal qc flags
  16117 c
  16118 c     Data arrays
  16119 c     -----------
  16120       character*10 cdtg_an             ! date time group for analysis
  16121       integer      numreps             ! actual number of reports
  16122       integer      itype(max_reps)     ! type of aircraft data
  16123       integer      idt(max_reps)       ! time in seconds to analysis time 
  16124       character*8  c_acftreg(max_reps) ! aircraft registration (tail) number
  16125       character*9  c_acftid(max_reps)  ! aircraft flight number
  16126       real*8       alat(max_reps)      ! latitude
  16127      $,            alon(max_reps)      ! longitude
  16128       real         pres(max_reps)      ! pressure
  16129      $,            ht_ft(max_reps)     ! height in feet
  16130       real         t_prcn(max_reps)    ! temperature precision
  16131       real         ob_t(max_reps)      ! temperature
  16132      $,            ob_q(max_reps)      ! specific humidity
  16133      $,            ob_dir(max_reps)    ! wind direction
  16134      $,            ob_spd(max_reps)    ! wind speed
  16135       real         xiv_t(max_reps)     ! temperature innovation (ob - bk)
  16136      $,            xiv_q(max_reps)     ! specific humidity innovation (ob - bk)
  16137      $,            xiv_d(max_reps)     ! wind direction innovation (ob - bk)
  16138      $,            xiv_s(max_reps)     ! wind speed innovation (ob - bk)
  16139       integer      ichk_t(max_reps)    ! NRL QC flag for temperature ob
  16140      $,            ichk_q(max_reps)    ! NRL QC flag for specific humidity ob
  16141      $,            ichk_d(max_reps)    ! NRL QC flag for wind direction ob
  16142      $,            ichk_s(max_reps)    ! NRL QC flag for wind speed ob
  16143       character*25 csort(max_reps)     ! sort variable    
  16144 c
  16145 c     Pointers
  16146 c     --------
  16147       integer      indx(max_reps)      ! pointer index for good reports
  16148 c
  16149 c     Functions

Page 360         Source Listing                  POSCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  16150 c     ---------
  16151       character*16 c_insty_ob          ! function to convert integer instrument 
  16152                                        !   type to character instrument type
  16153       integer      insty_ob_fun        ! function to convert character
  16154                                        !   instrument type to integer
  16155       real         gcirc_qc            ! function to compute great circle distances
  16156 c
  16157 c     Flight statistics
  16158 c     -----------------
  16159       integer      maxflt              ! max number of flights allowed
  16160       integer      nobs_flt(maxflt)    ! number of reports per flight
  16161      $,            iobs_flt(maxflt)    ! index for first report in each flight
  16162      $,            kflight             ! number of flights in dataset
  16163       integer      istart              ! index for 1st rep in current flight 
  16164      $,            iistart             ! index from pointer array for istart
  16165      $,            iend                ! index for last rep in current flight
  16166      $,            iiend               ! index from pointer array for iend
  16167 c
  16168 c     Counters
  16169 c     --------
  16170       integer      ninc_xtra(5)        ! number of redundant reports
  16171      $,            ninc_way(5)         ! number of duplicate reports with waypoint errors
  16172      $,            ninc_alt(5)         ! number of duplicate reports with altitude errors
  16173      $,            ninc_stk(5)         ! number of reports with stuck times
  16174      $,            ninc_time(5)        ! number of reports with stuck times
  16175      $,            ninc_avg(5)         ! number of reports with averaged position or time
  16176      $,            ninc_bad(5)         ! number of reports with inconsistent positions
  16177       integer      kbad(5)             ! counter for number of bad reports
  16178      $,            kbadtot             ! counter for total number of bad reports
  16179 ccccdak      integer      nrep_Ac             ! number of acars reports considered
  16180       integer      nrep_Ac             ! number of tamdar reports considered
  16181      $,            nrep_Md             ! number of mdcrs reports considered
  16182      $,            nrep_Ma             ! number of manual airep reports considered
  16183      $,            nrep_Ar             ! number of airep reports considered
  16184      $,            nrep_Am             ! number of amdar reports considered
  16185 ccccdak      integer      ninc_Ac             ! number of acars reports rejected
  16186       integer      ninc_Ac             ! number of tamdar reports rejected
  16187      $,            ninc_Md             ! number of mdcrs reports rejected
  16188      $,            ninc_Ma             ! number of manual airep reports rejected
  16189      $,            ninc_Ar             ! number of airep reports rejected
  16190      $,            ninc_Am             ! number of amdar reports rejected
  16191 c
  16192 c     Instrument types
  16193 c     ----------------
  16194 ccccdak      integer      i_acars             ! instrument type for acars
  16195       integer      i_acars             ! instrument type for tamdar
  16196 ccccdak     $,            i_acars_lvl         ! instrument type for acars--level flt
  16197      $,            i_acars_lvl         ! instrument type for tamdar--level flt
  16198 ccccdak     $,            i_acars_asc         ! instrument type for acars--ascent
  16199      $,            i_acars_asc         ! instrument type for tamdar--ascent
  16200 ccccdak     $,            i_acars_des         ! instrument type for acars--descent
  16201      $,            i_acars_des         ! instrument type for tamdar--descent
  16202      $,            i_mdcrs             ! instrument type for mdcrs
  16203      $,            i_mdcrs_lvl         ! instrument type for mdcrs--level flt
  16204      $,            i_mdcrs_asc         ! instrument type for mdcrs--ascent
  16205      $,            i_mdcrs_des         ! instrument type for mdcrs--descent
  16206      $,            i_man_airep         ! instrument type for manual aireps

Page 361         Source Listing                  POSCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  16207      $,            i_man_Yairep        ! instrument type for manual aireps (YRXX)
  16208      $,            i_airep             ! instrument type for airep
  16209      $,            i_airep_lvl         ! instrument type for airep--level flt
  16210      $,            i_airep_asc         ! instrument type for airep--ascent
  16211      $,            i_airep_des         ! instrument type for airep--descent
  16212      $,            i_amdar             ! instrument type for amdar
  16213      $,            i_amdar_lvl         ! instrument type for amdar--level flt
  16214      $,            i_amdar_asc         ! instrument type for amdar--ascent
  16215      $,            i_amdar_des         ! instrument type for amdar--descent
  16216 c
  16217 c     Other variables
  16218 c     ---------------
  16219       integer      io8                 ! i/o unit number for log file
  16220       integer      io35                ! i/o unit number for position check
  16221 c
  16222       real         amiss               ! real missing value flag
  16223 c
  16224       integer      iob,kk              ! do loop indices 
  16225      $,            ii                  ! index pointing to current report
  16226      $,            iim1                ! index pointing to previous report
  16227      $,            iim2                ! index pointing to 2nd report previous
  16228      $,            iip1                ! index pointing to following report
  16229      $,            knt1                ! counter used to define iim1 index
  16230      $,            knt2                ! counter used to define iim2 index
  16231       integer      iht0                ! integer ht_ft(ii)
  16232      $,            ihtm1               ! integer ht_ft(iim1)
  16233       integer      ihtdif0             ! height difference (current - previous)
  16234       integer      imiss               ! integer missing value flag
  16235      $,            idt_dif             ! time difference (current  - previous report)
  16236      $,            idt_difp1           ! time difference (following  - current report)
  16237      $,            idt_tot             ! time between iim2 and iip1 points
  16238       integer      idt_updn            ! time difference to check ascents/descents
  16239      $,            idt_stk             ! time clock is stuck at
  16240 c
  16241       integer      ktype               ! ob type
  16242 c
  16243       real*8       alat_dif            ! difference in latitude
  16244      $,            alon0               ! longitude at point ii
  16245      $,            alonm2              ! longitude at point iim2
  16246      $,            alonp1              ! longitude at point iip1
  16247      $,            alon_dif            ! difference in longitude
  16248       real         diff0               ! difference between points ii and iim1
  16249      $,            diffm1              ! difference between points iim1 and iip1
  16250      $,            difdir              ! direction difference
  16251       real*8       alat_est            ! estimated latitude
  16252      $,            alon_est            ! estimated longitude
  16253       real         time_est            ! estimated time
  16254      $,            dist_tot            ! estimated distance between iim2 and iip1 points
  16255      $,            dist_ii             ! estimated distance between "est" and ii points
  16256      $,            dist_iim1           ! estimated distance between "est" and iim1 points
  16257 c
  16258       character*8  cidmiss             ! missing value flag for flight number
  16259 c
  16260 c     Switches
  16261 c     --------
  16262       logical      l_print             ! true for printing two reports used in check
  16263 c

Page 362         Source Listing                  POSCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  16264       logical      l_init              ! initialize counters if true
  16265      $,            stuck               ! true if stuck clock found
  16266      $,            l_operational       ! true if operational mode used
  16267 c
  16268 c # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  16269 c
  16270 c Initialize aircraft data types
  16271 c ------------------------------
  16272       i_acars      = insty_ob_fun('acars')
  16273       i_acars_lvl  = insty_ob_fun('acars_lvl') 
  16274       i_acars_asc  = insty_ob_fun('acars_asc') 
  16275       i_acars_des  = insty_ob_fun('acars_des') 
  16276       i_mdcrs      = insty_ob_fun('mdcrs')
  16277       i_mdcrs_lvl  = insty_ob_fun('mdcrs_lvl') 
  16278       i_mdcrs_asc  = insty_ob_fun('mdcrs_asc') 
  16279       i_mdcrs_des  = insty_ob_fun('mdcrs_des')
  16280       i_man_airep  = insty_ob_fun('man-airep') 
  16281       i_man_Yairep = insty_ob_fun('man-Yairep') 
  16282       i_airep      = insty_ob_fun('airep')
  16283       i_airep_lvl  = insty_ob_fun('airep_lvl')
  16284       i_airep_asc  = insty_ob_fun('airep_asc')
  16285       i_airep_des  = insty_ob_fun('airep_des')
  16286       i_amdar      = insty_ob_fun('amdar')
  16287       i_amdar_lvl  = insty_ob_fun('amdar_lvl')
  16288       i_amdar_asc  = insty_ob_fun('amdar_asc')
  16289       i_amdar_des  = insty_ob_fun('amdar_des')
  16290 c
  16291 c Initialize counters
  16292 c -------------------
  16293       if(l_init) then
  16294         ninc_xtra = 0
  16295         ninc_way = 0
  16296         ninc_alt = 0
  16297         ninc_stk = 0
  16298         ninc_time = 0
  16299         ninc_avg = 0
  16300         ninc_bad = 0
  16301         nrep_Ac = 0
  16302         nrep_Md = 0
  16303         nrep_Ma = 0
  16304         nrep_Ar = 0
  16305         nrep_Am = 0
  16306         ninc_Ac = 0
  16307         ninc_Md = 0
  16308         ninc_Ma = 0
  16309         ninc_Ar = 0
  16310         ninc_Am = 0
  16311       endif
  16312 c
  16313 c Begin loop over flights
  16314 c -----------------------
  16315       do kk = 1,kflight
  16316 c
  16317 c Initialize variables
  16318 c --------------------
  16319         stuck = .false.
  16320         istart = iobs_flt(kk)

Page 363         Source Listing                  POSCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  16321         iistart = indx(istart)
  16322         iend = iobs_flt(kk) + nobs_flt(kk) - 1
  16323         iiend = indx(iend)
  16324         l_print = .false.
  16325 c
  16326 c Check two-report manAIREP flights 
  16327 c ---------------------------------
  16328         if(nobs_flt(kk).eq.2.and.
  16329      $     (itype(iistart).eq.i_man_airep.or.
  16330      $      itype(iistart).eq.i_man_Yairep).and.
  16331      $     (itype(iiend).eq.i_man_airep.or.
  16332      $      itype(iiend).eq.i_man_Yairep).and.
  16333      $     abs(ob_t(iistart)-ob_t(iiend)).lt.1.25.and.
  16334      $     abs(ob_dir(iistart)-ob_dir(iiend)).lt.10.5.and.
  16335      $     abs(ob_spd(iistart)-ob_spd(iiend)).lt.1.25) then
  16336 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  16337 c
  16338 c         Check for position discrepancies
  16339 c         --------------------------------
  16340           if((abs(alat(iistart)-alat(iiend)).gt.0.125.or.
  16341      $        abs(alon(iistart)-alon(iiend)).gt.0.125).and.
  16342      $       abs(ht_ft(iistart)-ht_ft(iiend)).lt.1.5.and.
  16343      $       idt(iistart).eq.idt(iiend)) then
  16344 c
  16345             dist_tot = gcirc_qc(alat(iistart),alon(iistart),
  16346      $                          alat(iiend),  alon(iiend))
  16347             dist_tot = dist_tot / 1000.
  16348 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  16349 c
  16350             l_print = .true.
  16351             if(l_print) then
  16352               write(io8,*)
  16353               write(io8,*) 'Discrepancy in position for 2-rep flight'
  16354               write(io8,*) 'dist_tot = ',dist_tot
  16355             endif
  16356 c
  16357 c           If points are close together, average the position
  16358 c           --------------------------------------------------
  16359             if(dist_tot.lt.115.0) then
  16360               if(l_print) then
  16361                 write(io8,*) 'points close--averaging'
  16362               endif
  16363 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  16364               alat(iistart) = (alat(iistart)+alat(iiend))/2.0
  16365               alon(iistart) = (alon(iistart)+alon(iiend))/2.0
  16366 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  16367               c_qc(iistart)(3:4) = 'RR'
  16368               c_qc(iiend)(1:1) = 'W'
  16369               c_qc(iiend)(3:4) = 'BB'
  16370 c
  16371             else
  16372               c_qc(iistart)(1:1) = 'W'
  16373               c_qc(iistart)(3:4) = 'BB'
  16374               c_qc(iiend)(1:1) = 'W'
  16375               c_qc(iiend)(3:4) = 'BB'
  16376             endif
  16377 c 

Page 364         Source Listing                  POSCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  16378 c         Check for altitude discrepancies
  16379 c         --------------------------------
  16380 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  16381           elseif((abs(alat(iistart)-alat(iiend)).lt.0.125.or.
  16382      $            abs(alon(iistart)-alon(iiend)).lt.0.125).and.
  16383 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  16384      $           abs(ht_ft(iistart)-ht_ft(iiend)).gt.1000..and.
  16385      $           idt(iistart).eq.idt(iiend)) then
  16386 c
  16387             l_print = .false.
  16388             if(l_print) then
  16389               write(io8,*)
  16390               write(io8,*) 'Discrepancy in altitude for 2-rep flight'
  16391             endif
  16392 c
  16393             c_qc(iistart)(1:1) = 'A'
  16394             c_qc(iistart)(5:5) = 'B'
  16395             c_qc(iiend)(1:1) = 'A'
  16396             c_qc(iiend)(5:5) = 'B'
  16397 c
  16398 c         Check for time discrepancies
  16399 c         ----------------------------
  16400           elseif(idt(iistart).ne.idt(iiend).and.
  16401 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  16402      $           abs(alat(iistart)-alat(iiend)).lt.0.125.and.
  16403      $           abs(alon(iistart)-alon(iiend)).lt.0.125.and.
  16404 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  16405      $           abs(ht_ft(iistart)-ht_ft(iiend)).lt.50.5) then
  16406 c
  16407             l_print = .true.
  16408             if(l_print) then
  16409               write(io8,*)
  16410               write(io8,*) 'Discrepancy in time for 2-rep flight'
  16411             endif
  16412 c
  16413 c           If points are close in time, average times
  16414 c           ------------------------------------------
  16415             if(abs(idt(iistart)-idt(iiend)).lt.1800.0) then
  16416 c
  16417               if(l_print) then
  16418                 write(io8,*) 'points close--averaging'
  16419               endif
  16420 c
  16421               idt(iiend) = (idt(iiend)+idt(iistart))/2
  16422               c_qc(iiend)(2:2) = 'R'
  16423               c_qc(iistart)(1:1) = 't'
  16424               c_qc(iistart)(2:2) = 'B'
  16425 c
  16426 c           Otherwise reject both points
  16427 c           ----------------------------
  16428             else
  16429               c_qc(iistart)(1:1) = 't'
  16430               c_qc(iistart)(2:2) = 'B'
  16431               c_qc(iiend)(1:1) = 't'
  16432               c_qc(iiend)(2:2) = 'B'
  16433             endif
  16434           endif

Page 365         Source Listing                  POSCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  16435 c
  16436 c         Print both reports if desired
  16437 c         -----------------------------
  16438           if(l_print) then
  16439             iim1 = iistart
  16440             ii = iiend
  16441             write(io8,8002) kk,iim1
  16442      x,            c_insty_ob(itype(iim1))
  16443      x,            c_acftreg(iim1),c_acftid(iim1)
  16444      x,            idt(iim1),alat(iim1),alon(iim1)
  16445      x,            pres(iim1),ht_ft(iim1)
  16446      x,            t_prcn(iim1),ob_t(iim1),xiv_t(iim1),ichk_t(iim1)
  16447      x,            ob_q(iim1),xiv_q(iim1),ichk_q(iim1)
  16448      x,            ob_dir(iim1),xiv_d(iim1),ichk_d(iim1)
  16449      x,            ob_spd(iim1),xiv_s(iim1),ichk_s(iim1)
  16450      x,            c_qc(iim1)
  16451             write(io8,8002) kk,ii,c_insty_ob(itype(ii))
  16452      x,            c_acftreg(ii),c_acftid(ii)
  16453      x,            idt(ii),alat(ii),alon(ii)
  16454      x,            pres(ii),ht_ft(ii)
  16455      x,            t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
  16456      x,            ob_q(ii),xiv_q(ii),ichk_q(ii)
  16457      x,            ob_dir(ii),xiv_d(ii),ichk_d(ii)
  16458      x,            ob_spd(ii),xiv_s(ii),ichk_s(ii)
  16459      x,            c_qc(ii)
  16460  8002       format(i4,1x,i6,1x,a8,1x,a8,1x,a9,1x,i7,1x,2f11.5,1x
  16461      x,            f8.1,1x,f7.0
  16462      x,            1x,f5.2,4(2(1x,f8.2),1x,i5),1x,'!',a11,'!')
  16463           endif
  16464 c
  16465 c Otherwise, examine only "real" flights with at least three reports
  16466 c ------------------------------------------------------------------
  16467         elseif(c_acftid(iistart)(1:8).ne.cidmiss(1:8).and.
  16468      $         nobs_flt(kk).ge.3) then
  16469 c
  16470 c Begin loop over reports
  16471 c -----------------------
  16472           do iob = istart+1,iend
  16473             l_print = .false.
  16474 c
  16475             ii   = indx(iob)
  16476 c
  16477 c           Compute ii+1 index
  16478 c           ------------------
  16479             if(iob.lt.iend) then
  16480               iip1 = indx(iob+1)
  16481             else
  16482               iip1 = 0
  16483             endif
  16484 c
  16485 c           Compute ii-1 index
  16486 c           ------------------
  16487             knt1 = iob - 1
  16488  10         if(knt1.ge.istart) then
  16489               iim1 = indx(knt1)
  16490               if(c_qc(iim1)(1:1).eq.'r'.or.
  16491      $           c_qc(iim1)(1:1).eq.'W'.or.

Page 366         Source Listing                  POSCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  16492      $           c_qc(iim1)(1:1).eq.'A'.or.
  16493      $           c_qc(iim1)(1:1).eq.'t'.or.
  16494      $           c_qc(iim1)(2:2).eq.'K'.or.
  16495      $           c_qc(iim1)(5:5).eq.'B') then
  16496                 knt1 = knt1 - 1
  16497                 goto 10
  16498               endif
  16499             else
  16500               iim1 = 0
  16501             endif
  16502 c
  16503 c           Compute ii-2 index
  16504 c           ------------------
  16505             knt2 = knt1 - 1
  16506  20         if(knt2.ge.istart) then
  16507               iim2 = indx(knt2)
  16508               if(c_qc(iim2)(1:1).eq.'r'.or.
  16509      $           c_qc(iim2)(1:1).eq.'W'.or.
  16510      $           c_qc(iim2)(1:1).eq.'A'.or.
  16511      $           c_qc(iim2)(2:2).eq.'K'.or.
  16512      $           c_qc(iim2)(2:2).eq.'B'.or.
  16513      $           c_qc(iim2)(5:5).eq.'B') then
  16514                 knt2 = knt2 - 1
  16515                 goto 20
  16516               endif
  16517             else
  16518               iim2 = 0
  16519             endif
  16520 c
  16521 c           Continue only if iim1 is valid
  16522 c           ------------------------------
  16523             if(iim1.ne.0) then
  16524 c
  16525 c             Compute height and time differences for iim1 report
  16526 c             ---------------------------------------------------
  16527               if(ht_ft(ii).ne.amiss) then
  16528                 iht0 = nint(ht_ft(ii)/100.) * 100
  16529               else
  16530                 iht0 = imiss
  16531               endif
  16532 c
  16533               if(ht_ft(iim1).ne.amiss) then
  16534                 ihtm1 = nint(ht_ft(iim1)/100.) * 100
  16535               else
  16536                 ihtm1 = imiss
  16537               endif
  16538 c
  16539               if(ht_ft(ii).ne.amiss.and.ht_ft(iim1).ne.amiss) then
  16540                 ihtdif0 = abs(iht0 - ihtm1)
  16541               else
  16542                 ihtdif0 = imiss
  16543               endif
  16544 c
  16545               idt_dif = abs(idt(ii) - idt(iim1))
  16546 c
  16547 c             Compute magnitude of direction difference
  16548 c             (constrain to be less than 180 deg

Page 367         Source Listing                  POSCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  16549 c             -----------------------------------------
  16550               if(ob_dir(ii).eq.amiss.or.
  16551      $           ob_dir(iim1).eq.amiss) then
  16552                 difdir = amiss
  16553               else
  16554                 difdir = abs(ob_dir(iim1)-ob_dir(ii))
  16555                 if(difdir.gt.180) difdir = 360. - difdir
  16556               endif
  16557 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  16558 c
  16559 c             Discrepancies in position
  16560 c             -------------------------
  16561               if(idt_dif.eq.0.and.
  16562      $           (abs(alat(ii)-alat(iim1)).ge.0.5.or.
  16563      $            abs(alon(ii)-alon(iim1)).ge.0.5) .and.
  16564 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  16565      $           abs(ht_ft(ii)-ht_ft(iim1)).lt.1.5) then
  16566 c
  16567 c               Check for short segments with stuck clock
  16568 c               -----------------------------------------
  16569                 if(iim2.ne.0) then
  16570                   if(idt(iim1).eq.idt(ii).and.
  16571      $               idt(iim2).eq.idt(ii)) then
  16572                     c_qc(iim2)(2:2) = 'K'
  16573                     c_qc(iim1)(2:2) = 'K'
  16574                     c_qc(ii)(2:2) = 'K'
  16575                   endif
  16576                 endif
  16577 c
  16578                 if(iip1.ne.0) then
  16579                   if(idt(iim1).eq.idt(ii).and.
  16580      $               idt(iip1).eq.idt(ii)) then
  16581                     c_qc(iip1)(2:2) = 'K'
  16582                     c_qc(iim1)(2:2) = 'K'
  16583                     c_qc(ii)(2:2) = 'K'
  16584                   endif
  16585                 endif
  16586 c
  16587                 if(c_qc(ii)(2:2).eq.'K') then
  16588                   stuck = .true.
  16589                   idt_stk = idt(ii)
  16590                   l_print = .true.
  16591                   if(l_print) then
  16592                     write(io8,*)
  16593                     write(io8,*) 'Discrepancy in position'
  16594                     write(io8,*) 'Stuck clock found'
  16595                   endif
  16596                 endif
  16597               endif
  16598 c
  16599 c             Exclude reports diagnosed as stuck from remaining checks
  16600 c             --------------------------------------------------------
  16601               if(c_qc(ii)(2:2).eq.'K') then
  16602 c
  16603 c             United flights with 2000' as lowest valid alt
  16604 c             Pressure/altitude on ground invalid
  16605 c             Flag if temperatures and altitudes are inconsistent!

Page 368         Source Listing                  POSCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  16606 c             Time-stamp the test so it only applies to the 1996 dataset
  16607 c             ----------------------------------------------------------
  16608               elseif(cdtg_an.lt.'1998010100'.and.
  16609      $               iht0.eq.2000.and.
  16610      $               idt_dif.lt.300.and.
  16611      $               ihtdif0.gt.6000.and.ihtdif0.ne.imiss.and.
  16612      $               ob_t(iim1).gt.ob_t(ii)) then
  16613 c
  16614                 l_print = .true.
  16615                 if(l_print) then
  16616                   write(io8,*)
  16617                   write(io8,*) 'Bad altitude for first point'
  16618                   write(io8,*) 'ht_ft(',ii,') = ',ht_ft(ii)
  16619                   write(io8,*) 'ht_ft(',iim1,') = ',ht_ft(iim1)
  16620                 endif
  16621                 c_qc(iim1)(5:5) = 'B'
  16622 c
  16623               elseif(ihtm1.eq.2000.and.
  16624      $               idt_dif.lt.300.and.
  16625      $               ihtdif0.gt.6000.and.ihtdif0.ne.imiss.and.
  16626      $               ob_t(ii).gt.ob_t(iim1)) then
  16627                 l_print = .true.
  16628                 if(l_print) then
  16629                   write(io8,*)
  16630                   write(io8,*) 'Bad altitude for last point'
  16631                   write(io8,*) 'ht_ft(',ii,') = ',ht_ft(ii)
  16632                   write(io8,*) 'ht_ft(',iim1,') = ',ht_ft(iim1)
  16633                 endif
  16634                 c_qc(ii)(5:5) = 'B'
  16635 c
  16636 c             Multiple values at same altitude at low altitudes
  16637 c             Save only one
  16638 c             -------------------------------------------------
  16639               elseif(iht0.lt.8000.and.
  16640      $               idt_dif.le.60.and.
  16641      $               ihtdif0.lt.2) then
  16642 c
  16643                 if(iip1.ne.0) then
  16644                   idt_difp1 = abs(idt(ii)-idt(iip1))
  16645                 else
  16646                   idt_difp1 = imiss
  16647                 endif
  16648 c
  16649 c               Save newer report if at beginning of flight
  16650 c               -------------------------------------------
  16651                 if(idt(iim1).ne.idt(ii).and.
  16652      $             (iim1.eq.iistart.or.
  16653      $              (idt_difp1.ne.imiss.and.idt_difp1.le.idt_updn)))then
  16654                   l_print = .false.
  16655                   if(l_print) then
  16656                     write(io8,*) 
  16657                     write(io8,*) 'Multiple values at same altitude'
  16658                     write(io8,*) 'Saving newer report'
  16659                   endif
  16660                   c_qc(iim1)(1:1) = 'r'
  16661 c
  16662 c               Save report nearer to next report, if available

Page 369         Source Listing                  POSCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  16663 c               Otherwise, save report with smallest temperature or
  16664 c               windspeed difference w.r.t. next report
  16665 c               ---------------------------------------------------
  16666                 elseif(iip1.ne.0) then
  16667 c
  16668 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  16669                   if(alat(ii).ne.alat(iim1).or.
  16670      $               alon(ii).ne.alon(iim1)) then
  16671                     diffm1 = gcirc_qc(alat(iim1),alon(iim1),
  16672      $                                alat(iip1),alon(iip1))
  16673                     diffm1 = diffm1 / 1000.
  16674                     diff0 = gcirc_qc(alat(ii),alon(ii),
  16675      $                               alat(iip1),alon(iip1))
  16676                     diff0 = diff0 / 1000.
  16677 c
  16678 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  16679                   elseif(ob_t(ii).ne.ob_t(iim1)) then
  16680                     diffm1 = abs(ob_t(iim1)-ob_t(iip1))
  16681                     diff0 = abs(ob_t(ii)-ob_t(iip1))
  16682 c
  16683                   elseif(ob_spd(ii).ne.ob_spd(iim1)) then
  16684                     diffm1 = abs(ob_spd(iim1)-ob_spd(iip1))
  16685                     diff0 = abs(ob_spd(ii)-ob_spd(iip1))
  16686 c
  16687                   else
  16688                     diffm1 = 1.0
  16689                     diff0 = 0.0
  16690                   endif
  16691 c
  16692                   if(diff0.lt.diffm1.or.ichk_s(iim1).eq.-10) then
  16693                     l_print = .false.
  16694                     if(l_print) then
  16695                       write(io8,*) 
  16696                       write(io8,*) 'Multiple values at same altitude'
  16697                       write(io8,*) 'Saving ii report'
  16698                     endif
  16699                     c_qc(iim1)(1:1) = 'r'
  16700 c
  16701                   elseif(diffm1.lt.diff0) then
  16702                     l_print = .false.
  16703                     if(l_print) then
  16704                       write(io8,*) 
  16705                       write(io8,*) 'Multiple values at same altitude'
  16706                       write(io8,*) 'Saving iim1 report'
  16707                     endif
  16708                     c_qc(ii)(1:1) = 'r'
  16709 c
  16710                   else
  16711                     l_print = .true.
  16712                     if(l_print) then
  16713                       write(io8,*) 
  16714                       write(io8,*) 'Multiple values at same altitude'
  16715                       write(io8,*) 'Differences should not be equal!'
  16716                     endif
  16717                   endif
  16718 c
  16719 c               If following report not available, drop current report

Page 370         Source Listing                  POSCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  16720 c               ------------------------------------------------------
  16721                 else
  16722                   l_print = .false.
  16723                   if(l_print) then
  16724                     write(io8,*) 
  16725                     write(io8,*) 'Multiple values at same altitude'
  16726                     write(io8,*) 'Following report not available'
  16727                   endif
  16728                   c_qc(ii)(1:1) = 'r'
  16729                 endif
  16730 c
  16731 c             Perform remaining checks only for manAIREP duplicates
  16732 c             -----------------------------------------------------
  16733               elseif((itype(ii).eq.i_man_airep.or.
  16734      $                itype(ii).eq.i_man_Yairep).and.
  16735      $               (itype(iim1).eq.i_man_airep.or.
  16736      $                itype(iim1).eq.i_man_Yairep).and.
  16737      $               (abs(ob_t(iim1)-ob_t(ii)).lt.1.25.or.
  16738      $                (ob_t(iim1).eq.amiss.and.ob_t(ii).ne.amiss).or.
  16739      $                (ob_t(iim1).ne.amiss.and.ob_t(ii).eq.amiss)).and.
  16740      $               (abs(difdir).lt.10.5.or.
  16741      $               (ob_dir(iim1).eq.amiss.and.ob_dir(ii).eq.amiss).or.
  16742      $               (ob_dir(iim1).eq.amiss.and.ob_dir(ii).ne.amiss).or.
  16743      $               (ob_dir(iim1).ne.amiss.and.ob_dir(ii).eq.amiss).or.
  16744      $               (ob_dir(iim1).lt.0.5.and.ob_dir(ii).lt.0.5).or.
  16745      $               (ob_dir(iim1).lt.0.5.and.difdir.gt.10.5).or.
  16746      $               (difdir.gt.10.5.and.ob_dir(ii).lt.0.5)).and.
  16747      $               (abs(ob_spd(iim1)-ob_spd(ii)).lt.1.25.or.
  16748      $               (ob_spd(iim1).eq.amiss.and.ob_spd(ii).eq.amiss).or.
  16749      $               (ob_spd(iim1).eq.amiss.and.ob_spd(ii).ne.amiss).or.
  16750      $               (ob_spd(iim1).ne.amiss.and.ob_spd(ii).eq.amiss).or.
  16751      $               (ob_spd(iim1).lt.0.05.and.ob_spd(ii).lt.0.05).or.
  16752      $               (ob_spd(iim1).lt.0.05.and.ob_spd(ii).gt.1.25).or.
  16753      $               (ob_spd(iim1).gt.1.25.and.ob_spd(ii).lt.0.05)))then
  16754 c
  16755 c               Check for position discrepancies
  16756 c               --------------------------------
  16757                 if(idt_dif.eq.0.and.
  16758 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  16759      $             (abs(alat(ii)-alat(iim1)).ge.0.125.or.
  16760      $              abs(alon(ii)-alon(iim1)).ge.0.125) .and.
  16761 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  16762      $             abs(ht_ft(ii)-ht_ft(iim1)).lt.1.5) then
  16763 c
  16764                   l_print = .true.
  16765                   if(l_print) then
  16766                     write(io8,*)
  16767                     write(io8,*) 'Discrepancy in position'
  16768                     write(io8,*) 'Waypoint error found'
  16769                   endif
  16770 c
  16771 c                 If ii and iim1 points are close together, average the position
  16772 c                 --------------------------------------------------------------
  16773                   dist_tot = gcirc_qc(alat(ii),alon(ii),
  16774      $                                alat(iim1),alon(iim1))
  16775                   dist_tot = dist_tot / 1000.
  16776 c

Page 371         Source Listing                  POSCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  16777                   if(dist_tot.lt.115.0) then
  16778                     if(l_print) then
  16779                       write(io8,*) 'points close--averaging'
  16780                     endif
  16781 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  16782                     alat(ii) = (alat(ii)+alat(iim1))/2.0
  16783                     alon(ii) = (alon(ii)+alon(iim1))/2.0
  16784 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  16785                     c_qc(ii)(3:4) = 'RR'
  16786                     c_qc(iim1)(1:1) = 'W'
  16787                     c_qc(iim1)(3:4) = 'BB'
  16788 c
  16789 c                 Otherwise, examine neighboring reports to decide which one to keep
  16790 c                 ------------------------------------------------------------------ 
  16791                   elseif(iim2.ne.0.and.iip1.ne.0) then
  16792 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  16793                     alat_est = (alat(iip1)-alat(iim2))
  16794      $                       / (idt(iip1)-idt(iim2))  
  16795      $                       * (idt(ii)-idt(iim2)) 
  16796      $                       + alat(iim2)               
  16797                     alon_est = (alon(iip1)-alon(iim2))
  16798      $                       / (idt(iip1)-idt(iim2))  
  16799      $                       * (idt(ii)-idt(iim2)) 
  16800      $                       + alon(iim2)
  16801 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  16802 c
  16803                     dist_tot = gcirc_qc(alat(iip1),alon(iip1),
  16804      $                                  alat(iim2),alon(iim2))
  16805                     dist_tot = dist_tot / 1000.
  16806                     dist_ii  = gcirc_qc(alat_est,alon_est,
  16807      $                                  alat(ii),alon(ii))
  16808                     dist_ii = dist_ii / 1000.
  16809                     dist_iim1= gcirc_qc(alat_est,alon_est,
  16810      $                                  alat(iim1),alon(iim1))
  16811                     dist_iim1 = dist_iim1 / 1000.
  16812 c
  16813                     if(l_print) then
  16814                       write(io8,*) 'Estimated position = ',
  16815      $                     alat_est,alon_est
  16816                       write(io8,*) 'Distances: iim2-iip1 = ',dist_tot
  16817                       write(io8,*) '           est-ii    = ',dist_ii
  16818                       write(io8,*) '           est-iim1  = ',dist_iim1
  16819                     endif
  16820 c                 
  16821 c                   If the neighboring reports are close enough together,
  16822 c                   choose the report that is closest to the interpolated point
  16823 c                   -----------------------------------------------------------
  16824                     if(dist_tot.lt.2500.0) then
  16825                       if(dist_ii.lt.dist_iim1) then
  16826                         c_qc(iim1)(1:1) = 'W'
  16827                         c_qc(iim1)(3:4) = 'BB'
  16828                       else
  16829                         c_qc(ii)(1:1) = 'W'
  16830                         c_qc(ii)(3:4) = 'BB'
  16831                       endif
  16832 c
  16833 c                   If the neighboring reports are too far apart,

Page 372         Source Listing                  POSCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  16834 c                   reject both reports
  16835 c                   ---------------------------------------------
  16836                     else
  16837                       c_qc(iim1)(1:1) = 'W'
  16838                       c_qc(iim1)(3:4) = 'BB'
  16839                       c_qc(ii)(1:1) = 'W'
  16840                       c_qc(ii)(3:4) = 'BB'
  16841                     endif
  16842 c
  16843 c                 If only iim2 point is available...
  16844 c                 ----------------------------------
  16845                   elseif(iim2.ne.0) then
  16846 c
  16847                     dist_tot = gcirc_qc(alat(iim1),alon(iim1),
  16848      $                                  alat(ii),alon(ii))
  16849                     dist_tot = dist_tot / 1000.
  16850                     dist_ii  = gcirc_qc(alat(iim2),alon(iim2),
  16851      $                                  alat(ii),alon(ii))
  16852                     dist_ii = dist_ii / 1000.
  16853                     dist_iim1= gcirc_qc(alat(iim2),alon(iim2),
  16854      $                                  alat(iim1),alon(iim1))
  16855                     dist_iim1 = dist_iim1 / 1000.
  16856                     if(l_print) 
  16857      $                write(io8,*) 'distances:',dist_ii,dist_iim1
  16858 c                 
  16859 c                   If ii point is close and iim1 point is far, choose ii point
  16860 c                   -----------------------------------------------------------
  16861                     if(abs(idt(ii)-idt(iim2)).le.5400.and.
  16862      $                 dist_ii.le.1500.0.and.dist_iim1.gt.1500.0) then
  16863                       if(l_print) then
  16864                         write(io8,*) 'iim1 point is too far away'
  16865                       endif
  16866                       c_qc(iim1)(1:1) = 'W'
  16867                       c_qc(iim1)(3:4) = 'BB'
  16868 c             
  16869 c                   If iim1 point is close and ii point is far, choose iim1 point
  16870 c                   -------------------------------------------------------------
  16871                     elseif(abs(idt(ii)-idt(iim2)).le.5400.and.
  16872      $                 dist_ii.gt.1500.0.and.dist_iim1.le.1500.0) then
  16873                       if(l_print) then
  16874                         write(io8,*) 'ii point is too far away'
  16875                       endif
  16876                       c_qc(ii)(1:1) = 'W'
  16877                       c_qc(ii)(3:4) = 'BB'
  16878 c
  16879 c                   Otherwise reject both points
  16880 c                   ----------------------------
  16881                     else
  16882                       if(l_print) then
  16883                         write(io8,*) 'cannot decide which point'
  16884                       endif
  16885                       c_qc(iim1)(1:1) = 'W'
  16886                       c_qc(iim1)(3:4) = 'BB'
  16887                       c_qc(ii)(1:1) = 'W'
  16888                       c_qc(ii)(3:4) = 'BB'
  16889                     endif
  16890 c

Page 373         Source Listing                  POSCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  16891 c                 If only iip1 point is available...
  16892 c                 ----------------------------------
  16893                   elseif(iip1.ne.0) then
  16894 c
  16895                     dist_tot = gcirc_qc(alat(iim1),alon(iim1),
  16896      $                                  alat(ii),alon(ii))
  16897                     dist_tot = dist_tot / 1000.
  16898                     dist_ii  = gcirc_qc(alat(iip1),alon(iip1),
  16899      $                                  alat(ii),alon(ii))
  16900                     dist_ii = dist_ii / 1000.
  16901                     dist_iim1= gcirc_qc(alat(iip1),alon(iip1),
  16902      $                                  alat(iim1),alon(iim1))
  16903                     dist_iim1 = dist_iim1 / 1000.
  16904                     if(l_print) 
  16905      $                write(io8,*) 'distances:',dist_ii,dist_iim1
  16906 c                
  16907 c                   If ii point is close and iim1 point is far, choose ii point
  16908 c                   -----------------------------------------------------------
  16909                     if(abs(idt(ii)-idt(iip1)).le.5400.and.
  16910      $                 dist_ii.le.1500.0.and.dist_iim1.gt.1500.0) then
  16911                       if(l_print) then
  16912                         write(io8,*) 'iim1 point is too far away'
  16913                       endif
  16914                       c_qc(iim1)(1:1) = 'W'
  16915                       c_qc(iim1)(3:4) = 'BB'
  16916 c
  16917 c                   If iim1 point is close and ii point is far, choose iim1 point
  16918 c                   -------------------------------------------------------------
  16919                     elseif(abs(idt(ii)-idt(iip1)).le.5400.and.
  16920      $                 dist_ii.gt.1500.0.and.dist_iim1.le.1500.0) then
  16921                       if(l_print) then
  16922                         write(io8,*) 'ii point is too far away'
  16923                       endif
  16924                       c_qc(ii)(1:1) = 'W'
  16925                       c_qc(ii)(3:4) = 'BB'
  16926 c
  16927 c                   Otherwise reject both points
  16928 c                   ----------------------------
  16929                     else
  16930                       if(l_print) then
  16931                         write(io8,*) 'cannot decide which point'
  16932                       endif
  16933                       c_qc(iim1)(1:1) = 'W'
  16934                       c_qc(iim1)(3:4) = 'BB'
  16935                       c_qc(ii)(1:1) = 'W'
  16936                       c_qc(ii)(3:4) = 'BB'
  16937                     endif
  16938 c
  16939 c                 If both of the neighboring reports are not available
  16940 c                 and points are not close together, reject both reports
  16941 c                 ------------------------------------------------------
  16942                   else
  16943                     if(l_print) then
  16944                       write(io8,*) 'cannot decide which point'
  16945                     endif
  16946                     c_qc(iim1)(1:1) = 'W'
  16947                     c_qc(iim1)(3:4) = 'BB'

Page 374         Source Listing                  POSCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  16948                     c_qc(ii)(1:1) = 'W'
  16949                     c_qc(ii)(3:4) = 'BB'
  16950                   endif
  16951 c
  16952 c               Check for duplicate with altitude error
  16953 c               ---------------------------------------
  16954                 elseif(idt_dif.eq.0.and.
  16955 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  16956      $                 abs(alat(iim1)-alat(ii)).lt.0.125.and.
  16957      $                 abs(alon(iim1)-alon(ii)).lt.0.125.and.
  16958 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  16959      $                 abs(ht_ft(iim1)-ht_ft(ii)).gt.1000.0) then
  16960 c
  16961                   l_print = .true.
  16962                   if(l_print) then
  16963                     write(io8,*)
  16964                     write(io8,*) 'Near duplicate with altitude error'
  16965                   endif
  16966 c
  16967 c                 Examine neighboring reports to decide which one to keep
  16968 c                 ------------------------------------------------------- 
  16969                   if(iim2.ne.0.and.iip1.ne.0) then
  16970 c
  16971                     dist_tot = gcirc_qc(alat(iip1),alon(iip1),
  16972      $                                  alat(iim2),alon(iim2))
  16973                     dist_tot = dist_tot / 1000.
  16974 c
  16975                     if(l_print) then
  16976                       write(io8,*) 'Distances: iim2-iip1 = ',dist_tot
  16977                     endif
  16978 c
  16979 c                   Require the neighboring reports to be fairly close together
  16980 c                   -----------------------------------------------------------
  16981                     if(dist_tot.lt.2500.0) then
  16982 c
  16983 c                     If the neighboring reports have the same altitude,
  16984 c                     choose the report with the same altitude
  16985 c                     --------------------------------------------------
  16986                       if(abs(ht_ft(iim2)-ht_ft(iip1)).lt.1.5) then
  16987                         write(io8,*) 'Neighboring altitudes equal'
  16988 c
  16989                         if(abs(ht_ft(ii)-ht_ft(iim2)).lt.1.5) then
  16990                           write(io8,*) 'ii altitude equal'
  16991                           c_qc(iim1)(1:1) = 'A'
  16992                           c_qc(iim1)(5:5) = 'B'
  16993 c
  16994                         elseif(abs(ht_ft(iim1)-ht_ft(iim2)).lt.1.5) then
  16995                           write(io8,*) 'iim1 altitude equal'
  16996                           c_qc(ii)(1:1) = 'A'
  16997                           c_qc(ii)(5:5) = 'B'
  16998 c  
  16999                         else
  17000                           write(io8,*) 'neither altitude equal'
  17001                           c_qc(iim1)(1:1) = 'A'
  17002                           c_qc(iim1)(5:5) = 'B'
  17003                           c_qc(ii)(1:1) = 'A'
  17004                           c_qc(ii)(5:5) = 'B'

Page 375         Source Listing                  POSCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  17005                         endif
  17006 c
  17007 c                     If points constitute an ascent or a descent, don't reject any
  17008 c                     -------------------------------------------------------------
  17009                       elseif((ht_ft(iim2).gt.ht_ft(iim1).and.
  17010      $                        ht_ft(iim1).gt.ht_ft(ii).and.
  17011      $                        ht_ft(ii  ).gt.ht_ft(iip1)).or.
  17012      $                       (ht_ft(iim2).lt.ht_ft(iim1).and.
  17013      $                        ht_ft(iim1).lt.ht_ft(ii).and.
  17014      $                        ht_ft(ii  ).lt.ht_ft(iip1)).or.
  17015      $                       (ht_ft(iim2).gt.ht_ft(ii).and.
  17016      $                        ht_ft(ii  ).gt.ht_ft(iim1).and.
  17017      $                        ht_ft(iim1).gt.ht_ft(iip1)).or.
  17018      $                       (ht_ft(iim2).lt.ht_ft(ii).and.
  17019      $                        ht_ft(ii  ).lt.ht_ft(iim1).and.
  17020      $                        ht_ft(iim1).lt.ht_ft(iip1))) then
  17021 c
  17022                         if(l_print)
  17023      $                   write(io8,*) 'ascent/descent found--no rejects'
  17024 c
  17025 c                     If the neighboring reports have different altitudes and
  17026 c                     different temperatures, try using temperature to select one
  17027 c                     -----------------------------------------------------------
  17028                       elseif(ob_t(iim2).ne.ob_t(iip1)) then
  17029                         write(io8,*) 'altitudes and temperatures differ'
  17030 c
  17031                         if(abs(ht_ft(ii)-ht_ft(iim2)).lt.1.5.and.
  17032      $                     abs(ob_t(ii)-ob_t(iim2)).lt.2.005) then
  17033                           if(l_print) then
  17034                             write(io8,*) 'ii point matches iim2'
  17035                           endif
  17036                           c_qc(iim1)(1:1) = 'A'
  17037                           c_qc(iim1)(5:5) = 'B'
  17038 c
  17039                         elseif(abs(ht_ft(iim1)-ht_ft(iim2)).lt.1.5.and.
  17040      $                         abs(ob_t(iim1)-ob_t(iim2)).lt.2.005) then
  17041                           if(l_print) then
  17042                             write(io8,*) 'iim1 point matches iim2'
  17043                           endif
  17044                           c_qc(ii)(1:1) = 'A'
  17045                           c_qc(ii)(5:5) = 'B'
  17046 c
  17047                         elseif(abs(ht_ft(ii)-ht_ft(iip1)).lt.1.5.and.
  17048      $                         abs(ob_t(ii)-ob_t(iip1)).lt.2.005) then
  17049                           if(l_print) then
  17050                             write(io8,*) 'ii point matches iip1'
  17051                           endif
  17052                           c_qc(iim1)(1:1) = 'A'
  17053                           c_qc(iim1)(5:5) = 'B'
  17054 c
  17055                         elseif(abs(ht_ft(iim1)-ht_ft(iip1)).lt.1.5.and.
  17056      $                         abs(ob_t(iim1)-ob_t(iip1)).lt.2.005) then
  17057                           if(l_print) then
  17058                             write(io8,*) 'iim1 point matches iip1'
  17059                           endif
  17060                           c_qc(ii)(1:1) = 'A'
  17061                           c_qc(ii)(5:5) = 'B'

Page 376         Source Listing                  POSCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  17062 c
  17063 c                       Otherwise reject both points
  17064 c                       ----------------------------
  17065                         else
  17066                           if(l_print) 
  17067      $                      write(io8,*) 'neither point matches'
  17068                           c_qc(iim1)(1:1) = 'A'
  17069                           c_qc(iim1)(5:5) = 'B'
  17070                           c_qc(ii)(1:1) = 'A'
  17071                           c_qc(ii)(5:5) = 'B'
  17072                         endif
  17073 c     
  17074 c                     If the neighboring reports have different altitudes
  17075 c                     and the same temperature, reject both reports
  17076 c                     ----------------------------------------------------
  17077                       else
  17078                         if(l_print) write(io8,*) 'cannot select'
  17079                         c_qc(iim1)(1:1) = 'A'
  17080                         c_qc(iim1)(5:5) = 'B'
  17081                         c_qc(ii)(1:1) = 'A'
  17082                         c_qc(ii)(5:5) = 'B'
  17083                       endif
  17084 c
  17085 c                   If the neighboring reports are too far apart,
  17086 c                   reject both reports
  17087 c                   ---------------------------------------------
  17088                     else
  17089                       if(l_print) write(io8,*) 'points too far apart'
  17090                       c_qc(iim1)(1:1) = 'A'
  17091                       c_qc(iim1)(5:5) = 'B'
  17092                       c_qc(ii)(1:1) = 'A'
  17093                       c_qc(ii)(5:5) = 'B'
  17094                     endif
  17095 c
  17096 c                 If only iim2 point is available...
  17097 c                 ----------------------------------
  17098                   elseif(iim2.ne.0) then
  17099                     dist_ii  = gcirc_qc(alat(iim2),alon(iim2),
  17100      $                                  alat(ii  ),alon(ii  ))
  17101                     dist_ii = dist_ii / 1000.
  17102                     dist_iim1= gcirc_qc(alat(iim2),alon(iim2),
  17103      $                                  alat(iim1),alon(iim1))
  17104                     dist_iim1 = dist_iim1 / 1000.
  17105 c
  17106 c                   If ii point is close, choose it
  17107 c                   -------------------------------
  17108                     if(abs(idt(ii)-idt(iim2)).le.5400.and.
  17109      $                 dist_ii.lt.1500.0.and.
  17110      $                 abs(ht_ft(ii)-ht_ft(iim2)).lt.1.5.and.
  17111      $                 abs(ob_t(ii)-ob_t(iim2)).lt.2.005) then
  17112                       if(l_print) then
  17113                         write(io8,*) 'ii point matches iim2'
  17114                       endif
  17115                       c_qc(iim1)(1:1) = 'A'
  17116                       c_qc(iim1)(5:5) = 'B'
  17117 c
  17118 c                   If iim1 point is close, choose it

Page 377         Source Listing                  POSCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  17119 c                   ---------------------------------
  17120                     elseif(abs(idt(ii)-idt(iim2)).le.5400.and.
  17121      $                 dist_iim1.lt.1500.0.and.
  17122      $                 abs(ht_ft(iim1)-ht_ft(iim2)).lt.1.5.and.
  17123      $                 abs(ob_t(iim1)-ob_t(iim2)).lt.2.005) then
  17124                       if(l_print) then
  17125                         write(io8,*) 'iim1 point matches iim2'
  17126                       endif
  17127                       c_qc(ii)(1:1) = 'A'
  17128                       c_qc(ii)(5:5) = 'B'
  17129 c
  17130 c                   Otherwise reject both points
  17131 c                   ----------------------------
  17132                     else
  17133                       if(l_print) write(io8,*) 'cannot make match'
  17134                       c_qc(iim1)(1:1) = 'A'
  17135                       c_qc(iim1)(5:5) = 'B'
  17136                       c_qc(ii)(1:1) = 'A'
  17137                       c_qc(ii)(5:5) = 'B'
  17138                     endif
  17139 c
  17140 c                 If only iip1 point is available...
  17141 c                 ----------------------------------
  17142                   elseif(iip1.ne.0) then
  17143                     dist_ii  = gcirc_qc(alat(iip1),alon(iip1),
  17144      $                                  alat(ii  ),alon(ii  ))
  17145                     dist_ii = dist_ii / 1000.
  17146                     dist_iim1= gcirc_qc(alat(iip1),alon(iip1),
  17147      $                                  alat(iim1),alon(iim1))
  17148                     dist_iim1 = dist_iim1 / 1000.
  17149 c
  17150 c                   If ii point is close, choose it
  17151 c                   -------------------------------
  17152                     if(abs(idt(ii)-idt(iip1)).le.5400.and.
  17153      $                 dist_ii.le.1500.0.and.
  17154      $                 abs(ht_ft(ii)-ht_ft(iip1)).lt.1.5.and.
  17155      $                 abs(ob_t(ii)-ob_t(iip1)).lt.2.005) then
  17156                       if(l_print) then
  17157                         write(io8,*) 'ii point matches iip1'
  17158                       endif
  17159                       c_qc(iim1)(1:1) = 'A'
  17160                       c_qc(iim1)(5:5) = 'B'
  17161 c
  17162 c                   If iim1 point is close, choose it
  17163 c                   ---------------------------------
  17164                     elseif(abs(idt(ii)-idt(iip1)).le.5400.and.
  17165      $                 dist_iim1.le.1500.0.and.
  17166      $                 abs(ht_ft(iim1)-ht_ft(iip1)).lt.1.5.and.
  17167      $                 abs(ob_t(iim1)-ob_t(iip1)).lt.2.005) then
  17168                       if(l_print) then
  17169                         write(io8,*) 'iim1 point matches iip1'
  17170                       endif
  17171                       c_qc(ii)(1:1) = 'A'
  17172                       c_qc(ii)(5:5) = 'B'
  17173 c
  17174 c                   Otherwise reject both points
  17175 c                   ----------------------------

Page 378         Source Listing                  POSCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  17176                     else
  17177                       if(l_print) write(io8,*) 'cannot make match'
  17178                       c_qc(iim1)(1:1) = 'A'
  17179                       c_qc(iim1)(5:5) = 'B'
  17180                       c_qc(ii)(1:1) = 'A'
  17181                       c_qc(ii)(5:5) = 'B'
  17182                     endif
  17183 c
  17184 c                 If both of the neighboring reports are not available
  17185 c                 reject both reports
  17186 c                 ----------------------------------------------------
  17187                   else
  17188                     if(l_print) write(io8,*) 'no neighboring points'
  17189                     c_qc(iim1)(1:1) = 'A'
  17190                     c_qc(iim1)(5:5) = 'B'
  17191                     c_qc(ii)(1:1) = 'A'
  17192                     c_qc(ii)(5:5) = 'B'
  17193                   endif
  17194 c
  17195 c               Check for duplicate with time error
  17196 c               -----------------------------------
  17197                 elseif(idt(iim1).ne.idt(ii).and.
  17198 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  17199      $                 abs(alat(iim1)-alat(ii)).lt.0.125.and.
  17200      $                 abs(alon(iim1)-alon(ii)).lt.0.125.and.
  17201 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  17202      $                 abs(ht_ft(iim1)-ht_ft(ii)).lt.50.5) then
  17203 c
  17204                   l_print = .true.
  17205                   if(l_print) then
  17206                     write(io8,*)
  17207                     write(io8,*) 'Discrepancy in time'
  17208                   endif
  17209 c
  17210 c                 If points are close in time, average times
  17211 c                 ------------------------------------------
  17212                   if(abs(idt(iim1)-idt(ii)).lt.1800.0) then
  17213 c
  17214                     if(l_print) then
  17215                       write(io8,*) 'points close--averaging'
  17216                     endif
  17217                     idt(ii) = (idt(ii)+idt(iim1))/2
  17218                     c_qc(ii)(2:2) = 'R'
  17219                     c_qc(iim1)(1:1) = 't'
  17220                     c_qc(iim1)(2:2) = 'B'
  17221 c
  17222 c                 Otherwise, examine neighboring reports to decide which one to keep
  17223 c                 ------------------------------------------------------------------ 
  17224                   elseif(iim2.ne.0.and.iip1.ne.0) then
  17225 c
  17226 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  17227                     alat_dif = abs(alat(iip1)-alat(iim2))
  17228                     alon0 = alon(ii)
  17229                     alonm2 = alon(iim2)
  17230                     alonp1 = alon(iip1)
  17231                     if(alon0.gt.270.0.and.alonm2.lt.90.0) 
  17232      $                alonm2 = alonm2 + 360.0

Page 379         Source Listing                  POSCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  17233                     if(alon0.lt.90.0.and.alonm2.gt.270.0)
  17234      $                alonm2 = 360.0 - alonm2
  17235                     if(alon0.gt.270.0.and.alonp1.lt.90.0) 
  17236      $                alonp1 = alonp1 + 360.0
  17237                     if(alon0.lt.90.0.and.alonp1.gt.270.0)
  17238      $                alonp1 = 360.0 - alonp1
  17239                     alon_dif = abs(alonp1-alonm2)
  17240 c
  17241                     if(alon_dif.eq.0.0.and.
  17242      $                 alat_dif.eq.0.0) then
  17243                       time_est = amiss
  17244 c
  17245                     elseif(alon_dif.ge.alat_dif) then
  17246                       time_est = (float(idt(iip1)-idt(iim2)))
  17247      $                         / (alonp1-alonm2)
  17248      $                         * (alon0-alonm2)
  17249      $                         + float(idt(iim2))
  17250 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  17251                     else
  17252                       time_est = (float(idt(iip1)-idt(iim2)))
  17253      $                         / (alat(iip1)-alat(iim2))
  17254      $                         * (alat(ii)-alat(iim2))
  17255      $                         + float(idt(iim2))
  17256                     endif
  17257 c
  17258                     idt_tot = abs(idt(iip1) - idt(iim2))
  17259 c
  17260                     if(l_print) then
  17261                       write(io8,*) 'Estimated time = ',time_est
  17262                       write(io8,*) 'Lons = ',alonm2,alon0,alonp1
  17263                     endif
  17264 c
  17265 c                   If the neighboring reports are close enough together,
  17266 c                   choose the report that is closest to the interpolated point
  17267 c                   -----------------------------------------------------------
  17268                     if(idt_tot.lt.9000.and.time_est.ne.amiss) then
  17269                       if(abs(ifix(time_est)-idt(ii)).lt.
  17270      $                   abs(ifix(time_est)-idt(iim1))) then
  17271                         c_qc(iim1)(1:1) = 't'
  17272                         c_qc(iim1)(2:2) = 'B'
  17273 c
  17274                       else
  17275                         c_qc(ii)(1:1) = 't'
  17276                         c_qc(ii)(2:2) = 'B'
  17277 c
  17278                       endif
  17279 c
  17280 c                   If the neighboring reports are too far apart,
  17281 c                   reject both reports
  17282 c                   ---------------------------------------------
  17283                     else
  17284                       c_qc(iim1)(1:1) = 't'
  17285                       c_qc(iim1)(2:2) = 'B'
  17286                       c_qc(ii)(1:1) = 't'
  17287                       c_qc(ii)(2:2) = 'B'
  17288                     endif
  17289 c

Page 380         Source Listing                  POSCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  17290 c                 Otherwise reject both points
  17291 c                 ----------------------------
  17292                   else
  17293                     if(l_print) then
  17294                       write(io8,*) 'cannot decide which point'
  17295                     endif
  17296                     c_qc(iim1)(1:1) = 't'
  17297                     c_qc(iim1)(2:2) = 'B'
  17298                     c_qc(ii)(1:1) = 't'
  17299                     c_qc(ii)(2:2) = 'B'
  17300                   endif
  17301 c
  17302 c               Write out any other duplicates
  17303 c               ------------------------------
  17304                 else
  17305                   l_print = .false.
  17306                   if(l_print) then
  17307                     write(io8,*)
  17308                     write(io8,*) 'Leftover duplicate'
  17309                   endif
  17310                 endif
  17311 c
  17312 c               Make sure retained report has all available values
  17313 c               (ii report is rejected; iim1 report is retained)
  17314 c               --------------------------------------------------
  17315                 if((c_qc(ii)(1:1).eq.'W'.and.c_qc(iim1).ne.'W').or.
  17316      $             (c_qc(ii)(1:1).eq.'A'.and.c_qc(iim1).ne.'A').or.
  17317      $             (c_qc(ii)(1:1).eq.'t'.and.c_qc(iim1).ne.'t')) then
  17318 c
  17319                   if(ob_t(iim1).eq.amiss.and.ob_t(ii).ne.amiss) then 
  17320                     ob_t(iim1) = ob_t(ii)
  17321                     c_qc(iim1)(6:6) = c_qc(ii)(6:6)
  17322                     ob_t(ii) = amiss
  17323                     c_qc(ii)(6:6) = 'M'
  17324                   endif
  17325                   if(ob_dir(iim1).eq.amiss.and.ob_dir(ii).ne.amiss) then
  17326                     ob_dir(iim1) = ob_dir(ii)
  17327                     c_qc(iim1)(7:7) = c_qc(ii)(7:7) 
  17328                     ob_dir(ii) = amiss
  17329                     c_qc(ii)(7:7) = 'M'
  17330                   endif
  17331                   if(ob_dir(iim1).lt.0.5.and.difdir.gt.10.5) then
  17332                     ob_dir(iim1) = ob_dir(ii)
  17333                     c_qc(iim1)(7:7) = c_qc(ii)(7:7)
  17334                     ob_dir(ii) = amiss
  17335                     c_qc(ii)(7:7) = 'M'
  17336                   endif
  17337                   if(ob_spd(iim1).eq.amiss.and.ob_spd(ii).ne.amiss) then
  17338                     ob_spd(iim1) = ob_spd(ii)
  17339                     c_qc(iim1)(8:8) = c_qc(ii)(8:8)
  17340                     ob_spd(ii) = amiss
  17341                     c_qc(ii)(8:8) = 'M'
  17342                   endif
  17343                   if(ob_spd(iim1).lt.0.05.and.ob_spd(ii).gt.1.25) then
  17344                     ob_spd(iim1) = ob_spd(ii)
  17345                     c_qc(iim1)(8:8) = c_qc(ii)(8:8)
  17346                     ob_spd(ii) = amiss

Page 381         Source Listing                  POSCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  17347                     c_qc(ii)(8:8) = 'M'
  17348                   endif
  17349 c
  17350                   if(ob_spd(ii).eq.amiss.and.ob_dir(ii).ne.amiss) 
  17351      $              c_qc(ii)(7:7) = 'I'
  17352                   if(ob_dir(ii).eq.amiss.and.ob_spd(ii).ne.amiss) 
  17353      $              c_qc(ii)(8:8) = 'I'
  17354                   if(ob_spd(iim1).eq.amiss.and.ob_dir(iim1).ne.amiss)
  17355      $              c_qc(iim1)(7:7) = 'I'
  17356                   if(ob_dir(iim1).eq.amiss.and.ob_spd(iim1).ne.amiss) 
  17357      $              c_qc(iim1)(8:8) = 'I'
  17358 c
  17359 c               Make sure retained report has all available values
  17360 c               (iim1 report is rejected; ii report is retained)
  17361 c               --------------------------------------------------
  17362                 elseif((c_qc(iim1)(1:1).eq.'W'.and.c_qc(ii).ne.'W').or.
  17363      $                 (c_qc(iim1)(1:1).eq.'A'.and.c_qc(ii).ne.'A').or.
  17364      $                 (c_qc(iim1)(1:1).eq.'t'.and.c_qc(ii).ne.'t'))then
  17365 c
  17366                   if(ob_t(ii).eq.amiss.and.ob_t(iim1).ne.amiss) then 
  17367                     ob_t(ii) = ob_t(iim1)
  17368                     c_qc(ii)(6:6) = c_qc(iim1)(6:6)
  17369                     ob_t(iim1) = amiss
  17370                     c_qc(iim1)(6:6) = 'M'
  17371                   endif
  17372                   if(ob_dir(ii).eq.amiss.and.ob_dir(iim1).ne.amiss) then
  17373                     ob_dir(ii) = ob_dir(iim1)
  17374                     c_qc(ii)(7:7) = c_qc(iim1)(7:7) 
  17375                     ob_dir(iim1) = amiss
  17376                     c_qc(iim1)(7:7) = 'M'
  17377                   endif
  17378                   if(ob_dir(ii).lt.0.5.and.difdir.gt.10.5) then
  17379                     ob_dir(ii) = ob_dir(iim1)
  17380                     c_qc(ii)(7:7) = c_qc(iim1)(7:7) 
  17381                     ob_dir(iim1) = amiss
  17382                     c_qc(iim1)(7:7) = 'M'
  17383                   endif
  17384                   if(ob_spd(ii).eq.amiss.and.ob_spd(iim1).ne.amiss) then
  17385                     ob_spd(ii) = ob_spd(iim1)
  17386                     c_qc(ii)(8:8) = c_qc(iim1)(8:8)
  17387                     ob_spd(iim1) = amiss
  17388                     c_qc(iim1)(8:8) = 'M'
  17389                   endif
  17390                   if(ob_spd(ii).lt.0.05.and.ob_spd(iim1).gt.1.25) then
  17391                     ob_spd(ii) = ob_spd(iim1)
  17392                     c_qc(ii)(8:8) = c_qc(iim1)(8:8)
  17393                     ob_spd(iim1) = amiss
  17394                     c_qc(iim1)(8:8) = 'M'
  17395                   endif
  17396 c
  17397                   if(ob_spd(ii).eq.amiss.and.ob_dir(ii).ne.amiss) 
  17398      $              c_qc(ii)(7:7) = 'I'
  17399                   if(ob_dir(ii).eq.amiss.and.ob_spd(ii).ne.amiss) 
  17400      $              c_qc(ii)(8:8) = 'I'
  17401                   if(ob_spd(iim1).eq.amiss.and.ob_dir(iim1).ne.amiss)
  17402      $              c_qc(iim1)(7:7) = 'I'
  17403                   if(ob_dir(iim1).eq.amiss.and.ob_spd(iim1).ne.amiss) 

Page 382         Source Listing                  POSCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  17404      $              c_qc(iim1)(8:8) = 'I'
  17405                 endif
  17406               endif
  17407             endif
  17408 c
  17409 c           Print series of reports if desired
  17410 c           ----------------------------------
  17411             if(l_print) then
  17412               if(iim2.ne.0) write(io8,8002) kk,iim2
  17413      x,            c_insty_ob(itype(iim2))
  17414      x,            c_acftreg(iim2),c_acftid(iim2)
  17415      x,            idt(iim2),alat(iim2),alon(iim2)
  17416      x,            pres(iim2),ht_ft(iim2)
  17417      x,            t_prcn(iim2),ob_t(iim2),xiv_t(iim2),ichk_t(iim2)
  17418      x,            ob_q(iim2),xiv_q(iim2),ichk_q(iim2)
  17419      x,            ob_dir(iim2),xiv_d(iim2),ichk_d(iim2)
  17420      x,            ob_spd(iim2),xiv_s(iim2),ichk_s(iim2)
  17421      x,            c_qc(iim2)
  17422               if(iim1.ne.0) write(io8,8002) kk,iim1
  17423      x,            c_insty_ob(itype(iim1))
  17424      x,            c_acftreg(iim1),c_acftid(iim1)
  17425      x,            idt(iim1),alat(iim1),alon(iim1)
  17426      x,            pres(iim1),ht_ft(iim1)
  17427      x,            t_prcn(iim1),ob_t(iim1),xiv_t(iim1),ichk_t(iim1)
  17428      x,            ob_q(iim1),xiv_q(iim1),ichk_q(iim1)
  17429      x,            ob_dir(iim1),xiv_d(iim1),ichk_d(iim1)
  17430      x,            ob_spd(iim1),xiv_s(iim1),ichk_s(iim1)
  17431      x,            c_qc(iim1)
  17432               write(io8,8002) kk,ii,c_insty_ob(itype(ii))
  17433      x,            c_acftreg(ii),c_acftid(ii)
  17434      x,            idt(ii),alat(ii),alon(ii)
  17435      x,            pres(ii),ht_ft(ii)
  17436      x,            t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
  17437      x,            ob_q(ii),xiv_q(ii),ichk_q(ii)
  17438      x,            ob_dir(ii),xiv_d(ii),ichk_d(ii)
  17439      x,            ob_spd(ii),xiv_s(ii),ichk_s(ii)
  17440      x,            c_qc(ii)
  17441               if(iip1.ne.0) write(io8,8002) kk,iip1
  17442      x,            c_insty_ob(itype(iip1))
  17443      x,            c_acftreg(iip1),c_acftid(iip1)
  17444      x,            idt(iip1),alat(iip1),alon(iip1)
  17445      x,            pres(iip1),ht_ft(iip1)
  17446      x,            t_prcn(iip1),ob_t(iip1),xiv_t(iip1),ichk_t(iip1)
  17447      x,            ob_q(iip1),xiv_q(iip1),ichk_q(iip1)
  17448      x,            ob_dir(iip1),xiv_d(iip1),ichk_d(iip1)
  17449      x,            ob_spd(iip1),xiv_s(iip1),ichk_s(iip1)
  17450      x,            c_qc(iip1)
  17451             endif
  17452 c
  17453 c End loop over reports
  17454 c ---------------------
  17455           enddo
  17456 c
  17457 c Check rest of flight if stuck clock found
  17458 c -----------------------------------------
  17459           if(stuck) then
  17460             do iob = istart,iend

Page 383         Source Listing                  POSCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  17461               ii = indx(iob)
  17462               if(idt(ii).eq.idt_stk.and.
  17463      $           c_qc(ii)(2:2).ne.'K') then
  17464                 c_qc(ii)(2:2) = 'K'
  17465                 write(io8,*)
  17466                 write(io8,*) 'Another stuck clock found'
  17467                 write(io8,8002) kk,ii,c_insty_ob(itype(ii))
  17468      x,            c_acftreg(ii),c_acftid(ii)
  17469      x,            idt(ii),alat(ii),alon(ii)
  17470      x,            pres(ii),ht_ft(ii)
  17471      x,            t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
  17472      x,            ob_q(ii),xiv_q(ii),ichk_q(ii)
  17473      x,            ob_dir(ii),xiv_d(ii),ichk_d(ii)
  17474      x,            ob_spd(ii),xiv_s(ii),ichk_s(ii)
  17475      x,            c_qc(ii)
  17476               endif
  17477             enddo
  17478           endif
  17479 c
  17480 c End if clause for real flights with at least three reports
  17481 c ----------------------------------------------------------
  17482         endif
  17483 c
  17484 c End loop over flights
  17485 c ---------------------
  17486       enddo
  17487 c
  17488 c Write out bad reports
  17489 c ---------------------
  17490       if(.not.l_operational) then
  17491         write(io35,*)
  17492         write(io35,*) 'Inconsistent positions'
  17493         write(io35,*) '----------------------'
  17494         write(io35,3001)
  17495  3001   format(' index  type    tail num   flight     time       lat'
  17496      x,      '        lon       pres  height '
  17497      x,      't-prcn   temp     innov  ichk'
  17498      x,      ' spec hum    innov  ichk'
  17499      x,      '   ob_dir    innov  ichk'
  17500      x,      '   ob_spd    innov  ichk'
  17501      x,      '   qc flag')
  17502       endif
  17503 c
  17504       kbad = 0
  17505 c
  17506       do iob = 1,numreps
  17507         ii = indx(iob)
  17508 c
  17509         if(itype(ii).eq.i_mdcrs.or.
  17510      $     itype(ii).eq.i_mdcrs_lvl.or.
  17511      $     itype(ii).eq.i_mdcrs_asc.or.
  17512      $     itype(ii).eq.i_mdcrs_des) then
  17513           ktype = 1
  17514 c
  17515         elseif(itype(ii).eq.i_acars.or.
  17516      $         itype(ii).eq.i_acars_lvl.or.
  17517      $         itype(ii).eq.i_acars_asc.or.

Page 384         Source Listing                  POSCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  17518      $         itype(ii).eq.i_acars_des) then
  17519           ktype = 2
  17520 c         
  17521         elseif(itype(ii).eq.i_amdar.or. 
  17522      $         itype(ii).eq.i_amdar_lvl.or.
  17523      $         itype(ii).eq.i_amdar_asc.or.
  17524      $         itype(ii).eq.i_amdar_des) then
  17525           ktype = 3
  17526 c
  17527         elseif(itype(ii).eq.i_airep.or.
  17528      $         itype(ii).eq.i_airep_lvl.or.
  17529      $         itype(ii).eq.i_airep_asc.or.
  17530      $         itype(ii).eq.i_airep_des) then
  17531           ktype = 4
  17532 c
  17533         elseif(itype(ii).eq.i_man_airep.or.
  17534      $         itype(ii).eq.i_man_Yairep) then
  17535           ktype = 5
  17536         endif
  17537 c
  17538         if(ktype.eq.1) then
  17539           nrep_Md = nrep_Md + 1
  17540         elseif(ktype.eq.2) then
  17541           nrep_Ac = nrep_Ac + 1
  17542         elseif(ktype.eq.3) then
  17543           nrep_Am = nrep_Am + 1
  17544         elseif(ktype.eq.4) then
  17545           nrep_Ar = nrep_Ar + 1
  17546         elseif(ktype.eq.5) then
  17547           nrep_Ma = nrep_Ma + 1
  17548         endif
  17549 c
  17550         if(c_qc(ii)(1:1).eq.'r'.or.
  17551      $     c_qc(ii)(1:1).eq.'W'.or.
  17552      $     c_qc(ii)(1:1).eq.'A'.or.
  17553      $     c_qc(ii)(1:1).eq.'t'.or.
  17554      $     c_qc(ii)(2:2).eq.'K'.or.
  17555      $     c_qc(ii)(2:2).eq.'R'.or.
  17556      $     c_qc(ii)(3:4).eq.'RR'.or.
  17557      $     c_qc(ii)(5:5).eq.'B') then
  17558 c
  17559           if(.not.l_operational) then
  17560             write(io35,3002) ii,c_insty_ob(itype(ii))
  17561      x,        c_acftreg(ii),c_acftid(ii)
  17562      x,        idt(ii),alat(ii),alon(ii)
  17563      x,        pres(ii),ht_ft(ii)
  17564      x,        t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
  17565      x,        ob_q(ii),xiv_q(ii),ichk_q(ii)
  17566      x,        ob_dir(ii),xiv_d(ii),ichk_d(ii)
  17567      x,        ob_spd(ii),xiv_s(ii),ichk_s(ii)
  17568      x,        c_qc(ii)
  17569  3002       format(i6,1x,a8,1x,a8,1x,a9,1x,i7,1x,2f11.5,1x,f8.1,1x,f7.0
  17570      x,          1x,f5.2,4(2(1x,f8.2),1x,i5),1x,'!',a11,'!')
  17571           endif
  17572 c
  17573 c         Count by category
  17574 c         -----------------

Page 385         Source Listing                  POSCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  17575           if(c_qc(ii)(1:1).eq.'r') then
  17576             ninc_xtra(ktype) = ninc_xtra(ktype) + 1
  17577           elseif(c_qc(ii)(1:1).eq.'W') then
  17578             ninc_way(ktype) = ninc_way(ktype) + 1
  17579           elseif(c_qc(ii)(1:1).eq.'A') then
  17580             ninc_alt(ktype) = ninc_alt(ktype) + 1
  17581           elseif(c_qc(ii)(2:2).eq.'K') then
  17582             ninc_stk(ktype) = ninc_stk(ktype) + 1
  17583           elseif(c_qc(ii)(2:2).eq.'B') then
  17584             ninc_time(ktype) = ninc_time(ktype) + 1
  17585           elseif(c_qc(ii)(3:4).eq.'RR'.or.
  17586      $           c_qc(ii)(2:2).eq.'R') then
  17587             ninc_avg(ktype) = ninc_avg(ktype) + 1
  17588           elseif(c_qc(ii)(5:5).eq.'B') then
  17589             ninc_bad(ktype) = ninc_bad(ktype) + 1
  17590           endif
  17591         endif
  17592 c
  17593 c       Reject redundant reports and reports with inconsistent positions
  17594 c       ----------------------------------------------------------------          
  17595         if(c_qc(ii)(1:1).eq.'r'.or.
  17596      $     c_qc(ii)(1:1).eq.'W'.or.
  17597      $     c_qc(ii)(1:1).eq.'A'.or.
  17598      $     c_qc(ii)(1:1).eq.'t'.or.
  17599      $     c_qc(ii)(2:2).eq.'K'.or.
  17600      $     c_qc(ii)(5:5).eq.'B') then
  17601 c
  17602           csort(ii)(1:5) = 'badob'
  17603 c
  17604           kbad(ktype) = kbad(ktype) + 1
  17605 c
  17606           if(ktype.eq.1) then
  17607             ninc_Md = ninc_Md + 1
  17608           elseif(ktype.eq.2) then
  17609             ninc_Ac = ninc_Ac + 1
  17610           elseif(ktype.eq.3) then
  17611             ninc_Am = ninc_Am + 1
  17612           elseif(ktype.eq.4) then
  17613             ninc_Ar = ninc_Ar + 1
  17614           elseif(ktype.eq.5) then
  17615             ninc_Ma = ninc_Ma + 1
  17616           endif
  17617         endif
  17618 c
  17619       enddo
  17620 c
  17621       if(.not.l_operational) then
  17622         write(io35,*)
  17623         write(io35,*)'  Number of inc MDCRS    reps rejected = ',kbad(1)
  17624 ccccdak        write(io35,*)'  Number of inc ACARS    reps rejected = ',kbad(2)
  17625         write(io35,*)'  Number of inc TAMDAR   reps rejected = ',kbad(2)
  17626         write(io35,*)'  Number of inc AMDAR    reps rejected = ',kbad(3)
  17627         write(io35,*)'  Number of inc AIREP    reps rejected = ',kbad(4)
  17628         write(io35,*)'  Number of inc manAIREP reps rejected = ',kbad(5)
  17629       endif
  17630 c
  17631       write(io8,*)

Page 386         Source Listing                  POSCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  17632       write(io8,*) '  Reports with inconsistent positions--rejected'
  17633       write(io8,*) '  ---------------------------------------------'
  17634       write(io8,*)'  Number of inc MDCRS    reps rejected = ',kbad(1)
  17635 ccccdak      write(io8,*)'  Number of inc ACARS    reps rejected = ',kbad(2)
  17636       write(io8,*)'  Number of inc TAMDAR   reps rejected = ',kbad(2)
  17637       write(io8,*)'  Number of inc AMDAR    reps rejected = ',kbad(3)
  17638       write(io8,*)'  Number of inc AIREP    reps rejected = ',kbad(4)
  17639       write(io8,*)'  Number of inc manAIREP reps rejected = ',kbad(5)
  17640 c
  17641       write(*,*)
  17642       write(*,*) 'Inconsistent position check data counts--',cdtg_an
  17643       write(*,*) '---------------------------------------------------'
  17644       write(*,'(1x,a55)')
  17645 ccccdak     $ 'Type of check     MDCRS   ACARS   AMDAR   AIREP     man'
  17646      $ 'Type of check     MDCRS  TAMDAR   AMDAR   AIREP     man'
  17647       write(*,'(1x,a55)')
  17648      $ '--------------- ------- ------- ------- ------- -------'
  17649       write(*,'('' Num considered '',5(1x,i7))')
  17650      $            nrep_Md,nrep_Ac,nrep_Am,nrep_Ar,nrep_Ma
  17651       write(*,'('' Total rejected '',5(1x,i7))')
  17652      $            ninc_Md,ninc_Ac,ninc_Am,ninc_Ar,ninc_Ma
  17653       write(*,'(1x,a55)')
  17654      $ '--------------- ------- ------- ------- ------- -------'
  17655 c
  17656       write(io8,*)
  17657       write(io8,*) 'Inconsistent position check data counts'
  17658       write(io8,*) '---------------------------------------'
  17659       write(io8,'(1x,a55)')
  17660 ccccdak     $ 'Type of check     MDCRS   ACARS   AMDAR   AIREP     man'
  17661      $ 'Type of check     MDCRS  TAMDAR   AMDAR   AIREP     man'
  17662       write(io8,'(1x,a55)')
  17663      $ '--------------- ------- ------- ------- ------- -------'
  17664       write(io8,'(''Num considered '',5(1x,i7))')
  17665      $            nrep_Md,nrep_Ac,nrep_Am,nrep_Ar,nrep_Ma
  17666       write(io8,'(''Total rejected '',5(1x,i7))')
  17667      $            ninc_Md,ninc_Ac,ninc_Am,ninc_Ar,ninc_Ma
  17668       write(io8,'(1x,a55)')
  17669      $ '--------------- ------- ------- ------- ------- -------'
  17670       write(io8,'(''Redundant reps '',5(1x,i7))')
  17671      $          (ninc_xtra(ii),ii=1,5)
  17672       write(io8,'(''Bad waypoint   '',5(1x,i7))')
  17673      $          (ninc_way(ii),ii=1,5)
  17674       write(io8,'(''Bad altitude   '',5(1x,i7))')
  17675      $          (ninc_alt(ii),ii=1,5)
  17676       write(io8,'(''Stuck clock    '',5(1x,i7))')
  17677      $          (ninc_stk(ii),ii=1,5)
  17678       write(io8,'(''Bad time       '',5(1x,i7))')
  17679      $          (ninc_time(ii),ii=1,5)
  17680       write(io8,'(''Inconsistent ht'',5(1x,i7))')
  17681      $          (ninc_bad(ii),ii=1,5)
  17682       write(io8,'(1x,a55)')
  17683      $ '--------------- ------- ------- ------- ------- -------'
  17684       write(io8,'(''Avg posn/time  '',5(1x,i7))')
  17685      $          (ninc_avg(ii),ii=1,5)
  17686       write(io8,'(1x,a55)')
  17687      $ '--------------- ------- ------- ------- ------- -------'
  17688 c

Page 387         Source Listing                  POSCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  17689       kbadtot = kbad(1) + kbad(2) + kbad(3)
  17690      $        + kbad(4) + kbad(5) 
  17691 c
  17692       write(io8,*)
  17693       write(io8,*) numreps,' good reports processed'
  17694       write(io8,*) kbadtot,' reports failed qc in position check'
  17695 c
  17696       return
  17697       end


ENTRY POINTS

  Name                   
                         
 poschek_qc_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 10                         Label  16488                                                          16497                             
 20                         Label  16506                                                          16515                             
 3001                       Label  17495                                                          17494                             
 3002                       Label  17569                                                          17560                             
 8002                       Label  16460                                                          16441,16451,17412,17422,17432,1744
                                                                                                  1,17467                           
 ABS                        Func   16333                                scalar                    16333,16334,16335,16340,16341,1634
                                                                                                  2,16381,16382,16384,16402,16403,16
                                                                                                  405,16415,16540,16545,16554,16562,
                                                                                                  16563,16565,16644,16680,16681,1668
                                                                                                  4,16685,16737,16740,16747,16759,16
                                                                                                  760,16762,16861,16871,16909,16919,
                                                                                                  16956,16957,16959,16986,16989,1699
                                                                                                  4,17031,17032,17039,17040,17047,17
                                                                                                  048,17055,17056,17108,17110,17111,
                                                                                                  17120,17122,17123,17152,17154,1715
                                                                                                  5,17164,17166,17167,17199,17200,17
                                                                                                  202,17212,17227,17239,17258,17269,
                                                                                                  17270                             
 ALAT                       Dummy  16100    R(8)            8     1     0        ARG,INOUT        16340,16345,16346,16364,16381,1640
                                                                                                  2,16444,16453,16562,16669,16671,16
                                                                                                  672,16674,16675,16759,16773,16774,
                                                                                                  16782,16793,16796,16803,16804,1680
                                                                                                  7,16810,16847,16848,16850,16851,16
                                                                                                  853,16854,16895,16896,16898,16899,
                                                                                                  16901,16902,16956,16971,16972,1709
                                                                                                  9,17100,17102,17103,17143,17144,17
                                                                                                  146,17147,17199,17227,17253,17254,
                                                                                                  17415,17425,17434,17444,17469,1756
                                                                                                  2                                 
 ALAT_DIF                   Local  16243    R(8)            8           scalar                    17227,17242,17245                 
 ALAT_EST                   Local  16251    R(8)            8           scalar                    16793,16806,16809,16815           
 ALON                       Dummy  16100    R(8)            8     1     0        ARG,INOUT        16341,16345,16346,16365,16382,1640
                                                                                                  3,16444,16453,16563,16670,16671,16
                                                                                                  672,16674,16675,16760,16773,16774,

Page 388         Source Listing                  POSCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  16783,16797,16800,16803,16804,1680
                                                                                                  7,16810,16847,16848,16850,16851,16
                                                                                                  853,16854,16895,16896,16898,16899,
                                                                                                  16901,16902,16957,16971,16972,1709
                                                                                                  9,17100,17102,17103,17143,17144,17
                                                                                                  146,17147,17200,17228,17229,17230,
                                                                                                  17415,17425,17434,17444,17469,1756
                                                                                                  2                                 
 ALON0                      Local  16244    R(8)            8           scalar                    17228,17231,17233,17235,17237,1724
                                                                                                  8,17262                           
 ALONM2                     Local  16245    R(8)            8           scalar                    17229,17231,17232,17233,17234,1723
                                                                                                  9,17247,17248,17262               
 ALONP1                     Local  16246    R(8)            8           scalar                    17230,17235,17236,17237,17238,1723
                                                                                                  9,17247,17262                     
 ALON_DIF                   Local  16247    R(8)            8           scalar                    17239,17241,17245                 
 ALON_EST                   Local  16252    R(8)            8           scalar                    16797,16806,16809,16815           
 AMISS                      Dummy  16098    R(4)            4           scalar   ARG,INOUT        16527,16533,16539,16550,16551,1655
                                                                                                  2,16738,16739,16741,16742,16743,16
                                                                                                  748,16749,16750,17243,17268,17319,
                                                                                                  17322,17325,17328,17334,17337,1734
                                                                                                  0,17346,17350,17352,17354,17356,17
                                                                                                  366,17369,17372,17375,17381,17384,
                                                                                                  17387,17393,17397,17399,17401,1740
                                                                                                  3                                 
 CDTG_AN                    Dummy  16099    CHAR            10          scalar   ARG,INOUT        16608,17642                       
 CIDMISS                    Dummy  16099    CHAR            8           scalar   ARG,INOUT        16467                             
 CSORT                      Dummy  16098    CHAR            25    1     0        ARG,INOUT        17602                             
 C_ACFTID                   Dummy  16099    CHAR            9     1     0        ARG,INOUT        16443,16452,16467,17414,17424,1743
                                                                                                  3,17443,17468,17561               
 C_ACFTREG                  Dummy  16099    CHAR            8     1     0        ARG,INOUT        16443,16452,17414,17424,17433,1744
                                                                                                  3,17468,17561                     
 C_INSTY_OB                 Func   16151    CHAR            16          scalar                    16442,16451,17413,17423,17432,1744
                                                                                                  2,17467,17560                     
 C_QC                       Dummy  16099    CHAR            11    1     0        ARG,INOUT        16367,16368,16369,16372,16373,1637
                                                                                                  4,16375,16393,16394,16395,16396,16
                                                                                                  422,16423,16424,16429,16430,16431,
                                                                                                  16432,16450,16459,16490,16491,1649
                                                                                                  2,16493,16494,16495,16508,16509,16
                                                                                                  510,16511,16512,16513,16572,16573,
                                                                                                  16574,16581,16582,16583,16587,1660
                                                                                                  1,16621,16634,16660,16699,16708,16
                                                                                                  728,16785,16786,16787,16826,16827,
                                                                                                  16829,16830,16837,16838,16839,1684
                                                                                                  0,16866,16867,16876,16877,16885,16
                                                                                                  886,16887,16888,16914,16915,16924,
                                                                                                  16925,16933,16934,16935,16936,1694
                                                                                                  6,16947,16948,16949,16991,16992,16
                                                                                                  996,16997,17001,17002,17003,17004,
                                                                                                  17036,17037,17044,17045,17052,1705
                                                                                                  3,17060,17061,17068,17069,17070,17
                                                                                                  071,17079,17080,17081,17082,17090,
                                                                                                  17091,17092,17093,17115,17116,1712
                                                                                                  7,17128,17134,17135,17136,17137,17
                                                                                                  159,17160,17171,17172,17178,17179,
                                                                                                  17180,17181,17189,17190,17191,1719

Page 389         Source Listing                  POSCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  2,17218,17219,17220,17271,17272,17
                                                                                                  275,17276,17284,17285,17286,17287,
                                                                                                  17296,17297,17298,17299,17315,1731
                                                                                                  6,17317,17321,17323,17327,17329,17
                                                                                                  333,17335,17339,17341,17345,17347,
                                                                                                  17351,17353,17355,17357,17362,1736
                                                                                                  3,17364,17368,17370,17374,17376,17
                                                                                                  380,17382,17386,17388,17392,17394,
                                                                                                  17398,17400,17402,17404,17421,1743
                                                                                                  1,17440,17450,17463,17464,17475,17
                                                                                                  550,17551,17552,17553,17554,17555,
                                                                                                  17556,17557,17568,17575,17577,1757
                                                                                                  9,17581,17583,17585,17586,17588,17
                                                                                                  595,17596,17597,17598,17599,17600 
 DIFDIR                     Local  16250    R(4)            4           scalar                    16552,16554,16555,16740,16745,1674
                                                                                                  6,17331,17378                     
 DIFF0                      Local  16248    R(4)            4           scalar                    16674,16676,16681,16685,16689,1669
                                                                                                  2,16701                           
 DIFFM1                     Local  16249    R(4)            4           scalar                    16671,16673,16680,16684,16688,1669
                                                                                                  2,16701                           
 DIST_II                    Local  16255    R(4)            4           scalar                    16806,16808,16817,16825,16850,1685
                                                                                                  2,16857,16862,16872,16898,16900,16
                                                                                                  905,16910,16920,17099,17101,17109,
                                                                                                  17143,17145,17153                 
 DIST_IIM1                  Local  16256    R(4)            4           scalar                    16809,16811,16818,16825,16853,1685
                                                                                                  5,16857,16862,16872,16901,16903,16
                                                                                                  905,16910,16920,17102,17104,17121,
                                                                                                  17146,17148,17165                 
 DIST_TOT                   Local  16254    R(4)            4           scalar                    16345,16347,16354,16359,16773,1677
                                                                                                  5,16777,16803,16805,16816,16824,16
                                                                                                  847,16849,16895,16897,16971,16973,
                                                                                                  16976,16981                       
 FLOAT                      Func   17246                                scalar                    17246,17249,17252,17255           
 GCIRC_QC                   Func   16155    R(4)            4           scalar                    16345,16671,16674,16773,16803,1680
                                                                                                  6,16809,16847,16850,16853,16895,16
                                                                                                  898,16901,16971,17099,17102,17143,
                                                                                                  17146                             
 HT_FT                      Dummy  16100    R(4)            4     1     0        ARG,INOUT        16342,16384,16405,16445,16454,1652
                                                                                                  7,16528,16533,16534,16539,16565,16
                                                                                                  618,16619,16631,16632,16762,16959,
                                                                                                  16986,16989,16994,17009,17010,1701
                                                                                                  1,17012,17013,17014,17015,17016,17
                                                                                                  017,17018,17019,17020,17031,17039,
                                                                                                  17047,17055,17110,17122,17154,1716
                                                                                                  6,17202,17416,17426,17435,17445,17
                                                                                                  470,17563                         
 ICHK_D                     Dummy  16102    I(4)            4     1     0        ARG,INOUT        16448,16457,17419,17429,17438,1744
                                                                                                  8,17473,17566                     
 ICHK_Q                     Dummy  16102    I(4)            4     1     0        ARG,INOUT        16447,16456,17418,17428,17437,1744
                                                                                                  7,17472,17565                     
 ICHK_S                     Dummy  16102    I(4)            4     1     0        ARG,INOUT        16449,16458,16692,17420,17430,1743
                                                                                                  9,17449,17474,17567               
 ICHK_T                     Dummy  16102    I(4)            4     1     0        ARG,INOUT        16446,16455,17417,17427,17436,1744
                                                                                                  6,17471,17564                     
 IDT                        Dummy  16102    I(4)            4     1     0        ARG,INOUT        16343,16385,16400,16415,16421,1644

Page 390         Source Listing                  POSCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  4,16453,16545,16570,16571,16579,16
                                                                                                  580,16589,16644,16651,16794,16795,
                                                                                                  16798,16799,16861,16871,16909,1691
                                                                                                  9,17108,17120,17152,17164,17197,17
                                                                                                  212,17217,17246,17249,17252,17255,
                                                                                                  17258,17269,17270,17415,17425,1743
                                                                                                  4,17444,17462,17469,17562         
 IDT_DIF                    Local  16235    I(4)            4           scalar                    16545,16561,16610,16624,16640,1675
                                                                                                  7,16954                           
 IDT_DIFP1                  Local  16236    I(4)            4           scalar                    16644,16646,16653                 
 IDT_STK                    Local  16239    I(4)            4           scalar                    16589,17462                       
 IDT_TOT                    Local  16237    I(4)            4           scalar                    17258,17268                       
 IDT_UPDN                   Dummy  16099    I(4)            4           scalar   ARG,INOUT        16653                             
 IEND                       Local  16165    I(4)            4           scalar                    16322,16323,16472,16479,17460     
 IFIX                       Func   17269                                scalar                    17269,17270                       
 IHT0                       Local  16231    I(4)            4           scalar                    16528,16530,16540,16609,16639     
 IHTDIF0                    Local  16233    I(4)            4           scalar                    16540,16542,16611,16625,16641     
 IHTM1                      Local  16232    I(4)            4           scalar                    16534,16536,16540,16623           
 II                         Local  16225    I(4)            4           scalar                    16440,16451,16452,16453,16454,1645
                                                                                                  5,16456,16457,16458,16459,16475,16
                                                                                                  527,16528,16539,16545,16550,16554,
                                                                                                  16562,16563,16565,16570,16571,1657
                                                                                                  4,16579,16580,16583,16587,16589,16
                                                                                                  601,16612,16618,16626,16631,16634,
                                                                                                  16644,16651,16669,16670,16674,1667
                                                                                                  9,16681,16683,16685,16708,16728,16
                                                                                                  733,16734,16737,16738,16739,16741,
                                                                                                  16742,16743,16744,16746,16747,1674
                                                                                                  8,16749,16750,16751,16752,16753,16
                                                                                                  759,16760,16762,16773,16782,16783,
                                                                                                  16785,16795,16799,16807,16829,1683
                                                                                                  0,16839,16840,16848,16851,16861,16
                                                                                                  871,16876,16877,16887,16888,16896,
                                                                                                  16899,16909,16919,16924,16925,1693
                                                                                                  5,16936,16948,16949,16956,16957,16
                                                                                                  959,16989,16996,16997,17003,17004,
                                                                                                  17010,17011,17013,17014,17015,1701
                                                                                                  6,17018,17019,17031,17032,17044,17
                                                                                                  045,17047,17048,17060,17061,17070,
                                                                                                  17071,17081,17082,17092,17093,1710
                                                                                                  0,17108,17110,17111,17120,17127,17
                                                                                                  128,17136,17137,17144,17152,17154,
                                                                                                  17155,17164,17171,17172,17180,1718
                                                                                                  1,17191,17192,17197,17199,17200,17
                                                                                                  202,17212,17217,17218,17228,17254,
                                                                                                  17269,17275,17276,17286,17287,1729
                                                                                                  8,17299,17315,17316,17317,17319,17
                                                                                                  320,17321,17322,17323,17325,17326,
                                                                                                  17327,17328,17329,17332,17333,1733
                                                                                                  4,17335,17337,17338,17339,17340,17
                                                                                                  341,17343,17344,17345,17346,17347,
                                                                                                  17350,17351,17352,17353,17362,1736
                                                                                                  3,17364,17366,17367,17368,17372,17
                                                                                                  373,17374,17378,17379,17380,17384,
                                                                                                  17385,17386,17390,17391,17392,1739

Page 391         Source Listing                  POSCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  7,17398,17399,17400,17432,17433,17
                                                                                                  434,17435,17436,17437,17438,17439,
                                                                                                  17440,17461,17462,17463,17464,1746
                                                                                                  7,17468,17469,17470,17471,17472,17
                                                                                                  473,17474,17475,17507,17509,17510,
                                                                                                  17511,17512,17515,17516,17517,1751
                                                                                                  8,17521,17522,17523,17524,17527,17
                                                                                                  528,17529,17530,17533,17534,17550,
                                                                                                  17551,17552,17553,17554,17555,1755
                                                                                                  6,17557,17560,17561,17562,17563,17
                                                                                                  564,17565,17566,17567,17568,17575,
                                                                                                  17577,17579,17581,17583,17585,1758
                                                                                                  6,17588,17595,17596,17597,17598,17
                                                                                                  599,17600,17602,17671,17673,17675,
                                                                                                  17677,17679,17681,17685           
 IIEND                      Local  16166    I(4)            4           scalar                    16323,16331,16332,16333,16334,1633
                                                                                                  5,16340,16341,16342,16343,16346,16
                                                                                                  364,16365,16368,16369,16374,16375,
                                                                                                  16381,16382,16384,16385,16395,1639
                                                                                                  6,16400,16402,16403,16405,16415,16
                                                                                                  421,16422,16431,16432,16440       
 IIM1                       Local  16226    I(4)            4           scalar                    16439,16441,16442,16443,16444,1644
                                                                                                  5,16446,16447,16448,16449,16450,16
                                                                                                  489,16490,16491,16492,16493,16494,
                                                                                                  16495,16500,16523,16533,16534,1653
                                                                                                  9,16545,16551,16554,16562,16563,16
                                                                                                  565,16570,16573,16579,16582,16612,
                                                                                                  16619,16621,16626,16632,16651,1665
                                                                                                  2,16660,16669,16670,16671,16679,16
                                                                                                  680,16683,16684,16692,16699,16735,
                                                                                                  16736,16737,16738,16739,16741,1674
                                                                                                  2,16743,16744,16745,16747,16748,16
                                                                                                  749,16750,16751,16752,16753,16759,
                                                                                                  16760,16762,16774,16782,16783,1678
                                                                                                  6,16787,16810,16826,16827,16837,16
                                                                                                  838,16847,16854,16866,16867,16885,
                                                                                                  16886,16895,16902,16914,16915,1693
                                                                                                  3,16934,16946,16947,16956,16957,16
                                                                                                  959,16991,16992,16994,17001,17002,
                                                                                                  17009,17010,17012,17013,17016,1701
                                                                                                  7,17019,17020,17036,17037,17039,17
                                                                                                  040,17052,17053,17055,17056,17068,
                                                                                                  17069,17079,17080,17090,17091,1710
                                                                                                  3,17115,17116,17122,17123,17134,17
                                                                                                  135,17147,17159,17160,17166,17167,
                                                                                                  17178,17179,17189,17190,17197,1719
                                                                                                  9,17200,17202,17212,17217,17219,17
                                                                                                  220,17270,17271,17272,17284,17285,
                                                                                                  17296,17297,17315,17316,17317,1731
                                                                                                  9,17320,17321,17325,17326,17327,17
                                                                                                  331,17332,17333,17337,17338,17339,
                                                                                                  17343,17344,17345,17354,17355,1735
                                                                                                  6,17357,17362,17363,17364,17366,17
                                                                                                  367,17368,17369,17370,17372,17373,
                                                                                                  17374,17375,17376,17379,17380,1738

Page 392         Source Listing                  POSCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  1,17382,17384,17385,17386,17387,17
                                                                                                  388,17390,17391,17392,17393,17394,
                                                                                                  17401,17402,17403,17404,17422,1742
                                                                                                  3,17424,17425,17426,17427,17428,17
                                                                                                  429,17430,17431                   
 IIM2                       Local  16227    I(4)            4           scalar                    16507,16508,16509,16510,16511,1651
                                                                                                  2,16513,16518,16569,16571,16572,16
                                                                                                  791,16793,16794,16795,16796,16797,
                                                                                                  16798,16799,16800,16804,16845,1685
                                                                                                  0,16853,16861,16871,16969,16972,16
                                                                                                  986,16989,16994,17009,17012,17015,
                                                                                                  17018,17028,17031,17032,17039,1704
                                                                                                  0,17098,17099,17102,17108,17110,17
                                                                                                  111,17120,17122,17123,17224,17227,
                                                                                                  17229,17246,17249,17252,17253,1725
                                                                                                  4,17255,17258,17412,17413,17414,17
                                                                                                  415,17416,17417,17418,17419,17420,
                                                                                                  17421                             
 IIP1                       Local  16228    I(4)            4           scalar                    16480,16482,16578,16580,16581,1664
                                                                                                  3,16644,16666,16672,16675,16680,16
                                                                                                  681,16684,16685,16791,16793,16794,
                                                                                                  16797,16798,16803,16893,16898,1690
                                                                                                  1,16909,16919,16969,16971,16986,17
                                                                                                  011,17014,17017,17020,17028,17047,
                                                                                                  17048,17055,17056,17142,17143,1714
                                                                                                  6,17152,17154,17155,17164,17166,17
                                                                                                  167,17224,17227,17230,17246,17252,
                                                                                                  17253,17258,17441,17442,17443,1744
                                                                                                  4,17445,17446,17447,17448,17449,17
                                                                                                  450                               
 IISTART                    Local  16164    I(4)            4           scalar                    16321,16329,16330,16333,16334,1633
                                                                                                  5,16340,16341,16342,16343,16345,16
                                                                                                  364,16365,16367,16372,16373,16381,
                                                                                                  16382,16384,16385,16393,16394,1640
                                                                                                  0,16402,16403,16405,16415,16421,16
                                                                                                  423,16424,16429,16430,16439,16467,
                                                                                                  16652                             
 IMISS                      Dummy  16098    I(4)            4           scalar   ARG,INOUT        16530,16536,16542,16611,16625,1664
                                                                                                  6,16653                           
 INDX                       Dummy  16098    I(4)            4     1     0        ARG,INOUT        16321,16323,16475,16480,16489,1650
                                                                                                  7,17461,17507                     
 INSTY_OB_FUN               Func   16153    I(4)            4           scalar                    16272,16273,16274,16275,16276,1627
                                                                                                  7,16278,16279,16280,16281,16282,16
                                                                                                  283,16284,16285,16286,16287,16288,
                                                                                                  16289                             
 IO35                       Dummy  16103    I(4)            4           scalar   ARG,INOUT        17491,17492,17493,17494,17560,1762
                                                                                                  2,17623,17625,17626,17627,17628   
 IO8                        Dummy  16103    I(4)            4           scalar   ARG,INOUT        16352,16353,16354,16361,16389,1639
                                                                                                  0,16409,16410,16418,16441,16451,16
                                                                                                  592,16593,16594,16616,16617,16618,
                                                                                                  16619,16629,16630,16631,16632,1665
                                                                                                  6,16657,16658,16695,16696,16697,16
                                                                                                  704,16705,16706,16713,16714,16715,
                                                                                                  16724,16725,16726,16766,16767,1676
                                                                                                  8,16779,16814,16816,16817,16818,16

Page 393         Source Listing                  POSCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  857,16864,16874,16883,16905,16912,
                                                                                                  16922,16931,16944,16963,16964,1697
                                                                                                  6,16987,16990,16995,17000,17023,17
                                                                                                  029,17034,17042,17050,17058,17067,
                                                                                                  17078,17089,17113,17125,17133,1715
                                                                                                  7,17169,17177,17188,17206,17207,17
                                                                                                  215,17261,17262,17294,17307,17308,
                                                                                                  17412,17422,17432,17441,17465,1746
                                                                                                  6,17467,17631,17632,17633,17634,17
                                                                                                  636,17637,17638,17639,17656,17657,
                                                                                                  17658,17659,17662,17664,17666,1766
                                                                                                  8,17670,17672,17674,17676,17678,17
                                                                                                  680,17682,17684,17686,17692,17693,
                                                                                                  17694                             
 IOB                        Local  16224    I(4)            4           scalar                    16472,16475,16479,16480,16487,1746
                                                                                                  0,17461,17506,17507               
 IOBS_FLT                   Dummy  16103    I(4)            4     1     0        ARG,INOUT        16320,16322                       
 ISTART                     Local  16163    I(4)            4           scalar                    16320,16321,16472,16488,16506,1746
                                                                                                  0                                 
 ITYPE                      Dummy  16102    I(4)            4     1     0        ARG,INOUT        16329,16330,16331,16332,16442,1645
                                                                                                  1,16733,16734,16735,16736,17413,17
                                                                                                  423,17432,17442,17467,17509,17510,
                                                                                                  17511,17512,17515,17516,17517,1751
                                                                                                  8,17521,17522,17523,17524,17527,17
                                                                                                  528,17529,17530,17533,17534,17560 
 I_ACARS                    Local  16195    I(4)            4           scalar                    16272,17515                       
 I_ACARS_ASC                Local  16199    I(4)            4           scalar                    16274,17517                       
 I_ACARS_DES                Local  16201    I(4)            4           scalar                    16275,17518                       
 I_ACARS_LVL                Local  16197    I(4)            4           scalar                    16273,17516                       
 I_AIREP                    Local  16208    I(4)            4           scalar                    16282,17527                       
 I_AIREP_ASC                Local  16210    I(4)            4           scalar                    16284,17529                       
 I_AIREP_DES                Local  16211    I(4)            4           scalar                    16285,17530                       
 I_AIREP_LVL                Local  16209    I(4)            4           scalar                    16283,17528                       
 I_AMDAR                    Local  16212    I(4)            4           scalar                    16286,17521                       
 I_AMDAR_ASC                Local  16214    I(4)            4           scalar                    16288,17523                       
 I_AMDAR_DES                Local  16215    I(4)            4           scalar                    16289,17524                       
 I_AMDAR_LVL                Local  16213    I(4)            4           scalar                    16287,17522                       
 I_MAN_AIREP                Local  16206    I(4)            4           scalar                    16280,16329,16331,16733,16735,1753
                                                                                                  3                                 
 I_MAN_YAIREP               Local  16207    I(4)            4           scalar                    16281,16330,16332,16734,16736,1753
                                                                                                  4                                 
 I_MDCRS                    Local  16202    I(4)            4           scalar                    16276,17509                       
 I_MDCRS_ASC                Local  16204    I(4)            4           scalar                    16278,17511                       
 I_MDCRS_DES                Local  16205    I(4)            4           scalar                    16279,17512                       
 I_MDCRS_LVL                Local  16203    I(4)            4           scalar                    16277,17510                       
 KBAD                       Local  16177    I(4)            4     1     5                         17504,17604,17623,17625,17626,1762
                                                                                                  7,17628,17634,17636,17637,17638,17
                                                                                                  639,17689,17690                   
 KBADTOT                    Dummy  16103    I(4)            4           scalar   ARG,INOUT        17689,17694                       
 KFLIGHT                    Dummy  16103    I(4)            4           scalar   ARG,INOUT        16315                             
 KK                         Local  16224    I(4)            4           scalar                    16315,16320,16322,16328,16441,1645
                                                                                                  1,16468,17412,17422,17432,17441,17
                                                                                                  467                               
 KNT1                       Local  16229    I(4)            4           scalar                    16487,16488,16489,16496,16505     
 KNT2                       Local  16230    I(4)            4           scalar                    16505,16506,16507,16514           

Page 394         Source Listing                  POSCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 KTYPE                      Local  16241    I(4)            4           scalar                    17513,17519,17525,17531,17535,1753
                                                                                                  8,17540,17542,17544,17546,17576,17
                                                                                                  578,17580,17582,17584,17587,17589,
                                                                                                  17604,17606,17608,17610,17612,1761
                                                                                                  4                                 
 L_INIT                     Dummy  16104    L(4)            4           scalar   ARG,INOUT        16293                             
 L_OPERATIONAL              Dummy  16104    L(4)            4           scalar   ARG,INOUT        17490,17559,17621                 
 L_PRINT                    Local  16262    L(4)            4           scalar                    16324,16350,16351,16360,16387,1638
                                                                                                  8,16407,16408,16417,16438,16473,16
                                                                                                  590,16591,16614,16615,16627,16628,
                                                                                                  16654,16655,16693,16694,16702,1670
                                                                                                  3,16711,16712,16722,16723,16764,16
                                                                                                  765,16778,16813,16856,16863,16873,
                                                                                                  16882,16904,16911,16921,16930,1694
                                                                                                  3,16961,16962,16975,17022,17033,17
                                                                                                  041,17049,17057,17066,17078,17089,
                                                                                                  17112,17124,17133,17156,17168,1717
                                                                                                  7,17188,17204,17205,17214,17260,17
                                                                                                  293,17305,17306,17411             
 MAXFLT                     Dummy  16103    I(4)            4           scalar   ARG,INOUT        16160,16161                       
 MAX_REPS                   Dummy  16098    I(4)            4           scalar   ARG,INOUT        16116,16122,16123,16124,16125,1612
                                                                                                  6,16127,16128,16129,16130,16131,16
                                                                                                  132,16133,16134,16135,16136,16137,
                                                                                                  16138,16139,16140,16141,16142,1614
                                                                                                  3,16147                           
 NINC_AC                    Local  16186    I(4)            4           scalar                    16306,17609,17652,17667           
 NINC_ALT                   Local  16172    I(4)            4     1     5                         16296,17580,17675                 
 NINC_AM                    Local  16190    I(4)            4           scalar                    16310,17611,17652,17667           
 NINC_AR                    Local  16189    I(4)            4           scalar                    16309,17613,17652,17667           
 NINC_AVG                   Local  16175    I(4)            4     1     5                         16299,17587,17685                 
 NINC_BAD                   Local  16176    I(4)            4     1     5                         16300,17589,17681                 
 NINC_MA                    Local  16188    I(4)            4           scalar                    16308,17615,17652,17667           
 NINC_MD                    Local  16187    I(4)            4           scalar                    16307,17607,17652,17667           
 NINC_STK                   Local  16173    I(4)            4     1     5                         16297,17582,17677                 
 NINC_TIME                  Local  16174    I(4)            4     1     5                         16298,17584,17679                 
 NINC_WAY                   Local  16171    I(4)            4     1     5                         16295,17578,17673                 
 NINC_XTRA                  Local  16170    I(4)            4     1     5                         16294,17576,17671                 
 NINT                       Func   16528                                scalar                    16528,16534                       
 NOBS_FLT                   Dummy  16103    I(4)            4     1     0        ARG,INOUT        16322,16328,16468                 
 NREP_AC                    Local  16180    I(4)            4           scalar                    16301,17541,17650,17665           
 NREP_AM                    Local  16184    I(4)            4           scalar                    16305,17543,17650,17665           
 NREP_AR                    Local  16183    I(4)            4           scalar                    16304,17545,17650,17665           
 NREP_MA                    Local  16182    I(4)            4           scalar                    16303,17547,17650,17665           
 NREP_MD                    Local  16181    I(4)            4           scalar                    16302,17539,17650,17665           
 NUMREPS                    Dummy  16098    I(4)            4           scalar   ARG,INOUT        17506,17693                       
 OB_DIR                     Dummy  16100    R(4)            4     1     0        ARG,INOUT        16334,16448,16457,16550,16551,1655
                                                                                                  4,16741,16742,16743,16744,16745,16
                                                                                                  746,17325,17326,17328,17331,17332,
                                                                                                  17334,17350,17352,17354,17356,1737
                                                                                                  2,17373,17375,17378,17379,17381,17
                                                                                                  397,17399,17401,17403,17419,17429,
                                                                                                  17438,17448,17473,17566           
 OB_Q                       Dummy  16100    R(4)            4     1     0        ARG,INOUT        16447,16456,17418,17428,17437,1744
                                                                                                  7,17472,17565                     
 OB_SPD                     Dummy  16100    R(4)            4     1     0        ARG,INOUT        16335,16449,16458,16683,16684,1668

Page 395         Source Listing                  POSCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  5,16747,16748,16749,16750,16751,16
                                                                                                  752,16753,17337,17338,17340,17343,
                                                                                                  17344,17346,17350,17352,17354,1735
                                                                                                  6,17384,17385,17387,17390,17391,17
                                                                                                  393,17397,17399,17401,17403,17420,
                                                                                                  17430,17439,17449,17474,17567     
 OB_T                       Dummy  16100    R(4)            4     1     0        ARG,INOUT        16333,16446,16455,16612,16626,1667
                                                                                                  9,16680,16681,16737,16738,16739,17
                                                                                                  028,17032,17040,17048,17056,17111,
                                                                                                  17123,17155,17167,17319,17320,1732
                                                                                                  2,17366,17367,17369,17417,17427,17
                                                                                                  436,17446,17471,17564             
 POSCHEK_QC                 Subr   16098                                                                                            
 PRES                       Dummy  16100    R(4)            4     1     0        ARG,INOUT        16445,16454,17416,17426,17435,1744
                                                                                                  5,17470,17563                     
 STUCK                      Local  16265    L(4)            4           scalar                    16319,16588,17459                 
 TIME_EST                   Local  16253    R(4)            4           scalar                    17243,17246,17252,17261,17268,1726
                                                                                                  9,17270                           
 T_PRCN                     Dummy  16100    R(4)            4     1     0        ARG,INOUT        16446,16455,17417,17427,17436,1744
                                                                                                  6,17471,17564                     
 XIV_D                      Dummy  16101    R(4)            4     1     0        ARG,INOUT        16448,16457,17419,17429,17438,1744
                                                                                                  8,17473,17566                     
 XIV_Q                      Dummy  16101    R(4)            4     1     0        ARG,INOUT        16447,16456,17418,17428,17437,1744
                                                                                                  7,17472,17565                     
 XIV_S                      Dummy  16101    R(4)            4     1     0        ARG,INOUT        16449,16458,17420,17430,17439,1744
                                                                                                  9,17474,17567                     
 XIV_T                      Dummy  16101    R(4)            4     1     0        ARG,INOUT        16446,16455,17417,17427,17436,1744
                                                                                                  6,17471,17564                     

Page 396         Source Listing                  POSCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  17698 c
  17699 c ###################################################################
  17700 c                            subroutine orddup_qc
  17701 c ###################################################################
  17702 c   
  17703       subroutine orddup_qc(max_reps,indx,isave,ht_ft,idt,alat,alon
  17704      $,          kflight,maxflt,nobs_flt,iobs_flt
  17705      $,          c_acftreg,c_acftid,cidmiss,idt_near,io8)
  17706 c
  17707 c     Check the ordering of near-duplicate reports based on heights
  17708 c
  17709       implicit none
  17710 c
  17711       integer      io8                 ! i/o unit number for log file
  17712       integer      iob                 ! do loop index 
  17713      $,            max_reps            ! max number of observations/reports
  17714      $,            ii                  ! index pointing to current report
  17715      $,            iim1                ! index pointing to previous report
  17716      $,            iim2                ! index pointing to two reports ago
  17717      $,            iim3                ! index pointing to three reports ago
  17718      $,            iip1                ! index pointing to following report
  17719      $,            iip2                ! index pointing to report after next
  17720       integer      indx(max_reps)      ! pointer array
  17721      $,            isave(max_reps)     ! second pointer array used to reverse order
  17722       integer      kk                  ! do loop index
  17723       integer      knt                 ! number of reports with the same time
  17724      $,            kneg                ! number of reports with negative heights
  17725                                        !   and with the same time
  17726      $,            kkk                 ! do loop index
  17727      $,            nn                  ! do loop index
  17728      $,            nback               ! variable used in reversing order
  17729       integer      idt_dif1            ! first time difference
  17730      $,            idt_dif2            ! second time difference
  17731       integer      idt_near            ! time difference between "near" neighbors
  17732 c
  17733 c     Work arrays
  17734 c     -----------
  17735       real         ht_ft(max_reps)     ! height in feet
  17736       integer      iht0,iht1           ! integer height in feet
  17737       integer      idt(max_reps)       ! time in seconds to analysis time
  17738       real*8       alat(max_reps)      ! latitude
  17739      $,            alon(max_reps)      ! longitude
  17740       character*9  c_acftid(max_reps)  ! acft flight number
  17741       character*8  c_acftreg(max_reps) ! acft tail number
  17742 c
  17743       character*8  cidmiss             ! missing value flag for flight number
  17744 c
  17745       integer      maxflt              ! max number of flights allowed
  17746       integer      kflight             ! number of flights in dataset
  17747       integer      nobs_flt(maxflt)    ! number of reports per flight
  17748      $,            iobs_flt(maxflt)    ! index for first report in each flight
  17749       integer      istart              ! index for first report in current flight 
  17750      $,            iistart             ! index from pointer array for istart
  17751      $,            iend                ! index for last report in current flight
  17752      $,            iiend               ! index from pointer array for iend
  17753      $,            inow                ! iob + 1
  17754      $,            inext               ! counter

Page 397         Source Listing                  ORDDUP_QC
2017-04-18 11:07                                 acftobs_qc.f

  17755      $,            iinext              ! index from pointer array for inext
  17756      $,            ilast               ! index for last report with same time
  17757      $,            iilast              ! index from pointer array for ilast
  17758      $,            iilastm1            ! index from pointer array for ilast-1
  17759      $,            iilastm2            ! index from pointer array for ilast-2
  17760      $,            iilastp1            ! index from pointer array for ilast+1
  17761      $,            iibefore            ! index from pointer array for previous rep
  17762      $,            iiafter             ! index from pointer array for following rep
  17763      $,            iii                 ! index pointer for current report
  17764      $,            iiim1               ! index pointer for previous report
  17765       real*8       alat_dif            ! latitude difference used to check ordering
  17766      $,            alon_dif            ! longitude difference used to check ordering
  17767       real         ht_max              ! maximum height in group with same time
  17768      $,            ht_min              ! minimum height in group with same time
  17769      $,            ht_dif1,ht_dif2     ! height differences
  17770 c
  17771       logical      sameht              ! true if altitudes are equal
  17772 c
  17773       logical      l_print             ! print diagnostic output if true
  17774 c
  17775 c # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  17776 c
  17777 c Begin loop over flights
  17778 c -----------------------
  17779       do kk = 1,kflight
  17780 c
  17781 c Initialize variables
  17782 c --------------------
  17783         istart = iobs_flt(kk)
  17784         iistart = indx(istart)
  17785         iend = iobs_flt(kk) + nobs_flt(kk) - 1
  17786         iiend = indx(iend)
  17787 c
  17788 c Set print switch
  17789 c ----------------
  17790       l_print = .false.
  17791       if(c_acftreg(iistart)(1:8).eq.'########') l_print = .true.
  17792 c
  17793       if(l_print) then
  17794         write(io8,*)
  17795         write(io8,*) 'orddup output for ########'
  17796         write(io8,*) '--------------------------'
  17797         write(io8,*) 'iistart,iiend = ',iistart,iiend
  17798       endif
  17799 c
  17800 c Don't compare reports with missing flight number
  17801 c Perform check only for flights with three or more reports
  17802 c -----------------------------------------------------------------
  17803         if(c_acftid(iistart)(1:8).ne.cidmiss(1:8).and.
  17804      $     nobs_flt(kk).ge.3) then
  17805 c
  17806          if(l_print) write(io8,*) 'Valid flight found'
  17807 c
  17808 c Check ordering of reports with the same time
  17809 c --------------------------------------------
  17810 c
  17811 c         Compute indices

Page 398         Source Listing                  ORDDUP_QC
2017-04-18 11:07                                 acftobs_qc.f

  17812 c         ---------------
  17813           iob = istart
  17814 c
  17815           do while(iob.lt.iend)
  17816             if(iob.gt.istart+2) then
  17817               iim3 = indx(iob-3)
  17818             else
  17819               iim3 = 0
  17820             endif
  17821 c
  17822             if(iob.gt.istart+1) then
  17823               iim2 = indx(iob-2)
  17824             else
  17825               iim2 = 0
  17826             endif
  17827 c
  17828             if(iob.gt.istart) then
  17829               iim1 = indx(iob-1)
  17830             else
  17831               iim1 = 0
  17832             endif
  17833 c
  17834             ii   = indx(iob)
  17835 c
  17836             if(iob.lt.iend) then
  17837               iip1 = indx(iob+1)
  17838             else
  17839               iip1 = 0
  17840             endif
  17841 c
  17842             if(iob.lt.iend-1) then
  17843               iip2 = indx(iob+2)
  17844             else
  17845               iip2 = 0
  17846             endif
  17847 c
  17848 c           Count number of reports with same time
  17849 c           --------------------------------------
  17850             if(iip1.ne.0) then
  17851               if(idt(ii).eq.idt(iip1)) then
  17852                 knt = 2
  17853 c               write(io8,*)
  17854 c               write(io8,*) 'Second report with same time--',ii,iip1,knt
  17855 c
  17856                 ht_max = ht_ft(ii)
  17857                 if(ht_ft(iip1).gt.ht_max) ht_max = ht_ft(iip1)
  17858 c
  17859                 ht_min = ht_ft(ii)
  17860                 if(ht_ft(iip1).lt.ht_min) ht_min = ht_ft(iip1)
  17861 c
  17862                 if(ht_ft(ii).lt.0) then
  17863                   kneg = 1
  17864 c                  write(io8,*) 
  17865 c                  write(io8,*) 'Negative height found for ii=',ii
  17866                 else
  17867                   kneg = 0
  17868                 endif

Page 399         Source Listing                  ORDDUP_QC
2017-04-18 11:07                                 acftobs_qc.f

  17869 c
  17870                 if(ht_ft(iip1).lt.0) then
  17871                   kneg = kneg + 1
  17872 c                  write(io8,*) 'A second neg ht found for ii=',iip1
  17873                 endif
  17874 c
  17875                 inow = iob + 1
  17876                 inext = inow + 1
  17877 c
  17878  10             if(inext.le.iend) then
  17879                   iinext = indx(inext)
  17880                   if(idt(ii).eq.idt(iinext)) then
  17881                     knt = knt + 1
  17882 c                    write(io8,*) 'Another report with same time--',inext
  17883                     if(ht_ft(iinext).gt.ht_max) ht_max = ht_ft(iinext)
  17884                     if(ht_ft(iinext).lt.ht_min) ht_min = ht_ft(iinext)
  17885                     if(ht_ft(iinext).lt.0) then
  17886                       kneg = kneg + 1
  17887 c                      write(io8,*) 'Another neg ht found for ii=',iinext
  17888                     endif
  17889                     inext = inext + 1
  17890                     goto 10
  17891                   endif
  17892                 endif
  17893 c
  17894                 if(l_print) then
  17895                   write(io8,*)
  17896                   write(io8,*) '#obs with same time = ',knt
  17897                   write(io8,*) '#obs with neg height = ',kneg
  17898                   write(io8,*) 'ht_max,ht_min = ',ht_max,ht_min
  17899                   write(io8,*) 'inow,inext = ',inow,inext
  17900                   write(io8,*) 'iim3,iim2,iim1 = ',iim3,iim2,iim1
  17901                   write(io8,*) 'ii,iip1,iip2   = ',ii,iip1,iip2
  17902                 endif
  17903 c
  17904                 ilast = inext - 1
  17905                 if(ilast.le.iend) then
  17906                   iilast   = indx(ilast)
  17907                 else
  17908                   iilast = 0
  17909                 endif
  17910                 if(ilast+1.le.iend) then
  17911                   iilastp1 = indx(ilast+1)
  17912                 else
  17913                   iilastp1 = 0
  17914                 endif
  17915                 if(ilast-1.ge.istart) then
  17916                   iilastm1 = indx(ilast-1)
  17917                 else
  17918                   iilastm1 = 0
  17919                 endif
  17920                 if(ilast-2.ge.istart) then
  17921                   iilastm2 = indx(ilast-2)
  17922                 else
  17923                   iilastm2 = 0
  17924                 endif
  17925 c

Page 400         Source Listing                  ORDDUP_QC
2017-04-18 11:07                                 acftobs_qc.f

  17926                 if(l_print) then
  17927                   write(io8,*) 'iilastm2,iilastm1 = ',iilastm2,iilastm1
  17928                   write(io8,*) 'iilast,iilastp1   = ',iilast,iilastp1
  17929                 endif
  17930 c
  17931 c               Case with duplicates in middle of flight
  17932 c               ----------------------------------------
  17933                 if(iim1.ne.0.and.iip1.ne.0.and.
  17934      $             iilast.ne.0.and.iilastp1.ne.0.and.
  17935      $             iilastm1.ne.0) then
  17936 c
  17937                   idt_dif1 = abs(idt(ii) - idt(iim1))
  17938                   iibefore = iim1
  17939                   if(idt_dif1.ge.idt_near) then 
  17940                     idt_dif1 = abs(idt(iip1) - idt(ii))
  17941                     iibefore = ii
  17942                   endif
  17943 c
  17944                   idt_dif2 = abs(idt(iilastp1) - idt(iilast))
  17945                   iiafter  = iilastp1
  17946                   if(idt_dif2.ge.idt_near) then 
  17947                     idt_dif2 = abs(idt(iilast) - idt(iilastm1))
  17948                     iiafter = iilast
  17949                   endif
  17950 c
  17951                   if(l_print) then
  17952                     write(io8,*) 'Duplicates in middle of flight'
  17953                     write(io8,*) 'idt_dif1,idt_dif2= ',idt_dif1,idt_dif2
  17954                     write(io8,*) 'iibefore,iiafter = ',iibefore,iiafter
  17955                   endif
  17956 c
  17957 c                 Check if near dups are part of a level flight leg
  17958 c                 -------------------------------------------------
  17959                   if(abs(ht_ft(iibefore) - ht_ft(iiafter)).le.100.0.and.
  17960      $               abs(ht_ft(iibefore) - ht_max).le.100.0.and.
  17961      $               abs(ht_min - ht_ft(iiafter)).le.100.0) then
  17962 c
  17963                     if(l_print) 
  17964      $              write(io8,*) 'Near dups in smooth level leg--ii=',ii
  17965 c
  17966 c                 Or part of a smooth ascent
  17967 c                 --------------------------
  17968                   elseif(ht_ft(iibefore).lt.ht_ft(iiafter).and.
  17969      $                   ht_ft(iibefore).le.ht_min.and.
  17970      $                   ht_max.le.ht_ft(iiafter)) then
  17971 c
  17972                     if(l_print)
  17973      $                write(io8,*) 'Near dups in smooth ascent--ii=',ii
  17974 c
  17975 c                 Or part of smooth descent
  17976 c                 -------------------------
  17977                   elseif(ht_ft(iibefore).gt.ht_ft(iiafter).and.
  17978      $                   ht_ft(iibefore).ge.ht_max.and.
  17979      $                   ht_min.ge.ht_ft(iiafter)) then
  17980 c
  17981                     if(l_print) 
  17982      $                write(io8,*) 'Near dups in smooth descent--ii=',ii

Page 401         Source Listing                  ORDDUP_QC
2017-04-18 11:07                                 acftobs_qc.f

  17983 c
  17984 c                 Or near dups are near max or min altitude
  17985 c                 -----------------------------------------
  17986                   else
  17987 c
  17988                     ht_dif1 = abs(ht_ft(iibefore) - ht_ft(ii))
  17989                     ht_dif2 = abs(ht_ft(iilast) - ht_ft(iiafter))
  17990 c
  17991 c                   Re-set iibefore or iiafter if appropriate
  17992 c                   -----------------------------------------
  17993                     if(idt_dif1.lt.idt_dif2.and.
  17994      $                 iibefore.ne.ii.and.iiafter.ne.iilast) then
  17995 c
  17996                       idt_dif2 = abs(idt(iilast) - idt(iilastm1))
  17997                       iiafter = iilast
  17998 c
  17999                       if(l_print) then
  18000                       write(io8,*) 'Near dups near peak alt-1-ii=',ii
  18001                       write(io8,*) 'idt_dif2,iiafter= ',idt_dif2,iiafter
  18002                       endif
  18003 c
  18004                     elseif(idt_dif1.gt.idt_dif2.and.
  18005      $                     iibefore.ne.ii.and.iiafter.ne.iilast) then
  18006 c
  18007                       idt_dif1 = abs(idt(iip1) - idt(ii))
  18008                       iibefore = ii
  18009 c
  18010                       if(l_print) then
  18011                       write(io8,*)
  18012                       write(io8,*)'Near dups near peak alt-2-ii=',ii
  18013                       write(io8,*)'idt_dif1,iibefore=',idt_dif1,iibefore
  18014                       endif
  18015 c
  18016                     elseif(idt_dif1.eq.idt_dif2.and.                                     
  18017      $                     iibefore.ne.ii.and.iiafter.eq.iilast) then
  18018 c
  18019                       if(idt(iip2)-idt(iip1).ge.idt_near) then
  18020                         idt_dif2 = abs(idt(iilastm1) - idt(iilastm2))
  18021                         iiafter = iilastm1
  18022 c
  18023                         if(l_print) then
  18024                         write(io8,*)'Dropping last point in descent',ii
  18025                         write(io8,*)'idt_dif2,iiafter=',idt_dif2,iiafter
  18026                         endif
  18027 c
  18028                       elseif(ht_dif1.lt.ht_dif2) then
  18029                         idt_dif2 = abs(idt(iilast) - idt(iilastm1))
  18030                         iiafter = iilast
  18031 c
  18032                         if(l_print) then
  18033                         write(io8,*)'Near dups near peak alt-3-ii=',ii
  18034                         write(io8,*)'idt_dif2,iiafter=',idt_dif2,iiafter
  18035                         endif
  18036 c
  18037                       elseif(ht_dif1.gt.ht_dif2) then
  18038                         idt_dif1 = abs(idt(iip1) - idt(ii))
  18039                         iibefore = ii

Page 402         Source Listing                  ORDDUP_QC
2017-04-18 11:07                                 acftobs_qc.f

  18040 c
  18041                         if(l_print) then
  18042                         write(io8,*)'Near dups near peak alt-4-ii=',ii
  18043                         write(io8,*)'idt_dif1,iibefr=',idt_dif1,iibefore
  18044                         endif
  18045 c
  18046                       else
  18047                         if(l_print) then
  18048                         write(io8,*)'Near dups near peak alt-5-ii=',ii
  18049                         write(io8,*)'Neither time nor height check used'
  18050                         endif
  18051                       endif
  18052 c
  18053                     else
  18054                       if(l_print) then
  18055                         write(io8,*) 'Near dups near peak alt-6-ii=',ii
  18056                         write(io8,*) 'Indices not reset'
  18057                       endif
  18058                     endif
  18059                   endif
  18060 c
  18061 c               Case with duplicates during whole flight
  18062 c               ----------------------------------------
  18063                 elseif(iob.eq.istart.and.ilast.eq.iend.and.
  18064      $                 iilastm1.ne.0) then
  18065                   idt_dif1 = 0
  18066                   iibefore = ii
  18067                   idt_dif2 = abs(idt(iilast) - idt(iilastm1))
  18068                   iiafter = iilast
  18069 c
  18070                   if(l_print) then
  18071                     write(io8,*) 'Near dups found during whole flight'
  18072                     write(io8,*) knt,' reports found with same time'
  18073                     write(io8,*) 'idt_dif1,idt_dif2= ',idt_dif1,idt_dif2
  18074                     write(io8,*) 'iibefore,iiafter = ',iibefore,iiafter
  18075                   endif
  18076 c
  18077 c               Case with duplicates at beginning of flight
  18078 c               -------------------------------------------
  18079                 elseif(iob.eq.istart.and.ilast.le.iend.and.
  18080      $                 iilastm1.ne.0.and.iilastp1.ne.0) then
  18081                   idt_dif1 = 0
  18082                   iibefore = ii
  18083                   idt_dif2 = abs(idt(iilast) - idt(iilastp1))
  18084                   iiafter  = iilastp1
  18085                   if(idt_dif2.ge.idt_near) then 
  18086                     idt_dif2 = abs(idt(iilast) - idt(iilastm1))
  18087                     iiafter = iilast
  18088                   endif
  18089 c
  18090                   if(l_print) then
  18091                     write(io8,*)'Near dups found at beginning of flight'
  18092                     write(io8,*) knt,' reports found with same time'
  18093                     write(io8,*) 'idt_dif1,idt_dif2= ',idt_dif1,idt_dif2
  18094                     write(io8,*) 'iibefore,iiafter = ',iibefore,iiafter
  18095                   endif
  18096 c

Page 403         Source Listing                  ORDDUP_QC
2017-04-18 11:07                                 acftobs_qc.f

  18097 c               Case with duplicates at end of flight
  18098 c               -------------------------------------
  18099                 elseif(iob.gt.istart.and.ilast.eq.iend.and.
  18100      $                 iim1.ne.0.and.iip1.ne.0) then
  18101                   idt_dif1 = abs(idt(ii) - idt(iim1))
  18102                   iibefore = iim1
  18103                   if(idt_dif1.ge.idt_near) then 
  18104                     idt_dif1 = abs(idt(iip1) - idt(ii))
  18105                     iibefore = ii
  18106                   endif
  18107                   idt_dif2 = 0
  18108                   iiafter  = iilast
  18109 c
  18110                   if(l_print) then
  18111                     write(io8,*) 'Near dups found at end of flight'
  18112                     write(io8,*) knt,' reports found with same time'
  18113                     write(io8,*) 'idt_dif1,idt_dif2= ',idt_dif1,idt_dif2
  18114                     write(io8,*) 'iibefore,iiafter = ',iibefore,iiafter
  18115                   endif
  18116                 endif
  18117 c
  18118 c               Check time differences--compare neighboring reports within idt_near
  18119 c               -------------------------------------------------------------------
  18120                 if(idt_dif1.lt.idt_near.and.idt_dif2.lt.idt_near) then
  18121 c
  18122                   iht0 = nint(ht_ft(iibefore)/100.)
  18123                   iht1 = nint(ht_ft(iiafter)/100.)
  18124 c
  18125                   if(l_print) then
  18126                     write(io8,*) 'Time differences within idt_near'
  18127                     write(io8,*) 'iht0,iht1 = ',iht0,iht1
  18128                   endif
  18129 c
  18130 c                 Check if all altitudes are equal
  18131 c                 --------------------------------
  18132                   sameht = .true.
  18133 c
  18134                   do kkk=iob,iob+knt-1
  18135                    if(nint(ht_ft(indx(kkk))/100.).ne.
  18136      $                nint(ht_ft(ii)/100.))
  18137      $               sameht = .false.
  18138                   enddo
  18139 c
  18140                   if(l_print)
  18141      $              write(io8,*) 'Altitudes equal?',sameht
  18142 c
  18143 c                 Use lat/lon to order obs if altitudes equal
  18144 c                 -------------------------------------------
  18145                   if(sameht.and.knt.eq.2) then
  18146 c
  18147                     alat_dif = abs(alat(iiafter) - alat(iibefore))
  18148                     alon_dif = abs(alon(iiafter) - alon(iibefore))
  18149                     iii = indx(iob+1)
  18150                     iiim1 = indx(iob)
  18151 c
  18152                     if(l_print) then 
  18153                       write(io8,*) 'Level pair at ii = ',ii

Page 404         Source Listing                  ORDDUP_QC
2017-04-18 11:07                                 acftobs_qc.f

  18154                       write(io8,*) 'alat_dif = ',alat_dif
  18155                       write(io8,*) 'alon_dif = ',alon_dif
  18156                       write(io8,*) 'iii,iiim1 = ',iii,iiim1
  18157                     endif
  18158 c
  18159                     if(alat_dif.gt.alon_dif) then
  18160                       if((alat(iibefore).gt.alat(iiafter).and.
  18161      $                    alat(iiim1).lt.alat(iii)).or.
  18162      $                   (alat(iibefore).le.alat(iiafter).and.
  18163      $                    alat(iiim1).gt.alat(iii))) then
  18164 c
  18165                         if(l_print) then
  18166                           write(io8,*) 'Reversing pair of obs-1-',iii
  18167                           write(io8,*) 'lats = ',alat(iiim1),alat(iii)
  18168                         endif
  18169 c
  18170                         indx(iob) = iii
  18171                         indx(iob+1) = iiim1
  18172                       endif
  18173 c
  18174                     else
  18175                       if((alon(iibefore).gt.alon(iiafter).and.
  18176      $                    alon(iiim1).lt.alon(iii)).or.
  18177      $                   (alon(iibefore).le.alon(iiafter).and.
  18178      $                    alon(iiim1).gt.alon(iii))) then
  18179 c
  18180                         if(l_print) then
  18181                           write(io8,*) 'Reversing pair of obs-2-',iii
  18182                           write(io8,*) 'lons = ',alon(iiim1),alon(iii)
  18183                         endif
  18184 c
  18185                         indx(iob) = iii
  18186                         indx(iob+1) = iiim1
  18187                       endif
  18188                     endif
  18189 c
  18190 c                 Descent found
  18191 c                 -------------
  18192                   elseif(iht0.gt.iht1) then
  18193 c
  18194                     if(l_print)
  18195      $                write(io8,*) 'Reversing descent at report',ii
  18196 c
  18197 c                   Re-order descending portions of flights with positive heights
  18198 c                   -------------------------------------------------------------
  18199                     do nn = iob,ilast
  18200                       nback = ilast - nn + iob
  18201                       isave(nn) = indx(nback)
  18202                     enddo
  18203 c
  18204                     indx(iob:ilast) = isave(iob:ilast)
  18205 c
  18206 c                 Ascent found
  18207 c                 ------------
  18208                   elseif(iht0.lt.iht1) then
  18209 c
  18210                     if(l_print)

Page 405         Source Listing                  ORDDUP_QC
2017-04-18 11:07                                 acftobs_qc.f

  18211      $                write(io8,*) 'Ascent found at ii = ',ii
  18212 c
  18213 c                   Reorder portions of flight with negative heights
  18214 c                   ------------------------------------------------
  18215                     if(kneg.eq.2.and.ht_ft(ii).lt.0.and.
  18216      $                 ht_ft(ii).ne.ht_ft(iip1)) then
  18217 c
  18218 cc 12/01                      if(l_print)
  18219 cc 12/01     $                  write(io8,*) 'Reversing neg alts--ii=',ii,
  18220 c
  18221 cc 12/01     +			ht_ft(ii),ht_ft(iip1)
  18222 c
  18223 cc 12/01                      iiim1 = indx(iob)
  18224 cc 12/01                      indx(iob) = indx(iob+1)
  18225 cc 12/01                      indx(iob+1) = iiim1
  18226 c
  18227                     endif
  18228 c
  18229 c                 Level flight found
  18230 c                 ------------------
  18231                   elseif(iht0.eq.iht1) then
  18232 c                    sameht = .true.
  18233 c
  18234                     if(l_print)
  18235      $                write(io8,*) 'Level flight at ii = ',ii 
  18236 c
  18237 c                   Slight descent found--reorder
  18238 c                   -----------------------------
  18239 c                    if(knt.eq.2.and.
  18240                     if(
  18241      $                     nint(ht_ft(indx(iob))).gt.
  18242      $                     nint(ht_ft(iilast))) then
  18243 c
  18244 c                      if(l_print) then
  18245 c                        write(io8,*) 'Reordering slight descent--',iii
  18246 c                        write(io8,*) 'alt= ',ht_ft(indx(iob)),
  18247 c     $                               ht_ft(indx(iob+1))
  18248 c                      endif
  18249 cc
  18250 c                      iii = indx(iob+1)
  18251 c                      iiim1 = indx(iob)
  18252 c                      indx(iob) = iii
  18253 c                      indx(iob+1) = iiim1
  18254 c
  18255                       if(l_print)
  18256      $                  write(io8,*) 'Reversing descent at report',ii
  18257 c
  18258 c                     Re-order descending portions of flights with positive heights
  18259 c                     -------------------------------------------------------------
  18260                       do nn = iob,ilast
  18261                         nback = ilast - nn + iob
  18262                         isave(nn) = indx(nback)
  18263                       enddo
  18264 c
  18265                       indx(iob:ilast) = isave(iob:ilast)
  18266 c
  18267 c                   Ordering unknown

Page 406         Source Listing                  ORDDUP_QC
2017-04-18 11:07                                 acftobs_qc.f

  18268 c                   ----------------
  18269                     else
  18270 c
  18271 c                     Try using lat/lon to order obs
  18272 c                     ------------------------------
  18273                       if(knt.eq.2) then
  18274 c
  18275                         alat_dif = abs(alat(iiafter) - alat(iibefore))
  18276                         alon_dif = abs(alon(iiafter) - alon(iibefore))
  18277                         iii = indx(iob+1)
  18278                         iiim1 = indx(iob)
  18279 c
  18280                         if(l_print) then 
  18281                           write(io8,*) 'Unknown ordering at ii = ',ii
  18282                           write(io8,*) 'alat_dif = ',alat_dif
  18283                           write(io8,*) 'alon_dif = ',alon_dif
  18284                           write(io8,*) 'iii,iiim1 = ',iii,iiim1
  18285                         endif
  18286 c
  18287                         if(alat_dif.gt.alon_dif) then
  18288                           if((alat(iibefore).gt.alat(iiafter).and.
  18289      $                        alat(iiim1).lt.alat(iii)).or.
  18290      $                       (alat(iibefore).le.alat(iiafter).and.
  18291      $                        alat(iiim1).gt.alat(iii))) then
  18292 c
  18293                             if(l_print) then
  18294                               write(io8,*) 'Reversing unknown order-1-'
  18295      $,                                    iii
  18296                               write(io8,*)'lats= ',alat(iiim1),alat(iii)
  18297                             endif
  18298 c
  18299                             indx(iob) = iii
  18300                             indx(iob+1) = iiim1
  18301                           endif
  18302 c
  18303                         else
  18304                           if((alon(iibefore).gt.alon(iiafter).and.
  18305      $                        alon(iiim1).lt.alon(iii)).or.
  18306      $                       (alon(iibefore).le.alon(iiafter).and.
  18307      $                        alon(iiim1).gt.alon(iii))) then
  18308 c
  18309                             if(l_print) then
  18310                               write(io8,*) 'Reversing unknown order-2-'
  18311      $,                                    iii
  18312                               write(io8,*)'lons =',alon(iiim1),alon(iii)
  18313                             endif
  18314 c
  18315                             indx(iob) = iii
  18316                             indx(iob+1) = iiim1
  18317                           endif
  18318                         endif
  18319 c
  18320                       else
  18321                         write(io8,*) 'Ordering unknown--ii = ',ii
  18322                         write(io8,*) 'Flight # = ',c_acftid(ii)
  18323 c
  18324                         do kkk=iob-1,iob+knt

Page 407         Source Listing                  ORDDUP_QC
2017-04-18 11:07                                 acftobs_qc.f

  18325                           write(io8,*) 'ht_ft(',indx(kkk),') = '
  18326      $                                ,ht_ft(indx(kkk))
  18327      $                                ,' idt = ',idt(indx(kkk))
  18328                         enddo
  18329                       endif
  18330                     endif
  18331                   endif
  18332 c
  18333 c
  18334 c               Time differences too large for comparison
  18335 c               -----------------------------------------
  18336                 elseif(l_print) then
  18337                   write(io8,*)'Time diffs too large for comparison!'
  18338                   write(io8,*)'idt_dif1=',idt_dif1,' iibefore=',iibefore
  18339                   write(io8,*)'idt_dif2=',idt_dif2,' iiafter =',iiafter
  18340                 endif
  18341 c
  18342                 iob = ilast + 1             
  18343 c
  18344               else
  18345                 iob = iob + 1
  18346               endif
  18347 c
  18348             else
  18349               iob = iob + 1
  18350             endif
  18351 c
  18352           enddo
  18353         endif
  18354       enddo     
  18355 c
  18356       return
  18357       end       

Page 408         Source Listing                  ORDDUP_QC
2017-04-18 11:07 Entry Points                    acftobs_qc.f



ENTRY POINTS

  Name                  
                        
 orddup_qc_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 10                         Label  17878                                                          17890                             
 ABS                        Func   17937                                scalar                    17937,17940,17944,17947,17959,1796
                                                                                                  0,17961,17988,17989,17996,18007,18
                                                                                                  020,18029,18038,18067,18083,18086,
                                                                                                  18101,18104,18147,18148,18275,1827
                                                                                                  6                                 
 ALAT                       Dummy  17703    R(8)            8     1     0        ARG,INOUT        18147,18160,18161,18162,18163,1816
                                                                                                  7,18275,18288,18289,18290,18291,18
                                                                                                  296                               
 ALAT_DIF                   Local  17765    R(8)            8           scalar                    18147,18154,18159,18275,18282,1828
                                                                                                  7                                 
 ALON                       Dummy  17703    R(8)            8     1     0        ARG,INOUT        18148,18175,18176,18177,18178,1818
                                                                                                  2,18276,18304,18305,18306,18307,18
                                                                                                  312                               
 ALON_DIF                   Local  17766    R(8)            8           scalar                    18148,18155,18159,18276,18283,1828
                                                                                                  7                                 
 CIDMISS                    Dummy  17705    CHAR            8           scalar   ARG,INOUT        17803                             
 C_ACFTID                   Dummy  17705    CHAR            9     1     0        ARG,INOUT        17803,18322                       
 C_ACFTREG                  Dummy  17705    CHAR            8     1     0        ARG,INOUT        17791                             
 HT_DIF1                    Local  17769    R(4)            4           scalar                    17988,18028,18037                 
 HT_DIF2                    Local  17769    R(4)            4           scalar                    17989,18028,18037                 
 HT_FT                      Dummy  17703    R(4)            4     1     0        ARG,INOUT        17856,17857,17859,17860,17862,1787
                                                                                                  0,17883,17884,17885,17959,17960,17
                                                                                                  961,17968,17969,17970,17977,17978,
                                                                                                  17979,17988,17989,18122,18123,1813
                                                                                                  5,18136,18215,18216,18241,18242,18
                                                                                                  326                               
 HT_MAX                     Local  17767    R(4)            4           scalar                    17856,17857,17883,17898,17960,1797
                                                                                                  0,17978                           
 HT_MIN                     Local  17768    R(4)            4           scalar                    17859,17860,17884,17898,17961,1796
                                                                                                  9,17979                           
 IDT                        Dummy  17703    I(4)            4     1     0        ARG,INOUT        17851,17880,17937,17940,17944,1794
                                                                                                  7,17996,18007,18019,18020,18029,18
                                                                                                  038,18067,18083,18086,18101,18104,
                                                                                                  18327                             
 IDT_DIF1                   Local  17729    I(4)            4           scalar                    17937,17939,17940,17953,17993,1800
                                                                                                  4,18007,18013,18016,18038,18043,18
                                                                                                  065,18073,18081,18093,18101,18103,
                                                                                                  18104,18113,18120,18338           
 IDT_DIF2                   Local  17730    I(4)            4           scalar                    17944,17946,17947,17953,17993,1799
                                                                                                  6,18001,18004,18016,18020,18025,18
                                                                                                  029,18034,18067,18073,18083,18085,
                                                                                                  18086,18093,18107,18113,18120,1833
                                                                                                  9                                 

Page 409         Source Listing                  ORDDUP_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 IDT_NEAR                   Dummy  17705    I(4)            4           scalar   ARG,INOUT        17939,17946,18019,18085,18103,1812
                                                                                                  0                                 
 IEND                       Local  17751    I(4)            4           scalar                    17785,17786,17815,17836,17842,1787
                                                                                                  8,17905,17910,18063,18079,18099   
 IHT0                       Local  17736    I(4)            4           scalar                    18122,18127,18192,18208,18231     
 IHT1                       Local  17736    I(4)            4           scalar                    18123,18127,18192,18208,18231     
 II                         Local  17714    I(4)            4           scalar                    17834,17851,17856,17859,17862,1788
                                                                                                  0,17901,17937,17940,17941,17964,17
                                                                                                  973,17982,17988,17994,18000,18005,
                                                                                                  18007,18008,18012,18017,18024,1803
                                                                                                  3,18038,18039,18042,18048,18055,18
                                                                                                  066,18082,18101,18104,18105,18136,
                                                                                                  18153,18195,18211,18215,18216,1823
                                                                                                  5,18256,18281,18321,18322         
 IIAFTER                    Local  17762    I(4)            4           scalar                    17945,17948,17954,17959,17961,1796
                                                                                                  8,17970,17977,17979,17989,17994,17
                                                                                                  997,18001,18005,18017,18021,18025,
                                                                                                  18030,18034,18068,18074,18084,1808
                                                                                                  7,18094,18108,18114,18123,18147,18
                                                                                                  148,18160,18162,18175,18177,18275,
                                                                                                  18276,18288,18290,18304,18306,1833
                                                                                                  9                                 
 IIBEFORE                   Local  17761    I(4)            4           scalar                    17938,17941,17954,17959,17960,1796
                                                                                                  8,17969,17977,17978,17988,17994,18
                                                                                                  005,18008,18013,18017,18039,18043,
                                                                                                  18066,18074,18082,18094,18102,1810
                                                                                                  5,18114,18122,18147,18148,18160,18
                                                                                                  162,18175,18177,18275,18276,18288,
                                                                                                  18290,18304,18306,18338           
 IIEND                      Local  17752    I(4)            4           scalar                    17786,17797                       
 III                        Local  17763    I(4)            4           scalar                    18149,18156,18161,18163,18166,1816
                                                                                                  7,18170,18176,18178,18181,18182,18
                                                                                                  185,18277,18284,18289,18291,18295,
                                                                                                  18296,18299,18305,18307,18311,1831
                                                                                                  2,18315                           
 IIIM1                      Local  17764    I(4)            4           scalar                    18150,18156,18161,18163,18167,1817
                                                                                                  1,18176,18178,18182,18186,18278,18
                                                                                                  284,18289,18291,18296,18300,18305,
                                                                                                  18307,18312,18316                 
 IILAST                     Local  17757    I(4)            4           scalar                    17906,17908,17928,17934,17944,1794
                                                                                                  7,17948,17989,17994,17996,17997,18
                                                                                                  005,18017,18029,18030,18067,18068,
                                                                                                  18083,18086,18087,18108,18242     
 IILASTM1                   Local  17758    I(4)            4           scalar                    17916,17918,17927,17935,17947,1799
                                                                                                  6,18020,18021,18029,18064,18067,18
                                                                                                  080,18086                         
 IILASTM2                   Local  17759    I(4)            4           scalar                    17921,17923,17927,18020           
 IILASTP1                   Local  17760    I(4)            4           scalar                    17911,17913,17928,17934,17944,1794
                                                                                                  5,18080,18083,18084               
 IIM1                       Local  17715    I(4)            4           scalar                    17829,17831,17900,17933,17937,1793
                                                                                                  8,18100,18101,18102               
 IIM2                       Local  17716    I(4)            4           scalar                    17823,17825,17900                 
 IIM3                       Local  17717    I(4)            4           scalar                    17817,17819,17900                 
 IINEXT                     Local  17755    I(4)            4           scalar                    17879,17880,17883,17884,17885     
 IIP1                       Local  17718    I(4)            4           scalar                    17837,17839,17850,17851,17857,1786

Page 410         Source Listing                  ORDDUP_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  0,17870,17901,17933,17940,18007,18
                                                                                                  019,18038,18100,18104,18216       
 IIP2                       Local  17719    I(4)            4           scalar                    17843,17845,17901,18019           
 IISTART                    Local  17750    I(4)            4           scalar                    17784,17791,17797,17803           
 ILAST                      Local  17756    I(4)            4           scalar                    17904,17905,17906,17910,17911,1791
                                                                                                  5,17916,17920,17921,18063,18079,18
                                                                                                  099,18199,18200,18204,18260,18261,
                                                                                                  18265,18342                       
 INDX                       Dummy  17703    I(4)            4     1     0        ARG,INOUT        17784,17786,17817,17823,17829,1783
                                                                                                  4,17837,17843,17879,17906,17911,17
                                                                                                  916,17921,18135,18149,18150,18170,
                                                                                                  18171,18185,18186,18201,18204,1824
                                                                                                  1,18262,18265,18277,18278,18299,18
                                                                                                  300,18315,18316,18325,18326,18327 
 INEXT                      Local  17754    I(4)            4           scalar                    17876,17878,17879,17889,17899,1790
                                                                                                  4                                 
 INOW                       Local  17753    I(4)            4           scalar                    17875,17876,17899                 
 IO8                        Dummy  17705    I(4)            4           scalar   ARG,INOUT        17794,17795,17796,17797,17806,1789
                                                                                                  5,17896,17897,17898,17899,17900,17
                                                                                                  901,17927,17928,17952,17953,17954,
                                                                                                  17964,17973,17982,18000,18001,1801
                                                                                                  1,18012,18013,18024,18025,18033,18
                                                                                                  034,18042,18043,18048,18049,18055,
                                                                                                  18056,18071,18072,18073,18074,1809
                                                                                                  1,18092,18093,18094,18111,18112,18
                                                                                                  113,18114,18126,18127,18141,18153,
                                                                                                  18154,18155,18156,18166,18167,1818
                                                                                                  1,18182,18195,18211,18235,18256,18
                                                                                                  281,18282,18283,18284,18294,18296,
                                                                                                  18310,18312,18321,18322,18325,1833
                                                                                                  7,18338,18339                     
 IOB                        Local  17712    I(4)            4           scalar                    17813,17815,17816,17817,17822,1782
                                                                                                  3,17828,17829,17834,17836,17837,17
                                                                                                  842,17843,17875,18063,18079,18099,
                                                                                                  18134,18149,18150,18170,18171,1818
                                                                                                  5,18186,18199,18200,18204,18241,18
                                                                                                  260,18261,18265,18277,18278,18299,
                                                                                                  18300,18315,18316,18324,18342,1834
                                                                                                  5,18349                           
 IOBS_FLT                   Dummy  17704    I(4)            4     1     0        ARG,INOUT        17783,17785                       
 ISAVE                      Dummy  17703    I(4)            4     1     0        ARG,INOUT        18201,18204,18262,18265           
 ISTART                     Local  17749    I(4)            4           scalar                    17783,17784,17813,17816,17822,1782
                                                                                                  8,17915,17920,18063,18079,18099   
 KFLIGHT                    Dummy  17704    I(4)            4           scalar   ARG,INOUT        17779                             
 KK                         Local  17722    I(4)            4           scalar                    17779,17783,17785,17804           
 KKK                        Local  17726    I(4)            4           scalar                    18134,18135,18324,18325,18326,1832
                                                                                                  7                                 
 KNEG                       Local  17724    I(4)            4           scalar                    17863,17867,17871,17886,17897,1821
                                                                                                  5                                 
 KNT                        Local  17723    I(4)            4           scalar                    17852,17881,17896,18072,18092,1811
                                                                                                  2,18134,18145,18273,18324         
 L_PRINT                    Local  17773    L(4)            4           scalar                    17790,17791,17793,17806,17894,1792
                                                                                                  6,17951,17963,17972,17981,17999,18
                                                                                                  010,18023,18032,18041,18047,18054,
                                                                                                  18070,18090,18110,18125,18140,1815

Page 411         Source Listing                  ORDDUP_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  2,18165,18180,18194,18210,18234,18
                                                                                                  255,18280,18293,18309,18336       
 MAXFLT                     Dummy  17704    I(4)            4           scalar   ARG,INOUT        17747,17748                       
 MAX_REPS                   Dummy  17703    I(4)            4           scalar   ARG,INOUT        17720,17721,17735,17737,17738,1773
                                                                                                  9,17740,17741                     
 NBACK                      Local  17728    I(4)            4           scalar                    18200,18201,18261,18262           
 NINT                       Func   18122                                scalar                    18122,18123,18135,18136,18241,1824
                                                                                                  2                                 
 NN                         Local  17727    I(4)            4           scalar                    18199,18200,18201,18260,18261,1826
                                                                                                  2                                 
 NOBS_FLT                   Dummy  17704    I(4)            4     1     0        ARG,INOUT        17785,17804                       
 ORDDUP_QC                  Subr   17703                                                                                            
 SAMEHT                     Local  17771    L(4)            4           scalar                    18132,18137,18141,18145           

Page 412         Source Listing                  ORDDUP_QC
2017-04-18 11:07                                 acftobs_qc.f

  18358 c
  18359 c ###################################################################
  18360 c                            subroutine ordchek_qc
  18361 c ###################################################################
  18362 c   
  18363       subroutine ordchek_qc(numreps,max_reps,indx,csort,imiss,amiss
  18364      $,          idt_near,idt_updn,htdif_same,c_acftreg,c_acftid,cidmiss
  18365      $,          c_qc,alat,alon,pres,ht_ft,t_prcn,ob_t,ob_q,ob_dir
  18366      $,          ob_spd,xiv_t,xiv_q,xiv_d,xiv_s
  18367      $,          idt,itype,ichk_t,ichk_q,ichk_d,ichk_s
  18368      $,          kreg,creg_reg,nwind_reg
  18369      $,          kflight,maxflt,nobs_flt,ntot_flt,iobs_flt,kbadtot
  18370      $,          io8,io36,l_operational,l_init)
  18371 c
  18372 c     Check ordering of flights
  18373 c
  18374 c     Modified by P.M. Pauley (3/7/00)
  18375 c     Problems were found with the great circle distance calculation.
  18376 c     The calculation formula was changed from the law of cosines 
  18377 c     to the haversine formula, the latter of which works at the small
  18378 c     distances that gave the former problems.  An effort was also made
  18379 c     to compute the course direction explicitly, since the method used
  18380 c     was to compute the north-south and east-west distances and use 
  18381 c     them to compute the direction using a plane-geometry approximation.
  18382 c     However, the formulas for course direction that were tried had
  18383 c     more computational problems than the plane-geometry approximation,
  18384 c     so they were abandoned.  However, rather than computing the 
  18385 c     airspeed using the north-south and east-west components of the 
  18386 c     groundspeed and wind vectors, a method (again based on plane
  18387 c     geometry) to compute the magnitude of the airspeed vector as 
  18388 c     the third side of the wind triangle was derived.  This method
  18389 c     yields an airspeed that is more consistent with the computed
  18390 c     groundspeed and the wind than the previous method, which could
  18391 c     lead to unrealistic differences between the groundspeed and 
  18392 c     airspeed magnitudes.  These methods are not rigorously exact,
  18393 c     but were deemed sufficiently accurate for the purposes at hand.
  18394 c
  18395 c     Modified by P.M. Pauley 9/21/02
  18396 c     As data resolution has increased, some aspects of the track (such
  18397 c     as deciding a point is going backwards) have become less meaningful.
  18398 c     Changes were made to reduce the number of false positives.
  18399 c
  18400       implicit none
  18401 c
  18402 c Declaration statements
  18403 c ----------------------
  18404       integer      max_reps            ! maximum number of reports
  18405 c
  18406       character*11 c_qc(max_reps)      ! internal qc flags
  18407 c
  18408 c     Data arrays
  18409 c     -----------
  18410       integer      numreps             ! actual number of reports
  18411       integer      itype(max_reps)     ! type of aircraft data
  18412       integer      idt(max_reps)       ! time in seconds to analysis time 
  18413       character*8  c_acftreg(max_reps) ! aircraft registration (tail) number
  18414       character*9  c_acftid(max_reps)  ! aircraft flight number

Page 413         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  18415       real*8       alat(max_reps)      ! latitude
  18416      $,            alon(max_reps)      ! longitude
  18417       real         pres(max_reps)      ! pressure
  18418      $,            ht_ft(max_reps)     ! height in feet
  18419       real         t_prcn(max_reps)    ! temperature precision
  18420       real         ob_t(max_reps)      ! temperature
  18421      $,            ob_q(max_reps)      ! specific humidity
  18422      $,            ob_dir(max_reps)    ! wind direction
  18423      $,            ob_spd(max_reps)    ! wind speed
  18424       real         xiv_t(max_reps)     ! temperature innovation (ob - bk)
  18425      $,            xiv_q(max_reps)     ! specific humidity innovation (ob - bk)
  18426      $,            xiv_d(max_reps)     ! wind direction innovation (ob - bk)
  18427      $,            xiv_s(max_reps)     ! wind speed innovation (ob - bk)
  18428       integer      ichk_t(max_reps)    ! NRL QC flag for temperature ob
  18429      $,            ichk_q(max_reps)    ! NRL QC flag for specific humidity ob
  18430      $,            ichk_d(max_reps)    ! NRL QC flag for wind direction ob
  18431      $,            ichk_s(max_reps)    ! NRL QC flag for wind speed ob
  18432       character*25 csort(max_reps)     ! sort variable    
  18433 c
  18434 c     Pointers
  18435 c     --------
  18436       integer      indx(max_reps)      ! pointer index for good reports
  18437 c
  18438 c     Functions
  18439 c     ---------
  18440       character*16 c_insty_ob          ! function to convert integer instrument 
  18441                                        !   type to character instrument type
  18442       integer      insty_ob_fun        ! function to convert character
  18443                                        !   instrument type to integer
  18444       real         gcirc_qc            ! function to compute great circle distances
  18445 c
  18446 c     Flight statistics
  18447 c     -----------------
  18448       integer      maxflt              ! max number of flights allowed
  18449       integer      nobs_flt(maxflt)    ! number of reports per flight
  18450      $,            ntot_flt(maxflt)    ! total number of reports per flight
  18451      $,            iobs_flt(maxflt)    ! index for first report in each flight
  18452      $,            kflight             ! number of flights in dataset
  18453       integer      istart              ! index for 1st rep in current flight 
  18454      $,            iistart             ! index from pointer array for istart
  18455      $,            iend                ! index for last rep in current flight
  18456      $,            iiend               ! index from pointer array for iend
  18457      $,            iifirst             ! index from pointer array for beginning of first flight segment
  18458      $,            jjstart             ! index for start of flight segment
  18459      $,            iobfirst            ! index for beginning of first flight segment
  18460      $,            iilast              ! index from pointer array for end of first flight segment
  18461      $,            ioblast             ! index for end of first flight segment
  18462 c
  18463 c     Tail number statistics
  18464 c     ----------------------
  18465       integer      kreg                ! actual number of tail#s in dataset
  18466       character*8  creg_reg(maxflt)    ! tail numbers
  18467       integer      nwind_reg(maxflt,5) ! number of reports w. rejected winds
  18468 c
  18469 c     Counters
  18470 c     --------
  18471       integer      nord_dup(5)         ! number of previously undetected near duplicates

Page 414         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  18472      $,            nord_stk(5)         ! number of reports with stuck times
  18473      $,            nord_time(5)        ! number of reports with inconsistent times
  18474      $,            nord_2nd(5)         ! number of reports with in second flights
  18475      $,            nord_near(5)        ! number of reports rejected as closer to last rejected point
  18476      $,            nord_aspd(5)        ! number of reports with excessive airspeed
  18477      $,            nord_lone(5)        ! number of reports rejected as isolated off-track points
  18478      $,            nord_dble(5)        ! number of reports rejected when track doubles back on itself
  18479      $,            nord_turn(5)        ! number of reports rejected when track makes too large a turn
  18480      $,            nord_alt(5)         ! number of reports with inconsistent altitudes
  18481      $,            nord_wind(5)        ! number of reports with anomalous windspeeds
  18482       integer      kbad(5)             ! counter for number of bad reports
  18483      $,            kbadtot             ! counter for total number of bad reports
  18484 ccccdak      integer      nrep_Ac             ! number of acars reports considered
  18485       integer      nrep_Ac             ! number of tamdar reports considered
  18486      $,            nrep_Md             ! number of mdcrs reports considered
  18487      $,            nrep_Ma             ! number of manual airep reports considered
  18488      $,            nrep_Ar             ! number of airep reports considered
  18489      $,            nrep_Am             ! number of amdar reports considered
  18490 ccccdak      integer      nord_Ac             ! number of acars reports rejected
  18491       integer      nord_Ac             ! number of tamdar reports rejected
  18492      $,            nord_Md             ! number of mdcrs reports rejected
  18493      $,            nord_Ma             ! number of manual airep reports rejected
  18494      $,            nord_Ar             ! number of airep reports rejected
  18495      $,            nord_Am             ! number of amdar reports rejected
  18496 c
  18497 c     Instrument types
  18498 c     ----------------
  18499 ccccdak      integer      i_acars             ! instrument type for acars
  18500       integer      i_acars             ! instrument type for tamdar
  18501 ccccdak     $,            i_acars_lvl         ! instrument type for acars--level flt
  18502      $,            i_acars_lvl         ! instrument type for tamdar--level flt
  18503 ccccdak     $,            i_acars_asc         ! instrument type for acars--ascent
  18504      $,            i_acars_asc         ! instrument type for tamdar--ascent
  18505 ccccdsk     $,            i_acars_des         ! instrument type for acars--descent
  18506      $,            i_acars_des         ! instrument type for tamdar--descent
  18507      $,            i_mdcrs             ! instrument type for mdcrs
  18508      $,            i_mdcrs_lvl         ! instrument type for mdcrs--level flt
  18509      $,            i_mdcrs_asc         ! instrument type for mdcrs--ascent
  18510      $,            i_mdcrs_des         ! instrument type for mdcrs--descent
  18511      $,            i_man_airep         ! instrument type for manual aireps
  18512      $,            i_man_Yairep        ! instrument type for manual aireps (YRXX)
  18513      $,            i_airep             ! instrument type for airep
  18514      $,            i_airep_lvl         ! instrument type for airep--level flt
  18515      $,            i_airep_asc         ! instrument type for airep--ascent
  18516      $,            i_airep_des         ! instrument type for airep--descent
  18517      $,            i_amdar             ! instrument type for amdar
  18518      $,            i_amdar_lvl         ! instrument type for amdar--level flt
  18519      $,            i_amdar_asc         ! instrument type for amdar--ascent
  18520      $,            i_amdar_des         ! instrument type for amdar--descent
  18521 c
  18522 c     Other variables
  18523 c     ---------------
  18524       integer      io8                 ! i/o unit number for log file
  18525       integer      io36                ! i/o unit number for ordering check
  18526 c
  18527       real         amiss               ! real missing value flag
  18528       real         d2r                 ! conversion factor for degrees to radians

Page 415         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  18529 c
  18530       integer      iob,job,nob,kk      ! do loop indices 
  18531      $,            ii,jj,nn            ! index pointing to current report
  18532      $,            mm                  ! index pointing to current tail number
  18533      $,            iim1,nnm1           ! index pointing to previous report
  18534      $,            iim2                ! index pointing to 2nd report previous
  18535      $,            iim3                ! index pointing to 3rd report previous
  18536      $,            iip1,jjp1,nnp1      ! index pointing to following report
  18537      $,            iip2                ! index pointing to 2nd report following
  18538      $,            iip3                ! index pointing to 3rd report following
  18539      $,            iobp1               ! index for following report
  18540      $,            iobp2               ! index for 2nd report following report
  18541      $,            knt0                ! counter saved from definition of ii index
  18542      $,            knt1                ! counter used to define iim1 index
  18543      $,            knt2                ! counter used to define iim2 index
  18544      $,            knt3                ! counter used to define iip1 index
  18545      $,            knt4                ! counter used to define iip2 index
  18546      $,            knt5                ! counter used to define iim3 index
  18547      $,            knt6                ! counter used to define iip3 index
  18548      $,            knt_iob             ! counter for number of times iob repeated
  18549      $,            iob_sav             ! previous value of iob
  18550      $,            knt_iip1_bad        ! number of times iip1 report is rejected as bad manuever
  18551      $,            job_alat_min        ! index for minimum latitude
  18552      $,            job_alat_max        ! index for maximum latitude
  18553      $,            job_alon_min        ! index for minimum longitude
  18554      $,            job_alon_max        ! index for maximum longitude
  18555      $,            jj_alat_min         ! pointer index for minimum latitude
  18556      $,            jj_alat_max         ! pointer index for maximum latitude
  18557      $,            jj_alon_min         ! pointer index for minimum longitude
  18558      $,            jj_alon_max         ! pointer index for maximum longitude
  18559       integer      imiss               ! integer missing value flag
  18560       integer      idt_near            ! time difference between "near" neighbors
  18561       integer      idt_updn            ! time difference to check ascents/descents
  18562       integer      idt0                ! time for report ii
  18563      $,            idtm1               ! time for report iim1
  18564      $,            idtm2               ! time for report iim2
  18565      $,            idtm3               ! time for report iim3
  18566      $,            idtp1               ! time for report iip1
  18567      $,            idtp2               ! time for report iip2
  18568      $,            idtp3               ! time for report iip3
  18569      $,            idt_start           ! time for first report of flight
  18570      $,            idt_end             ! time for last report of flight
  18571      $,            idt_last_bad        ! time for last bad report
  18572       integer      idt_dif0            ! time difference (current  - previous report)
  18573      $,            idt_difm1           ! time difference (two previous reports)
  18574      $,            idt_difm2           ! time difference (two reports before those)
  18575      $,            idt_difp1           ! time difference (following - current report)
  18576      $,            idt_difp2           ! time difference (two following reports)
  18577      $,            idt_difp3           ! time difference (two reports after those)
  18578      $,            idt_dif_wo0         ! time difference (iim1 and iip1 points)
  18579      $,            idt_dif_wop1        ! time difference (ii and iip2 points)
  18580      $,            idt_dif_wop2        ! time difference (iip1 and iip3 points)
  18581      $,            idt_dif_bad0        ! time difference (ii and last_bad points)
  18582      $,            idt_dif_badp1       ! time difference (iip1 and last_bad points)
  18583      $,            idt_dif_track       ! time difference (first and last points)
  18584 c
  18585       integer      ktype               ! ob type

Page 416         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  18586      $,            itype0              ! ob type for ii report
  18587      $,            itypem1             ! ob type for iim1 report
  18588      $,            itypep1             ! ob type for iip1 report
  18589      $,            itypep2             ! ob type for iip2 report
  18590 c
  18591       real         htdif_same          ! height difference considered negligible
  18592       real*8       alat_dif            ! latitude difference (current-previous report)
  18593      $,            alon_dif            ! longitude difference (current-previous report)
  18594      $,            alat_min            ! minimum latitude for flight
  18595      $,            alat_max            ! maximum latitude for flight
  18596      $,            alon_min            ! minimum longitude for flight
  18597      $,            alon_max            ! maximum longitude for flight
  18598      $,            alat0               ! latitude in current report
  18599      $,            alatm1              ! latitude in previous report
  18600      $,            alatm2              ! latitude at 2nd previous report
  18601      $,            alatm3              ! latitude at 3rd previous report
  18602      $,            alatp1              ! latitude at following report
  18603      $,            alatp2              ! latitude at 2nd following report
  18604      $,            alatp3              ! latitude at 3rd following report
  18605      $,            alon0               ! longitude in current report
  18606      $,            alonm1              ! longitude in previous report
  18607      $,            alonm2              ! longitude at 2nd previous report
  18608      $,            alonm3              ! longitude at 3rd previous report
  18609      $,            alonp1              ! longitude at following report
  18610      $,            alonp2              ! longitude at 2nd following report
  18611      $,            alonp3              ! longitude at 3rd following report
  18612       real         ht_dif0             ! height difference (current-previous report)
  18613      $,            ht_difm1            ! height difference (two previous reports)
  18614      $,            ht_difm2            ! height difference (two reports before those)
  18615      $,            ht_difp1            ! height difference (following-current report)
  18616      $,            ht_difp2            ! height difference (two following reports)
  18617      $,            ht_difp3            ! height difference (two reports after those)
  18618      $,            ht_dif_wo0          ! height difference between iim1 and iip1 reports
  18619      $,            ht_dif_wop1         ! height difference between ii and iip2 reports
  18620      $,            ht_dif_wop2         ! height difference between iip1 and iip3 reports
  18621      $,            ht_dif_bad0         ! height difference between ii and last_bad reports
  18622      $,            ht_dif_badp1        ! height difference between iip1 and last_bad reports
  18623      $,            ht_dif_track        ! height difference between first and last reports
  18624      $,            dif_t               ! temperature difference (current-previous report)
  18625      $,            dif_dir             ! direction difference (current-previous report)
  18626      $,            dif_spd             ! speed difference (current-previous report)
  18627      $,            ht_ft0              ! height in current report
  18628      $,            ht_ftm1             ! height in previous report
  18629      $,            ht_ftm2             ! height at 2nd previous report
  18630      $,            ht_ftm3             ! height at 3rd previous report
  18631      $,            ht_ftp1             ! height at following report
  18632      $,            ht_ftp2             ! height at 2nd following report
  18633      $,            ht_ftp3             ! height at 3rd following report
  18634 c
  18635 c      real         uwind0              ! u component for wind at ii point
  18636 c     $,            vwind0              ! v component for wind at ii point
  18637 c     $,            uwindm1             ! u component for wind at iim1 point
  18638 c     $,            vwindm1             ! v component for wind at iim1 point
  18639 c     $,            uwindm2             ! u component for wind at iim2 point
  18640 c     $,            vwindm2             ! v component for wind at iim2 point
  18641 c     $,            uwindm3             ! u component for wind at iim3 point
  18642 c     $,            vwindm3             ! v component for wind at iim3 point

Page 417         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  18643 c     $,            uwindp1             ! u component for wind at iip1 point
  18644 c     $,            vwindp1             ! v component for wind at iip1 point
  18645 c     $,            uwindp2             ! u component for wind at iip2 point
  18646 c     $,            vwindp2             ! v component for wind at iip2 point
  18647 c     $,            uwindp3             ! u component for wind at iip3 point
  18648 c     $,            vwindp3             ! v component for wind at iip3 point
  18649 c     $,            uwind_start         ! u component for wind at first point
  18650 c     $,            vwind_start         ! v component for wind at first point
  18651 c     $,            uwind_end           ! u component for wind at last point
  18652 c     $,            vwind_end           ! v component for wind at last point
  18653 c     $,            uwind_last          ! u component for wind at last bad point
  18654 c     $,            vwind_last          ! v component for wind at last bad point
  18655       real         wspd_last           ! wind speed at last bad point
  18656      $,            wdir_last           ! wind direction at last bad point
  18657       real         distm1              ! distance between iim2 and iim1 points
  18658      $,            distm2              ! distance between iim2 and iim3 points
  18659      $,            dist0               ! distance between iim1 and ii points
  18660      $,            distp1              ! distance between iip1 and ii points
  18661      $,            distp2              ! distance between iip2 and iip1 points
  18662      $,            distp3              ! distance between iip3 and iip2 points
  18663      $,            dist_wo0            ! distance between iim1 and iip1 points
  18664      $,            dist_wop1           ! distance between ii and iip2 points
  18665      $,            dist_wop2           ! distance between iip1 and iip3 points
  18666      $,            dist_bad0           ! distance between ii and last_bad points
  18667      $,            dist_badp1          ! distance between ii and last_bad points
  18668      $,            dist_track          ! distance between first and last points
  18669      $,            dist_2ndflt         ! distance between first and last points of potential 2nd flight
  18670      $,            udistm1             ! E-W distance between iim2 and iim1 points
  18671      $,            vdistm1             ! N-S distance between iim2 and iim1 points
  18672      $,            udistm2             ! E-W distance between iim3 and iim2 points
  18673      $,            vdistm2             ! N-S distance between iim3 and iim2 points
  18674      $,            udist0              ! E-W distance between ii and iim1 points
  18675      $,            vdist0              ! N-S distance between ii and iim1 points
  18676      $,            udistp1             ! E-W distance between ii and iip1 points
  18677      $,            vdistp1             ! N-S distance between ii and iip1 points
  18678      $,            udistp2             ! E-W distance between iip1 and iip2 points
  18679      $,            vdistp2             ! N-S distance between iip1 and iip2 points
  18680      $,            udistp3             ! E-W distance between iip2 and iip3 points
  18681      $,            vdistp3             ! N-S distance between iip2 and iip3 points
  18682      $,            udist_wo0           ! E-W distance between iim1 and iip1 points
  18683      $,            vdist_wo0           ! N-S distance between iim1 and iip1 points
  18684      $,            udist_wop1          ! E-W distance between ii and iip2 points
  18685      $,            vdist_wop1          ! N-S distance between ii and iip2 points
  18686      $,            udist_wop2          ! E-W distance between iip1 and iip3 points
  18687      $,            vdist_wop2          ! N-S distance between iip1 and iip3 points
  18688      $,            udist_bad0          ! E-W distance between ii and last_bad points
  18689      $,            vdist_bad0          ! N-S distance between ii and last_bad points
  18690      $,            udist_badp1         ! E-W distance between iip1 and last_bad points
  18691      $,            vdist_badp1         ! N-S distance between iip1 and last_bad points
  18692      $,            udist_track         ! E-W distance between first and last points
  18693      $,            vdist_track         ! N-S distance between first and last points
  18694       real         upspdm1             ! u component of platform speed (iim2 to iim1 points)
  18695      $,            vpspdm1             ! v component of platform speed (iim2 to iim1 points)
  18696      $,            upspdm2             ! u component of platform speed (iim3 to iim2 points)
  18697      $,            vpspdm2             ! v component of platform speed (iim3 to iim2 points)
  18698      $,            upspd0              ! u component of platform speed (iim1 to ii points)
  18699      $,            vpspd0              ! v component of platform speed (iim1 to ii points)

Page 418         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  18700      $,            upspdp1             ! u component of platform speed (ii to iip1 points)
  18701      $,            vpspdp1             ! v component of platform speed (ii to iip1 points)
  18702      $,            upspdp2             ! u component of platform speed (iip1 to iip2 points)
  18703      $,            vpspdp2             ! v component of platform speed (iip1 to iip2 points)
  18704      $,            upspdp3             ! u component of platform speed (iip2 to iip3 points)
  18705      $,            vpspdp3             ! v component of platform speed (iip2 to iip3 points)
  18706      $,            upspd_wo0           ! u component of platform speed (iim1 to iip1 points)
  18707      $,            vpspd_wo0           ! v component of platform speed (iim1 to iip1 points)
  18708      $,            upspd_wop1          ! u component of platform speed (ii to iip2 points)
  18709      $,            vpspd_wop1          ! v component of platform speed (ii to iip2 points)
  18710      $,            upspd_wop2          ! u component of platform speed (iip1 to iip3 points)
  18711      $,            vpspd_wop2          ! v component of platform speed (iip1 to iip3 points)
  18712      $,            upspd_bad0          ! u component of platform speed (ii to last_bad points)
  18713      $,            vpspd_bad0          ! v component of platform speed (ii to last_bad points)
  18714      $,            upspd_badp1         ! u component of platform speed (iip1 to last_bad points)
  18715      $,            vpspd_badp1         ! v component of platform speed (iip1 to last_bad points)
  18716      $,            upspd_track         ! u component of platform speed (first and last points)
  18717      $,            vpspd_track         ! v component of platform speed (first and last points)
  18718      $,            pdirm1              ! platform direction of aircraft (iim2 to iim1 points)
  18719      $,            pdirm2              ! platform direction of aircraft (iim3 to iim2 points)
  18720      $,            pdir0               ! platform direction of aircraft (iim1 to ii points)
  18721      $,            pdirp1              ! platform direction of aircraft (iip1 to ii points)
  18722      $,            pdirp2              ! platform direction of aircraft (iip1 to iip2 points)
  18723      $,            pdirp3              ! platform direction of aircraft (iip2 to iip3 points)
  18724      $,            pdir_wo0            ! platform direction of aircraft (iim1 to iip1 points)
  18725      $,            pdir_wop1           ! platform direction of aircraft (ii to iip2 points)
  18726      $,            pdir_wop2           ! platform direction of aircraft (iip1 to iip3 points)
  18727      $,            pdir_bad0           ! platform direction of aircraft (ii to last_bad points)
  18728      $,            pdir_badp1          ! platform direction of aircraft (iip1 to last_bad points)
  18729      $,            pdir_track          ! platform direction of aircraft (first and last points)
  18730      $,            pspdm1              ! platform speed of aircraft (iim2 to iim1 points)
  18731      $,            pspdm2              ! platform speed of aircraft (iim3 to iim2 points)
  18732      $,            pspd0               ! platform speed of aircraft (iip1 to ii points)
  18733      $,            pspdp1              ! platform speed of aircraft (iip1 to ii points)
  18734      $,            pspdp2              ! platform speed of aircraft (iip2 to iip1 points)
  18735      $,            pspdp3              ! platform speed of aircraft (iip3 to iip2 points)
  18736      $,            pspd_wo0            ! platform speed of aircraft (iip1 to iim1 points)
  18737      $,            pspd_wop1           ! platform speed of aircraft (iip2 to ii points)
  18738      $,            pspd_wop2           ! platform speed of aircraft (iip3 to iip1 points)
  18739      $,            pspd_bad0           ! platform speed of aircraft (ii to last_bad points)
  18740      $,            pspd_badp1          ! platform speed of aircraft (iip1 to last_bad points)
  18741      $,            pspd_track          ! platform speed of aircraft (first and last points)
  18742       real         spd_thresh          ! threshold speed of aircraft
  18743      $,            spd_man_thresh      ! threshold speed of aircraft for manual aireps
  18744 c      real         uairspdm1           ! u component of airspeed (iim2 to iim1 points)
  18745 c     $,            vairspdm1           ! v component of airspeed (iim2 to iim1 points)
  18746 c     $,            uairspdm2           ! u component of airspeed (iim3 to iim2 points)
  18747 c     $,            vairspdm2           ! v component of airspeed (iim3 to iim2 points)
  18748 c     $,            uairspd0            ! u component of airspeed (iim1 to ii points)
  18749 c     $,            vairspd0            ! v component of airspeed (iim1 to ii points)
  18750 c     $,            uairspdp1           ! u component of airspeed (ii to iip1 points)
  18751 c     $,            vairspdp1           ! v component of airspeed (ii to iip1 points)
  18752 c     $,            uairspdp2           ! u component of airspeed (iip1 to iip2 points)
  18753 c     $,            vairspdp2           ! v component of airspeed (iip1 to iip2 points)
  18754 c     $,            uairspdp3           ! u component of airspeed (iip2 to iip3 points)
  18755 c     $,            vairspdp3           ! v component of airspeed (iip2 to iip3 points)
  18756 c     $,            uairspd_wo0         ! u component of airspeed (iim1 to iip1 points)

Page 419         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  18757 c     $,            vairspd_wo0         ! v component of airspeed (iim1 to iip1 points)
  18758 c     $,            uairspd_wop1        ! u component of airspeed (ii to iip2 points)
  18759 c     $,            vairspd_wop1        ! v component of airspeed (ii to iip2 points)
  18760 c     $,            uairspd_wop2        ! u component of airspeed (iip1 to iip3 points)
  18761 c     $,            vairspd_wop2        ! v component of airspeed (iip1 to iip3 points)
  18762 c     $,            uairspd_bad0        ! u component of airspeed (ii to last_bad points)
  18763 c     $,            vairspd_bad0        ! v component of airspeed (ii to last_bad points)
  18764 c     $,            uairspd_badp1       ! u component of airspeed (iip1 to last_bad points)
  18765 c     $,            vairspd_badp1       ! v component of airspeed (iip1 to last_bad points)
  18766 c     $,            uairspd_track       ! u component of airspeed (first and last points)
  18767 c     $,            vairspd_track       ! v component of airspeed (first and last points)
  18768       real         airspdm1            ! airspeed between iim1 and iim2 points
  18769 c     $,            airdirm1            ! airspeed direction between iim1 and iim2 points
  18770      $,            airspdm2            ! airspeed between iim2 and iim3 points
  18771 c     $,            airdirm2            ! airspeed direction between iim2 and iim3 points
  18772      $,            airspd0             ! airspeed between ii and iim1 points
  18773 c     $,            airdir0             ! airspeed direction between ii and iim1 points
  18774      $,            airspdp1            ! airspeed between ii and iip1 points
  18775 c     $,            airdirp1            ! airspeed direction between ii and iip1 points
  18776      $,            airspdp2            ! airspeed between iip1 and iip2 points
  18777 c     $,            airdirp2            ! airspeed direction between iip1 and iip2 points
  18778      $,            airspdp3            ! airspeed between iip2 and iip3 points
  18779 c     $,            airdirp3            ! airspeed direction between iip2 and iip3 points
  18780      $,            airspd_wo0          ! airspeed between iim1 and iip1 points
  18781 c     $,            airdir_wo0          ! airspeed direction between iim1 and iip1 points
  18782      $,            airspd_wop1         ! airspeed between ii and iip2 points
  18783 c     $,            airdir_wop1         ! airspeed direction between ii and iip2 points
  18784      $,            airspd_wop2         ! airspeed between iip1 and iip3 points
  18785 c     $,            airdir_wop2         ! airspeed direction between iip1 and iip3 points
  18786      $,            airspd_bad0         ! airspeed between ii and last_bad points
  18787 c     $,            airdir_bad0         ! airspeed direction between ii and last_bad points
  18788      $,            airspd_badp1        ! airspeed between iip1 and last_bad points
  18789 c     $,            airdir_badp1        ! airspeed direction between iip1 and last_bad points
  18790      $,            airspd_track        ! airspeed between first and last points
  18791 c     $,            airdir_track        ! airspeed direction between first and last points
  18792       real         vspdm1              ! vertical speed of aircraft (iim1 to iim2 points)
  18793      $,            vspdm2              ! vertical speed of aircraft (iim2 to iim3 points)
  18794      $,            vspd0               ! vertical speed of aircraft (ii to iim1 points)
  18795      $,            vspdp1              ! vertical speed of aircraft (iip1 to ii points)
  18796      $,            vspdp2              ! vertical speed of aircraft (iip2 to iip1 points)
  18797      $,            vspdp3              ! vertical speed of aircraft (iip3 to iip2 points)
  18798      $,            vspd_wo0            ! vertical speed of aircraft (iip1 to iim1 points)
  18799      $,            vspd_wop1           ! vertical speed of aircraft (iip2 to ii points)
  18800      $,            vspd_wop2           ! vertical speed of aircraft (iip3 to iip1 points)
  18801      $,            vspd_bad0           ! vertical speed of aircraft (ii to last_bad points)
  18802      $,            vspd_badp1          ! vertical speed of aircraft (iip1 to last_bad points)
  18803      $,            vspd_track          ! vertical speed of aircraft (first and last points)
  18804       real         vspd_thresh         ! threshold vertical speed of aircraft
  18805      $,            vspd_bounce         ! threshold vertical speed used in bounce test
  18806 c
  18807       integer      indx_save(200)      ! pointer indices for rejected reports
  18808      $,            ll                  ! index for indx_save
  18809      $,            keep                ! variable used in saving indices
  18810      $,            knt_bad             ! number of reports in potential second flight
  18811      $,            last_bad            ! pointer index for last rejected report
  18812      $,            last_bad_m1         ! pointer index for next-to-last rejected report
  18813 c

Page 420         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  18814       character*8  cidmiss             ! missing value flag for flight number
  18815 c
  18816 c     Switches
  18817 c     --------
  18818       logical      l_print             ! true for printing reports used in check
  18819 c
  18820       logical      l_retest            ! retest track if true
  18821 c
  18822       logical      l_init              ! initialize counters if true
  18823      $,            l_ii_man_airep      ! true if ii report is manual airep
  18824      $,            l_iim1_man_airep    ! true if iim1 report is manual airep
  18825      $,            l_iim2_man_airep    ! true if iim2 report is manual airep
  18826      $,            l_iim3_man_airep    ! true if iim3 report is manual airep
  18827      $,            l_iip1_man_airep    ! true if iip1 report is manual airep
  18828      $,            l_iip2_man_airep    ! true if iip2 report is manual airep
  18829      $,            l_ii_pspd_ok        ! true if pspd is ok for point ii
  18830      $,            l_stuck             ! true if stuck clock found
  18831      $,            l_operational       ! true if operational mode used
  18832 c
  18833 c # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  18834 c
  18835 c Degrees to radians
  18836 c ------------------
  18837       d2r = atan(1.0) / 45.0
  18838 c
  18839 c Initialize aircraft data types
  18840 c ------------------------------
  18841       i_acars      = insty_ob_fun('acars')
  18842       i_acars_lvl  = insty_ob_fun('acars_lvl') 
  18843       i_acars_asc  = insty_ob_fun('acars_asc') 
  18844       i_acars_des  = insty_ob_fun('acars_des') 
  18845       i_mdcrs      = insty_ob_fun('mdcrs')
  18846       i_mdcrs_lvl  = insty_ob_fun('mdcrs_lvl') 
  18847       i_mdcrs_asc  = insty_ob_fun('mdcrs_asc') 
  18848       i_mdcrs_des  = insty_ob_fun('mdcrs_des')
  18849       i_man_airep  = insty_ob_fun('man-airep') 
  18850       i_man_Yairep = insty_ob_fun('man-Yairep') 
  18851       i_airep      = insty_ob_fun('airep')
  18852       i_airep_lvl  = insty_ob_fun('airep_lvl')
  18853       i_airep_asc  = insty_ob_fun('airep_asc')
  18854       i_airep_des  = insty_ob_fun('airep_des')
  18855       i_amdar      = insty_ob_fun('amdar')
  18856       i_amdar_lvl  = insty_ob_fun('amdar_lvl')
  18857       i_amdar_asc  = insty_ob_fun('amdar_asc')
  18858       i_amdar_des  = insty_ob_fun('amdar_des')
  18859 c
  18860 c Initialize counters
  18861 c -------------------
  18862       if(l_init) then
  18863         nord_dup = 0
  18864         nord_stk = 0
  18865         nord_time = 0
  18866         nord_2nd = 0
  18867         nord_near = 0
  18868         nord_aspd = 0
  18869         nord_lone = 0
  18870         nord_dble = 0

Page 421         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  18871         nord_turn = 0
  18872         nord_alt = 0
  18873         nord_wind = 0
  18874         nrep_Ac = 0
  18875         nrep_Md = 0
  18876         nrep_Ma = 0
  18877         nrep_Ar = 0
  18878         nrep_Am = 0
  18879         nord_Ac = 0
  18880         nord_Md = 0
  18881         nord_Ma = 0
  18882         nord_Ar = 0
  18883         nord_Am = 0
  18884       endif
  18885 c
  18886       nwind_reg = 0
  18887 c
  18888 c Begin loop over flights
  18889 c -----------------------
  18890       do kk = 1,kflight
  18891 c
  18892 c Initialize variables
  18893 c --------------------
  18894         istart = iobs_flt(kk)
  18895         iistart = indx(istart)
  18896         iend = iobs_flt(kk) + nobs_flt(kk) - 1
  18897         iiend = indx(iend)
  18898 c
  18899 c Don't compare reports with missing flight number
  18900 c Perform check only for flights with three or more reports
  18901 c -----------------------------------------------------------------
  18902         if(c_acftid(iistart)(1:8).ne.cidmiss(1:8).and.
  18903      $     nobs_flt(kk).ge.3) then
  18904 c
  18905 c Determine flight phase of reports
  18906 c ---------------------------------
  18907           do iob=istart,iend
  18908             l_print = .false.
  18909 c
  18910             ii = indx(iob)
  18911 c
  18912 c           Decide if report is a manual airep
  18913 c           ----------------------------------
  18914             l_ii_man_airep = .false.
  18915             if(itype(ii).eq.i_man_airep.or.
  18916      $         itype(ii).eq.i_man_Yairep) l_ii_man_airep = .true. 
  18917 c
  18918 c           Compute ii-1 index
  18919 c           if(iob.gt.istart)   iim1 = indx(iob-1)
  18920 c           --------------------------------------
  18921             iim1 = 0
  18922             knt1 = iob - 1
  18923  10         if(knt1.ge.istart) then
  18924               iim1 = indx(knt1)
  18925               if(c_qc(iim1)(1:1).eq.'d'.or.
  18926      $           c_qc(iim1)(2:2).eq.'I'.or.
  18927      $           c_qc(iim1)(2:2).eq.'K'.or.

Page 422         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  18928      $           c_qc(iim1)(3:4).eq.'II'.or.
  18929      $           c_qc(iim1)(5:5).eq.'I'.or.
  18930      $           c_qc(iim1)(5:5).eq.'i') then
  18931                 knt1 = knt1 - 1
  18932                 goto 10
  18933               endif
  18934             else
  18935               iim1 = 0
  18936             endif
  18937 c
  18938 c           Compute ii-2 index
  18939 c           if(iob.gt.istart+1) iim2 = indx(iob-2)
  18940 c           --------------------------------------
  18941             iim2 = 0
  18942             knt2 = knt1 - 1
  18943  20         if(knt2.ge.istart) then
  18944               iim2 = indx(knt2)
  18945               if(c_qc(iim2)(1:1).eq.'d'.or.
  18946      $           c_qc(iim2)(2:2).eq.'I'.or.
  18947      $           c_qc(iim2)(2:2).eq.'K'.or.
  18948      $           c_qc(iim2)(3:4).eq.'II'.or.
  18949      $           c_qc(iim2)(5:5).eq.'I'.or.
  18950      $           c_qc(iim2)(5:5).eq.'i') then
  18951                 knt2 = knt2 - 1
  18952                 goto 20
  18953               endif
  18954             else
  18955               iim2 = 0
  18956             endif
  18957 c
  18958 c           Compute ii+1 index
  18959 c           if(iob.lt.iend)   iip1 = indx(iob+1)
  18960 c           ------------------------------------
  18961             iip1 = 0
  18962             knt3 = iob + 1
  18963  30         if(knt3.le.iend) then
  18964               iip1 = indx(knt3)
  18965               if(c_qc(iip1)(1:1).eq.'d'.or.
  18966      $           c_qc(iip1)(2:2).eq.'I'.or.
  18967      $           c_qc(iip1)(2:2).eq.'K'.or.
  18968      $           c_qc(iip1)(3:4).eq.'II'.or.
  18969      $           c_qc(iip1)(5:5).eq.'I'.or.
  18970      $           c_qc(iip1)(5:5).eq.'i') then
  18971                 knt3 = knt3 + 1
  18972                 goto 30
  18973               endif
  18974             else
  18975               iip1 = 0
  18976             endif
  18977 c
  18978 c           Compute ii+2 index
  18979 c           if(iob.lt.iend-1) iip2 = indx(iob+2)
  18980 c           ------------------------------------
  18981             iip2 = 0
  18982             knt4 = knt3 + 1
  18983  40         if(knt4.le.iend) then
  18984               iip2 = indx(knt4)

Page 423         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  18985               if(c_qc(iip2)(1:1).eq.'d'.or.
  18986      $           c_qc(iip2)(2:2).eq.'I'.or.
  18987      $           c_qc(iip2)(2:2).eq.'K'.or.
  18988      $           c_qc(iip2)(3:4).eq.'II'.or.
  18989      $           c_qc(iip2)(5:5).eq.'I'.or.
  18990      $           c_qc(iip2)(5:5).eq.'i') then
  18991                 knt4 = knt4 + 1
  18992                 goto 40
  18993               endif
  18994             else
  18995               iip2 = 0
  18996             endif
  18997 c
  18998 c           Compute time and height differences
  18999 c           -----------------------------------
  19000             alat0 = alat(ii)
  19001             alon0 = alon(ii)
  19002             ht_ft0 = ht_ft(ii)
  19003 c
  19004             if(iim1.ne.0) then
  19005               idt_dif0 = abs(idt(ii)   - idt(iim1))
  19006               ht_dif0  = abs(ht_ft(ii) - ht_ft(iim1))
  19007               ht_ftm1 = ht_ft(iim1)
  19008             else
  19009               idt_dif0 = imiss
  19010               ht_dif0 = amiss
  19011               ht_ftm1 = amiss
  19012             endif
  19013 c
  19014             if(iim2.ne.0) then
  19015               ht_ftm2 = ht_ft(iim2)
  19016             else
  19017               ht_ftm2 = amiss
  19018             endif
  19019 c
  19020             if(iim1.ne.0.and.iim2.ne.0) then
  19021               idt_difm1 = abs(idt(iim1) - idt(iim2))
  19022               ht_difm1 = abs(ht_ft(iim1) - ht_ft(iim2))
  19023             else
  19024               idt_difm1 = imiss
  19025               ht_difm1 = amiss
  19026             endif
  19027 c
  19028             if(iip1.ne.0) then
  19029               idt_difp1 = abs(idt(iip1) - idt(ii))
  19030               ht_difp1 = abs(ht_ft(iip1) - ht_ft(ii))
  19031               ht_ftp1 = ht_ft(iip1)
  19032             else
  19033               idt_difp1 = imiss
  19034               ht_difp1 = amiss
  19035               ht_ftp1 = amiss
  19036             endif
  19037 c
  19038             if(iip2.ne.0) then
  19039               ht_ftp2 = ht_ft(iip2)
  19040             else
  19041               ht_ftp2 = amiss

Page 424         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  19042             endif
  19043 c
  19044             if(iip2.ne.0.and.iip1.ne.0) then
  19045               idt_difp2 = abs(idt(iip2) - idt(iip1))
  19046               ht_difp2 = abs(ht_ft(iip2) - ht_ft(iip1))
  19047             else
  19048               idt_difp2 = imiss
  19049               ht_difp2 = amiss
  19050             endif
  19051 c
  19052 c     Look for high resolution level legs
  19053 c     -----------------------------------
  19054 c
  19055 c           Use iim1, ii, iip1 points
  19056 c           -----------------------------------
  19057             if(iim1.ne.0.and.iip1.ne.0.and.
  19058      $         idt_dif0 .ne.imiss.and.idt_dif0 .le.idt_updn.and.
  19059      $         idt_difp1.ne.imiss.and.idt_difp1.le.idt_updn.and.
  19060      $         ht_dif0 .lt.htdif_same+0.5.and.
  19061      $         ht_difp1.lt.htdif_same+0.5) then
  19062 c
  19063               c_qc(ii)(11:11) = 'L'
  19064 c
  19065 c           Use iim2, iim1, ii points
  19066 c           --------------------------
  19067             elseif(iim2.ne.0.and.iim1.ne.0.and.
  19068      $             idt_difm1.ne.imiss.and.idt_difm1.le.idt_updn.and.
  19069      $             idt_dif0 .ne.imiss.and.idt_dif0 .le.idt_updn.and.
  19070      $             ht_difm1.lt.htdif_same+0.5.and.
  19071      $             ht_dif0 .lt.htdif_same+0.5) then
  19072 c
  19073               c_qc(ii)(11:11) = 'L'
  19074 c
  19075               if(iip1.ne.0.and.idt_difp1.lt.idt_updn.and.
  19076      $           ht_difp1.gt.htdif_same+0.5.and.
  19077      $           ht_difp1.lt.5000.) then
  19078                 if(ht_ftp1.gt.ht_ft0) 
  19079      $             c_qc(ii)(11:11) = 'A'      ! Ascending
  19080                 if(ht_ftp1.lt.ht_ft0) 
  19081      $             c_qc(ii)(11:11) = 'D'      ! Descending
  19082               endif
  19083 c
  19084 c           Use ii, iip1, iip2 points
  19085 c           --------------------------
  19086             elseif(iip1.ne.0.and.iip2.ne.0.and.
  19087      $             idt_difp1.ne.imiss.and.idt_difp1.le.idt_updn.and.
  19088      $             idt_difp2.ne.imiss.and.idt_difp2.le.idt_updn.and.
  19089      $             ht_difp1.lt.htdif_same+0.5.and.
  19090      $             ht_difp2.lt.htdif_same+0.5) then
  19091 c
  19092               c_qc(ii)(11:11) = 'L'
  19093 c
  19094               if(iim1.ne.0.and.idt_dif0.lt.idt_updn.and.
  19095      $           ht_dif0.gt.htdif_same+0.5.and.
  19096      $           ht_dif0.lt.5000.) then
  19097                 if(ht_ftm1.gt.ht_ft0) 
  19098      $             c_qc(ii)(11:11) = 'D'      ! Descending

Page 425         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  19099                 if(ht_ftm1.lt.ht_ft0) 
  19100      $             c_qc(ii)(11:11) = 'A'      ! Ascending
  19101               endif
  19102 c
  19103 c     Look for high resolution ascents and descents
  19104 c     ---------------------------------------------
  19105 c
  19106 c           Use iim1, ii, iip1 points
  19107 c           -----------------------------------
  19108             elseif(iim1.ne.0.and.iip1.ne.0.and.
  19109      $             idt_dif0.ne.imiss.and.idt_dif0.le.idt_updn.and.
  19110      $             idt_difp1.ne.imiss.and.idt_difp1.le.idt_updn.and.
  19111      $             ht_ftm1.lt.ht_ft0 .and.
  19112      $             ht_ft0 .lt.ht_ftp1) then
  19113 c
  19114               c_qc(ii)(11:11) = 'A'
  19115 c
  19116             elseif(iim1.ne.0.and.iip1.ne.0.and.
  19117      $             idt_dif0.ne.imiss.and.idt_dif0.le.idt_updn.and.
  19118      $             idt_difp1.ne.imiss.and.idt_difp1.le.idt_updn.and.
  19119      $             ht_ftm1.gt.ht_ft0 .and.
  19120      $             ht_ft0 .gt.ht_ftp1) then
  19121 c
  19122               c_qc(ii)(11:11) = 'D'
  19123 c
  19124 c           Use iim2, iim1, ii points
  19125 c           -----------------------------------
  19126             elseif(iim2.ne.0.and.iim1.ne.0.and.
  19127      $             idt_difm1.ne.imiss.and.idt_difm1.le.idt_updn.and.
  19128      $             idt_dif0.ne.imiss.and.idt_dif0.le.idt_updn.and.
  19129      $             ht_ftm2.lt.ht_ftm1.and.
  19130      $             ht_ftm1.lt.ht_ft0) then
  19131 c
  19132                 c_qc(ii)(11:11) = 'A'
  19133 c
  19134             elseif(iim2.ne.0.and.iim1.ne.0.and.
  19135      $             idt_difm1.ne.imiss.and.idt_difm1.le.idt_updn.and.
  19136      $             idt_dif0.ne.imiss.and.idt_dif0.le.idt_updn.and.
  19137      $             ht_ftm2.gt.ht_ftm1.and.
  19138      $             ht_ftm1.gt.ht_ft0 ) then
  19139 c
  19140                 c_qc(ii)(11:11) = 'D'
  19141 c
  19142 c           Use ii, iip1, iip2 points
  19143 c           -----------------------------------
  19144             elseif(iip1.ne.0.and.iip2.ne.0.and.
  19145      $             idt_difp1.ne.imiss.and.idt_difp1.le.idt_updn.and.
  19146      $             idt_difp2.ne.imiss.and.idt_difp2.le.idt_updn.and.
  19147      $             ht_ft0 .lt.ht_ftp1.and.
  19148      $             ht_ftp1.lt.ht_ftp2) then
  19149 c
  19150                 c_qc(ii)(11:11) = 'A'
  19151 c
  19152             elseif(iip1.ne.0.and.iip2.ne.0.and.
  19153      $             idt_difp1.ne.imiss.and.idt_difp1.le.idt_updn.and.
  19154      $             idt_difp2.ne.imiss.and.idt_difp2.le.idt_updn.and.
  19155      $             ht_ft0.gt.ht_ftp1.and.

Page 426         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  19156      $             ht_ftp1.gt.ht_ftp2) then
  19157 c
  19158                 c_qc(ii)(11:11) = 'D'
  19159 c
  19160 c     Look for other level legs
  19161 c     -------------------------
  19162 c
  19163 c           Use iim1, ii, iip1 points
  19164 c           -------------------------
  19165             elseif(iim1.ne.0.and.iip1.ne.0.and.
  19166      $             idt_dif0.ne.imiss.and.
  19167      $             (idt_dif0 .le.idt_near.or.
  19168      $              (l_ii_man_airep.and.idt_dif0 .le.idt_near*3)).and.
  19169      $             idt_difp1.ne.imiss.and.
  19170      $             (idt_difp1.le.idt_near.or.
  19171      $              (l_ii_man_airep.and.idt_difp1.le.idt_near*3)).and.
  19172      $             ht_dif0.lt.htdif_same*1.5+0.5.and.
  19173      $             ht_difp1.lt.htdif_same*1.5+0.5) then
  19174 c
  19175               c_qc(ii)(11:11) = 'L'
  19176 c
  19177 c           Use iim2, iim1, ii points
  19178 c           -------------------------
  19179             elseif(iim2.ne.0.and.iim1.ne.0.and.
  19180      $             idt_difm1.ne.imiss.and.
  19181      $             (idt_difm1.le.idt_near.or.
  19182      $              (l_ii_man_airep.and.idt_difm1.le.idt_near*3)).and.
  19183      $             idt_dif0 .ne.imiss.and.
  19184      $             (idt_dif0 .le.idt_near.or.
  19185      $              (l_ii_man_airep.and.idt_dif0 .le.idt_near*3)).and.
  19186      $             ht_difm1.lt.htdif_same*1.5+0.5.and.
  19187      $             ht_dif0 .lt.htdif_same*1.5+0.5) then
  19188 c
  19189               c_qc(ii)(11:11) = 'L'
  19190 c
  19191               if(iip1.ne.0.and.idt_difp1.lt.idt_updn.and.
  19192      $           ht_difp1.gt.htdif_same+0.5.and.
  19193      $           ht_difp1.lt.5000.) then
  19194                 if(ht_ftp1.gt.ht_ft0) 
  19195      $             c_qc(ii)(11:11) = 'A'      ! Ascending
  19196                 if(ht_ftp1.lt.ht_ft0) 
  19197      $             c_qc(ii)(11:11) = 'D'      ! Descending
  19198               endif
  19199 c
  19200 c           Use ii, iip1, iip2 points
  19201 c           -------------------------
  19202             elseif(iip1.ne.0.and.iip2.ne.0.and.
  19203      $             idt_difp1.ne.imiss.and.
  19204      $             (idt_difp1.le.idt_near.or.
  19205      $              (l_ii_man_airep.and.idt_difp1.le.idt_near*3)).and.
  19206      $             idt_difp2.ne.imiss.and.
  19207      $             (idt_difp2.le.idt_near.or.
  19208      $              (l_ii_man_airep.and.idt_difp2.le.idt_near*3)).and.
  19209      $             ht_difp1.lt.htdif_same*1.5+0.5.and.
  19210      $             ht_difp2.lt.htdif_same*1.5+0.5) then
  19211 c
  19212               c_qc(ii)(11:11) = 'L'

Page 427         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  19213 c
  19214               if(iim1.ne.0.and.idt_dif0.lt.idt_updn.and.
  19215      $           ht_dif0.gt.htdif_same+0.5.and.
  19216      $           ht_dif0.lt.5000.) then
  19217                 if(ht_ftm1.gt.ht_ft0) 
  19218      $             c_qc(ii)(11:11) = 'D'      ! Descending
  19219                 if(ht_ftm1.lt.ht_ft0) 
  19220      $             c_qc(ii)(11:11) = 'A'      ! Ascending
  19221               endif
  19222 c
  19223 c     Look for other ascents and descents
  19224 c     -----------------------------------
  19225 c
  19226 c           Use iim1, ii, iip1 points
  19227 c           --------------------------------
  19228             elseif(iim1.ne.0.and.iip1.ne.0.and.
  19229      $             idt_dif0.ne.imiss.and.
  19230      $             (idt_dif0 .le.idt_near.or.
  19231      $              (l_ii_man_airep.and.idt_dif0 .le.idt_near*2)).and.
  19232      $             idt_difp1.ne.imiss.and.
  19233      $             (idt_difp1.le.idt_near.or.
  19234      $              (l_ii_man_airep.and.idt_difp1.le.idt_near*2)).and.
  19235      $             ht_ftm1.lt.ht_ft0 .and.
  19236      $             ht_ft0 .lt.ht_ftp1) then
  19237 c
  19238               c_qc(ii)(11:11) = 'a'
  19239 c
  19240             elseif(iim1.ne.0.and.iip1.ne.0.and.
  19241      $             idt_dif0.ne.imiss.and.
  19242      $             (idt_dif0 .le.idt_near.or.
  19243      $              (l_ii_man_airep.and.idt_dif0 .le.idt_near*2)).and.
  19244      $             idt_difp1.ne.imiss.and.
  19245      $             (idt_difp1.le.idt_near.or.
  19246      $              (l_ii_man_airep.and.idt_difp1.le.idt_near*2)).and.
  19247      $             ht_ftm1.gt.ht_ft0 .and.
  19248      $             ht_ft0 .gt.ht_ftp1) then
  19249 c
  19250               c_qc(ii)(11:11) = 'd'
  19251 c
  19252 c           Use iim2, iim1, ii points
  19253 c           -------------------------
  19254             elseif(iim2.ne.0.and.iim1.ne.0.and.
  19255      $             idt_difm1.ne.imiss.and.
  19256      $             (idt_difm1.le.idt_near.or.
  19257      $              (l_ii_man_airep.and.idt_difm1.le.idt_near*2)).and.
  19258      $             idt_dif0 .ne.imiss.and.
  19259      $             (idt_dif0 .le.idt_near.or.
  19260      $              (l_ii_man_airep.and.idt_dif0 .le.idt_near*2)).and.
  19261      $             ht_ftm2.lt.ht_ftm1.and.
  19262      $             ht_ftm1.lt.ht_ft0 ) then
  19263 c
  19264               c_qc(ii)(11:11) = 'a'
  19265 c
  19266             elseif(iim2.ne.0.and.iim1.ne.0.and.
  19267      $             idt_difm1.ne.imiss.and.
  19268      $             (idt_difm1.le.idt_near.or.
  19269      $              (l_ii_man_airep.and.idt_difm1.le.idt_near*2)).and.

Page 428         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  19270      $             idt_dif0 .ne.imiss.and.
  19271      $             (idt_dif0 .le.idt_near.or.
  19272      $              (l_ii_man_airep.and.idt_dif0 .le.idt_near*2)).and.
  19273      $             ht_ftm2.gt.ht_ftm1.and.
  19274      $             ht_ftm1.gt.ht_ft0 ) then
  19275 c
  19276               c_qc(ii)(11:11) = 'd'
  19277 c
  19278 c           Use ii, iip1, iip2 points
  19279 c           --------------------------------
  19280             elseif(iip1.ne.0.and.iip2.ne.0.and.
  19281      $             idt_difp1.ne.imiss.and.
  19282      $             (idt_difp1.le.idt_near.or.
  19283      $              (l_ii_man_airep.and.idt_difp1.le.idt_near*2)).and.
  19284      $             idt_difp2.ne.imiss.and.
  19285      $             (idt_difp2.le.idt_near.or.
  19286      $              (l_ii_man_airep.and.idt_difp2.le.idt_near*2)).and.
  19287      $             ht_ft0 .lt.ht_ftp1.and.
  19288      $             ht_ftp1.lt.ht_ftp2) then
  19289 c
  19290               c_qc(ii)(11:11) = 'a'
  19291 c
  19292             elseif(iip1.ne.0.and.iip2.ne.0.and.
  19293      $             idt_difp1.ne.imiss.and.
  19294      $             (idt_difp1.le.idt_near.or.
  19295      $              (l_ii_man_airep.and.idt_difp1.le.idt_near*2)).and.
  19296      $             idt_difp2.ne.imiss.and.
  19297      $             (idt_difp2.le.idt_near.or.
  19298      $              (l_ii_man_airep.and.idt_difp2.le.idt_near*2)).and.
  19299      $             ht_ft0 .gt.ht_ftp1.and.
  19300      $             ht_ftp1.gt.ht_ftp2) then
  19301 c
  19302               c_qc(ii)(11:11) = 'd'
  19303 c
  19304 c     Look for 2-point level legs
  19305 c     ---------------------------
  19306 c
  19307 c           Use iim1, ii, iip1 points
  19308 c           -------------------------
  19309             elseif(iim1.ne.0.and.iip1.ne.0.and.
  19310      $             idt_dif0.ne.imiss.and.
  19311      $             (idt_dif0 .le.idt_near.or.
  19312      $              (l_ii_man_airep.and.idt_dif0 .le.idt_near*2)).and.
  19313      $             idt_difp1.ne.imiss.and.
  19314      $             (idt_difp1.le.idt_near.or.
  19315      $              (l_ii_man_airep.and.idt_difp1.le.idt_near*2)).and.
  19316      $             ht_dif0.lt.htdif_same*1.5+0.5) then
  19317 c
  19318               c_qc(ii)(11:11) = 'L'
  19319 c
  19320             elseif(iim1.ne.0.and.iip1.ne.0.and.
  19321      $             idt_dif0.ne.imiss.and.
  19322      $             (idt_dif0 .le.idt_near.or.
  19323      $              (l_ii_man_airep.and.idt_dif0 .le.idt_near*2)).and.
  19324      $             idt_difp1.ne.imiss.and.
  19325      $             (idt_difp1.le.idt_near.or.
  19326      $              (l_ii_man_airep.and.idt_difp1.le.idt_near*2)).and.

Page 429         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  19327      $             ht_difp1.lt.htdif_same*1.5+0.5) then
  19328 c
  19329               c_qc(ii)(11:11) = 'L'
  19330 c
  19331 c           Use iim2, iim1, ii points
  19332 c           -------------------------
  19333             elseif(iim2.ne.0.and.iim1.ne.0.and.
  19334      $             idt_difm1.ne.imiss.and.
  19335      $             (idt_difm1.le.idt_near.or.
  19336      $              (l_ii_man_airep.and.idt_difm1.le.idt_near*2)).and.
  19337      $             idt_dif0 .ne.imiss.and.
  19338      $             (idt_dif0 .le.idt_near.or.
  19339      $              (l_ii_man_airep.and.idt_dif0 .le.idt_near*2)).and.
  19340      $             ht_dif0 .lt.htdif_same*1.5+0.5) then
  19341 c
  19342               c_qc(ii)(11:11) = 'L'
  19343 c
  19344 c           Use ii, iip1, iip2 points
  19345 c           -------------------------
  19346             elseif(iip1.ne.0.and.iip2.ne.0.and.
  19347      $             idt_difp1.ne.imiss.and.
  19348      $             (idt_difp1.le.idt_near.or.
  19349      $              (l_ii_man_airep.and.idt_difp1.le.idt_near*2)).and.
  19350      $             idt_difp2.ne.imiss.and.
  19351      $             (idt_difp2.le.idt_near.or.
  19352      $              (l_ii_man_airep.and.idt_difp2.le.idt_near*2)).and.
  19353      $             ht_difp1.lt.htdif_same*1.5+0.5) then
  19354 c
  19355               c_qc(ii)(11:11) = 'L'
  19356 c
  19357 c     Look for isolated ascending and descending points
  19358 c     -------------------------------------------------
  19359 c
  19360 c           Use iim2, iim1, ii points
  19361 c           -------------------------
  19362             elseif(iim2.ne.0.and.iim1.ne.0.and.
  19363      $             idt_difm1.ne.imiss.and.
  19364      $             (idt_difm1.le.idt_near.or.
  19365      $              (l_ii_man_airep.and.idt_difm1.le.idt_near*2)).and.
  19366      $             idt_dif0 .ne.imiss.and.
  19367      $             (idt_dif0 .le.idt_near.or.
  19368      $              (l_ii_man_airep.and.idt_dif0 .le.idt_near*2)).and.
  19369      $             ht_difm1.lt.htdif_same*1.5+0.5) then
  19370 c
  19371               if(ht_ft0.lt.ht_ftm1) then
  19372                 c_qc(ii)(11:11) = 'd'
  19373               elseif(ht_ft0.gt.ht_ftm1) then
  19374                 c_qc(ii)(11:11) = 'a'
  19375               else
  19376                 write(io8,*)
  19377                 write(io8,*) 'unidentified isolated point found!'
  19378                 write(io8,*) 'hts:',ht_ftm2,ht_ftm1,ht_ft0
  19379                 c_qc(ii)(11:11) = 'U'
  19380               endif
  19381 c
  19382 c           Use ii, iip1, iip2 points
  19383 c           -------------------------

Page 430         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  19384             elseif(iip1.ne.0.and.iip2.ne.0.and.
  19385      $             idt_difp1.ne.imiss.and.
  19386      $             (idt_difp1.le.idt_near.or.
  19387      $              (l_ii_man_airep.and.idt_difp1.le.idt_near*2)).and.
  19388      $             idt_difp2.ne.imiss.and.
  19389      $             (idt_difp2.le.idt_near.or.
  19390      $              (l_ii_man_airep.and.idt_difp2.le.idt_near*2)).and.
  19391      $             ht_difp2.lt.htdif_same*1.5+0.5) then
  19392 c
  19393               if(ht_ft0.gt.ht_ftp1) then
  19394                 c_qc(ii)(11:11) = 'd'
  19395               elseif(ht_ft0.lt.ht_ftp1) then
  19396                 c_qc(ii)(11:11) = 'a'
  19397               else
  19398                 write(io8,*)
  19399                 write(io8,*) 'unidentified isolated point found!'
  19400                 write(io8,*) 'hts:',ht_ft0,ht_ftp1,ht_ftp2
  19401                 c_qc(ii)(11:11) = 'U'
  19402               endif
  19403 c
  19404 c     Check if time difference is too great to categorize manAIREPs
  19405 c     -------------------------------------------------------------
  19406             elseif(l_ii_man_airep.and.
  19407      $             ((iim1.ne.0.and.iip1.ne.0.and.
  19408      $              ((idt_difm1.gt.idt_near*2.and.
  19409      $                idt_difp1.gt.idt_near*2).or.
  19410      $               (idt_dif0 .gt.idt_near*2.and.
  19411      $                idt_difp1.gt.idt_near*2).or.
  19412      $               (idt_dif0 .gt.idt_near*2.and.
  19413      $                idt_difp2.gt.idt_near*2))).or.
  19414      $             (iim1.eq.0.and.idt_difp1.gt.idt_near*2).or.
  19415      $             (iim1.eq.0.and.idt_difp2.gt.idt_near*2).or.
  19416      $             (iim2.eq.0.and.iim1.ne.0.and.
  19417      $              idt_difp1.gt.idt_near*2).or.
  19418      $             (iip1.eq.0.and.idt_dif0 .gt.idt_near*2).or.
  19419      $             (iip1.eq.0.and.idt_difm1.gt.idt_near*2).or.
  19420      $             (iip2.eq.0.and.iip1.ne.0.and.
  19421      $              idt_dif0 .gt.idt_near*2)))then
  19422 c
  19423               c_qc(ii)(11:11) = 'N'
  19424 c
  19425 c     Check if time difference is too great to categorize remaining types
  19426 c     -------------------------------------------------------------------
  19427             elseif((.not.l_ii_man_airep).and.
  19428      $             ((iim1.ne.0.and.iip1.ne.0.and.
  19429      $              ((idt_difm1.gt.idt_near*2/3.and.
  19430      $                idt_difp1.gt.idt_near*2/3).or.
  19431      $               (idt_dif0 .gt.idt_near*2/3.and.
  19432      $                idt_difp1.gt.idt_near*2/3).or.
  19433      $               (idt_dif0 .gt.idt_near*2/3.and.
  19434      $                idt_difp2.gt.idt_near*2/3))).or.
  19435      $             (iim1.eq.0.and.idt_difp1.gt.idt_near*2/3).or.
  19436      $             (iim1.eq.0.and.idt_difp2.gt.idt_near*2/3).or.
  19437      $             (iim2.eq.0.and.iim1.ne.0.and.
  19438      $              idt_difp1.gt.idt_near*2/3).or.
  19439      $             (iip1.eq.0.and.idt_dif0 .gt.idt_near*2/3).or.
  19440      $             (iip1.eq.0.and.idt_difm1.gt.idt_near*2/3).or.

Page 431         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  19441      $             (iip2.eq.0.and.iip1.ne.0.and.
  19442      $              idt_dif0 .gt.idt_near*2/3)))then
  19443 c
  19444               c_qc(ii)(11:11) = 'N'
  19445 c
  19446 c     Label everything else as unknown
  19447 c     --------------------------------
  19448             else
  19449              c_qc(ii)(11:11) = 'U'
  19450             endif
  19451 c
  19452           enddo
  19453 c
  19454 c Check ordering
  19455 c Compute platform speed and airspeed between neighboring points
  19456 c Check for realistic platform speeds using Moninger's test
  19457 c Threshold lowered from 600 m/s to 525 m/s; manAIREPs use 325 m/s
  19458 c Compute vertical velocity between neighboring points and do bounce test
  19459 c -----------------------------------------------------------------------
  19460  5500     continue
  19461 c
  19462 c Initialize variables for track check
  19463 c ------------------------------------
  19464           l_ii_pspd_ok = .false.
  19465           l_stuck = .false.
  19466 c
  19467           spd_thresh = 525.
  19468           spd_man_thresh = 350.
  19469           vspd_thresh = 12000.0/60.0
  19470           vspd_bounce = 6000.0/60.0
  19471 c
  19472           iob = istart
  19473 c
  19474           indx_save = imiss
  19475           ll = 0
  19476           knt_bad = 0
  19477           last_bad = 0
  19478           last_bad_m1 = 0
  19479           knt_iob = 1
  19480           iob_sav = 0
  19481 c
  19482 c Loop over reports for current flight
  19483 c ------------------------------------
  19484           do while(iob.le.iend)
  19485             l_print = .false.
  19486             l_retest = .false.
  19487 c
  19488             knt0 = iob
  19489             ii = indx(iob)
  19490 c
  19491             if(iob.eq.iob_sav) then
  19492               knt_iob = knt_iob + 1
  19493             else
  19494               iob_sav = iob
  19495               knt_iob = 1
  19496             endif
  19497 c

Page 432         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  19498             if(knt_iob.gt.75) then
  19499               write(io8,*)
  19500               write(io8,*) 'Too many repetitions with the same iob',iob
  19501               write(io8,*) '  Sorted index ii = ',ii
  19502               write(io8,*) '  Number of repetitions = ',knt_iob
  19503               iob = iob + 1
  19504               iob_sav = iob
  19505               knt_iob = 1
  19506             endif
  19507 c
  19508 c           Go to next report if ii index is invalid
  19509 c           ----------------------------------------
  19510             if(c_qc(ii)(1:1).eq.'d'.or.
  19511      $         c_qc(ii)(2:2).eq.'I'.or.
  19512      $         c_qc(ii)(2:2).eq.'K'.or.
  19513      $         c_qc(ii)(3:4).eq.'II'.or.
  19514      $         c_qc(ii)(5:5).eq.'I'.or.
  19515      $         c_qc(ii)(5:5).eq.'i') then
  19516 c
  19517               iob = iob + 1
  19518               l_ii_pspd_ok = .false.
  19519               l_print = .false.
  19520               if(l_print) then
  19521                 write(io8,*) 'Index invalid: ii = ',ii
  19522               endif
  19523 c
  19524 c           Check out ordering etc for valid indices
  19525 c           ----------------------------------------
  19526             else
  19527 c
  19528 c             Compute ii-1 index
  19529 c             if(iob.gt.istart)   iim1 = indx(iob-1)
  19530 c             --------------------------------------
  19531               iim1 = 0
  19532               knt1 = iob - 1
  19533  11           if(knt1.ge.istart) then
  19534                 iim1 = indx(knt1)
  19535                 if(c_qc(iim1)(1:1).eq.'d'.or.
  19536      $             c_qc(iim1)(2:2).eq.'I'.or.
  19537      $             c_qc(iim1)(2:2).eq.'K'.or.
  19538      $             c_qc(iim1)(3:4).eq.'II'.or.
  19539      $             c_qc(iim1)(5:5).eq.'I'.or.
  19540      $             c_qc(iim1)(5:5).eq.'i') then
  19541                   knt1 = knt1 - 1
  19542                   goto 11
  19543                 endif
  19544               else
  19545                 iim1 = 0
  19546               endif
  19547 c
  19548 c             Compute ii-2 index
  19549 c             if(iob.gt.istart+1) iim2 = indx(iob-2)
  19550 c             --------------------------------------
  19551               iim2 = 0
  19552               knt2 = knt1 - 1
  19553  21           if(knt2.ge.istart) then
  19554                 iim2 = indx(knt2)

Page 433         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  19555                 if(c_qc(iim2)(1:1).eq.'d'.or.
  19556      $             c_qc(iim2)(2:2).eq.'I'.or.
  19557      $             c_qc(iim2)(2:2).eq.'K'.or.
  19558      $             c_qc(iim2)(3:4).eq.'II'.or.
  19559      $             c_qc(iim2)(5:5).eq.'I'.or.
  19560      $             c_qc(iim2)(5:5).eq.'i') then
  19561                   knt2 = knt2 - 1
  19562                   goto 21
  19563                 endif
  19564               else
  19565                 iim2 = 0
  19566               endif
  19567 c
  19568 c             Compute ii+1 index
  19569 c             if(iob.lt.iend)   iip1 = indx(iob+1)
  19570 c             ------------------------------------
  19571               iip1 = 0
  19572               iobp1 = 0
  19573               knt3 = iob + 1
  19574  41           if(knt3.le.iend) then
  19575                 iip1 = indx(knt3)
  19576                 iobp1 = knt3
  19577                 if(c_qc(iip1)(1:1).eq.'d'.or.
  19578      $             c_qc(iip1)(2:2).eq.'I'.or.
  19579      $             c_qc(iip1)(2:2).eq.'K'.or.
  19580      $             c_qc(iip1)(3:4).eq.'II'.or.
  19581      $             c_qc(iip1)(5:5).eq.'I'.or.
  19582      $             c_qc(iip1)(5:5).eq.'i') then
  19583                   knt3 = knt3 + 1
  19584                   goto 41
  19585                 endif
  19586               else
  19587                 iip1 = 0
  19588                 iobp1 = 0
  19589               endif
  19590 c
  19591 c             Compute ii+2 index
  19592 c             if(iob.lt.iend-1) iip2 = indx(iob+2)
  19593 c             ------------------------------------
  19594               iip2 = 0
  19595               iobp2 = 0
  19596               knt4 = knt3 + 1
  19597  51           if(knt4.le.iend) then
  19598                 iip2 = indx(knt4)
  19599                 iobp2 = knt4
  19600                 if(c_qc(iip2)(1:1).eq.'d'.or.
  19601      $             c_qc(iip2)(2:2).eq.'I'.or.
  19602      $             c_qc(iip2)(2:2).eq.'K'.or.
  19603      $             c_qc(iip2)(3:4).eq.'II'.or.
  19604      $             c_qc(iip2)(5:5).eq.'I'.or.
  19605      $             c_qc(iip2)(5:5).eq.'i') then
  19606                   knt4 = knt4 + 1
  19607                   goto 51
  19608                 endif
  19609               else
  19610                 iip2 = 0
  19611                 iobp2 = 0

Page 434         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  19612               endif
  19613 c
  19614 c             Determine if reports are manual AIREPs
  19615 c             --------------------------------------
  19616               l_ii_man_airep = .false.
  19617               if(itype(ii).eq.i_man_airep.or.
  19618      $           itype(ii).eq.i_man_Yairep) l_ii_man_airep = .true.
  19619 c 
  19620               l_iim1_man_airep = .false.
  19621               if(iim1.ne.0) then
  19622                if(itype(iim1).eq.i_man_airep.or.
  19623      $            itype(iim1).eq.i_man_Yairep) l_iim1_man_airep = .true.
  19624               endif
  19625 c 
  19626               l_iip1_man_airep = .false.
  19627               if(iip1.ne.0) then
  19628                 if(itype(iip1).eq.i_man_airep.or.
  19629      $            itype(iip1).eq.i_man_Yairep) l_iip1_man_airep = .true. 
  19630               endif
  19631 c 
  19632               l_iip2_man_airep = .false.
  19633               if(iip2.ne.0) then
  19634                 if(itype(iip2).eq.i_man_airep.or.
  19635      $            itype(iip2).eq.i_man_Yairep) l_iip2_man_airep = .true. 
  19636               endif
  19637 c
  19638 c             Set up temporary variables for ii point
  19639 c             ---------------------------------------
  19640               alat0 = alat(ii)
  19641               alon0 = alon(ii)
  19642               ht_ft0 = ht_ft(ii)
  19643               idt0 = idt(ii)
  19644 c
  19645 c              if(c_qc(ii)(7:8).ne.'..') then
  19646 c                uwind0 = amiss
  19647 c                vwind0 = amiss
  19648 c              else
  19649 c                uwind0 = -sin(ob_dir(ii)*d2r)*ob_spd(ii)
  19650 c                vwind0 = -cos(ob_dir(ii)*d2r)*ob_spd(ii)
  19651 c              endif
  19652 c
  19653 c             Set up temporary variables for iim1 point
  19654 c             -----------------------------------------
  19655               if(iim1.ne.0) then
  19656                 alatm1 = alat(iim1)
  19657                 alonm1 = alon(iim1)
  19658 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  19659                 if(alon0.lt.90.0.and.alonm1.gt.270.0) 
  19660      $            alonm1 = 360.0 - alonm1
  19661                 if(alon0.gt.270.0.and.alonm1.lt.90.0) 
  19662      $            alonm1 = 360.0 + alonm1
  19663 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  19664                 ht_ftm1 = ht_ft(iim1)
  19665                 idtm1 = idt(iim1)
  19666 c
  19667 c                if(c_qc(iim1)(7:8).ne.'..') then
  19668 c                  uwindm1 = amiss

Page 435         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  19669 c                  vwindm1 = amiss
  19670 c                else
  19671 c                  uwindm1 = -sin(ob_dir(iim1)*d2r)*ob_spd(iim1)
  19672 c                  vwindm1 = -cos(ob_dir(iim1)*d2r)*ob_spd(iim1)
  19673 c                endif
  19674 c
  19675 c               Compute groundspeed vector components between ii and iim1 points
  19676 c               ----------------------------------------------------------------
  19677                 if(idt0.ne.imiss.and.idtm1.ne.imiss) then
  19678                   idt_dif0 = abs(idt0 - idtm1)
  19679                 else
  19680                   idt_dif0 = imiss
  19681                 endif
  19682 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  19683                 if(alat0 .ne.amiss.and.alon0 .ne.amiss.and.
  19684      $             alatm1.ne.amiss.and.alonm1.ne.amiss.and.
  19685 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  19686      $             idt_dif0.ne.imiss) then
  19687                   udist0 = gcirc_qc(alat(iim1),alon(iim1),
  19688      $                              alat(iim1),alon(ii  ))
  19689 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  19690                   if(sin((alon(ii)-alon(iim1))*d2r).lt.0.0)
  19691 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  19692      $              udist0 = -udist0
  19693                   vdist0 = gcirc_qc(alat(iim1),alon(iim1),
  19694      $                              alat(ii  ),alon(iim1))
  19695 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  19696                   if(sin((alat(ii)-alat(iim1))*d2r).lt.0.0)
  19697 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  19698      $              vdist0 = -vdist0
  19699                   dist0  = gcirc_qc(alat(iim1),alon(iim1),
  19700      $                              alat(ii  ),alon(ii  ))
  19701                   if(idt_dif0.gt.0) then
  19702                     upspd0 = udist0 / float(idt_dif0)
  19703                     vpspd0 = vdist0 / float(idt_dif0)
  19704                     pspd0  = dist0  / float(idt_dif0)
  19705                   else
  19706                     upspd0 = udist0 / float(idt_dif0+60)
  19707                     vpspd0 = vdist0 / float(idt_dif0+60)
  19708                     pspd0  = dist0  / float(idt_dif0+60)
  19709                   endif
  19710                   if(upspd0.eq.0.0.and.vpspd0.eq.0.0) then
  19711                     pdir0 = 0.0
  19712                   else
  19713                     pdir0 = atan2(upspd0,vpspd0) / d2r + 180.0
  19714                   endif
  19715                   dist0 = dist0 / 1000.0
  19716                 else
  19717                   udist0 = amiss
  19718                   vdist0 = amiss
  19719                   dist0  = amiss
  19720                   upspd0 = amiss
  19721                   vpspd0 = amiss
  19722                   pspd0  = amiss
  19723                   pdir0  = amiss
  19724                 endif
  19725 c

Page 436         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  19726 c               Compute airspeed between ii and iim1 points
  19727 c               -------------------------------------------
  19728 c                if(uwind0.ne.amiss.and.upspd0.ne.amiss) then
  19729 c                  uairspd0 = upspd0 - uwind0
  19730 c                  vairspd0 = vpspd0 - vwind0
  19731 c                  airspd0  = sqrt(uairspd0**2+vairspd0**2)
  19732 c
  19733                 if(ob_dir(ii).ne.amiss.and.ob_spd(ii).ne.amiss) then
  19734                   airspd0 = sqrt(pspd0**2 + ob_spd(ii)**2 
  19735      $               - 2.0*pspd0*ob_spd(ii)*cos((pdir0-ob_dir(ii))*d2r))
  19736 c
  19737 c                 Make allowances for aircraft that round time to the 
  19738 c                 nearest minute--divide by 120 sec rather than 60 sec
  19739 c                 (modified to allow for mixture of reports with time
  19740 c                  rounded to the nearest minute and interpolated time
  19741 c                  to the nearest second in ascents--P.M.Pauley 6/11/01)
  19742 c                 ----------------------------------------------------
  19743                   if(airspd0.gt.spd_thresh.and.
  19744      $               (abs(idt_dif0).eq.60.or.
  19745      $                (abs(idt_dif0).lt.60.and.
  19746      $                 ((idt(ii  )/60)*60.eq.idt(ii  ).or.
  19747      $                  (idt(iim1)/60)*60.eq.idt(iim1))))) then
  19748 c
  19749                     airspd0 = airspd0 / 2.0
  19750 c
  19751                   endif
  19752 c
  19753 c                  if(uairspd0.eq.0.0.and.vairspd0.eq.0.0) then
  19754 c                    airdir0 = 0.0
  19755 c                  else
  19756 c                    airdir0 = atan2(uairspd0,vairspd0) / d2r + 180.0
  19757 c                  endif
  19758 c
  19759                 else
  19760 c                  uairspd0 = amiss
  19761 c                  vairspd0 = amiss
  19762                   airspd0  = pspd0
  19763 c                  airdir0  = pdir0
  19764                 endif
  19765 c
  19766 c               Compute vertical speed between ii and iim1 points
  19767 c               -------------------------------------------------
  19768                 if(ht_ft0.ne.amiss.and.ht_ftm1.ne.amiss) then
  19769                   ht_dif0  = ht_ft(ii) - ht_ft(iim1)
  19770                 else
  19771                   ht_dif0 = amiss
  19772                 endif
  19773                 if(ht_dif0.eq.amiss.or.idt_dif0.eq.imiss) then
  19774                   vspd0 = amiss
  19775                 elseif(idt_dif0.gt.0) then
  19776                   vspd0 = ht_dif0 / float(idt_dif0)
  19777                 else
  19778                   vspd0 = ht_dif0 / float(idt_dif0+60) 
  19779                 endif
  19780 c
  19781               else
  19782 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision

Page 437         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  19783                 alatm1 = amiss
  19784                 alonm1 = amiss
  19785 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  19786                 ht_ftm1 = amiss
  19787                 idtm1 = amiss
  19788 c                uwindm1 = amiss
  19789 c                vwindm1 = amiss
  19790 c
  19791                 idt_dif0 = imiss
  19792                 udist0 = amiss
  19793                 vdist0 = amiss
  19794                 dist0  = amiss
  19795                 upspd0 = amiss
  19796                 vpspd0 = amiss
  19797                 pspd0  = amiss
  19798                 pdir0  = amiss
  19799 c
  19800 c                uairspd0 = amiss
  19801 c                vairspd0 = amiss
  19802                 airspd0  = amiss
  19803 c                airdir0  = amiss
  19804 c
  19805                 ht_dif0 = amiss
  19806                 vspd0 = amiss
  19807               endif
  19808 c
  19809 c             Set up temporary variables for iim2 point
  19810 c             -----------------------------------------
  19811               if(iim2.ne.0.and.iim1.ne.0) then
  19812                 alatm2 = alat(iim2)
  19813                 alonm2 = alon(iim2)
  19814 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  19815                 if(alon0.lt.90.0.and.alonm2.gt.270.0) 
  19816      $            alonm2 = 360.0 - alonm2
  19817                 if(alon0.gt.270.0.and.alonm2.lt.90.0) 
  19818      $            alonm2 = 360.0 + alonm2
  19819 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  19820                 ht_ftm2 = ht_ft(iim2)
  19821                 idtm2 = idt(iim2)
  19822 c
  19823 c                if(c_qc(iim2)(7:8).ne.'..') then
  19824 c                  uwindm2 = amiss
  19825 c                  vwindm2 = amiss
  19826 c                else
  19827 c                  uwindm2 = -sin(ob_dir(iim2)*d2r)*ob_spd(iim2)
  19828 c                  vwindm2 = -cos(ob_dir(iim2)*d2r)*ob_spd(iim2)
  19829 c                endif
  19830 c
  19831 c               Compute groundspeed vector components between iim2 and iim1 points
  19832 c               ------------------------------------------------------------------
  19833                 if(idtm1.ne.imiss.and.idtm2.ne.imiss) then
  19834                   idt_difm1 = abs(idtm1 - idtm2)
  19835                 else
  19836                   idt_difm1 = imiss
  19837                 endif
  19838 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  19839                 if(alatm2.ne.amiss.and.alonm2.ne.amiss.and.

Page 438         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  19840      $             alatm1.ne.amiss.and.alonm1.ne.amiss.and.
  19841 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  19842      $             idt_difm1.ne.imiss) then
  19843                   udistm1 = gcirc_qc(alat(iim2),alon(iim2),
  19844      $                               alat(iim2),alon(iim1))
  19845 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  19846                   if(sin((alon(iim1)-alon(iim2))*d2r).lt.0.0)
  19847 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  19848      $              udistm1 = -udistm1
  19849                   vdistm1 = gcirc_qc(alat(iim2),alon(iim2),
  19850      $                               alat(iim1),alon(iim2))
  19851 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  19852                   if(sin((alat(iim1)-alat(iim2))*d2r).lt.0.0)
  19853 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  19854      $              vdistm1 = -vdistm1
  19855                   distm1  = gcirc_qc(alat(iim2),alon(iim2),
  19856      $                               alat(iim1),alon(iim1))
  19857                   if(idt_difm1.gt.0) then
  19858                     upspdm1 = udistm1 / float(idt_difm1)
  19859                     vpspdm1 = vdistm1 / float(idt_difm1)
  19860                     pspdm1  = distm1  / float(idt_difm1)
  19861                   else
  19862                     upspdm1 = udistm1 / float(idt_difm1+60)
  19863                     vpspdm1 = vdistm1 / float(idt_difm1+60)
  19864                     pspdm1  = distm1  / float(idt_difm1+60)
  19865                   endif
  19866                   if(upspdm1.eq.0.0.and.vpspdm1.eq.0.0) then
  19867                     pdirm1 = 0.0
  19868                   else
  19869                     pdirm1 = atan2(upspdm1,vpspdm1) / d2r + 180.0
  19870                   endif
  19871                   distm1 = distm1 / 1000.0
  19872                 else
  19873                   udistm1 = amiss
  19874                   vdistm1 = amiss
  19875                   distm1  = amiss
  19876                   upspdm1 = amiss
  19877                   vpspdm1 = amiss
  19878                   pspdm1  = amiss
  19879                   pdirm1  = amiss
  19880                 endif
  19881 c
  19882 c               Compute airspeed between iim2 and iim1 points
  19883 c               ---------------------------------------------
  19884 c                if(uwindm1.ne.amiss.and.upspdm1.ne.amiss) then
  19885 c                  uairspdm1 = upspdm1 - uwindm1
  19886 c                  vairspdm1 = vpspdm1 - vwindm1
  19887 c                  airspdm1  = sqrt(uairspdm1**2+vairspdm1**2)
  19888 c
  19889                 if(ob_dir(iim1).ne.amiss.and.ob_spd(iim1).ne.amiss) then
  19890                   airspdm1 = sqrt(pspdm1**2 + ob_spd(iim1)**2 
  19891      $                     - 2.0*pspdm1*ob_spd(iim1)
  19892      $                       *cos((pdirm1-ob_dir(iim1))*d2r))
  19893 c
  19894 c                 Make allowances for aircraft that round time to the 
  19895 c                 nearest minute--divide by 120 sec rather than 60 sec
  19896 c                 (modified to allow for mixture of reports with time

Page 439         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  19897 c                  rounded to the nearest minute and interpolated time
  19898 c                  to the nearest second in ascents--P.M.Pauley 6/11/01)
  19899 c                 ----------------------------------------------------
  19900                   if(airspdm1.gt.spd_thresh.and.
  19901      $               (abs(idt_difm1).eq.60.or.
  19902      $                (abs(idt_difm1).lt.60.and.
  19903      $                 ((idt(iim1)/60)*60.eq.idt(iim1).or.
  19904      $                  (idt(iim2)/60)*60.eq.idt(iim2))))) then
  19905 c
  19906                     airspdm1 = airspdm1 / 2.0
  19907 c
  19908                   endif
  19909 c
  19910 c                  if(uairspdm1.eq.0.0.and.vairspdm1.eq.0.0) then
  19911 c                    airdirm1 = 0.0
  19912 c                  else
  19913 c                    airdirm1 = atan2(uairspdm1,vairspdm1) / d2r + 180.0
  19914 c                  endif
  19915 c
  19916                 else
  19917 c                  uairspdm1 = amiss
  19918 c                  vairspdm1 = amiss
  19919                   airspdm1  = pspdm1
  19920 c                  airdirm1  = pdirm1
  19921                 endif
  19922 c
  19923 c               Compute vertical speed between iim2 and iim1 points
  19924 c               ---------------------------------------------------
  19925                 if(ht_ftm2.ne.amiss.and.ht_ftm1.ne.amiss) then
  19926                   ht_difm1  = ht_ft(iim1) - ht_ft(iim2)
  19927                 else
  19928                   ht_difm1 = amiss
  19929                 endif
  19930                 if(ht_difm1.eq.amiss.or.idt_difm1.eq.imiss) then
  19931                   vspdm1 = amiss
  19932                 elseif(idt_difm1.gt.0) then
  19933                   vspdm1 = ht_difm1 / float(idt_difm1)
  19934                 else
  19935                   vspdm1 = ht_difm1 / float(idt_difm1+60) 
  19936                 endif
  19937 c
  19938               else
  19939 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  19940                 alatm2 = amiss
  19941                 alonm2 = amiss
  19942 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  19943                 ht_ftm2 = amiss
  19944                 idtm2 = amiss
  19945 c                uwindm2 = amiss
  19946 c                vwindm2 = amiss
  19947 c
  19948                 idt_difm1 = imiss
  19949                 udistm1 = amiss
  19950                 vdistm1 = amiss
  19951                 distm1  = amiss
  19952                 upspdm1 = amiss
  19953                 vpspdm1 = amiss

Page 440         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  19954                 pspdm1  = amiss
  19955                 pdirm1  = amiss
  19956 c
  19957 c                uairspdm1 = amiss
  19958 c                vairspdm1 = amiss
  19959                 airspdm1  = amiss
  19960 c                airdirm1  = amiss
  19961 c
  19962                 ht_difm1 = amiss
  19963                 vspdm1 = amiss
  19964               endif
  19965 c
  19966 c             Set other variables to missing
  19967 c             ------------------------------
  19968 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  19969               alatm3 = amiss
  19970               alonm3 = amiss
  19971 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  19972               ht_ftm3 = amiss
  19973               idtm3 = amiss
  19974 c              uwindm3 = amiss
  19975 c              vwindm3 = amiss
  19976 c
  19977               idt_difm2 = imiss
  19978               udistm2 = amiss
  19979               vdistm2 = amiss
  19980               distm2  = amiss
  19981               upspdm2 = amiss
  19982               vpspdm2 = amiss
  19983               pspdm2  = amiss
  19984               pdirm2  = amiss
  19985 c
  19986 c              uairspdm2 = amiss
  19987 c              vairspdm2 = amiss
  19988               airspdm2  = amiss
  19989 c              airdirm2  = amiss
  19990 c
  19991               ht_difm2 = amiss
  19992               vspdm2 = amiss
  19993 c
  19994 c             Set up temporary variables for iip1 point
  19995 c             -----------------------------------------
  19996               if(iip1.ne.0) then
  19997                 alatp1 = alat(iip1)
  19998                 alonp1 = alon(iip1)
  19999 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  20000                 if(alon0.lt.90.0.and.alonp1.gt.270.0) 
  20001      $            alonp1 = 360.0 - alonp1
  20002                 if(alon0.gt.270.0.and.alonp1.lt.90.0) 
  20003      $            alonp1 = 360.0 + alonp1
  20004 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  20005                 ht_ftp1 = ht_ft(iip1)
  20006                 idtp1 = idt(iip1)
  20007 c
  20008 c                if(c_qc(iip1)(7:8).ne.'..') then
  20009 c                  uwindp1 = amiss
  20010 c                  vwindp1 = amiss

Page 441         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  20011 c                else
  20012 c                  uwindp1 = -sin(ob_dir(iip1)*d2r)*ob_spd(iip1)
  20013 c                  vwindp1 = -cos(ob_dir(iip1)*d2r)*ob_spd(iip1)
  20014 c                endif
  20015 c
  20016 c               Compute groundspeed vector components between ii and iip1 points
  20017 c               ----------------------------------------------------------------
  20018                 if(idt0.ne.imiss.and.idtp1.ne.imiss) then
  20019                   idt_difp1 = abs(idt0 - idtp1)
  20020                 else
  20021                   idt_difp1 = imiss
  20022                 endif
  20023 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  20024                 if(alat0 .ne.amiss.and.alon0 .ne.amiss.and.
  20025      $             alatp1.ne.amiss.and.alonp1.ne.amiss.and.
  20026 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  20027      $             idt_difp1.ne.imiss) then
  20028                   udistp1 = gcirc_qc(alat(ii  ),alon(ii  ),
  20029      $                               alat(ii  ),alon(iip1))
  20030 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  20031                   if(sin((alon(iip1)-alon(ii))*d2r).lt.0.0)
  20032 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  20033      $              udistp1 = -udistp1
  20034                   vdistp1 = gcirc_qc(alat(ii  ),alon(ii  ),
  20035      $                               alat(iip1),alon(ii  ))
  20036 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  20037                   if(sin((alat(iip1)-alat(ii))*d2r).lt.0.0)
  20038 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  20039      $              vdistp1 = -vdistp1
  20040                   distp1  = gcirc_qc(alat(ii  ),alon(ii  ),
  20041      $                               alat(iip1),alon(iip1))
  20042                   if(idt_difp1.gt.0) then
  20043                     upspdp1 = udistp1 / float(idt_difp1)
  20044                     vpspdp1 = vdistp1 / float(idt_difp1)
  20045                     pspdp1  = distp1  / float(idt_difp1)
  20046                   else
  20047                     upspdp1 = udistp1 / float(idt_difp1+60)
  20048                     vpspdp1 = vdistp1 / float(idt_difp1+60)
  20049                     pspdp1  = distp1  / float(idt_difp1+60)
  20050                   endif
  20051                   if(upspdp1.eq.0.0.and.vpspdp1.eq.0.0) then
  20052                     pdirp1 = 0.0
  20053                   else
  20054                     pdirp1 = atan2(upspdp1,vpspdp1) / d2r + 180.0
  20055                  endif
  20056                   distp1 = distp1 / 1000.0
  20057                 else
  20058                   udistp1 = amiss
  20059                   vdistp1 = amiss
  20060                   distp1  = amiss
  20061                   upspdp1 = amiss
  20062                   vpspdp1 = amiss
  20063                   pspdp1  = amiss
  20064                   pdirp1  = amiss
  20065                 endif
  20066 c
  20067 c               Compute airspeed between ii and iip1 points

Page 442         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  20068 c               -------------------------------------------
  20069 c                if(uwindp1.ne.amiss.and.upspdp1.ne.amiss) then
  20070 c                  uairspdp1 = upspdp1 - uwindp1
  20071 c                  vairspdp1 = vpspdp1 - vwindp1
  20072 c                  airspdp1  = sqrt(uairspdp1**2+vairspdp1**2)
  20073 c
  20074                 if(ob_dir(iip1).ne.amiss.and.ob_spd(iip1).ne.amiss) then
  20075                   airspdp1 = sqrt(pspdp1**2 + ob_spd(iip1)**2 
  20076      $                     - 2.0*pspdp1*ob_spd(iip1)
  20077      $                       *cos((pdirp1-ob_dir(iip1))*d2r))
  20078 c
  20079 c                 Make allowances for aircraft that round time to the 
  20080 c                 nearest minute--divide by 120 sec rather than 60 sec
  20081 c                 (modified to allow for mixture of reports with time
  20082 c                  rounded to the nearest minute and interpolated time
  20083 c                  to the nearest second in ascents--P.M.Pauley 6/11/01)
  20084 c                 ----------------------------------------------------
  20085                   if(airspdp1.gt.spd_thresh.and.
  20086      $               (abs(idt_difp1).eq.60.or.
  20087      $                (abs(idt_difp1).lt.60.and.
  20088      $                 ((idt(ii  )/60)*60.eq.idt(ii  ).or.
  20089      $                  (idt(iip1)/60)*60.eq.idt(iip1))))) then
  20090 c
  20091                     airspdp1 = airspdp1 / 2.0
  20092 c
  20093                   endif
  20094 c
  20095 c                  if(uairspdp1.eq.0.0.and.vairspdp1.eq.0.0) then
  20096 c                    airdirp1 = 0.0
  20097 c                  else
  20098 c                    airdirp1 = atan2(uairspdp1,vairspdp1) / d2r + 180.0
  20099 c                  endif
  20100 c
  20101                 else
  20102 c                  uairspdp1 = amiss
  20103 c                  vairspdp1 = amiss
  20104                   airspdp1  = pspdp1
  20105 c                  airdirp1  = pdirp1
  20106                 endif
  20107 c
  20108 c               Compute vertical speed between ii and iip1 points
  20109 c               -------------------------------------------------
  20110                 if(ht_ft0.ne.amiss.and.ht_ftp1.ne.amiss) then
  20111                   ht_difp1  = ht_ft(iip1) - ht_ft(ii)
  20112                 else
  20113                   ht_difp1 = amiss
  20114                 endif
  20115                 if(ht_difp1.eq.amiss.or.idt_difp1.eq.imiss) then
  20116                   vspdp1 = amiss
  20117                 elseif(idt_difp1.gt.0) then
  20118                   vspdp1 = ht_difp1 / float(idt_difp1)
  20119                 else
  20120                   vspdp1 = ht_difp1 / float(idt_difp1+60) 
  20121                 endif
  20122 c
  20123               else
  20124 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision

Page 443         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  20125                 alatp1 = amiss
  20126                 alonp1 = amiss
  20127 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  20128                 ht_ftp1 = amiss
  20129                 idtp1 = amiss
  20130 c                uwindp1 = amiss
  20131 c                vwindp1 = amiss
  20132 c
  20133                 idt_difp1 = imiss
  20134                 udistp1 = amiss
  20135                 vdistp1 = amiss
  20136                 distp1  = amiss
  20137                 upspdp1 = amiss
  20138                 vpspdp1 = amiss
  20139                 pspdp1  = amiss
  20140                 pdirp1  = amiss
  20141 c
  20142 c                uairspdp1 = amiss
  20143 c                vairspdp1 = amiss
  20144                 airspdp1  = amiss
  20145 c                airdirp1  = amiss
  20146 c
  20147                 ht_difp1 = amiss
  20148                 vspdp1 = amiss
  20149               endif
  20150 c
  20151 c             Set up temporary variables for iip2 point
  20152 c             -----------------------------------------
  20153               if(iip2.ne.0) then
  20154                 alatp2 = alat(iip2)
  20155                 alonp2 = alon(iip2)
  20156 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  20157                 if(alon0.lt.90.0.and.alonp2.gt.270.0) 
  20158      $            alonp2 = 360.0 - alonp2
  20159                 if(alon0.gt.270.0.and.alonp2.lt.90.0) 
  20160      $            alonp2 = 360.0 + alonp2
  20161 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  20162                 ht_ftp2 = ht_ft(iip2)
  20163                 idtp2 = idt(iip2)
  20164 c
  20165 c                if(c_qc(iip2)(7:8).ne.'..') then
  20166 c                  uwindp2 = amiss
  20167 c                  vwindp2 = amiss
  20168 c                else
  20169 c                  uwindp2 = -sin(ob_dir(iip2)*d2r)*ob_spd(iip2)
  20170 c                  vwindp2 = -cos(ob_dir(iip2)*d2r)*ob_spd(iip2)
  20171 c                endif
  20172 c
  20173               else
  20174 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  20175                 alatp2 = amiss
  20176                 alonp2 = amiss
  20177 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  20178                 ht_ftp2 = amiss
  20179                 idtp2 = amiss
  20180 c                uwindp2 = amiss
  20181 c                vwindp2 = amiss

Page 444         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  20182               endif
  20183 c
  20184               if(iip2.ne.0.and.iip1.ne.0) then
  20185 c
  20186 c               Compute groundspeed vector components between iip1 and iip2 points
  20187 c               ------------------------------------------------------------------
  20188                 if(idtp1.ne.imiss.and.idtp2.ne.imiss) then
  20189                   idt_difp2 = abs(idtp1 - idtp2)
  20190                 else
  20191                   idt_difp2 = imiss
  20192                 endif
  20193 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  20194                 if(alatp1.ne.amiss.and.alonp1.ne.amiss.and.
  20195      $             alatp2.ne.amiss.and.alonp2.ne.amiss.and.
  20196 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  20197      $             idt_difp2.ne.imiss) then
  20198                   udistp2 = gcirc_qc(alat(iip1),alon(iip1),
  20199      $                               alat(iip1),alon(iip2))
  20200 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  20201                   if(sin((alon(iip2)-alon(iip1))*d2r).lt.0.0)
  20202 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  20203      $              udistp2 = -udistp2
  20204                   vdistp2 = gcirc_qc(alat(iip1),alon(iip1),
  20205      $                               alat(iip2),alon(iip1))
  20206 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  20207                   if(sin((alat(iip2)-alat(iip1))*d2r).lt.0.0)
  20208 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  20209      $              vdistp2 = -vdistp2
  20210                   distp2  = gcirc_qc(alat(iip1),alon(iip1),
  20211      $                               alat(iip2),alon(iip2))
  20212                   if(idt_difp2.gt.0) then
  20213                     upspdp2 = udistp2 / float(idt_difp2)
  20214                     vpspdp2 = vdistp2 / float(idt_difp2)
  20215                     pspdp2  = distp2  / float(idt_difp2)
  20216                   else
  20217                     upspdp2 = udistp2 / float(idt_difp2+60)
  20218                     vpspdp2 = vdistp2 / float(idt_difp2+60)
  20219                     pspdp2  = distp2  / float(idt_difp2+60)
  20220                   endif
  20221                   if(upspdp2.eq.0.0.and.vpspdp2.eq.0.0) then
  20222                     pdirp2 = 0.0
  20223                   else
  20224                     pdirp2 = atan2(upspdp2,vpspdp2) / d2r + 180.0
  20225                   endif
  20226                   distp2 = distp2 / 1000.0
  20227                 else
  20228                   udistp2 = amiss
  20229                   vdistp2 = amiss
  20230                   distp2  = amiss
  20231                   upspdp2 = amiss
  20232                   vpspdp2 = amiss
  20233                   pspdp2  = amiss
  20234                   pdirp2  = amiss
  20235                 endif
  20236 c
  20237 c               Compute airspeed between iip1 and iip2 points
  20238 c               ---------------------------------------------

Page 445         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  20239 c                if(uwindp2.ne.amiss.and.upspdp2.ne.amiss) then
  20240 c                  uairspdp2 = upspdp2 - uwindp2
  20241 c                  vairspdp2 = vpspdp2 - vwindp2
  20242 c                  airspdp2  = sqrt(uairspdp2**2+vairspdp2**2)
  20243 c
  20244                 if(ob_dir(iip2).ne.amiss.and.ob_spd(iip2).ne.amiss) then
  20245                   airspdp2 = sqrt(pspdp2**2 + ob_spd(iip2)**2 
  20246      $                     - 2.0*pspdp2*ob_spd(iip2)
  20247      $                       *cos((pdirp2-ob_dir(iip2))*d2r))
  20248 c
  20249 c                 Make allowances for aircraft that round time to the 
  20250 c                 nearest minute--divide by 120 sec rather than 60 sec
  20251 c                 (modified to allow for mixture of reports with time
  20252 c                  rounded to the nearest minute and interpolated time
  20253 c                  to the nearest second in ascents--P.M.Pauley 6/11/01)
  20254 c                 ----------------------------------------------------
  20255                   if(airspdp2.gt.spd_thresh.and.
  20256      $               (abs(idt_difp2).eq.60.or.
  20257      $                (abs(idt_difp2).lt.60.and.
  20258      $                 ((idt(iip1)/60)*60.eq.idt(iip1).or.
  20259      $                  (idt(iip2)/60)*60.eq.idt(iip2))))) then
  20260 c
  20261                     airspdp2 = airspdp2 / 2.0
  20262 c
  20263                   endif
  20264 c
  20265 c                  if(uairspdp2.eq.0.0.and.vairspdp2.eq.0.0) then
  20266 c                    airdirp2 = 0.0
  20267 c                  else
  20268 c                    airdirp2 = atan2(uairspdp2,vairspdp2) / d2r + 180.0
  20269 c                  endif
  20270 c
  20271                 else
  20272 c                  uairspdp2 = amiss
  20273 c                  vairspdp2 = amiss
  20274                   airspdp2  = pspdp2
  20275 c                  airdirp2  = pdirp2
  20276                 endif
  20277 c
  20278 c               Compute vertical speed between iip1 and iip2 points
  20279 c               ---------------------------------------------------
  20280                 if(ht_ftp1.ne.amiss.and.ht_ftp2.ne.amiss) then
  20281                   ht_difp2  = ht_ft(iip2) - ht_ft(iip1)
  20282                 else
  20283                   ht_difp2 = amiss
  20284                 endif
  20285                 if(ht_difp2.eq.amiss.or.idt_difp2.eq.imiss) then
  20286                   vspdp2 = amiss
  20287                 elseif(idt_difp2.gt.0) then
  20288                   vspdp2 = ht_difp2 / float(idt_difp2)
  20289                 else
  20290                   vspdp2 = ht_difp2 / float(idt_difp2+60) 
  20291                 endif
  20292 c
  20293               else
  20294                 idt_difp2 = imiss
  20295                 udistp2 = amiss

Page 446         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  20296                 vdistp2 = amiss
  20297                 distp2  = amiss
  20298                 upspdp2 = amiss
  20299                 vpspdp2 = amiss
  20300                 pspdp2  = amiss
  20301                 pdirp2  = amiss
  20302 c
  20303 c                uairspdp2 = amiss
  20304 c                vairspdp2 = amiss
  20305                 airspdp2  = amiss
  20306 c                airdirp2  = amiss
  20307 c
  20308                 ht_difp2 = amiss
  20309                 vspdp2 = amiss
  20310               endif
  20311 c
  20312 c             Set other variables to zero
  20313 c             ---------------------------
  20314 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  20315               alatp3 = amiss
  20316               alonp3 = amiss
  20317 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  20318               ht_ftp3 = amiss
  20319               idtp3 = amiss
  20320 c              uwindp3 = amiss
  20321 c              vwindp3 = amiss
  20322 c
  20323               idt_difp3 = imiss
  20324               udistp3 = amiss
  20325               vdistp3 = amiss
  20326               distp3  = amiss
  20327               upspdp3 = amiss
  20328               vpspdp3 = amiss
  20329               pspdp3  = amiss
  20330               pdirp3  = amiss
  20331 c
  20332 c              uairspdp3 = amiss
  20333 c              vairspdp3 = amiss
  20334               airspdp3  = amiss
  20335 c              airdirp3  = amiss
  20336 c
  20337               ht_difp3 = amiss
  20338               vspdp3 = amiss
  20339 c           
  20340 c             Compute speeds without ii report
  20341 c             --------------------------------
  20342               if(iim1.ne.0.and.iip1.ne.0.and.
  20343      $           idtp1.ne.amiss.and.idtm1.ne.amiss) then
  20344 c
  20345 c               Compute groundspeed vector components between iim1 and iip1 points
  20346 c               ------------------------------------------------------------------
  20347                 if(idtm1.ne.imiss.and.idtp1.ne.imiss) then
  20348                   idt_dif_wo0 = abs(idtp1 - idtm1)
  20349                 else
  20350                   idt_dif_wo0 = imiss
  20351                 endif
  20352 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision

Page 447         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  20353                 if(alatm1.ne.amiss.and.alonm1.ne.amiss.and.
  20354      $             alatp1.ne.amiss.and.alonp1.ne.amiss.and.
  20355 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  20356      $             idt_dif_wo0.ne.imiss) then
  20357                   udist_wo0 = gcirc_qc(alat(iim1),alon(iim1),
  20358      $                                 alat(iim1),alon(iip1))
  20359 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  20360                   if(sin((alon(iip1)-alon(iim1))*d2r).lt.0.0)
  20361 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  20362      $              udist_wo0 = -udist_wo0
  20363                   vdist_wo0 = gcirc_qc(alat(iim1),alon(iim1),
  20364      $                                 alat(iip1),alon(iim1))
  20365 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  20366                   if(sin((alat(iip1)-alat(iim1))*d2r).lt.0.0)
  20367 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  20368      $              vdist_wo0 = -vdist_wo0
  20369                   dist_wo0  = gcirc_qc(alat(iim1),alon(iim1),
  20370      $                                 alat(iip1),alon(iip1))
  20371                   if(idt_dif_wo0.gt.0) then
  20372                     upspd_wo0 = udist_wo0 / float(idt_dif_wo0)
  20373                     vpspd_wo0 = vdist_wo0 / float(idt_dif_wo0)
  20374                     pspd_wo0  = dist_wo0  / float(idt_dif_wo0)
  20375                   else
  20376                     upspd_wo0 = udist_wo0 / float(idt_dif_wo0+60)
  20377                     vpspd_wo0 = vdist_wo0 / float(idt_dif_wo0+60)
  20378                     pspd_wo0  = dist_wo0  / float(idt_dif_wo0+60)
  20379                   endif
  20380                   if(upspd_wo0.eq.0.0.and.vpspd_wo0.eq.0.0) then
  20381                     pdir_wo0 = 0.0
  20382                   else
  20383                     pdir_wo0 = atan2(upspd_wo0,vpspd_wo0) 
  20384      $                       / d2r + 180.0
  20385                   endif
  20386                   dist_wo0 = dist_wo0 / 1000.0
  20387                 else
  20388                   udist_wo0 = amiss
  20389                   vdist_wo0 = amiss
  20390                   dist_wo0  = amiss
  20391                   upspd_wo0 = amiss
  20392                   vpspd_wo0 = amiss
  20393                   pspd_wo0  = amiss
  20394                   pdir_wo0  = amiss
  20395                 endif
  20396 c
  20397 c               Compute airspeed between iim1 and iip1 points
  20398 c               ---------------------------------------------
  20399 c                if(uwindp1.ne.amiss.and.upspd_wo0.ne.amiss) then
  20400 c                  uairspd_wo0 = upspd_wo0 - uwindp1
  20401 c                  vairspd_wo0 = vpspd_wo0 - vwindp1
  20402 c                  airspd_wo0  = sqrt(uairspd_wo0**2+vairspd_wo0**2)
  20403 c
  20404                 if(ob_dir(iip1).ne.amiss.and.ob_spd(iip1).ne.amiss) then
  20405                   airspd_wo0 = sqrt(pspd_wo0**2 + ob_spd(iip1)**2 
  20406      $                     - 2.0*pspd_wo0*ob_spd(iip1)
  20407      $                       *cos((pdir_wo0-ob_dir(iip1))*d2r))
  20408 c
  20409 c                 Make allowances for aircraft that round time to the 

Page 448         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  20410 c                 nearest minute--divide by 120 sec rather than 60 sec
  20411 c                 (modified to allow for mixture of reports with time
  20412 c                  rounded to the nearest minute and interpolated time
  20413 c                  to the nearest second in ascents--P.M.Pauley 6/11/01)
  20414 c                 ----------------------------------------------------
  20415                   if(airspd_wo0.gt.spd_thresh.and.
  20416      $               (abs(idt_dif_wo0).eq.60.or.
  20417      $                (abs(idt_dif_wo0).lt.60.and.
  20418      $                 ((idt(iim1)/60)*60.eq.idt(iim1).or.
  20419      $                  (idt(iip1)/60)*60.eq.idt(iip1))))) then
  20420 c
  20421                     airspd_wo0 = airspd_wo0 / 2.0
  20422 c
  20423                   endif
  20424 c
  20425 c                  if(uairspd_wo0.eq.0.0.and.vairspd_wo0.eq.0.0) then
  20426 c                    airdir_wo0 = 0.0
  20427 c                  else
  20428 c                    airdir_wo0 = atan2(uairspd_wo0,vairspd_wo0) 
  20429 c     $                         / d2r + 180.0
  20430 c                  endif
  20431 c
  20432                 else
  20433 c                  uairspd_wo0 = amiss
  20434 c                  vairspd_wo0 = amiss
  20435                   airspd_wo0  = pspd_wo0
  20436 c                  airdir_wo0  = pdir_wo0
  20437                 endif
  20438 c
  20439               else
  20440                 udist_wo0 = amiss
  20441                 vdist_wo0 = amiss
  20442                 dist_wo0  = amiss
  20443                 upspd_wo0 = amiss
  20444                 vpspd_wo0 = amiss
  20445                 pspd_wo0  = amiss
  20446                 pdir_wo0  = amiss
  20447 c
  20448 c                uairspd_wo0 = amiss
  20449 c                vairspd_wo0 = amiss
  20450                 airspd_wo0  = amiss
  20451 c                airdir_wo0  = amiss
  20452               endif
  20453 c
  20454 c             Compute vertical speed between iim1 and iip1 points
  20455 c             ---------------------------------------------------
  20456               if(ht_ftp1.ne.amiss.and.ht_ftm1.ne.amiss) then
  20457                 ht_dif_wo0  = ht_ftp1 - ht_ftm1
  20458               else
  20459                 ht_dif_wo0 = amiss
  20460               endif
  20461               if(ht_dif_wo0.eq.amiss.or.idt_dif_wo0.eq.imiss) then
  20462                 vspd_wo0 = amiss
  20463               elseif(idt_dif_wo0.gt.0) then
  20464                 vspd_wo0 = ht_dif_wo0 / float(idt_dif_wo0)
  20465               else
  20466                 vspd_wo0 = ht_dif_wo0 / float(idt_dif_wo0+60) 

Page 449         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  20467               endif
  20468 c
  20469 c             Compute speeds without iip1 report
  20470 c             ----------------------------------
  20471               if(iip2.ne.0.and.
  20472      $           idt0.ne.amiss.and.idtp2.ne.amiss) then
  20473 c
  20474 c               Compute groundspeed vector components between ii and iip2 points
  20475 c               ----------------------------------------------------------------
  20476                 if(idt0.ne.imiss.and.idtp2.ne.imiss) then
  20477                   idt_dif_wop1 = abs(idtp2 - idt0)
  20478                 else
  20479                   idt_dif_wop1 = imiss
  20480                 endif
  20481 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  20482                 if(alat0 .ne.amiss.and.alon0 .ne.amiss.and.
  20483      $             alatp2.ne.amiss.and.alonp2.ne.amiss.and.
  20484 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  20485      $             idt_dif_wop1.ne.imiss) then
  20486                   udist_wop1 = gcirc_qc(alat(ii  ),alon(ii  ),
  20487      $                                  alat(ii  ),alon(iip2))
  20488 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  20489                   if(sin((alon(iip2)-alon(ii))*d2r).lt.0.0)
  20490 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  20491      $              udist_wop1 = -udist_wop1
  20492                   vdist_wop1 = gcirc_qc(alat(ii  ),alon(ii  ),
  20493      $                                  alat(iip2),alon(ii  ))
  20494 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  20495                   if(sin((alat(iip2)-alat(ii))*d2r).lt.0.0)
  20496 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  20497      $              vdist_wop1 = -vdist_wop1
  20498                   dist_wop1  = gcirc_qc(alat(ii  ),alon(ii  ),
  20499      $                                  alat(iip2),alon(iip2))
  20500                   if(idt_dif_wop1.gt.0) then
  20501                     upspd_wop1 = udist_wop1 / float(idt_dif_wop1)
  20502                     vpspd_wop1 = vdist_wop1 / float(idt_dif_wop1)
  20503                     pspd_wop1  = dist_wop1  / float(idt_dif_wop1)
  20504                   else
  20505                     upspd_wop1 = udist_wop1 / float(idt_dif_wop1+60)
  20506                     vpspd_wop1 = vdist_wop1 / float(idt_dif_wop1+60)
  20507                     pspd_wop1  = dist_wop1  / float(idt_dif_wop1+60)
  20508                   endif
  20509                   if(upspd_wop1.eq.0.0.and.vpspd_wop1.eq.0.0) then
  20510                     pdir_wop1 = 0.0
  20511                   else
  20512                     pdir_wop1 = atan2(upspd_wop1,vpspd_wop1) 
  20513      $                        / d2r + 180.0
  20514                   endif
  20515                   dist_wop1 = dist_wop1 / 1000.0
  20516                 else
  20517                   udist_wop1 = amiss
  20518                   vdist_wop1 = amiss
  20519                   dist_wop1  = amiss
  20520                   upspd_wop1 = amiss
  20521                   vpspd_wop1 = amiss
  20522                   pspd_wop1  = amiss
  20523                   pdir_wop1  = amiss

Page 450         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  20524                 endif
  20525 c
  20526 c               Compute airspeed between ii and iip2 points
  20527 c               -------------------------------------------
  20528 c                if(uwindp2.ne.amiss.and.upspd_wop1.ne.amiss) then
  20529 c                  uairspd_wop1 = upspd_wop1 - uwindp2
  20530 c                  vairspd_wop1 = vpspd_wop1 - vwindp2
  20531 c                  airspd_wop1  = sqrt(uairspd_wop1**2+vairspd_wop1**2)
  20532 c
  20533                 if(ob_dir(iip2).ne.amiss.and.ob_spd(iip2).ne.amiss) then
  20534                   airspd_wop1 = sqrt(pspd_wop1**2 + ob_spd(iip2)**2 
  20535      $                     - 2.0*pspd_wop1*ob_spd(iip2)
  20536      $                       *cos((pdir_wop1-ob_dir(iip2))*d2r))
  20537 c
  20538 c                 Make allowances for aircraft that round time to the 
  20539 c                 nearest minute--divide by 120 sec rather than 60 sec
  20540 c                 (modified to allow for mixture of reports with time
  20541 c                  rounded to the nearest minute and interpolated time
  20542 c                  to the nearest second in ascents--P.M.Pauley 6/11/01)
  20543 c                 ----------------------------------------------------
  20544                   if(airspd_wop1.gt.spd_thresh.and.
  20545      $               (abs(idt_dif_wop1).eq.60.or.
  20546      $                (abs(idt_dif_wop1).lt.60.and.
  20547      $                 ((idt(ii  )/60)*60.eq.idt(ii  ).or.
  20548      $                  (idt(iip2)/60)*60.eq.idt(iip2))))) then
  20549 c
  20550                     airspd_wop1 = airspd_wop1 / 2.0
  20551 c
  20552                   endif
  20553 c
  20554 c                  if(uairspd_wop1.eq.0.0.and.vairspd_wop1.eq.0.0) then
  20555 c                    airdir_wop1 = 0.0
  20556 c                  else
  20557 c                    airdir_wop1 = atan2(uairspd_wop1,vairspd_wop1) 
  20558 c     $                          / d2r + 180.0
  20559 c                  endif
  20560 c
  20561                 else
  20562 c                  uairspd_wop1 = amiss
  20563 c                  vairspd_wop1 = amiss
  20564                   airspd_wop1  = pspd_wop1
  20565 c                  airdir_wop1  = pdir_wop1
  20566                 endif
  20567 c
  20568               else
  20569                 udist_wop1 = amiss
  20570                 vdist_wop1 = amiss
  20571                 dist_wop1  = amiss
  20572                 upspd_wop1 = amiss
  20573                 vpspd_wop1 = amiss
  20574                 pspd_wop1  = amiss
  20575                 pdir_wop1  = amiss
  20576 c
  20577 c                uairspd_wop1 = amiss
  20578 c                vairspd_wop1 = amiss
  20579                 airspd_wop1  = amiss
  20580 c                airdir_wop1  = amiss

Page 451         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  20581               endif
  20582 c
  20583 c             Compute vertical speed between ii and iip2 points
  20584 c             -------------------------------------------------
  20585               if(ht_ftp2.ne.amiss.and.ht_ft0.ne.amiss) then
  20586                 ht_dif_wop1  = ht_ftp2 - ht_ft0
  20587               else
  20588                 ht_dif_wop1 = amiss
  20589               endif
  20590               if(ht_dif_wop1.eq.amiss.or.idt_dif_wop1.eq.imiss) then
  20591                 vspd_wop1 = amiss
  20592               elseif(idt_dif_wop1.gt.0) then
  20593                 vspd_wop1 = ht_dif_wop1 / float(idt_dif_wop1)
  20594               else
  20595                 vspd_wop1 = ht_dif_wop1 / float(idt_dif_wop1+60) 
  20596               endif
  20597 c
  20598 c             Set other variables to zero
  20599 c             ---------------------------
  20600               udist_wop2 = amiss
  20601               vdist_wop2 = amiss
  20602               dist_wop2  = amiss
  20603               upspd_wop2 = amiss
  20604               vpspd_wop2 = amiss
  20605               pspd_wop2  = amiss
  20606               pdir_wop2  = amiss
  20607 c
  20608 c              uairspd_wop2 = amiss
  20609 c              vairspd_wop2 = amiss
  20610               airspd_wop2  = amiss
  20611 c              airdir_wop2  = amiss
  20612 c
  20613               ht_dif_wop2 = amiss
  20614 c
  20615               vspd_wop2 = amiss
  20616 c
  20617 c             Compute speeds between previous two bad points
  20618 c             ----------------------------------------------
  20619               if(last_bad.ne.0.and.last_bad_m1.ne.0) then
  20620 c
  20621 c               Compute groundspeed vector components between last_bad and last_bad_m1 points
  20622 c               -----------------------------------------------------------------------------
  20623                 if(idt(last_bad_m1).ne.imiss.and.
  20624      $             idt(last_bad).ne.imiss) then
  20625                   idt_dif_bad0 = abs(idt(last_bad) - idt(last_bad_m1))
  20626                 else
  20627                   idt_dif_bad0 = imiss
  20628                 endif
  20629 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  20630                 if(alat(last_bad).ne.amiss.and.
  20631      $             alon(last_bad).ne.amiss.and.
  20632      $             alat(last_bad_m1).ne.amiss.and.
  20633      $             alon(last_bad_m1).ne.amiss.and.
  20634 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  20635      $             idt_dif_bad0.ne.imiss) then
  20636                   udist_bad0 = gcirc_qc(alat(last_bad_m1),
  20637      $                                  alon(last_bad_m1),

Page 452         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  20638      $                                  alat(last_bad_m1),
  20639      $                                  alon(last_bad))
  20640 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  20641                   if(sin((alon(last_bad)-alon(last_bad_m1))*d2r).lt.0.0)
  20642 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  20643      $              udist_bad0 = -udist_bad0
  20644                   vdist_bad0 = gcirc_qc(alat(last_bad_m1),
  20645      $                                  alon(last_bad_m1),
  20646      $                                  alat(last_bad),
  20647      $                                  alon(last_bad_m1))
  20648 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  20649                   if(sin((alat(last_bad)-alat(last_bad_m1))*d2r).lt.0.0) 
  20650 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  20651      $              vdist_bad0 = -vdist_bad0
  20652                   dist_bad0  = gcirc_qc(alat(last_bad_m1),
  20653      $                                  alon(last_bad_m1),
  20654      $                                  alat(last_bad   ),
  20655      $                                  alon(last_bad   ))
  20656                   if(idt_dif_bad0.gt.0) then
  20657                     upspd_bad0 = udist_bad0 / float(idt_dif_bad0)
  20658                     vpspd_bad0 = vdist_bad0 / float(idt_dif_bad0)
  20659                     pspd_bad0  = dist_bad0  / float(idt_dif_bad0)
  20660                   else
  20661                     upspd_bad0 = udist_bad0 / float(idt_dif_bad0+60)
  20662                     vpspd_bad0 = vdist_bad0 / float(idt_dif_bad0+60)
  20663                     pspd_bad0  = dist_bad0  / float(idt_dif_bad0+60)
  20664                   endif
  20665                   if(upspd_bad0.eq.0.0.and.vpspd_bad0.eq.0.0) then
  20666                     pdir_bad0 = 0.0
  20667                   else
  20668                     pdir_bad0 = atan2(upspd_bad0,vpspd_bad0) 
  20669      $                        / d2r + 180.0
  20670                   endif
  20671                   dist_bad0 = dist_bad0 / 1000.0
  20672                 else
  20673                   udist_bad0 = amiss
  20674                   vdist_bad0 = amiss
  20675                   dist_bad0  = amiss
  20676                   upspd_bad0 = amiss
  20677                   vpspd_bad0 = amiss
  20678                   pspd_bad0  = amiss
  20679                   pdir_bad0  = amiss
  20680                 endif
  20681 c
  20682 c               Compute airspeed between last_bad and last_bad_m1 points
  20683 c               --------------------------------------------------------
  20684 c                if(uwind_last.ne.amiss.and.upspd_bad0.ne.amiss) then
  20685 c                  uairspd_bad0 = upspd_bad0 - uwind_last
  20686 c                  vairspd_bad0 = vpspd_bad0 - vwind_last
  20687 c                  airspd_bad0  = sqrt(uairspd_bad0**2+vairspd_bad0**2)
  20688 c
  20689                 if(wdir_last.ne.amiss.and.wspd_last.ne.amiss) then
  20690                   airspd_bad0 = sqrt(pspd_bad0**2 + wspd_last**2 
  20691      $                     - 2.0*pspd_bad0*wspd_last
  20692      $                       *cos((pdir_bad0-wdir_last)*d2r))
  20693 c
  20694 c                 Make allowances for aircraft that round time to the 

Page 453         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  20695 c                 nearest minute--divide by 120 sec rather than 60 sec
  20696 c                 (modified to allow for mixture of reports with time
  20697 c                  rounded to the nearest minute and interpolated time
  20698 c                  to the nearest second in ascents--P.M.Pauley 6/11/01)
  20699 c                 ----------------------------------------------------
  20700                   if(airspd_bad0.gt.spd_thresh.and.
  20701      $               (abs(idt_dif_bad0).eq.60.or.
  20702      $                (abs(idt_dif_bad0).lt.60.and.
  20703      $                 ((idt(last_bad_m1)/60)*60.eq.idt(last_bad_m1).or.
  20704      $                  (idt(last_bad)/60)*60.eq.idt(last_bad))))) then
  20705 c
  20706                     airspd_bad0 = airspd_bad0 / 2.0
  20707 c
  20708                   endif
  20709 c
  20710 c                  if(uairspd_bad0.eq.0.0.and.vairspd_bad0.eq.0.0) then
  20711 c                    airdir_bad0 = 0.0
  20712 c                  else
  20713 c                    airdir_bad0 = atan2(uairspd_bad0,vairspd_bad0) 
  20714 c     $                          / d2r + 180.0
  20715 c                  endif
  20716 c
  20717                 else
  20718 c                  uairspd_bad0 = amiss
  20719 c                  vairspd_bad0 = amiss
  20720                   airspd_bad0  = pspd_bad0
  20721 c                  airdir_bad0  = pspd_bad0
  20722                 endif
  20723 c
  20724 c               Compute vertical speed between last_bad and last_bad_m1 points
  20725 c               --------------------------------------------------------------
  20726                 if(ht_ft(last_bad).ne.amiss.and.
  20727      $             ht_ft(last_bad_m1).ne.amiss) then
  20728                   ht_dif_bad0  = ht_ft(last_bad) - ht_ft(last_bad_m1)
  20729                 else
  20730                   ht_dif_bad0 = amiss
  20731                 endif
  20732                 if(ht_dif_bad0.eq.amiss.or.idt_dif_bad0.eq.imiss) then
  20733                   vspd_bad0 = amiss
  20734                 elseif(idt_dif_bad0.gt.0) then
  20735                   vspd_bad0 = ht_dif_bad0 / float(idt_dif_bad0)
  20736                 else
  20737                   vspd_bad0 = ht_dif_bad0 / float(idt_dif_bad0+60) 
  20738                 endif
  20739 c
  20740               else
  20741                 udist_bad0 = amiss
  20742                 vdist_bad0 = amiss
  20743                 dist_bad0  = amiss
  20744                 upspd_bad0 = amiss
  20745                 vpspd_bad0 = amiss
  20746                 pspd_bad0  = amiss
  20747                 pdir_bad0  = amiss
  20748 c
  20749 c                uairspd_bad0 = amiss
  20750 c                vairspd_bad0 = amiss
  20751                 airspd_bad0  = amiss

Page 454         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  20752 c                airdir_bad0  = amiss
  20753 c
  20754                 ht_dif_bad0 = amiss           
  20755                 vspd_bad0 = amiss
  20756               endif
  20757 c
  20758 c             Compute speeds between last bad point and iip1 point
  20759 c             ----------------------------------------------------
  20760               if(last_bad.ne.0.and.iip1.ne.0) then
  20761 c
  20762                 idt_last_bad = idt(last_bad)
  20763 c
  20764 c               Compute groundspeed vector components between last_bad and iip1 points
  20765 c               ----------------------------------------------------------------------
  20766                 if(idtp1.ne.imiss.and.idt(last_bad).ne.imiss) then
  20767                   idt_dif_badp1 = abs(idtp1 - idt(last_bad))
  20768                 else
  20769                   idt_dif_badp1 = imiss
  20770                 endif
  20771 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  20772                 if(alatp1.ne.amiss.and.alonp1.ne.amiss.and.
  20773      $             alat(last_bad).ne.amiss.and.
  20774      $             alon(last_bad).ne.amiss.and.
  20775 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  20776      $             idt_dif_badp1.ne.imiss) then
  20777                   udist_badp1 = gcirc_qc(alat(last_bad),alon(last_bad),
  20778      $                                   alat(last_bad),alon(iip1))
  20779 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  20780                   if(sin((alon(iip1)-alon(last_bad))*d2r).lt.0.0)
  20781 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  20782      $              udist_badp1 = -udist_badp1
  20783                   vdist_badp1 = gcirc_qc(alat(last_bad),alon(last_bad),
  20784      $                                   alat(iip1    ),alon(last_bad))
  20785 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  20786                   if(sin((alat(iip1)-alat(last_bad))*d2r).lt.0.0)
  20787 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  20788      $              vdist_badp1 = -vdist_badp1
  20789                   dist_badp1  = gcirc_qc(alat(last_bad),alon(last_bad),
  20790      $                                   alat(iip1),alon(iip1))
  20791                   if(idt_dif_badp1.gt.0) then
  20792                     upspd_badp1 = udist_badp1 / float(idt_dif_badp1)
  20793                     vpspd_badp1 = vdist_badp1 / float(idt_dif_badp1)
  20794                     pspd_badp1  = dist_badp1  / float(idt_dif_badp1)
  20795                   else
  20796                     upspd_badp1= udist_badp1 / float(idt_dif_badp1+60)
  20797                     vpspd_badp1= vdist_badp1 / float(idt_dif_badp1+60)
  20798                     pspd_badp1 = dist_badp1  / float(idt_dif_badp1+60)
  20799                   endif
  20800                   if(upspd_badp1.eq.0.0.and.vpspd_badp1.eq.0.0) then
  20801                     pdir_badp1 = 0.0
  20802                   else
  20803                     pdir_badp1 = atan2(upspd_badp1,vpspd_badp1) 
  20804      $                         / d2r + 180.0
  20805                  endif
  20806                   dist_badp1 = dist_badp1 / 1000.0
  20807                 else
  20808                   udist_badp1 = amiss

Page 455         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  20809                   vdist_badp1 = amiss
  20810                   dist_badp1  = amiss
  20811                   upspd_badp1 = amiss
  20812                   vpspd_badp1 = amiss
  20813                   pspd_badp1  = amiss
  20814                   pdir_badp1  = amiss
  20815                 endif
  20816 c      
  20817 c               Compute airspeed between last_bad and iip1 points
  20818 c               -------------------------------------------------
  20819 c                if(uwindp1.ne.amiss.and.upspd_badp1.ne.amiss) then
  20820 c                  uairspd_badp1 = upspd_badp1 - uwindp1
  20821 c                  vairspd_badp1 = vpspd_badp1 - vwindp1
  20822 c                  airspd_badp1  = 
  20823 c     $              sqrt(uairspd_badp1**2+vairspd_badp1**2)
  20824 c
  20825                 if(ob_dir(iip1).ne.amiss.and.ob_spd(iip1).ne.amiss) then
  20826                   airspd_badp1 = sqrt(pspd_badp1**2 + ob_spd(iip1)**2 
  20827      $                     - 2.0*pspd_badp1*ob_spd(iip1)
  20828      $                       *cos((pdir_badp1-ob_dir(iip1))*d2r))
  20829 c
  20830 c                 Make allowances for aircraft that round time to the 
  20831 c                 nearest minute--divide by 120 sec rather than 60 sec
  20832 c                 (modified to allow for mixture of reports with time
  20833 c                  rounded to the nearest minute and interpolated time
  20834 c                  to the nearest second in ascents--P.M.Pauley 6/11/01)
  20835 c                 ----------------------------------------------------
  20836                   if(airspd_badp1.gt.spd_thresh.and.
  20837      $               (abs(idt_dif_badp1).eq.60.or.
  20838      $                (abs(idt_dif_badp1).lt.60.and.
  20839      $                 ((idt(last_bad)/60)*60.eq.idt(last_bad).or.
  20840      $                  (idt(iip1)/60)*60.eq.idt(iip1))))) then
  20841 c
  20842                     airspd_badp1 = airspd_badp1 / 2.0
  20843 c
  20844                   endif
  20845 c
  20846 c                  if(uairspd_badp1.eq.0.0.and.
  20847 c     $               vairspd_badp1.eq.0.0) then
  20848 c                    airdir_badp1 = 0.0
  20849 c                  else
  20850 c                    airdir_badp1 = atan2(uairspd_badp1,vairspd_badp1) 
  20851 c     $                           / d2r + 180.0
  20852 c                  endif
  20853 c
  20854                 else
  20855 c                  uairspd_badp1 = amiss
  20856 c                  vairspd_badp1 = amiss
  20857                   airspd_badp1  = pspd_badp1
  20858 c                  airdir_badp1  = pspd_badp1
  20859                 endif
  20860 c
  20861 c               Compute vertical speed between last_bad and iip1 points
  20862 c               -------------------------------------------------------
  20863                 if(ht_ftp1.ne.amiss.and.
  20864      $             ht_ft(last_bad).ne.amiss) then
  20865                   ht_dif_badp1  = ht_ft(iip1) - ht_ft(last_bad)

Page 456         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  20866                 else
  20867                   ht_dif_badp1 = amiss
  20868                 endif
  20869                 if(ht_dif_badp1.eq.amiss.or.idt_dif_badp1.eq.imiss) then
  20870                   vspd_badp1 = amiss
  20871                 elseif(idt_dif_badp1.gt.0) then
  20872                   vspd_badp1 = ht_dif_badp1 / float(idt_dif_badp1)
  20873                 else
  20874                   vspd_badp1 = ht_dif_badp1 / float(idt_dif_badp1+60) 
  20875                 endif
  20876 c
  20877               else
  20878                 idt_last_bad = imiss
  20879 c
  20880                 udist_badp1 = amiss
  20881                 vdist_badp1 = amiss
  20882                 dist_badp1  = amiss
  20883                 upspd_badp1 = amiss
  20884                 vpspd_badp1 = amiss
  20885                 pspd_badp1  = amiss
  20886                 pdir_badp1  = amiss
  20887 c
  20888 c                uairspd_badp1 = amiss
  20889 c                vairspd_badp1 = amiss
  20890                 airspd_badp1  = amiss
  20891 c                airdir_badp1  = amiss
  20892 c
  20893                 ht_dif_badp1 = amiss 
  20894                 vspd_badp1 = amiss
  20895               endif
  20896 c
  20897 c             Compute magnitude of temperature, direction, and speed differences
  20898 c             (constrain direction difference to be less than 180 deg)
  20899 c             ------------------------------------------------------------------
  20900               if(iip1.ne.0) then
  20901 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  20902                 if(alat0.eq.amiss.or.alatp1.eq.amiss) then
  20903                   alat_dif = amiss
  20904                   alon_dif = amiss
  20905                 else
  20906                   alat_dif = abs(alat0  - alatp1)
  20907                   alon_dif = abs(alon0  - alonp1)
  20908                   if(alon_dif.gt.180.) alon_dif = 360. - alon_dif
  20909 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  20910                 endif
  20911                 if(ob_t(ii).eq.amiss.or.
  20912      $             ob_t(iip1).eq.amiss) then
  20913                   dif_t = amiss
  20914                 else
  20915                   dif_t = abs(ob_t(iip1)-ob_t(ii))
  20916                 endif
  20917                 if(ob_dir(ii).eq.amiss.or.
  20918      $             ob_dir(iip1).eq.amiss) then
  20919                   dif_dir = amiss
  20920                 else
  20921                   dif_dir = abs(ob_dir(iip1)-ob_dir(ii))
  20922                   if(dif_dir.gt.180.) dif_dir = 360. - dif_dir

Page 457         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  20923                 endif
  20924                 if(ob_spd(ii).eq.amiss.or.
  20925      $             ob_spd(iip1).eq.amiss) then
  20926                   dif_spd = amiss
  20927                 else
  20928                   dif_spd = abs(ob_spd(iip1)-ob_spd(ii))
  20929                 endif
  20930               else
  20931                 dif_t = amiss
  20932                 dif_dir = amiss
  20933                 dif_spd = amiss
  20934               endif
  20935 c
  20936               job = iob
  20937               jjstart = ii
  20938               iifirst = ii
  20939               iobfirst = iob
  20940               iilast = iiend
  20941               ioblast = iend
  20942 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  20943               alat_min =  9999.9
  20944               alat_max = -9999.9
  20945               alon_min =  9999.9
  20946               alon_max = -9999.9
  20947 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  20948 c
  20949               idt_start = imiss
  20950               idt_end = imiss
  20951 c
  20952               udist_track = amiss
  20953               vdist_track = amiss
  20954               dist_track  = amiss
  20955               upspd_track = amiss
  20956               vpspd_track = amiss
  20957               pspd_track  = amiss
  20958               pdir_track  = amiss
  20959 c
  20960 c              uairspd_track = amiss
  20961 c              vairspd_track = amiss
  20962               airspd_track  = amiss
  20963 c              airdir_track  = amiss
  20964 c
  20965               ht_dif_track = amiss 
  20966               vspd_track = amiss
  20967 c
  20968 c Check for manAIREP location duplicates
  20969 c --------------------------------------
  20970               if(iip1.ne.0.and.
  20971      $           l_ii_man_airep.and. 
  20972      $           l_iip1_man_airep.and. 
  20973 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  20974      $           alat_dif.ne.amiss.and.alat_dif.lt.0.015.and.
  20975      $           alon_dif.ne.amiss.and.alon_dif.lt.0.015.and.
  20976 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  20977      $           ht_ft0.gt.21000.) then
  20978 c
  20979                 if((ht_difp2.ne.amiss.and.

Page 458         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  20980      $              abs(ht_difp2).lt.htdif_same).or.
  20981      $             (ht_dif_wo0.ne.amiss.and.
  20982      $              abs(ht_dif_wo0).lt.htdif_same).or.
  20983      $             (airspd_wop1.ne.amiss.and.
  20984      $              airspd_wop1.gt.spd_thresh).or.
  20985      $             (abs(ht_difp2).lt.3000.0.and.
  20986      $              abs(ht_dif_wop1).gt.3000.0).or.
  20987      $             (ht_dif0.ne.amiss.and.
  20988      $              abs(ht_dif_wo0).lt.3000.0.and.
  20989      $              abs(ht_dif0).gt.3000.0)) then
  20990 c
  20991                   c_qc(ii)(1:1) = 'd'
  20992                   iob = iob + 1
  20993                   l_ii_pspd_ok = .false.
  20994 c
  20995                   l_print = .true.
  20996                   if(l_print) then
  20997                     write(io8,*) 
  20998                     write(io8,*) 'manAIREP location duplicate ii',ii
  20999                   endif
  21000 c
  21001                 elseif((ht_dif0.ne.amiss.and.
  21002      $                  abs(ht_dif0).lt.htdif_same).or.
  21003      $                 (ht_dif_wop1.ne.amiss.and.
  21004      $                  abs(ht_dif_wop1).lt.htdif_same).or.
  21005      $                 (airspd_wo0.ne.amiss.and.
  21006      $                  airspd_wo0.gt.spd_thresh).or.
  21007      $                 (abs(ht_dif_wop1).lt.3000.0.and.
  21008      $                  abs(ht_difp2).gt.3000.0).or.
  21009      $                 (abs(ht_dif0).lt.3000.0.and.
  21010      $                  abs(ht_dif_wo0).gt.3000.0)) then
  21011 c
  21012                   c_qc(iip1)(1:1) = 'd'
  21013                   l_ii_pspd_ok = .false.
  21014 c
  21015                   l_print = .true.
  21016                   if(l_print) then
  21017                     write(io8,*) 
  21018                     write(io8,*) 'manAIREP location duplicate iip1',iip1
  21019                   endif
  21020 c
  21021                 else
  21022 c
  21023                   c_qc(ii)(1:1) = 'd'
  21024                   iob = iob + 1
  21025                   l_ii_pspd_ok = .false.
  21026 c
  21027                   l_print = .true.
  21028                   if(l_print) then
  21029                     write(io8,*) 
  21030                     write(io8,*) 'manAIREP location duplicate ii?',ii
  21031                   endif
  21032                 endif
  21033 c
  21034 c If previous reject had a stuck clock, check if current
  21035 c   report has the same time
  21036 c ------------------------------------------------------

Page 459         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  21037               elseif(l_stuck.and.
  21038      $               idt_last_bad.ne.imiss.and.
  21039      $               idt(ii).eq.idt_last_bad) then
  21040 c
  21041                 c_qc(ii)(2:2) = 'K'
  21042                 ll = ll + 1
  21043                 if(ll.gt.200) then
  21044                   write(io8,*) 'll limit exceeded--indx not saved!',
  21045      $              ii
  21046                 else
  21047                   indx_save(ll) = ii
  21048                   knt_bad = knt_bad + 1
  21049                   last_bad = ii
  21050                   last_bad_m1 = iim1
  21051 c                  uwind_last = uwind0
  21052 c                  vwind_last = vwind0
  21053                   wspd_last = ob_spd(ii)
  21054                   wdir_last = ob_dir(ii)
  21055                 endif
  21056 c
  21057                 iob = iob + 1
  21058                 l_ii_pspd_ok = .false.
  21059 c
  21060                 l_print = .true.
  21061                 if(l_print) then
  21062                   write(io8,*) 
  21063                   write(io8,*) 'Another stuck clock found: ii=',ii
  21064                 endif
  21065 c
  21066 c If previous reject had a stuck clock, check if iip1
  21067 c   report has the same time
  21068 c ---------------------------------------------------
  21069               elseif(l_stuck.and.iip1.ne.0.and.
  21070      $               last_bad.ne.0.and.
  21071      $               idt_dif_badp1.eq.0) then
  21072 c
  21073                 c_qc(iip1)(2:2) = 'K'
  21074                 ll = ll + 1
  21075                 if(ll.gt.200) then
  21076                   write(io8,*) 'll limit exceeded--indx not saved!',
  21077      $              iip1
  21078                 else
  21079                   indx_save(ll) = iip1
  21080                   knt_bad = knt_bad + 1
  21081                   last_bad = iip1
  21082                   last_bad_m1 = ii
  21083 c                  uwind_last = uwindp1
  21084 c                  vwind_last = vwindp1
  21085                   wspd_last = ob_spd(iip1)
  21086                   wdir_last = ob_dir(iip1)
  21087                 endif
  21088 c
  21089                 l_ii_pspd_ok = .false.
  21090 c
  21091                 l_print = .true.
  21092                 if(l_print) then
  21093                   write(io8,*) 

Page 460         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  21094                   write(io8,*) 'Another stuck clock found: iip1=',iip1
  21095                 endif
  21096 c
  21097 c If previous reject(s) saved, see if iip1 point is
  21098 c   closer to previous point or to last rejected point
  21099 c ----------------------------------------------------
  21100               elseif(airspd_badp1.ne.amiss.and.
  21101      $               airspd_badp1.lt.spd_thresh.and.
  21102      $               dist_badp1.ne.amiss.and.
  21103      $               distp1.ne.amiss.and.
  21104      $               dist_badp1.lt.distp1.and.
  21105      $               (dist_badp1.lt.50.0.or.
  21106      $                (pdir_bad0.ne.amiss.and.
  21107      $                 (dist_badp1.lt.100.0.and.
  21108      $                  cos((pdir_badp1-pdir_bad0)*d2r).gt.0.0).or.
  21109      $                 cos((pdir_badp1-pdir_bad0)*d2r).gt.0.70710678))
  21110      $               .and.vspd_badp1.ne.amiss.and.
  21111      $               abs(vspd_badp1).lt.vspd_thresh*2.0/3.0.and.
  21112      $               ht_dif_badp1.ne.amiss.and.
  21113      $               ht_dif_wo0.ne.amiss.and.
  21114      $               (dist_badp1.gt.250.0.or.
  21115      $                abs(ht_dif_badp1).lt.abs(ht_difp1).or.
  21116      $                abs(ht_difp1-ht_dif_badp1).lt.1000.0)) then
  21117 c
  21118                 c_qc(iip1)(1:1) = 'p'
  21119                 c_qc(iip1)(3:4) = 'II'
  21120                 ll = ll + 1
  21121                 if(ll.gt.200) then
  21122                   write(io8,*) 'll limit exceeded--indx not saved!',
  21123      $              iip1
  21124                 else
  21125                   indx_save(ll) = iip1
  21126                   knt_bad = knt_bad + 1
  21127                   last_bad = iip1
  21128                   last_bad_m1 = ii
  21129 c                  uwind_last = uwindp1
  21130 c                  vwind_last = vwindp1
  21131                   wspd_last = ob_spd(iip1)
  21132                   wdir_last = ob_dir(iip1)
  21133                 endif
  21134 c
  21135                 l_ii_pspd_ok = .false.
  21136 c
  21137                 l_print = .true.
  21138                 if(l_print) then 
  21139                   write(io8,*) 
  21140                   write(io8,*) 'iip1 point closer to last bad pt',iip1
  21141                 endif
  21142 c
  21143 c Perform bounce test for ii point
  21144 c --------------------------------
  21145               elseif(vspd0.ne.amiss.and.vspdp1.ne.amiss.and.
  21146      $               vspd0*vspdp1.lt.0.0.and.
  21147      $               abs(vspd0).gt.vspd_bounce.and.
  21148      $               abs(vspdp1).gt.vspd_bounce) then
  21149 c
  21150                 iob = iob + 1

Page 461         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  21151                 l_ii_pspd_ok = .false.
  21152 c
  21153                 if(iim1.ne.0) then
  21154                   itypem1 = itype(iim1)
  21155                 else
  21156                   itypem1 = imiss
  21157                 endif
  21158 c
  21159                 if(itypem1.ne.imiss.and.
  21160      $             ((itypem1.eq.i_mdcrs_asc.or.
  21161      $               itypem1.eq.i_mdcrs_des).and.
  21162      $              (itype(ii).eq.i_mdcrs.or.
  21163      $               itype(ii).eq.i_mdcrs_lvl).and.
  21164      $              (itype(iip1).eq.i_mdcrs_asc.or.
  21165      $               itype(iip1).eq.i_mdcrs_des)).or.
  21166      $             ((itypem1.eq.i_acars_asc.or.
  21167      $               itypem1.eq.i_acars_des).and.
  21168      $              (itype(ii).eq.i_acars.or.
  21169      $               itype(ii).eq.i_acars_lvl).and.
  21170      $              (itype(iip1).eq.i_acars_asc.or.
  21171      $               itype(iip1).eq.i_acars_des))) then
  21172 c
  21173                   c_qc(ii)(2:2) = 'I'
  21174 c
  21175                   if(c_acftreg(ii)(4:5).eq.'GU'.or.
  21176      $               c_acftreg(ii)(4:5).eq.'WU') then
  21177                     l_print = .false.
  21178                   else
  21179                     l_print = .true.
  21180                   endif
  21181 c
  21182                 elseif((itype(ii).eq.i_mdcrs.and.
  21183      $                  (itype(iip1).eq.i_mdcrs_asc.or.
  21184      $                   itype(iip1).eq.i_mdcrs_des.or.
  21185      $                   itype(iip1).eq.i_mdcrs_lvl)).or.
  21186      $                 (itype(ii).eq.i_acars.and.
  21187      $                  (itype(iip1).eq.i_acars_asc.or.
  21188      $                   itype(iip1).eq.i_acars_des.or.
  21189      $                   itype(iip1).eq.i_acars_lvl))) then
  21190 c
  21191                   c_qc(ii)(2:2) = 'I'
  21192 c
  21193                   if(c_acftreg(ii)(4:5).eq.'GU'.or.
  21194      $               c_acftreg(ii)(4:5).eq.'WU') then
  21195                     l_print = .false.
  21196                   else
  21197                     l_print = .true.
  21198                   endif
  21199 c
  21200                 else
  21201                   ll = ll + 1
  21202                   if(ll.gt.200) then
  21203                     write(io8,*) 'll limit exceeded--indx not saved!',
  21204      $                ii
  21205                   else
  21206                     indx_save(ll) = ii
  21207                     knt_bad = knt_bad + 1

Page 462         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  21208                     last_bad = ii
  21209                     last_bad_m1 = iim1
  21210 c                    uwind_last = uwind0
  21211 c                    vwind_last = vwind0
  21212                     wspd_last = ob_spd(ii)
  21213                     wdir_last = ob_dir(ii)
  21214                   endif
  21215 c
  21216                   c_qc(ii)(1:1) = 'v'
  21217                   if(c_qc(ii)(5:5).eq.'R') then
  21218                     c_qc(ii)(5:5) = 'i'
  21219                   else
  21220                     c_qc(ii)(5:5) = 'I'
  21221                   endif
  21222                   l_print = .true.
  21223                 endif
  21224 c
  21225                 if(l_print) then
  21226                   write(io8,*)
  21227                   write(io8,*) 'Bounce test failed in report ii--',ii
  21228                 endif
  21229 c
  21230 c Perform bounce test for iip1 point
  21231 c ----------------------------------
  21232               elseif(vspdp1.ne.amiss.and.vspdp2.ne.amiss.and.
  21233      $               vspdp1*vspdp2.lt.0.0.and.
  21234      $               abs(vspdp1).gt.vspd_bounce.and.
  21235      $               abs(vspdp2).gt.vspd_bounce) then
  21236 c
  21237                 l_ii_pspd_ok = .false.
  21238 c
  21239                 if(((itype(ii).eq.i_mdcrs_asc.or.
  21240      $               itype(ii).eq.i_mdcrs_des).and.
  21241      $              (itype(iip1).eq.i_mdcrs.or.
  21242      $               itype(iip1).eq.i_mdcrs_lvl).and.
  21243      $              (itype(iip2).eq.i_mdcrs_asc.or.
  21244      $               itype(iip2).eq.i_mdcrs_des)).or.
  21245      $             ((itype(ii).eq.i_acars_asc.or.
  21246      $               itype(ii).eq.i_acars_des).and.
  21247      $              (itype(iip1).eq.i_acars.or.
  21248      $               itype(iip1).eq.i_acars_lvl).and.
  21249      $              (itype(iip2).eq.i_acars_asc.or.
  21250      $               itype(iip2).eq.i_acars_des))) then
  21251 c
  21252                   c_qc(iip1)(2:2) = 'I'
  21253 c
  21254                   if(c_acftreg(iip1)(4:5).eq.'GU'.or.
  21255      $               c_acftreg(iip1)(4:5).eq.'WU') then
  21256                     l_print = .false.
  21257                   else
  21258                     l_print = .true.
  21259                   endif
  21260 c
  21261                 elseif((itype(iip1).eq.i_mdcrs.and.
  21262      $                  (itype(iip2).eq.i_mdcrs_asc.or.
  21263      $                   itype(iip2).eq.i_mdcrs_des.or.
  21264      $                   itype(iip2).eq.i_mdcrs_lvl)).or.

Page 463         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  21265      $                 (itype(iip1).eq.i_acars.and.
  21266      $                  (itype(iip2).eq.i_acars_asc.or.
  21267      $                   itype(iip2).eq.i_acars_des.or.
  21268      $                   itype(iip2).eq.i_acars_lvl))) then
  21269 c
  21270                   c_qc(iip1)(2:2) = 'I'
  21271 c
  21272                   if(c_acftreg(iip1)(4:5).eq.'GU'.or.
  21273      $               c_acftreg(iip1)(4:5).eq.'WU') then
  21274                     l_print = .false.
  21275                   else
  21276                     l_print = .true.
  21277                   endif
  21278 c
  21279                 else
  21280                   ll = ll + 1
  21281                   if(ll.gt.200) then
  21282                     write(io8,*) 'll limit exceeded--indx not saved!',
  21283      $                iip1
  21284                   else
  21285                     indx_save(ll) = iip1
  21286                     knt_bad = knt_bad + 1
  21287                     last_bad = iip1
  21288                     last_bad_m1 = ii
  21289 c                    uwind_last = uwindp1
  21290 c                    vwind_last = vwindp1
  21291                     wspd_last = ob_spd(iip1)
  21292                     wdir_last = ob_dir(iip1)
  21293                   endif
  21294 c
  21295                   c_qc(iip1)(1:1) = 'v'
  21296                   if(c_qc(iip1)(5:5).eq.'R') then
  21297                     c_qc(iip1)(5:5) = 'i'
  21298                   else
  21299                     c_qc(iip1)(5:5) = 'I'
  21300                   endif
  21301                   l_print = .true.
  21302                 endif
  21303 c
  21304                 if(l_print) then
  21305                   write(io8,*)
  21306                   write(io8,*) 'Bounce test failed in rep iip1--',iip1
  21307                 endif
  21308 c
  21309 c Check for discontinuities in ascents
  21310 c ------------------------------------
  21311               elseif(vspd0.ne.amiss.and.
  21312      $               vspdp1.ne.amiss.and.
  21313      $               vspdp2.ne.amiss.and.
  21314      $               vspd0.gt.0.0.and.
  21315      $               vspdp1.lt.0.0.and.
  21316      $               vspdp2.gt.0.0.and.
  21317      $               abs(vspdp1).gt.vspd_thresh/2.0.and.
  21318      $               abs(vspdp1).lt.vspd_thresh)then
  21319 c
  21320 c               Check if iip1 report is a position report
  21321 c               -----------------------------------------

Page 464         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  21322                 if((itype(iip1).eq.i_mdcrs.and.
  21323      $              (itype(ii).eq.i_mdcrs_asc.or.
  21324      $               itype(ii).eq.i_mdcrs_des.or.
  21325      $               itype(ii).eq.i_mdcrs_lvl)).or.
  21326      $             (itype(iip1).eq.i_acars.and.
  21327      $              (itype(ii).eq.i_acars_asc.or.
  21328      $               itype(ii).eq.i_acars_des.or.
  21329      $               itype(ii).eq.i_acars_lvl))) then
  21330 c
  21331                   c_qc(iip1)(2:2) = 'I'
  21332 c
  21333                   l_ii_pspd_ok = .false.
  21334 c
  21335                   l_print = .false.
  21336                   if(l_print) then
  21337                     write(io8,*)
  21338                     write(io8,*) 'Ascent discontinuity in iip1--',iip1
  21339                     write(io8,*) 'position report'
  21340                   endif
  21341 c
  21342 c               Check if ii report is a position report
  21343 c               ---------------------------------------
  21344                 elseif((itype(ii).eq.i_mdcrs.and.
  21345      $                  (itype(iip1).eq.i_mdcrs_asc.or.
  21346      $                   itype(iip1).eq.i_mdcrs_des.or.
  21347      $                   itype(iip1).eq.i_mdcrs_lvl)).or.
  21348      $                 (itype(ii).eq.i_acars.and.
  21349      $                  (itype(iip1).eq.i_acars_asc.or.
  21350      $                   itype(iip1).eq.i_acars_des.or.
  21351      $                   itype(iip1).eq.i_acars_lvl))) then
  21352 c
  21353                   c_qc(ii)(2:2) = 'I'
  21354 c
  21355                   iob = iob + 1
  21356                   l_ii_pspd_ok = .false.
  21357 c
  21358                   l_print = .false.
  21359                   if(l_print) then
  21360                     write(io8,*)
  21361                     write(io8,*) 'Ascent discontinuity in ii--',ii
  21362                     write(io8,*) 'position report'
  21363                   endif
  21364 c
  21365                 else
  21366                   c_qc(iip1)(1:1) = 'V'
  21367                   if(c_qc(iip1)(5:5).eq.'R') then
  21368                     c_qc(iip1)(5:5) = 'i'
  21369                   else
  21370                     c_qc(iip1)(5:5) = 'I'
  21371                   endif
  21372                   ll = ll + 1
  21373                   if(ll.gt.200) then
  21374                     write(io8,*) 'll limit exceeded--indx not saved!',
  21375      $                iip1
  21376                   else
  21377                     indx_save(ll) = iip1
  21378                     knt_bad = knt_bad + 1

Page 465         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  21379                     last_bad = iip1
  21380                     last_bad_m1 = ii
  21381 c                    uwind_last = uwindp1
  21382 c                    vwind_last = vwindp1
  21383                     wspd_last = ob_spd(iip1)
  21384                     wdir_last = ob_dir(iip1)
  21385                   endif
  21386 c
  21387                   l_ii_pspd_ok = .false.
  21388 c
  21389                   l_print = .true.
  21390                   if(l_print) then
  21391                     write(io8,*)
  21392                     write(io8,*) 'Ascent discontinuity in iip1--',iip1
  21393                   endif
  21394                 endif
  21395 c
  21396 c Check for unrealistic airspeeds between ii and iip1 points
  21397 c Check airspeeds greater than spd_thresh 
  21398 c (or spd_man_thresh if the time difference is greater than 10 min)
  21399 c -----------------------------------------------------------------
  21400               elseif(iip1.ne.0.and.
  21401      $               ((c_acftid(ii)(1:3).eq.'AFR'.or.
  21402      $                 c_acftid(ii)(1:3).eq.'BAW').and.
  21403      $                airspdp1.gt.2.0*spd_man_thresh).or.
  21404      $               ((c_acftid(ii)(1:3).ne.'AFR'.and.
  21405      $                 c_acftid(ii)(1:3).ne.'BAW').and.
  21406      $                (airspdp1.gt.spd_thresh.or.
  21407      $                 (idt_difp1.gt.600.and.
  21408      $                  airspdp1.gt.spd_man_thresh))).and.
  21409      $               (.not.l_ii_pspd_ok)) then
  21410 c
  21411 c               If neighboring points not available, reject both points
  21412 c               -------------------------------------------------------
  21413                 if(airspd_wo0.eq.amiss.and.
  21414      $             airspd_wop1.eq.amiss) then
  21415 c
  21416                   c_qc(ii)(1:1) = 'P'
  21417                   c_qc(ii)(3:4) = 'II'
  21418                   ll = ll + 1
  21419                   if(ll.gt.200) then
  21420                     write(io8,*) 'll limit exceeded--indx not saved!',
  21421      $                ii
  21422                   else
  21423                     indx_save(ll) = ii
  21424                     knt_bad = knt_bad + 1
  21425                   endif
  21426 c
  21427                   c_qc(iip1)(1:1) = 'P'
  21428                   c_qc(iip1)(3:4) = 'II'
  21429                   ll = ll + 1
  21430                   if(ll.gt.200) then
  21431                     write(io8,*) 'll limit exceeded--indx not saved!',
  21432      $                iip1
  21433                   else
  21434                     indx_save(ll) = iip1
  21435                     knt_bad = knt_bad + 1

Page 466         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  21436                     last_bad = iip1
  21437                     last_bad_m1 = ii
  21438 c                    uwind_last = uwindp1
  21439 c                    vwind_last = vwindp1
  21440                     wspd_last = ob_spd(iip1)
  21441                     wdir_last = ob_dir(iip1)
  21442                   endif
  21443 c
  21444                   iob = iob + 1
  21445                   l_ii_pspd_ok = .false.
  21446 c
  21447                   l_print = .true.
  21448                   if(l_print) then
  21449                     write(io8,*)
  21450                     write(io8,*) 'Air speed--',airspdp1,
  21451      $                           '--too high in report--',ii
  21452                     write(io8,*) 'Rejecting both points'
  21453                   endif
  21454 c
  21455 c               Check if ii report is a position report
  21456 c               (rejects not saved for second flight check)
  21457 c               -------------------------------------------
  21458                 elseif(idt_difp1.le.60.and.
  21459      $                 ((itype(ii).eq.i_mdcrs.and.
  21460      $                   (itype(iip1).eq.i_mdcrs_asc.or.
  21461      $                    itype(iip1).eq.i_mdcrs_des.or.
  21462      $                    itype(iip1).eq.i_mdcrs_lvl)).or.
  21463      $                  (itype(ii).eq.i_acars.and.
  21464      $                   (itype(iip1).eq.i_acars_asc.or.
  21465      $                    itype(iip1).eq.i_acars_des.or.
  21466      $                    itype(iip1).eq.i_acars_lvl)))) then
  21467 c
  21468                   c_qc(ii)(2:2) = 'I'
  21469 c
  21470                   iob = iob + 1
  21471                   l_ii_pspd_ok = .false.
  21472 c
  21473                   if(c_acftreg(ii)(4:5).eq.'GU'.or.
  21474      $               c_acftreg(ii)(4:5).eq.'WU') then
  21475                     l_print = .false.
  21476                   else
  21477                     l_print = .true.
  21478                   endif
  21479 c
  21480                   if(l_print) then
  21481                     write(io8,*)
  21482                     write(io8,*) 'Air speed--',airspdp1,
  21483      $                           '--too high in report--',ii
  21484                     write(io8,*) 'Is ii a position report?'
  21485                   endif
  21486 c
  21487 c               Check if iip1 report is a position report
  21488 c               (rejects not saved for second flight check)
  21489 c               ---------------------------------------------
  21490                 elseif(idt_difp1.le.60.and.
  21491      $                 ((itype(iip1).eq.i_mdcrs.and.
  21492      $                   (itype(ii).eq.i_mdcrs_asc.or.

Page 467         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  21493      $                    itype(ii).eq.i_mdcrs_des.or.
  21494      $                    itype(ii).eq.i_mdcrs_lvl)).or.
  21495      $                  (itype(iip1).eq.i_acars.and.
  21496      $                   (itype(ii).eq.i_acars_asc.or.
  21497      $                    itype(ii).eq.i_acars_des.or.
  21498      $                    itype(ii).eq.i_acars_lvl)))) then
  21499 c
  21500                   c_qc(iip1)(2:2) = 'I'
  21501 c
  21502                   l_ii_pspd_ok = .false.
  21503 c
  21504                   if(c_acftreg(iip1)(4:5).eq.'GU'.or.
  21505      $               c_acftreg(iip1)(4:5).eq.'WU') then
  21506                     l_print = .false.
  21507                   else
  21508                     l_print = .true.
  21509                   endif
  21510 c
  21511                   if(l_print) then
  21512                     write(io8,*)
  21513                     write(io8,*) 'Air speed--',airspdp1,
  21514      $                           '--too high in report--',ii
  21515                     write(io8,*) 'Is iip1 a position report?'
  21516                   endif
  21517 c
  21518 c               Check if ii report is a MDCRS report with zero latitude or longitude
  21519 c               (rejects not saved for second flight check)
  21520 c               --------------------------------------------------------------------
  21521 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  21522                 elseif((abs(alat(ii)).lt.0.005.or.
  21523      $                  abs(alon(ii)).lt.0.005).and.
  21524 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  21525      $                 ((itype(ii).eq.i_mdcrs.and.
  21526      $                   (itype(iip1).eq.i_mdcrs_asc.or.
  21527      $                    itype(iip1).eq.i_mdcrs_des.or.
  21528      $                    itype(iip1).eq.i_mdcrs_lvl)).or.
  21529      $                  (itype(ii).eq.i_acars.and.
  21530      $                   (itype(iip1).eq.i_acars_asc.or.
  21531      $                    itype(iip1).eq.i_acars_des.or.
  21532      $                    itype(iip1).eq.i_acars_lvl)))) then
  21533 c
  21534 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  21535                   if(abs(alat(ii)).lt.0.005) c_qc(ii)(3:3) = 'B'
  21536                   if(abs(alon(ii)).lt.0.005) c_qc(ii)(4:4) = 'B'
  21537 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  21538 c
  21539                   iob = iob + 1
  21540                   l_ii_pspd_ok = .false.
  21541 c
  21542                   l_print = .true.
  21543 c
  21544                   if(l_print) then
  21545                     write(io8,*)
  21546                     write(io8,*) 'Air speed--',airspdp1,
  21547      $                           '--too high in report--',ii
  21548                     write(io8,*) 'ii report has zero lat or lon'
  21549                   endif

Page 468         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  21550 c
  21551 c               Check if iip1 report is a MDCRS report with zero latitude or longitude
  21552 c               (rejects not saved for second flight check)
  21553 c               ----------------------------------------------------------------------
  21554 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  21555                 elseif((abs(alat(iip1)).lt.0.005.or.
  21556      $                  abs(alon(iip1)).lt.0.005).and.
  21557 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  21558      $                 ((itype(iip1).eq.i_mdcrs.and.
  21559      $                   (itype(ii).eq.i_mdcrs_asc.or.
  21560      $                    itype(ii).eq.i_mdcrs_des.or.
  21561      $                    itype(ii).eq.i_mdcrs_lvl)).or.
  21562      $                  (itype(iip1).eq.i_acars.and.
  21563      $                   (itype(ii).eq.i_acars_asc.or.
  21564      $                    itype(ii).eq.i_acars_des.or.
  21565      $                    itype(ii).eq.i_acars_lvl)))) then
  21566 c
  21567 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  21568                   if(abs(alat(ii)).lt.0.005) c_qc(ii)(3:3) = 'B'
  21569                   if(abs(alon(ii)).lt.0.005) c_qc(ii)(4:4) = 'B'
  21570 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  21571 c
  21572                   l_ii_pspd_ok = .false.
  21573 c
  21574                   l_print = .true.
  21575 c
  21576                   if(l_print) then
  21577                     write(io8,*)
  21578                     write(io8,*) 'Air speed--',airspdp1,
  21579      $                           '--too high in report--',ii
  21580                     write(io8,*) 'iip1 report has zero lat or lon'
  21581                   endif
  21582 c
  21583 c               Check if ii report is an AMDAR report with rounded latitude
  21584 c               (rejects not saved for second flight check)
  21585 c               -----------------------------------------------------------
  21586 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  21587                 elseif(float(int(alat(ii))).eq.alat(ii).and.
  21588 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  21589      $                 (itype(ii).eq.i_amdar.or.
  21590      $                  itype(ii).eq.i_amdar_asc.or.
  21591      $                  itype(ii).eq.i_amdar_des.or.
  21592      $                  itype(ii).eq.i_amdar_lvl).and.
  21593      $                 (itype(iip1).eq.i_amdar.or.
  21594      $                  itype(iip1).eq.i_amdar_asc.or.
  21595      $                  itype(iip1).eq.i_amdar_des.or.
  21596      $                  itype(iip1).eq.i_amdar_lvl)) then
  21597 c
  21598                   c_qc(ii)(1:1) = 'P'
  21599                   c_qc(ii)(3:4) = 'II'
  21600 c
  21601                   iob = iob + 1
  21602                   l_ii_pspd_ok = .false.
  21603 c
  21604                   if(c_acftreg(ii)(1:2).eq.'IT') then
  21605                     l_print = .true.
  21606                   else

Page 469         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  21607                     l_print = .true.
  21608                   endif
  21609                   if(l_print) then
  21610                     write(io8,*)
  21611                     write(io8,*) 'Air speed--',airspdp1,
  21612      $                           '--too high in report--',ii
  21613                     write(io8,*) 'AMDAR rep ii has rounded lat'
  21614                   endif
  21615 c
  21616 c               Check if iip1 report is an AMDAR report with rounded latitude
  21617 c               (rejects not saved for second flight check)
  21618 c               -------------------------------------------------------------
  21619 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  21620                 elseif(float(int(alat(iip1))).eq.alat(iip1).and.
  21621 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  21622      $                 (itype(ii).eq.i_amdar.or.
  21623      $                  itype(ii).eq.i_amdar_asc.or.
  21624      $                  itype(ii).eq.i_amdar_des.or.
  21625      $                  itype(ii).eq.i_amdar_lvl).and.
  21626      $                 (itype(iip1).eq.i_amdar.or.
  21627      $                  itype(iip1).eq.i_amdar_asc.or.
  21628      $                  itype(iip1).eq.i_amdar_des.or.
  21629      $                  itype(iip1).eq.i_amdar_lvl)) then
  21630 c
  21631                   c_qc(iip1)(1:1) = 'P'
  21632                   c_qc(iip1)(3:4) = 'II'
  21633 c
  21634                   l_ii_pspd_ok = .false.
  21635 c
  21636                   if(c_acftreg(ii)(1:2).eq.'IT') then
  21637                     l_print = .true.
  21638                   else
  21639                     l_print = .true.
  21640                   endif
  21641                   if(l_print) then
  21642                     write(io8,*)
  21643                     write(io8,*) 'Air speed--',airspdp1,
  21644      $                           '--too high in report--',ii
  21645                     write(io8,*) 'AMDAR rep iip1 has rounded lat'
  21646                   endif
  21647 c
  21648 c               Check if ii report is an AMDAR report with the wrong sign on the longitude
  21649 c               (rejects not saved for second flight check)
  21650 c               --------------------------------------------------------------------------
  21651 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  21652                 elseif(alon(ii  ).lt.25.0.and.
  21653      $                 alon(iip1).gt.335.0.and.
  21654 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  21655      $                 (itype(ii).eq.i_amdar.or.
  21656      $                  itype(ii).eq.i_amdar_asc.or.
  21657      $                  itype(ii).eq.i_amdar_des.or.
  21658      $                  itype(ii).eq.i_amdar_lvl).and.
  21659      $                 (itype(iip1).eq.i_amdar.or.
  21660      $                  itype(iip1).eq.i_amdar_asc.or.
  21661      $                  itype(iip1).eq.i_amdar_des.or.
  21662      $                  itype(iip1).eq.i_amdar_lvl)) then
  21663 c

Page 470         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  21664                   c_qc(ii)(1:1) = 'P'
  21665                   c_qc(ii)(3:4) = 'II'
  21666 c
  21667 c                 Search backwards for minimum longitude
  21668 c                 Reject points between min and prime meridian
  21669 c                 --------------------------------------------
  21670                   if(iim1.ne.0) then
  21671                     if(alon(iim1).lt.alon(ii)) then
  21672                       nob = iob - 1
  21673                       do while(nob.gt.istart)
  21674                         nn = indx(nob)
  21675                         nnm1 = indx(nob-1)
  21676                         if(alon(nnm1).lt.alon(nn)) then
  21677 c                          write(io8,*) 
  21678 c                          write(io8,*) 'nn not min--',alon(nn),alon(nnm1)
  21679                           nob = nob - 1
  21680                           c_qc(nn)(1:1) = 'P'
  21681                           c_qc(nn)(3:4) = 'II'
  21682                         else
  21683                           nob = istart
  21684                         endif
  21685                       enddo
  21686                     endif
  21687                   endif
  21688 c
  21689                   iob = iob + 1
  21690                   l_ii_pspd_ok = .false.
  21691 c
  21692                   l_print = .true.
  21693                   if(l_print) then
  21694                     write(io8,*)
  21695                     write(io8,*) 'Air speed--',airspdp1,
  21696      $                           '--too high in report--',ii
  21697                     write(io8,*) 'AMDAR rep ii has wrong sign on lon'
  21698                   endif
  21699 c
  21700 c                 Go back and recheck flight after printing output
  21701 c                 ------------------------------------------------
  21702                   l_retest = .true.
  21703 c
  21704 c               Check if iip1 report is an AMDAR report with the wrong sign on the longitude
  21705 c               (rejects not saved for second flight check)
  21706 c               ----------------------------------------------------------------------------
  21707 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  21708                 elseif(alon(iip1).lt.25.0.and.
  21709      $                 alon(ii  ).gt.335.0.and.
  21710 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  21711      $                 (itype(ii).eq.i_amdar.or.
  21712      $                  itype(ii).eq.i_amdar_asc.or.
  21713      $                  itype(ii).eq.i_amdar_des.or.
  21714      $                  itype(ii).eq.i_amdar_lvl).and.
  21715      $                 (itype(iip1).eq.i_amdar.or.
  21716      $                  itype(iip1).eq.i_amdar_asc.or.
  21717      $                  itype(iip1).eq.i_amdar_des.or.
  21718      $                  itype(iip1).eq.i_amdar_lvl)) then
  21719 c
  21720                   c_qc(iip1)(1:1) = 'P'

Page 471         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  21721                   c_qc(iip1)(3:4) = 'II'
  21722 c
  21723 c                 Search forwards for minimum longitude
  21724 c                 -------------------------------------
  21725                   if(iip2.ne.0) then
  21726                     if(alon(iip2).lt.alon(iip1)) then
  21727                       nob = iob + 2
  21728                       do while(nob.lt.iend)
  21729                         nn = indx(nob)
  21730                         nnp1 = indx(nob+1)
  21731                         if(alon(nnp1).lt.alon(nn)) then
  21732                           write(io8,*) 
  21733                           write(io8,*)'nn not min--',alon(nn),alon(nnp1)
  21734                           nob = nob + 1
  21735                           c_qc(nn)(1:1) = 'P'
  21736                           c_qc(nn)(3:4) = 'II'
  21737                         else
  21738                           write(io8,*)
  21739                           write(io8,*) 'nn is min--',alon(nn),alon(nnp1)
  21740                           nob = iend
  21741                         endif
  21742                       enddo
  21743                     endif
  21744                   endif
  21745 c
  21746                   l_ii_pspd_ok = .false.
  21747 c
  21748                   l_print = .true.
  21749                   if(l_print) then
  21750                     write(io8,*)
  21751                     write(io8,*) 'Air speed--',airspdp1,
  21752      $                           '--too high in report--',ii
  21753                     write(io8,*) 'AMDAR rep iip1 has wrong sign on lon'
  21754                   endif
  21755 c
  21756 c                 Go back and recheck flight after printing output
  21757 c                 ------------------------------------------------
  21758                   l_retest = .true.
  21759 cc
  21760 cc               Check if ii manAIREP yielded a too-high speed
  21761 cc               (rejects not saved for second flight check)
  21762 cc               ---------------------------------------------
  21763 c                elseif(l_ii_man_airep.and.(.not.l_iip1_man_airep)) then
  21764 cc
  21765 c                  c_qc(ii)(1:1) = 'P'
  21766 c                  c_qc(ii)(3:4) = 'II'
  21767 c
  21768 c                  iob = iob + 1
  21769 c                  l_ii_pspd_ok = .false.
  21770 cc
  21771 c                  l_print = .true.
  21772 c                  if(l_print) then
  21773 c                    write(io8,*)
  21774 c                    write(io8,*) 'Air speed--',airspdp1,
  21775 c     $                           '--too high in report--',ii
  21776 c                    write(io8,*) 'manAIREP ii does not fit'
  21777 c                  endif

Page 472         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  21778 cc
  21779 cc               Check if iip1 manAIREP yielded a too-high speed
  21780 cc               (rejects not saved for second flight check)
  21781 cc               -----------------------------------------------
  21782 c                elseif(l_iip1_man_airep.and.(.not.l_ii_man_airep)) then
  21783 cc
  21784 c                  c_qc(iip1)(1:1) = 'P'
  21785 c                  c_qc(iip1)(3:4) = 'II'
  21786 c
  21787 c                  l_ii_pspd_ok = .false.
  21788 cc
  21789 c                  l_print = .false.
  21790 c                  if(l_print) then
  21791 c                    write(io8,*)
  21792 c                    write(io8,*) 'Air speed--',airspdp1,
  21793 c     $                           '--too high in report--',ii
  21794 c                    write(io8,*) 'manAIREP iip1 does not fit'
  21795 c                  endif
  21796 c
  21797 c               Check valid supersonic manAIREP flights
  21798 c               (rejects not saved for second flight check)
  21799 c               -------------------------------------------
  21800                 elseif(l_ii_man_airep.and.l_iip1_man_airep.and.
  21801      $                 (l_iim1_man_airep.or.l_iip2_man_airep).and.
  21802      $                 (c_acftid(ii)(1:3).eq.'AFR'.or.
  21803      $                  c_acftid(ii)(1:3).eq.'BAW')) then
  21804 c
  21805 c                 Print but don't reject speeds from 700 to 750 m/s
  21806 c                 -------------------------------------------------
  21807                   if((airspdp1.le.750.0.and.
  21808      $                airspd_wo0.ne.amiss.and.
  21809      $                airspd_wop1.ne.amiss.and.
  21810      $                abs(airspd_wo0-airspd_wop1).lt.50.0).or.
  21811      $               (airspd0 .ne.amiss.and.airspd0 .le.750.0.and.
  21812      $                airspdp1.ne.amiss.and.airspdp1.le.750.0.and.
  21813      $                abs(airspd0-airspdp1).lt.50.0).or.
  21814      $               (airspdp1.ne.amiss.and.airspdp1.le.750.0.and.
  21815      $                airspdp2.ne.amiss.and.airspdp2.le.750.0.and.
  21816      $                abs(airspdp1-airspdp2).lt.50.0)) then
  21817 
  21818                     l_ii_pspd_ok = .true.
  21819 c
  21820                     l_print = .true.
  21821                     if(l_print) then
  21822                       write(io8,*)
  21823                       write(io8,*) 'Supersonic air speed--',airspdp1,
  21824      $                             '--too high in report--',ii
  21825                       write(io8,*) 'manAIREP airspeed below 750 m/s ok'
  21826                     endif
  21827 c
  21828 c                 Check if ii report is bad by other airspeeds
  21829 c                 --------------------------------------------
  21830                   elseif((l_iim1_man_airep.and.l_iip2_man_airep.and.
  21831      $                    airspd_wo0.ne.amiss.and.
  21832      $                    airspd_wop1.ne.amiss.and.
  21833      $                    airspd_wo0.lt.2.0*spd_man_thresh.and.
  21834      $                    (airspd_wop1.gt.2.0*spd_man_thresh.or.

Page 473         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  21835      $                     airspd_wop1-airspd_wo0.gt.60.0).and.
  21836      $                    cos((pdir0-pdirp1)*d2r).lt.0.0.and.
  21837      $                    cos((pdirp2-pdir_wo0)*d2r).gt.0.0).or.
  21838      $                   (l_iim1_man_airep.and.
  21839      $                    airspd0.ne.amiss.and.
  21840      $                    airspdp2.eq.amiss.and.
  21841      $                    airspd0.gt.2.0*spd_man_thresh).or.
  21842      $                   (l_iip2_man_airep.and.
  21843      $                    airspdp2.ne.amiss.and.
  21844      $                    airspd_wo0.eq.amiss.and.
  21845      $                    airspd_wop1.ne.amiss.and.
  21846      $                    airspdp2.lt.2.0*spd_man_thresh.and.
  21847      $                    (airspd_wop1.gt.2.0*spd_man_thresh.or.
  21848      $                     airspd_wop1.lt.2.0*spd_man_thresh/3.0))) then
  21849 c
  21850                     c_qc(ii)(1:1) = 'P'
  21851                     c_qc(ii)(3:4) = 'II'
  21852 c
  21853                     iob = iob + 1
  21854                     l_ii_pspd_ok = .false.
  21855 c
  21856                     l_print = .true.
  21857                     if(l_print) then
  21858                       write(io8,*)
  21859                       write(io8,*) 'Supersonic air speed--',airspdp1,
  21860      $                             '--too high in report--',ii
  21861                       write(io8,*) 'manAIREP ii is bad'
  21862                     endif
  21863 c
  21864 c                 Check if iip1 is bad by other airspeeds
  21865 c                 ---------------------------------------
  21866                   elseif((l_iim1_man_airep.and.l_iip2_man_airep.and.
  21867      $                    airspd_wo0.ne.amiss.and.
  21868      $                    airspd_wop1.ne.amiss.and.
  21869      $                    airspd_wop1.lt.2.0*spd_man_thresh.and.
  21870      $                    (airspd_wo0.gt.2.0*spd_man_thresh.or.
  21871      $                     airspd_wo0-airspd_wop1.gt.60.0).and.
  21872      $                    cos((pdirp1-pdirp2   )*d2r).lt.0.0.and.
  21873      $                    cos((pdir0 -pdir_wop1)*d2r).gt.0.0).or.
  21874      $                   (l_iim1_man_airep.and.
  21875      $                    airspd0.ne.amiss.and.
  21876      $                    airspd_wo0.ne.amiss.and.
  21877      $                    airspd_wop1.eq.amiss.and.
  21878      $                    airspd0.lt.2.0*spd_man_thresh.and.
  21879      $                    airspd_wo0.gt.2.0*spd_man_thresh).or.
  21880      $                   (l_iip2_man_airep.and.
  21881      $                    airspd0.eq.amiss.and.
  21882      $                    airspdp2.ne.amiss.and.
  21883      $                    airspdp2.gt.2.0*spd_man_thresh).or.
  21884      $                   (airspd0 .ne.amiss.and.
  21885      $                    airspd0 .lt.2.0*spd_man_thresh.and.
  21886      $                    airspdp1.ne.amiss.and.
  21887      $                    airspdp1.gt.2.0*spd_man_thresh.and.
  21888      $                    airspdp2.ne.amiss.and.
  21889      $                    airspdp2.gt.2.0*spd_man_thresh.and.
  21890      $                    airspd_wo0 .ne.amiss.and.
  21891      $                    airspd_wo0 .lt.2.0*spd_man_thresh.and.

Page 474         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  21892      $                    airspd_wop1.ne.amiss.and.
  21893      $                    airspd_wop1.lt.2.0*spd_man_thresh)) then
  21894 c
  21895                     c_qc(iip1)(1:1) = 'P'
  21896                     c_qc(iip1)(3:4) = 'II'
  21897 c
  21898                     l_ii_pspd_ok = .false.
  21899 c
  21900                     l_print = .true.
  21901                     if(l_print) then
  21902                       write(io8,*)
  21903                       write(io8,*) 'Supersonic air speed--',airspdp1,
  21904      $                             '--too high in report--',ii
  21905                       write(io8,*) 'manAIREP iip1 is bad'
  21906                     endif
  21907 c
  21908 c                 Check if first report in flight is bad
  21909 c                 --------------------------------------
  21910                   elseif(airspd0.eq.amiss.and.
  21911      $                   airspdp2.ne.amiss.and.
  21912      $                   airspd_wop1.ne.amiss.and.
  21913      $                   airspdp2.lt.2.0*spd_man_thresh.and.
  21914      $                   airspd_wop1.lt.2.0*spd_man_thresh.and.
  21915      $                   cos((pdirp1-pdirp2)*d2r).gt.0.0) then
  21916 c
  21917                     c_qc(ii)(1:1) = 'P'
  21918                     c_qc(ii)(3:4) = 'II'
  21919 c
  21920                     iob = iob + 1
  21921                     l_ii_pspd_ok = .false.
  21922 c
  21923                     l_print = .true.
  21924                     if(l_print) then
  21925                       write(io8,*)
  21926                       write(io8,*) 'Supersonic air speed--',airspdp1,
  21927      $                             '--too high in report--',ii
  21928                       write(io8,*) '1st manAIREP is bad'
  21929                     endif
  21930 c
  21931 c                 Check if last report in flight is bad
  21932 c                 -------------------------------------
  21933                   elseif(airspd0.ne.amiss.and.
  21934      $                   airspdp2.eq.amiss.and.
  21935      $                   airspd_wo0.ne.amiss.and.
  21936      $                   airspd0.lt.2.0*spd_man_thresh.and.
  21937      $                   airspd_wo0.lt.2.0*spd_man_thresh.and.
  21938      $                   cos((pdir0-pdirp1)*d2r).gt.0.0) then
  21939 c
  21940                     c_qc(iip1)(1:1) = 'P'
  21941                     c_qc(iip1)(3:4) = 'II'
  21942 c
  21943                     l_ii_pspd_ok = .false.
  21944 c
  21945                     l_print = .true.
  21946                     if(l_print) then
  21947                       write(io8,*)
  21948                       write(io8,*) 'Supersonic air speed--',airspdp1,

Page 475         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  21949      $                             '--too high in report--',ii
  21950                       write(io8,*) 'last manAIREP is bad'
  21951                     endif
  21952 c
  21953 c                 Handle remaining points
  21954 c                 -----------------------
  21955                   else
  21956 c
  21957                     c_qc(ii)(1:1) = 'P'
  21958                     c_qc(ii)(3:4) = 'II'
  21959 c
  21960                     c_qc(iip1)(1:1) = 'P'
  21961                     c_qc(iip1)(3:4) = 'II'
  21962 c
  21963                     iob = iob + 1
  21964                     l_ii_pspd_ok = .false.
  21965 c
  21966                     l_print = .true.
  21967                     if(l_print) then
  21968                       write(io8,*)
  21969                       write(io8,*) 'Supersonic air speed--',airspdp1,
  21970      $                             '--too high in report--',ii
  21971                       write(io8,*) 'Uncategorized manAIREP'
  21972                       write(io8,*) 'Rejecting both points'
  21973                     endif
  21974                   endif
  21975 c
  21976 c               Check flights with time differences greater than 10 min
  21977 c               (rejects not saved for second flight check)
  21978 c               ----------------------------------------------------------------
  21979 c                elseif(l_ii_man_airep.and.l_iip1_man_airep.and.
  21980 c     $                 (l_iim1_man_airep.or.l_iip2_man_airep).and.
  21981 c     $                 (c_acftid(ii)(1:3).ne.'AFR'.and.
  21982 c
  21983                 elseif((c_acftid(ii)(1:3).ne.'AFR'.and.
  21984      $                  c_acftid(ii)(1:3).ne.'BAW').and.
  21985      $                 idt_difp1.gt.600) then
  21986 c
  21987 c                 Print but don't reject speeds from 350 to 375 m/s
  21988 c                 -------------------------------------------------
  21989                   if((airspdp1.le.375.0.and.
  21990      $                airspd_wo0.ne.amiss.and.
  21991      $                airspd_wop1.ne.amiss.and.
  21992      $                abs(airspd_wo0-airspd_wop1).lt.50.0).or.
  21993      $               (airspd0 .ne.amiss.and.airspd0 .le.375.0.and.
  21994      $                airspdp1.ne.amiss.and.airspdp1.le.375.0.and.
  21995      $                abs(airspd0-airspdp1).lt.25.0).or.
  21996      $               (airspdp1.ne.amiss.and.airspdp1.le.375.0.and.
  21997      $                airspdp2.ne.amiss.and.airspdp2.le.375.0.and.
  21998      $                abs(airspdp1-airspdp2).lt.25.0)) then
  21999 
  22000                     l_ii_pspd_ok = .true.
  22001 c
  22002                     l_print = .true.
  22003                     if(l_print) then
  22004                       write(io8,*)
  22005                       write(io8,*) 'Air speed--',airspdp1,

Page 476         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  22006      $                             '--too high in report--',ii
  22007                       write(io8,*) 'Airspeed below 375 m/s ok'
  22008                     endif
  22009 c
  22010 c                 Check if ii report is bad by other airspeeds
  22011 c                 --------------------------------------------
  22012 c                  elseif((l_iim1_man_airep.and.l_iip2_man_airep.and.
  22013 c     $                    airspd_wo0.ne.amiss.and.
  22014 c
  22015                   elseif((airspd_wo0.ne.amiss.and.
  22016      $                    airspd_wop1.ne.amiss.and.
  22017      $                    airspd_wo0.lt.spd_man_thresh.and.
  22018      $                    (airspd_wop1.gt.spd_man_thresh.or.
  22019      $                     airspd_wop1-airspd_wo0.gt.60.0).and.
  22020      $                    cos((pdir0-pdirp1)*d2r).lt.0.0.and.
  22021      $                    cos((pdirp2-pdir_wo0)*d2r).gt.0.0).or.
  22022 c
  22023 c     $                   (l_iim1_man_airep.and.
  22024 c
  22025      $                   (airspd0.ne.amiss.and.
  22026      $                    airspdp2.eq.amiss.and.
  22027      $                    airspd0.gt.spd_man_thresh).or.
  22028 c
  22029 c     $                   (l_iip2_man_airep.and.
  22030 c
  22031      $                   (airspdp2.ne.amiss.and.
  22032      $                    airspd_wo0.eq.amiss.and.
  22033      $                    airspd_wop1.ne.amiss.and.
  22034      $                    airspdp2.lt.spd_man_thresh.and.
  22035      $                    (airspd_wop1.gt.spd_man_thresh.or.
  22036      $                     airspd_wop1.lt.spd_man_thresh/3.0))) then
  22037 c
  22038                     c_qc(ii)(1:1) = 'P'
  22039                     c_qc(ii)(3:4) = 'II'
  22040 c
  22041                     iob = iob + 1
  22042                     l_ii_pspd_ok = .false.
  22043 c
  22044                     l_print = .true.
  22045                     if(l_print) then
  22046                       write(io8,*)
  22047                       write(io8,*) 'Air speed--',airspdp1,
  22048      $                             '-- > 350 m/s in report--',ii
  22049                       write(io8,*) 'Report ii is bad'
  22050                     endif
  22051 c
  22052 c                 Check if iip1 is bad by other airspeeds
  22053 c                 ---------------------------------------
  22054 c                  elseif((l_iim1_man_airep.and.l_iip2_man_airep.and.
  22055 c     $                    airspd_wo0.ne.amiss.and.
  22056 c
  22057                   elseif((airspd_wo0.ne.amiss.and.
  22058      $                    airspd_wop1.ne.amiss.and.
  22059      $                    airspd_wop1.lt.spd_man_thresh.and.
  22060      $                    (airspd_wo0.gt.spd_man_thresh.or.
  22061      $                     airspd_wo0-airspd_wop1.gt.60.0).and.
  22062      $                    cos((pdirp1-pdirp2   )*d2r).lt.0.0.and.

Page 477         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  22063      $                    cos((pdir0 -pdir_wop1)*d2r).gt.0.0).or.
  22064 c
  22065 c     $                   (l_iim1_man_airep.and.
  22066 c
  22067      $                   (airspd0.ne.amiss.and.
  22068      $                    airspd_wo0.ne.amiss.and.
  22069      $                    airspd_wop1.eq.amiss.and.
  22070      $                    airspd0.lt.spd_man_thresh.and.
  22071      $                    airspd_wo0.gt.spd_man_thresh).or.
  22072 c
  22073 c     $                   (l_iip2_man_airep.and.
  22074 c
  22075      $                   (airspd0.eq.amiss.and.
  22076      $                    airspdp2.ne.amiss.and.
  22077      $                    airspdp2.gt.spd_man_thresh).or.
  22078      $                   (airspd0 .ne.amiss.and.
  22079      $                    airspd0 .lt.spd_man_thresh.and.
  22080      $                    airspdp1.ne.amiss.and.
  22081      $                    airspdp1.gt.spd_man_thresh.and.
  22082      $                    airspdp2.ne.amiss.and.
  22083      $                    airspdp2.gt.spd_man_thresh.and.
  22084      $                    airspd_wo0 .ne.amiss.and.
  22085      $                    airspd_wo0 .lt.spd_man_thresh.and.
  22086      $                    airspd_wop1.ne.amiss.and.
  22087      $                    airspd_wop1.lt.spd_man_thresh)) then
  22088 c
  22089                     c_qc(iip1)(1:1) = 'P'
  22090                     c_qc(iip1)(3:4) = 'II'
  22091 c
  22092                     l_ii_pspd_ok = .false.
  22093 c
  22094                     l_print = .true.
  22095                     if(l_print) then
  22096                       write(io8,*)
  22097                       write(io8,*) 'Air speed--',airspdp1,
  22098      $                             '-- > 350 m/s in report--',ii
  22099                       write(io8,*) 'Report iip1 is bad'
  22100                     endif
  22101 c
  22102 c                 Check if first report in flight is bad
  22103 c                 --------------------------------------
  22104                   elseif(airspd0.eq.amiss.and.
  22105      $                   airspdp2.ne.amiss.and.
  22106      $                   airspd_wop1.ne.amiss.and.
  22107      $                   airspdp2.lt.spd_man_thresh.and.
  22108      $                   airspd_wop1.lt.spd_man_thresh.and.
  22109      $                   cos((pdirp1-pdirp2)*d2r).gt.0.0) then
  22110 c
  22111                     c_qc(ii)(1:1) = 'P'
  22112                     c_qc(ii)(3:4) = 'II'
  22113 c
  22114                     iob = iob + 1
  22115                     l_ii_pspd_ok = .false.
  22116 c
  22117                     l_print = .true.
  22118                     if(l_print) then
  22119                       write(io8,*)

Page 478         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  22120                       write(io8,*) 'Air speed--',airspdp1,
  22121      $                             '-- > 350 m/s in report--',ii
  22122                       write(io8,*) '1st report is bad'
  22123                     endif
  22124 c
  22125 c                 Check if last report in flight is bad
  22126 c                 -------------------------------------
  22127                   elseif(airspd0.ne.amiss.and.
  22128      $                   airspdp2.eq.amiss.and.
  22129      $                   airspd_wo0.ne.amiss.and.
  22130      $                   airspd0.lt.spd_man_thresh.and.
  22131      $                   airspd_wo0.lt.spd_man_thresh.and.
  22132      $                   cos((pdir0-pdirp1)*d2r).gt.0.0) then
  22133 c
  22134                     c_qc(iip1)(1:1) = 'P'
  22135                     c_qc(iip1)(3:4) = 'II'
  22136 c
  22137                     l_ii_pspd_ok = .false.
  22138 c
  22139                     l_print = .true.
  22140                     if(l_print) then
  22141                       write(io8,*)
  22142                       write(io8,*) 'Air speed--',airspdp1,
  22143      $                             '-- > 350 m/s in report--',ii
  22144                       write(io8,*) 'last report is bad'
  22145                     endif
  22146 c
  22147 c                 Handle remaining points
  22148 c                 -----------------------
  22149                   else
  22150 c
  22151                     c_qc(ii)(1:1) = 'P'
  22152                     c_qc(ii)(3:4) = 'II'
  22153 c
  22154                     c_qc(iip1)(1:1) = 'P'
  22155                     c_qc(iip1)(3:4) = 'II'
  22156 c
  22157                     iob = iob + 1
  22158                     l_ii_pspd_ok = .false.
  22159 c
  22160                     l_print = .true.
  22161                     if(l_print) then
  22162                       write(io8,*)
  22163                       write(io8,*) 'Air speed--',airspdp1,
  22164      $                             '-- > 350 m/s in report--',ii
  22165                       write(io8,*) 'Uncategorized report'
  22166                       write(io8,*) 'Rejecting both points'
  22167                     endif
  22168                   endif
  22169 c
  22170 c               Check for previously undetected stuck clocks
  22171 c               (rejects not saved for second flight check)
  22172 c               --------------------------------------------
  22173                 elseif(idt_difp2.eq.0.and.
  22174      $                 airspd_wo0.ne.amiss.and.
  22175      $                 airspd_wo0.gt.spd_thresh.and.
  22176      $                 airspd_wop1.ne.amiss.and.

Page 479         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  22177      $                 airspd_wop1.gt.spd_thresh.and.
  22178      $                 airspdp2.ne.amiss.and.
  22179      $                 airspdp2.gt.spd_thresh) then
  22180 c
  22181                   c_qc(iip1)(2:2) = 'K'
  22182                   ll = ll + 1
  22183                   if(ll.gt.200) then
  22184                     write(io8,*) 'll limit exceeded--indx not saved!',
  22185      $                iip1
  22186                   else
  22187                     indx_save(ll) = iip1
  22188                     knt_bad = knt_bad + 1
  22189                   endif
  22190 c
  22191                   c_qc(iip2)(2:2) = 'K'
  22192                   ll = ll + 1
  22193                   if(ll.gt.200) then
  22194                     write(io8,*) 'll limit exceeded--indx not saved!'
  22195      $                ,iip2
  22196                   else
  22197                     indx_save(ll) = iip2
  22198                     knt_bad = knt_bad + 1
  22199                     last_bad = iip2
  22200                     last_bad_m1 = iip1
  22201 c                    uwind_last = uwindp2
  22202 c                    vwind_last = vwindp2
  22203                     wspd_last = ob_spd(iip2)
  22204                     wdir_last = ob_dir(iip2)
  22205                   endif
  22206 c
  22207                   l_ii_pspd_ok = .false.
  22208                   l_stuck = .true.
  22209 c
  22210                   l_print = .true.
  22211                   if(l_print) then
  22212                     write(io8,*)
  22213                     write(io8,*) 'Air speed--',airspdp1,
  22214      $                           '--too high in report--',ii
  22215                     write(io8,*) 'iip1, iip2 reports have same time'
  22216                   endif
  22217 c
  22218 c               Print but don't reject speeds from 525 to 550 m/s
  22219 c               -------------------------------------------------
  22220                 elseif((airspdp1.le.550.0.and.
  22221      $                  airspd_wo0.ne.amiss.and.
  22222      $                  airspd_wop1.ne.amiss.and.
  22223      $                  abs(airspd_wo0-airspd_wop1).lt.50.0).or.
  22224      $                 (airspd0 .ne.amiss.and.airspd0 .le.550.0.and.
  22225      $                  airspdp1.ne.amiss.and.airspdp1.le.550.0.and.
  22226      $                  abs(airspd0-airspdp1).lt.25.0).or.
  22227      $                 (airspdp1.ne.amiss.and.airspdp1.le.550.0.and.
  22228      $                  airspdp2.ne.amiss.and.airspdp2.le.550.0.and.
  22229      $                  abs(airspdp1-airspdp2).lt.25.0)) then
  22230 c
  22231                   l_ii_pspd_ok = .true.
  22232 c
  22233                   l_print = .true.

Page 480         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  22234                   if(l_print) then
  22235                     write(io8,*)
  22236                     write(io8,*) 'Air speed--',airspdp1,
  22237      $                           '--too high in report--',ii
  22238                     write(io8,*) 'Airspeed below 550 m/s ok'
  22239                   endif
  22240 c
  22241 c               Check if ii is problem point by other airspeeds
  22242 c               -----------------------------------------------
  22243                 elseif((airspd_wo0.ne.amiss.and.
  22244      $                  airspd_wop1.ne.amiss.and.
  22245      $                  airspd_wo0.lt.spd_thresh.and.
  22246      $                  (airspd_wop1.gt.spd_thresh.or.
  22247      $                   airspd_wop1-airspd_wo0.gt.90.0).and.
  22248      $                  cos((pdir0-pdirp1)*d2r).lt.0.0.and.
  22249      $                  cos((pdirp2-pdir_wo0)*d2r).gt.0.0).or.
  22250      $                 (airspd0.ne.amiss.and.
  22251      $                  airspdp2.eq.amiss.and.
  22252      $                  airspd0.gt.spd_thresh).or.
  22253      $                 (airspdp2.ne.amiss.and.
  22254      $                  airspd_wo0.eq.amiss.and.
  22255      $                  airspd_wop1.ne.amiss.and.
  22256      $                  airspdp2.lt.spd_thresh.and.
  22257      $                  (airspd_wop1.gt.spd_thresh.or.
  22258      $                   airspd_wop1.lt.spd_thresh/3.0))) then
  22259 c
  22260                   c_qc(ii)(1:1) = 'P'
  22261                   c_qc(ii)(3:4) = 'II'
  22262 c
  22263                   ll = ll + 1
  22264                   if(ll.gt.200) then
  22265                     write(io8,*) 'll limit exceeded--indx not saved!',
  22266      $                ii
  22267                   else
  22268                     indx_save(ll) = ii
  22269                     knt_bad = knt_bad + 1
  22270                     last_bad = ii
  22271                     last_bad_m1 = iim1
  22272 c                    uwind_last = uwind0
  22273 c                    vwind_last = vwind0
  22274                     wspd_last = ob_spd(ii)
  22275                     wdir_last = ob_dir(ii)
  22276                   endif
  22277 c
  22278                   iob = iob + 1
  22279                   l_ii_pspd_ok = .false.
  22280 c
  22281                   l_print = .true.
  22282                   if(l_print) then
  22283                     write(io8,*)
  22284                     write(io8,*) 'Air speed--',airspdp1,
  22285      $                           '--too high in report--',ii
  22286                     write(io8,*) 'ii is problem point'
  22287                   endif
  22288 c
  22289 c               Check if iip1 is problem point by other airspeeds
  22290 c               -------------------------------------------------

Page 481         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  22291                 elseif((airspd_wo0.ne.amiss.and.
  22292      $                  airspd_wop1.ne.amiss.and.
  22293      $                  airspd_wop1.lt.spd_thresh.and.
  22294      $                  (airspd_wo0.gt.spd_thresh.or.
  22295      $                   airspd_wo0-airspd_wop1.gt.90.0).and.
  22296      $                  cos((pdirp1-pdirp2   )*d2r).lt.0.0.and.
  22297      $                  cos((pdir0 -pdir_wop1)*d2r).gt.0.0).or.
  22298      $                 (airspd0.ne.amiss.and.
  22299      $                  airspd_wo0.ne.amiss.and.
  22300      $                  airspd_wop1.eq.amiss.and.
  22301      $                  airspd0.lt.spd_thresh.and.
  22302      $                  airspd_wo0.gt.spd_thresh).or.
  22303      $                 (airspd0.eq.amiss.and.
  22304      $                  airspdp2.ne.amiss.and.
  22305      $                  airspdp2.gt.spd_thresh).or.
  22306      $                 (airspd0 .ne.amiss.and.
  22307      $                  airspd0 .lt.spd_thresh.and.
  22308      $                  airspdp1.ne.amiss.and.
  22309      $                  airspdp1.gt.spd_thresh.and.
  22310      $                  airspdp2.ne.amiss.and.
  22311      $                  airspdp2.gt.spd_thresh.and.
  22312      $                  airspd_wo0 .ne.amiss.and.
  22313      $                  airspd_wo0 .lt.spd_thresh.and.
  22314      $                  airspd_wop1.ne.amiss.and.
  22315      $                  airspd_wop1.lt.spd_thresh)) then
  22316 c
  22317                   c_qc(iip1)(1:1) = 'P'
  22318                   c_qc(iip1)(3:4) = 'II'
  22319 c
  22320                   ll = ll + 1
  22321                   if(ll.gt.200) then
  22322                     write(io8,*) 'll limit exceeded--indx not saved!',
  22323      $                iip1
  22324                   else
  22325                     indx_save(ll) = iip1
  22326                     knt_bad = knt_bad + 1
  22327                     last_bad = iip1
  22328                     last_bad_m1 = ii
  22329 c                    uwind_last = uwindp1
  22330 c                    vwind_last = vwindp1
  22331                     wspd_last = ob_spd(iip1)
  22332                     wdir_last = ob_dir(iip1)
  22333                   endif
  22334 c
  22335                   l_ii_pspd_ok = .false.
  22336 c
  22337                   l_print = .true.
  22338                   if(l_print) then
  22339                     write(io8,*)
  22340                     write(io8,*) 'Air speed--',airspdp1,
  22341      $                           '--too high in report--',ii
  22342                     write(io8,*) 'iip1 is problem point'
  22343                   endif
  22344 c
  22345 c               Check if first report in flight is bad
  22346 c               --------------------------------------
  22347                 elseif(airspd0.eq.amiss.and.

Page 482         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  22348      $                 airspdp2.ne.amiss.and.
  22349      $                 airspd_wop1.ne.amiss.and.
  22350      $                 airspdp2.lt.spd_thresh.and.
  22351      $                 airspd_wop1.lt.spd_thresh.and.
  22352      $                 cos((pdirp1-pdirp2)*d2r).gt.0.0) then
  22353 c
  22354                   c_qc(ii)(1:1) = 'P'
  22355                   c_qc(ii)(3:4) = 'II'
  22356 c
  22357                   iob = iob + 1
  22358                   l_ii_pspd_ok = .false.
  22359 c
  22360                   l_print = .true.
  22361                   if(l_print) then
  22362                     write(io8,*)
  22363                     write(io8,*) 'Air speed--',airspdp1,
  22364      $                           '--too high in report--',ii
  22365                     write(io8,*) '1st report is bad'
  22366                   endif
  22367 c
  22368 c               Check if last report in flight is bad
  22369 c               -------------------------------------
  22370                 elseif(airspd0.ne.amiss.and.
  22371      $                 airspdp2.eq.amiss.and.
  22372      $                 airspd_wo0.ne.amiss.and.
  22373      $                 airspd0.lt.spd_thresh.and.
  22374      $                 airspd_wo0.lt.spd_thresh.and.
  22375      $                 cos((pdir0-pdirp1)*d2r).gt.0.0) then
  22376 c
  22377                   c_qc(iip1)(1:1) = 'P'
  22378                   c_qc(iip1)(3:4) = 'II'
  22379 c
  22380                   l_ii_pspd_ok = .false.
  22381 c
  22382                   l_print = .true.
  22383                   if(l_print) then
  22384                     write(io8,*)
  22385                     write(io8,*) 'Air speed--',airspdp1,
  22386      $                           '--too high in report--',ii
  22387                     write(io8,*) 'last report is bad'
  22388                   endif
  22389 c
  22390 c               Check if iip1 and iip2 points are from a different flight
  22391 c               ---------------------------------------------------------
  22392                 elseif((vspd0 .ne.amiss.and.
  22393      $                  abs(vspd0 ).lt.vspd_thresh*2.0/3.0.and.
  22394      $                  vspdp1.ne.amiss.and.
  22395      $                  abs(vspdp1).gt.vspd_thresh*2.0/3.0.and.
  22396      $                  vspdp2.ne.amiss.and.
  22397      $                  abs(vspdp2).lt.vspd_thresh*2.0/3.0).or.
  22398      $                 (airspd0 .ne.amiss.and.
  22399      $                  airspd0 .lt.spd_thresh.and.
  22400      $                  airspdp1.ne.amiss.and.
  22401      $                  airspdp1.gt.spd_thresh.and.
  22402      $                  airspdp2.ne.amiss.and.
  22403      $                  airspdp2.lt.spd_thresh).or.
  22404      $                 (airspd0 .ne.amiss.and.

Page 483         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  22405      $                  airspd0 .lt.spd_thresh.and.
  22406      $                  airspdp1.ne.amiss.and.
  22407      $                  airspdp1.gt.spd_thresh.and.
  22408      $                  airspdp2.ne.amiss.and.
  22409      $                  airspdp2.gt.spd_thresh.and.
  22410      $                  airspd_wo0 .ne.amiss.and.
  22411      $                  airspd_wo0 .gt.spd_thresh.and.
  22412      $                  airspd_wop1.ne.amiss.and.
  22413      $                  airspd_wop1.gt.spd_thresh)) then
  22414 c
  22415                   c_qc(iip1)(1:1) = 'P'
  22416                   c_qc(iip1)(3:4) = 'II'
  22417 c
  22418                   ll = ll + 1
  22419                   if(ll.gt.200) then
  22420                     write(io8,*) 'll limit exceeded--indx not saved!'
  22421      $                ,iip1
  22422                   else
  22423                     indx_save(ll) = iip1
  22424                     knt_bad = knt_bad + 1
  22425                   endif
  22426 c
  22427                   c_qc(iip2)(1:1) = 'P'
  22428                   c_qc(iip2)(3:4) = 'II'
  22429                   ll = ll + 1
  22430                   if(ll.gt.200) then
  22431                     write(io8,*) 'll limit exceeded--indx not saved!'
  22432      $                ,iip2
  22433                   else
  22434                     indx_save(ll) = iip2
  22435                     knt_bad = knt_bad + 1
  22436                     last_bad = iip2
  22437                     last_bad_m1 = iip1
  22438 c                    uwind_last = uwindp2
  22439 c                    vwind_last = vwindp2
  22440                     wspd_last = ob_spd(iip2)
  22441                     wdir_last = ob_dir(iip2)
  22442                   endif
  22443 c
  22444                   l_ii_pspd_ok = .false.
  22445 c
  22446                   l_print = .true.
  22447                   if(l_print) then
  22448                     write(io8,*)
  22449                     write(io8,*) 'Air speed--',airspdp1,
  22450      $                           '--too high in report--',ii
  22451                     write(io8,*) 'iip1 and iip2 reports from new flight'
  22452                   endif
  22453 c
  22454 c               Check if iip1 is problem point by other airspeeds--clock problem
  22455 c               ----------------------------------------------------------------
  22456                 elseif(airspd_wo0.ne.amiss.and.
  22457      $                 airspd_wop1.ne.amiss.and.
  22458      $                 airspd_wo0.lt.spd_thresh.and.
  22459      $                 (airspd_wop1.gt.spd_thresh.or.
  22460      $                  airspd_wop1-airspd_wo0.gt.90.0).and.
  22461      $                 airspdp2.gt.spd_thresh.and.

Page 484         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  22462      $                 cos((pdir0-pdirp1)*d2r).gt.0.5.and.
  22463      $                 cos((pdirp2-pdir_wo0)*d2r).gt.0.5) then
  22464 c
  22465                   c_qc(iip1)(1:1) = 'P'
  22466                   c_qc(iip1)(3:4) = 'II'
  22467 c
  22468                   ll = ll + 1
  22469                   if(ll.gt.200) then
  22470                     write(io8,*) 'll limit exceeded--indx not saved!',
  22471      $                ii
  22472                   else
  22473                     indx_save(ll) = iip1
  22474                     knt_bad = knt_bad + 1
  22475                     last_bad = iip1
  22476                     last_bad_m1 = ii
  22477 c                    uwind_last = uwindp1
  22478 c                    vwind_last = vwindp1
  22479                     wspd_last = ob_spd(iip1)
  22480                     wdir_last = ob_dir(iip1)
  22481                   endif
  22482 c
  22483                   l_ii_pspd_ok = .false.
  22484 c
  22485                   l_print = .true.
  22486                   if(l_print) then
  22487                     write(io8,*)
  22488                     write(io8,*) 'Air speed--',airspdp1,
  22489      $                           '--too high in report--',ii
  22490                     write(io8,*) 'iip1 has clock problem'
  22491                   endif
  22492 c
  22493 c               Handle remaining points
  22494 c               -----------------------
  22495                 else
  22496 c
  22497                   c_qc(ii)(1:1) = 'P'
  22498                   c_qc(ii)(3:4) = 'II'
  22499                   ll = ll + 1
  22500                   if(ll.gt.200) then
  22501                     write(io8,*) 'll limit exceeded--indx not saved!',
  22502      $                ii
  22503                   else
  22504                     indx_save(ll) = ii
  22505                     knt_bad = knt_bad + 1
  22506                   endif
  22507 c
  22508                   c_qc(iip1)(1:1) = 'P'
  22509                   c_qc(iip1)(3:4) = 'II'
  22510                   ll = ll + 1
  22511                   if(ll.gt.200) then
  22512                     write(io8,*) 'll limit exceeded--indx not saved!',
  22513      $                iip1
  22514                   else
  22515                     indx_save(ll) = iip1
  22516                     knt_bad = knt_bad + 1
  22517                     last_bad = iip1
  22518                     last_bad_m1 = ii

Page 485         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  22519 c                    uwind_last = uwindp1
  22520 c                    vwind_last = vwindp1
  22521                     wspd_last = ob_spd(iip1)
  22522                     wdir_last = ob_dir(iip1)
  22523                   endif
  22524 c
  22525                   iob = iob + 1
  22526                   l_ii_pspd_ok = .false.
  22527 c
  22528                   l_print = .true.
  22529                   if(l_print) then
  22530                     write(io8,*)
  22531                     write(io8,*) 'Air speed--',airspdp1,
  22532      $                           '--too high in report--',ii
  22533                     write(io8,*) 'Uncategorized report'
  22534                     write(io8,*) 'Rejecting both points'
  22535                   endif
  22536                 endif
  22537 c
  22538 c Check for unrealistic vertical speeds between ii and iip1 points
  22539 c ----------------------------------------------------------------
  22540               elseif(iip1.ne.0.and.
  22541      $               vspdp1.ne.amiss.and.
  22542      $               (abs(vspdp1).gt.vspd_thresh.or.
  22543      $                (idt_difp1.gt.600.and.
  22544      $                 abs(vspdp1).gt.vspd_thresh*2.0/3.0))) then
  22545 c
  22546 c               If neighboring points not available, reject both points
  22547 c               -------------------------------------------------------
  22548                 if(vspd_wo0.eq.amiss.and.vspd_wop1.eq.amiss) then
  22549 c
  22550                   c_qc(ii)(1:1) = 'V'
  22551                   if(c_qc(ii)(5:5).eq.'R') then
  22552                     c_qc(ii)(5:5) = 'i'
  22553                   else
  22554                     c_qc(ii)(5:5) = 'I'
  22555                   endif
  22556 c
  22557                   ll = ll + 1
  22558                   if(ll.gt.200) then
  22559                     write(io8,*) 'll limit exceeded--indx not saved!',
  22560      $                ii
  22561                   else
  22562                     indx_save(ll) = ii
  22563                     knt_bad = knt_bad + 1
  22564                   endif
  22565 c
  22566                   c_qc(iip1)(1:1) = 'V'
  22567                   if(c_qc(iip1)(5:5).eq.'R') then
  22568                     c_qc(iip1)(5:5) = 'i'
  22569                   else
  22570                     c_qc(iip1)(5:5) = 'I'
  22571                   endif
  22572 c
  22573                   ll = ll + 1
  22574                   if(ll.gt.200) then
  22575                     write(io8,*) 'll limit exceeded--indx not saved!',

Page 486         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  22576      $                iip1
  22577                   else
  22578                     indx_save(ll) = iip1
  22579                     knt_bad = knt_bad + 1
  22580                     last_bad = iip1
  22581                     last_bad_m1 = ii
  22582 c                    uwind_last = uwindp1
  22583 c                    vwind_last = vwindp1
  22584                     wspd_last = ob_spd(iip1)
  22585                     wdir_last = ob_dir(iip1)
  22586                   endif
  22587 c
  22588                   iob = iob + 1
  22589                   l_ii_pspd_ok = .false.
  22590 c
  22591                   l_print = .true.
  22592                   if(l_print) then
  22593                     write(io8,*)
  22594                     write(io8,*) 'Vertical speed--',vspdp1,
  22595      $                           '--too high in report--',ii
  22596                     write(io8,*) 'Rejecting both points'
  22597                   endif
  22598 c
  22599 c               Check if ii report is a position report
  22600 c               (rejects not saved for second flight check)
  22601 c               -------------------------------------------
  22602                 elseif(idt_difp1.le.60.and.
  22603      $                 ((itype(ii).eq.i_mdcrs.and.
  22604      $                   (itype(iip1).eq.i_mdcrs_asc.or.
  22605      $                    itype(iip1).eq.i_mdcrs_des.or.
  22606      $                    itype(iip1).eq.i_mdcrs_lvl)).or.
  22607      $                  (itype(ii).eq.i_acars.and.
  22608      $                   (itype(iip1).eq.i_acars_asc.or.
  22609      $                    itype(iip1).eq.i_acars_des.or.
  22610      $                    itype(iip1).eq.i_acars_lvl)))) then
  22611 c
  22612                   c_qc(ii)(2:2) = 'I'
  22613 c
  22614                   iob = iob + 1
  22615                   l_ii_pspd_ok = .false.
  22616 c
  22617                   if(c_acftreg(ii)(4:5).eq.'GU'.or.
  22618      $               c_acftreg(ii)(4:5).eq.'WU') then
  22619                     l_print = .false.
  22620                   else
  22621                     l_print = .true.
  22622                   endif
  22623 c
  22624                   if(l_print) then
  22625                     write(io8,*)
  22626                     write(io8,*) 'Vertical speed--',vspdp1,
  22627      $                           '--too high in report--',ii
  22628                     write(io8,*) 'Is ii a position report?'
  22629                   endif
  22630 c
  22631 c               Check if iip1 report is a position report
  22632 c               (rejects not saved for second flight check)

Page 487         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  22633 c               ---------------------------------------------
  22634                 elseif(idt_difp1.le.60.and.
  22635      $                 ((itype(iip1).eq.i_mdcrs.and.
  22636      $                   (itype(ii).eq.i_mdcrs_asc.or.
  22637      $                    itype(ii).eq.i_mdcrs_des.or.
  22638      $                    itype(ii).eq.i_mdcrs_lvl)).or.
  22639      $                  (itype(iip1).eq.i_acars.and.
  22640      $                   (itype(ii).eq.i_acars_asc.or.
  22641      $                    itype(ii).eq.i_acars_des.or.
  22642      $                    itype(ii).eq.i_acars_lvl)))) then
  22643 c
  22644                   c_qc(iip1)(2:2) = 'I'
  22645 c
  22646                   l_ii_pspd_ok = .false.
  22647 c
  22648                   if(c_acftreg(iip1)(4:5).eq.'GU'.or.
  22649      $               c_acftreg(iip1)(4:5).eq.'WU') then
  22650                     l_print = .false.
  22651                   else
  22652                     l_print = .true.
  22653                   endif
  22654 c
  22655                   if(l_print) then
  22656                     write(io8,*)
  22657                     write(io8,*) 'Vertical speed--',vspdp1,
  22658      $                           '--too high in report--',ii
  22659                     write(io8,*) 'Is iip1 a position report?'
  22660                   endif
  22661 cc
  22662 cc               Check if ii manAIREP yielded a too-high speed
  22663 cc               ---------------------------------------------
  22664 c                elseif(l_ii_man_airep.and.(.not.l_iip1_man_airep)) then
  22665 cc
  22666 c                  c_qc(ii)(1:1) = 'V'
  22667 c                  if(c_qc(ii)(5:5).eq.'R') then
  22668 c                    c_qc(ii)(5:5) = 'i'
  22669 c                  else
  22670 c                    c_qc(ii)(5:5) = 'I'
  22671 c                  endif
  22672 c                  iob = iob + 1
  22673 c                  l_ii_pspd_ok = .false.
  22674 cc
  22675 c                  l_print = .true.
  22676 c                  if(l_print) then
  22677 c                    write(io8,*)
  22678 c                    write(io8,*) 'Vertical speed--',vspdp1,
  22679 c     $                           '--too high in report--',ii
  22680 c                    write(io8,*) 'manAIREP ii does not fit'
  22681 c                  endif
  22682 cc
  22683 cc               Check if iip1 manAIREP yielded a too-high speed
  22684 cc               -----------------------------------------------
  22685 c                elseif(l_iip1_man_airep.and.(.not.l_ii_man_airep)) then
  22686 cc
  22687 c                  c_qc(iip1)(1:1) = 'V'
  22688 c                  if(c_qc(iip1)(5:5).eq.'R') then
  22689 c                    c_qc(iip1)(5:5) = 'i'

Page 488         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  22690 c                  else
  22691 c                    c_qc(iip1)(5:5) = 'I'
  22692 c                  endif
  22693 c                  l_ii_pspd_ok = .false.
  22694 cc
  22695 c                  l_print = .true.
  22696 c                  if(l_print) then
  22697 c                    write(io8,*)
  22698 c                    write(io8,*) 'Vertical speed--',vspdp1,
  22699 c     $                           '--too high in report--',ii
  22700 c                    write(io8,*) 'manAIREP iip1 does not fit'
  22701 c                  endif
  22702 c
  22703 c               Check if iip1 and iip2 points are from a different flight
  22704 c               ---------------------------------------------------------
  22705                 elseif(vspd0.ne.amiss.and.vspdp2.ne.amiss.and.
  22706      $                 abs(vspd0).lt.vspd_thresh*2.0/3.0.and.
  22707      $                 abs(vspdp2).lt.vspd_thresh*2.0/3.0.and.
  22708      $                 abs(vspd_wo0).gt.vspd_thresh*2.0/3.0.and.
  22709      $                 abs(vspd_wop1).gt.vspd_thresh*2.0/3.0) then
  22710 c     $                 abs(vspd_wo0)-abs(vspd0).gt.50.0.and.
  22711 c     $                 abs(vspd_wop1)-abs(vspdp2).gt.50.0) then
  22712 c
  22713                   c_qc(iip1)(1:1) = 'V'
  22714                   if(c_qc(iip1)(5:5).eq.'R') then
  22715                     c_qc(iip1)(5:5) = 'i'
  22716                   else
  22717                     c_qc(iip1)(5:5) = 'I'
  22718                   endif
  22719                   ll = ll + 1
  22720                   if(ll.gt.200) then
  22721                     write(io8,*) 'll limit exceeded--indx not saved!',
  22722      $                iip1
  22723                   else
  22724                     indx_save(ll) = iip1
  22725                     knt_bad = knt_bad + 1
  22726                   endif
  22727 c
  22728                   c_qc(iip2)(1:1) = 'V'
  22729                   if(c_qc(iip2)(5:5).eq.'R') then
  22730                     c_qc(iip2)(5:5) = 'i'
  22731                   else
  22732                     c_qc(iip2)(5:5) = 'I'
  22733                   endif
  22734                   ll = ll + 1
  22735                   if(ll.gt.200) then
  22736                     write(io8,*) 'll limit exceeded--indx not saved!',
  22737      $                iip2
  22738                   else
  22739                     indx_save(ll) = iip2
  22740                     knt_bad = knt_bad + 1
  22741                     last_bad = iip2
  22742                     last_bad_m1 = iip1
  22743 c                    uwind_last = uwindp2
  22744 c                    vwind_last = vwindp2
  22745                     wspd_last = ob_spd(iip2)
  22746                     wdir_last = ob_dir(iip2)

Page 489         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  22747                   endif
  22748 c
  22749                   l_ii_pspd_ok = .false.
  22750 c
  22751                   l_print = .true.
  22752                   if(l_print) then
  22753                     write(io8,*)
  22754                     write(io8,*) 'Vertical speed--',vspdp1,
  22755      $                           '--too high in report--',ii
  22756                     write(io8,*) 'iip1 and iip2 reports from new flight'
  22757                   endif
  22758 c
  22759 c               Check if ii is problem point by other vertical speeds
  22760 c               -----------------------------------------------------
  22761                 elseif((vspd0.ne.amiss.and.vspdp2.ne.amiss.and.
  22762      $                  vspd_wo0.ne.amiss.and.vspd_wop1.ne.amiss.and.
  22763      $                  abs(vspdp2).lt.vspd_thresh*2.0/3.0.and.
  22764      $                  (abs(vspd0).gt.vspd_thresh*2.0/3.0.or.
  22765      $                   abs(vspd_wop1)-abs(vspd_wo0).gt.50.0)).or.
  22766      $                 (vspd0.ne.amiss.and.vspd_wo0.ne.amiss.and.
  22767      $                  abs(vspd0).gt.vspd_thresh*2.0/3.0.and.
  22768      $                  abs(vspd_wo0).lt.vspd_thresh*2.0/3.0).or.
  22769      $                 (vspdp2.ne.amiss.and.vspd_wop1.ne.amiss.and.
  22770      $                  abs(vspdp2).lt.vspd_thresh*2.0/3.0.and.
  22771      $                  abs(vspd_wop1).gt.vspd_thresh*2.0/3.0)) then
  22772 c     $                  abs(vspdp2).lt.vspd_thresh*2.0/3.0.and.
  22773 c     $                  (abs(vspd0).gt.vspd_thresh*2.0/3.0.or.
  22774 c     $                   abs(abs(vspd_wop1)-abs(vspd_wo0)).gt.50.0)).or.
  22775 c     $                 (vspd0.ne.amiss.and.vspd_wo0.ne.amiss.and.
  22776 c     $                  (abs(vspd0).gt.vspd_thresh*2.0/3.0.or.
  22777 c     $                   abs(abs(vspd0)-abs(vspd_wo0)).gt.50.0)).or.
  22778 c     $                 (vspdp2.ne.amiss.and.vspd_wop1.ne.amiss.and.
  22779 c     $                  abs(vspdp2).lt.vspd_thresh*2.0/3.0.and.
  22780 c     $                  (abs(vspd_wop1).gt.vspd_thresh*2.0/3.0.or.
  22781 c     $                   abs(abs(vspd_wop1)-abs(vspdp2)).gt.50.0))) then
  22782 c
  22783                   c_qc(ii)(1:1) = 'V'
  22784                   if(c_qc(ii)(5:5).eq.'R') then
  22785                     c_qc(ii)(5:5) = 'i'
  22786                   else
  22787                     c_qc(ii)(5:5) = 'I'
  22788                   endif
  22789                   ll = ll + 1
  22790                   if(ll.gt.200) then
  22791                     write(io8,*) 'll limit exceeded--indx not saved!',
  22792      $                ii
  22793                   else
  22794                     indx_save(ll) = ii
  22795                     knt_bad = knt_bad + 1
  22796                     last_bad = ii
  22797                     last_bad_m1 = iim1
  22798 c                    uwind_last = uwind0
  22799 c                    vwind_last = vwind0
  22800                     wspd_last = ob_spd(ii)
  22801                     wdir_last = ob_dir(ii)
  22802                   endif
  22803 c

Page 490         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  22804                   iob = iob + 1
  22805                   l_ii_pspd_ok = .false.
  22806 c
  22807                   l_print = .true.
  22808                   if(l_print) then
  22809                     write(io8,*)
  22810                     write(io8,*) 'Vertical speed--',vspdp1,
  22811      $                           '--too high in report--',ii
  22812                     write(io8,*) 'ii is problem point'
  22813                   endif
  22814 c
  22815 c               Check if iip1 is problem point by other vertical speeds
  22816 c               -------------------------------------------------------
  22817                 elseif((vspd0.ne.amiss.and.vspdp2.ne.amiss.and.
  22818      $                  vspd_wo0.ne.amiss.and.vspd_wop1.ne.amiss.and.
  22819      $                  abs(vspd0).lt.vspd_thresh*2.0/3.0.and.
  22820      $                  (abs(vspdp2).gt.vspd_thresh*2.0/3.0.or.
  22821      $                   abs(vspd_wo0)-abs(vspd_wop1).gt.50.0)).or.
  22822      $                 (vspdp2.ne.amiss.and.vspd_wop1.ne.amiss.and.
  22823      $                  (abs(vspdp2).gt.vspd_thresh*2.0/3.0.and.
  22824      $                   abs(vspd_wop1).lt.vspd_thresh*2.0/3.0)).or.
  22825      $                 (vspd0.ne.amiss.and.vspd_wo0.ne.amiss.and.
  22826      $                  abs(vspd0).lt.vspd_thresh*2.0/3.0.and.
  22827      $                  abs(vspd_wo0).gt.vspd_thresh*2.0/3.0)) then
  22828 c     $                  abs(vspd0).lt.vspd_thresh*2.0/3.0.and.
  22829 c     $                  (abs(vspdp2).gt.vspd_thresh*2.0/3.0.or.
  22830 c     $                   abs(abs(vspd_wo0)-abs(vspd_wop1)).gt.50.0)).or.
  22831 c     $                 (vspdp2.ne.amiss.and.vspd_wop1.ne.amiss.and.
  22832 c     $                  (abs(vspdp2).gt.vspd_thresh*2.0/3.0.or.
  22833 c     $                   abs(abs(vspdp2)-abs(vspd_wop1)).gt.50.0)).or.
  22834 c     $                 (vspd0.ne.amiss.and.vspd_wo0.ne.amiss.and.
  22835 c     $                  abs(vspd0).lt.vspd_thresh*2.0/3.0.and.
  22836 c     $                  (abs(vspd_wo0).gt.vspd_thresh*2.0/3.0.or.
  22837 c     $                   abs(abs(vspd_wo0)-abs(vspd0)).gt.50.0))) then
  22838 c
  22839                   c_qc(iip1)(1:1) = 'V'
  22840                   if(c_qc(iip1)(5:5).eq.'R') then
  22841                     c_qc(iip1)(5:5) = 'i'
  22842                   else
  22843                     c_qc(iip1)(5:5) = 'I'
  22844                   endif
  22845                   ll = ll + 1
  22846                   if(ll.gt.200) then
  22847                     write(io8,*) 'll limit exceeded--indx not saved!',
  22848      $                iip1
  22849                   else
  22850                     indx_save(ll) = iip1
  22851                     knt_bad = knt_bad + 1
  22852                     last_bad = iip1
  22853                     last_bad_m1 = ii
  22854 c                    uwind_last = uwindp1
  22855 c                    vwind_last = vwindp1
  22856                     wspd_last = ob_spd(iip1)
  22857                     wdir_last = ob_dir(iip1)
  22858                   endif
  22859 c
  22860                   l_ii_pspd_ok = .false.

Page 491         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  22861 c
  22862                   l_print = .true.
  22863                   if(l_print) then
  22864                     write(io8,*)
  22865                     write(io8,*) 'Vertical speed--',vspdp1,
  22866      $                           '--too high in report--',ii
  22867                     write(io8,*) 'iip1 is problem point'
  22868                   endif
  22869 c
  22870 c               Handle remaining points
  22871 c               -----------------------
  22872                 else
  22873 c
  22874                   c_qc(ii)(1:1) = 'V'
  22875                   if(c_qc(ii)(5:5).eq.'R') then
  22876                     c_qc(ii)(5:5) = 'i'
  22877                   else
  22878                     c_qc(ii)(5:5) = 'I'
  22879                   endif
  22880 c
  22881                   ll = ll + 1
  22882                   if(ll.gt.200) then
  22883                     write(io8,*) 'll limit exceeded--indx not saved!',
  22884      $                ii
  22885                   else
  22886                     indx_save(ll) = ii
  22887                     knt_bad = knt_bad + 1
  22888                   endif
  22889 c
  22890                   c_qc(iip1)(1:1) = 'V'
  22891                   if(c_qc(iip1)(5:5).eq.'R') then
  22892                     c_qc(iip1)(5:5) = 'i'
  22893                   else
  22894                     c_qc(iip1)(5:5) = 'I'
  22895                   endif
  22896 c
  22897                   ll = ll + 1
  22898                   if(ll.gt.200) then
  22899                     write(io8,*) 'll limit exceeded--indx not saved!',
  22900      $                iip1
  22901                   else
  22902                     indx_save(ll) = iip1
  22903                     knt_bad = knt_bad + 1
  22904                     last_bad = iip1
  22905                     last_bad_m1 = ii
  22906 c                    uwind_last = uwindp1
  22907 c                    vwind_last = vwindp1
  22908                     wspd_last = ob_spd(iip1)
  22909                     wdir_last = ob_dir(iip1)
  22910                   endif
  22911 c
  22912                   iob = iob + 1
  22913                   l_ii_pspd_ok = .false.
  22914 c
  22915                   l_print = .true.
  22916                   if(l_print) then
  22917                     write(io8,*)

Page 492         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  22918                     write(io8,*) 'Vertical speed--',vspdp1,
  22919      $                           '--too high in report--',ii
  22920                     write(io8,*) 'Uncategorized report'
  22921                     write(io8,*) 'Rejecting both points'
  22922                   endif
  22923                 endif
  22924 c
  22925 c Check if neighboring points are not available
  22926 c If so, skip remaining tests
  22927 c ---------------------------------------------------
  22928               elseif(iim1.eq.0.and.iip2.eq.0) then
  22929 c
  22930                 c_qc(ii)(11:11)   = 'I'
  22931                 if(iip1.ne.0) c_qc(iip1)(11:11) = 'I'
  22932                 iob = iob + 1
  22933                 l_ii_pspd_ok = .false.
  22934 c
  22935                 l_print = .false.
  22936                 if(l_print) then
  22937                   write(io8,*)
  22938                   write(io8,*) 'Neighboring points not available',ii
  22939                 endif
  22940 c
  22941               elseif(iim2.eq.0.and.iip1.eq.0) then
  22942 c
  22943                 if(iim1.ne.0) c_qc(iim1)(11:11) = 'I'
  22944                 c_qc(ii)(11:11)   = 'I'
  22945                 iob = iob + 1
  22946                 l_ii_pspd_ok = .false.
  22947 c
  22948                 l_print = .false.
  22949                 if(l_print) then
  22950                   write(io8,*)
  22951                   write(io8,*) 'Neighboring points not available',ii
  22952                 endif
  22953 c
  22954 c Check for anomalous points at the beginnings of ascents
  22955 c -------------------------------------------------------
  22956               elseif(iip1.ne.0.and.iip2.ne.0.and.
  22957      $               (iim1.eq.0.or.
  22958      $                (iim1.ne.0.and.idt_dif0.gt.idt_near)).and.
  22959      $               idt_difp2.ne.imiss.and.idt_difp2.le.idt_updn.and.
  22960      $               idt_difp1.ne.imiss.and.idt_difp1.le.idt_updn.and.
  22961      $               ht_ft0.lt.10000.0.and.
  22962      $               abs(ht_difp1).gt.htdif_same/2.0.and.
  22963      $               ht_ft0 .gt.ht_ftp1.and.
  22964      $               ht_ftp1.lt.ht_ftp2) then
  22965 c
  22966                 if(c_qc(ii)(5:5).eq.'R') then
  22967                   c_qc(ii)(5:5) = 'i'
  22968                 else
  22969                   c_qc(ii)(5:5) = 'I'
  22970                 endif
  22971                 iob = iob + 1
  22972                 l_ii_pspd_ok = .false.
  22973 c
  22974                 l_print = .true.

Page 493         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  22975                 if(l_print) then
  22976                   write(io8,*) 
  22977                   write(io8,*) 'Anomalous point before ascent'
  22978                 endif
  22979 c
  22980 c Check for anomalous points at the ends of descents
  22981 c --------------------------------------------------
  22982               elseif(iim2.ne.0.and.iim1.ne.0.and.
  22983      $               (iip1.eq.0.or.
  22984      $                (iip1.ne.0.and.idt_difp1.gt.idt_near)).and.
  22985      $               idt_difm1.ne.imiss.and.idt_difm1.le.idt_updn.and.
  22986      $               idt_dif0.ne.imiss.and.idt_dif0.le.idt_updn.and.
  22987      $               ht_ft0.lt.10000.0.and.
  22988      $               abs(ht_dif0).gt.htdif_same/2.0.and.
  22989      $               ht_ftm2.gt.ht_ftm1.and.
  22990      $               ht_ftm1.lt.ht_ft0 ) then
  22991 c
  22992                 if(c_qc(ii)(5:5).eq.'R') then
  22993                   c_qc(ii)(5:5) = 'i'
  22994                 else
  22995                   c_qc(ii)(5:5) = 'I'
  22996                 endif
  22997                 iob = iob + 1
  22998                 l_ii_pspd_ok = .false.
  22999 c
  23000                 l_print = .false.
  23001                 if(l_print) then
  23002                   write(io8,*) 
  23003                   write(io8,*) 'Anomalous point after descent'
  23004                 endif
  23005 c
  23006 c Check for isolated off-track points at beginning of track
  23007 c Use ii, iip1, iip2 points          
  23008 c ---------------------------------------------------------
  23009               elseif(iip1.ne.0.and.iip2.ne.0.and.
  23010      $               (iim1.eq.0.or.
  23011      $                idt_dif0.eq.imiss.or.
  23012      $                (idt_dif0.ne.imiss.and.
  23013      $                 ((.not.(l_ii_man_airep.and.l_iim1_man_airep).and.
  23014      $                   idt_dif0.gt.idt_near*2).or.
  23015      $                  (l_ii_man_airep.and.l_iim1_man_airep.and.
  23016      $                   idt_dif0.gt.idt_near*4)))).and.
  23017      $               (idt_difp1.ne.imiss.and.
  23018      $                (idt_difp1.le.idt_near*2.or.
  23019      $                 (l_ii_man_airep.and.l_iip1_man_airep.and.
  23020      $                  idt_difp1.le.idt_near*4))).and.
  23021      $               (idt_difp2.ne.imiss.and.
  23022      $                (idt_difp2.le.idt_near*2.or.
  23023      $                 (l_iip1_man_airep.and.l_iip2_man_airep.and.
  23024      $                  idt_difp2.le.idt_near*4))).and.
  23025      $               pdirp1.ne.amiss.and.
  23026      $               pdirp2.ne.amiss.and.
  23027      $               pdirp3.ne.amiss.and.
  23028      $               pdir_wop2.ne.amiss.and.
  23029      $               distp2.gt.50.0.and.
  23030      $               distp3.gt.50.0.and.
  23031      $               distp2.gt.dist_wop2.and.

Page 494         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  23032      $               distp3.gt.dist_wop2.and.
  23033      $               cos((pdirp1-pdirp2)*d2r).lt.0.5.and.
  23034      $               ((cos((pdirp2-pdirp3   )*d2r).lt.-0.5.and.
  23035      $                 cos((pdirp1-pdir_wop2)*d2r).gt.0.5).or.  
  23036 c     $                (cos((pdirp2-pdirp3   )*d2r).lt.0.25881904.and.
  23037      $                 cos((pdirp1-pdir_wop2)*d2r).gt.0.70710678)) then  
  23038 c
  23039                 c_qc(iip2)(1:1) = 'O'
  23040                 c_qc(iip2)(3:4) = 'II'
  23041 c
  23042                 l_ii_pspd_ok = .false.
  23043 c
  23044                 l_print = .true.
  23045                 if(l_print) then
  23046                   write(io8,*) 
  23047                   write(io8,*) 'Isolated off-track pt--iip2 = ',iip2
  23048                 endif
  23049 c 
  23050               elseif(iip1.ne.0.and.iip2.ne.0.and.
  23051      $               (iim1.eq.0.or.
  23052      $                idt_dif0.eq.imiss.or.
  23053      $                (idt_dif0.ne.imiss.and.
  23054      $                 ((.not.(l_ii_man_airep.and.l_iim1_man_airep).and.
  23055      $                   idt_dif0.gt.idt_near*2).or.
  23056      $                  (l_ii_man_airep.and.l_iim1_man_airep.and.
  23057      $                   idt_dif0.gt.idt_near*4)))).and.
  23058      $               (idt_difp1.ne.imiss.and.
  23059      $                (idt_difp1.le.idt_near*2.or.
  23060      $                 (l_ii_man_airep.and.l_iip1_man_airep.and.
  23061      $                  idt_difp1.le.idt_near*4))).and.
  23062      $               (idt_difp2.ne.imiss.and.
  23063      $                (idt_difp2.le.idt_near*2.or.
  23064      $                 (l_iip1_man_airep.and.l_iip2_man_airep.and.
  23065      $                  idt_difp2.le.idt_near*4))).and.
  23066      $               pdir0 .ne.amiss.and.
  23067      $               pdirp1.ne.amiss.and.
  23068      $               pdirp2.ne.amiss.and.
  23069      $               pdir_wop1.ne.amiss.and.
  23070      $               distp1.gt.50.0.and.
  23071      $               distp2.gt.50.0.and.
  23072      $               distp1.gt.dist_wop1.and.
  23073      $               distp2.gt.dist_wop1.and.
  23074      $               ((cos((pdirp1-pdirp2   )*d2r).lt.-0.5.and.
  23075      $                 cos((pdir0 -pdir_wop1)*d2r).gt.0.5).or.  
  23076 c     $                (cos((pdirp1-pdirp2   )*d2r).lt.0.25881904.and.
  23077      $                 cos((pdir0 -pdir_wop1)*d2r).gt.0.70710678)) then
  23078 c
  23079                 c_qc(iip1)(1:1) = 'O'
  23080                 c_qc(iip1)(3:4) = 'II'
  23081 c
  23082                 l_ii_pspd_ok = .false.
  23083 c
  23084                 l_print = .true.
  23085                 if(l_print) then
  23086                   write(io8,*) 
  23087                   write(io8,*) 'Isolated off-track pt--iip1 = ',iip1
  23088                 endif

Page 495         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  23089 c
  23090 c Check for isolated off-track points in middle of track
  23091 c Use iim1, ii, iip1 points
  23092 c ------------------------------------------------------
  23093               elseif(iim1.ne.0.and.iip1.ne.0.and.iip2.ne.0.and.
  23094      $               (idt_dif0.ne.imiss.and.
  23095      $                (idt_dif0 .le.idt_near*2.or.
  23096      $                 (l_ii_man_airep.and.l_iim1_man_airep.and.
  23097      $                  idt_dif0 .le.idt_near*4))).and.
  23098      $               (idt_difp1.ne.imiss.and.
  23099      $                (idt_difp1.le.idt_near*2.or.
  23100      $                 (l_ii_man_airep.and.l_iip1_man_airep.and.
  23101      $                  idt_difp1.le.idt_near*4))).and.
  23102      $               pdir0 .ne.amiss.and.
  23103      $               pdirp1.ne.amiss.and.
  23104      $               pdirm1.ne.amiss.and.
  23105      $               pdir_wo0.ne.amiss.and.
  23106      $               dist0.gt.50.0.and.
  23107      $               distp1.gt.50.0.and.
  23108      $               dist0.gt.dist_wo0.and.
  23109      $               distp1.gt.dist_wo0.and.
  23110      $               ((cos((pdir0 -pdirp1  )*d2r).lt.-0.5.and.
  23111      $                 cos((pdirm1-pdir_wo0)*d2r).gt.0.5).or.
  23112 c     $                (cos((pdir0 -pdirp1  )*d2r).lt.0.25881904.and.
  23113      $                 cos((pdirm1-pdir_wo0)*d2r).gt.0.70710678)) then  
  23114 c
  23115                 c_qc(ii)(1:1) = 'O'
  23116                 c_qc(ii)(3:4) = 'II'
  23117 c
  23118                 iob = iob - 1
  23119                 l_ii_pspd_ok = .false.
  23120 c
  23121                 l_print = .true.
  23122                 if(l_print) then
  23123                   write(io8,*) 
  23124                   write(io8,*) 'Isolated off-track pt--ii = ',ii
  23125                 endif
  23126 c
  23127 c Increment counters if no errors are found
  23128 c -----------------------------------------
  23129               else
  23130                 iob = iob + 1
  23131                 l_ii_pspd_ok = .false.
  23132               endif
  23133 c
  23134 c Write reports used in testing if desired
  23135 c ----------------------------------------
  23136               if(l_print) then
  23137                 write(io8,'(a18,2i6,a18,2i6)')
  23138      $            ' iistart,iiend  = ',iistart,iiend,
  23139      $            ' iifirst,iilast = ',iifirst,iilast
  23140                 write(io8,'(''       '',12a10)') 
  23141      $            'iim2','iim1','ii','wo0',
  23142      $            'iip1','wop1','iip2','wop2','iip3',
  23143      $            'bad0','badp1','track'
  23144                 write(io8,'(''indices'',3i10,3(10x,i10))') 
  23145      $            iim2,iim1,ii,

Page 496         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  23146      $            iip1,iip2,iip3
  23147                 write(io8,'(''dist = '',12f10.2)') 
  23148      $            distm2,distm1,dist0,dist_wo0,
  23149      $            distp1,dist_wop1,distp2,dist_wop2,distp3,
  23150      $            dist_bad0,dist_badp1,dist_track
  23151 c                write(io8,'(''udis = '',12f10.2)') 
  23152 c     $            udistm2/1000.,udistm1/1000.,udist0/1000.,
  23153 c     $            udist_wo0/1000.,udistp1/1000.,udist_wop1/1000.,
  23154 c     $            udistp2/1000.,udist_wop2/1000.,udistp3/1000.,
  23155 c     $            udist_bad0/1000.,udist_badp1/1000.,udist_track/1000.
  23156 c                write(io8,'(''vdis = '',12f10.2)') 
  23157 c     $            vdistm2/1000.,vdistm1/1000.,vdist0/1000.,
  23158 c     $            vdist_wo0/1000.,vdistp1/1000.,vdist_wop1/1000.,
  23159 c     $            vdistp2/1000.,vdist_wop2/1000.,vdistp3/1000.,
  23160 c     $            vdist_bad0/1000.,vdist_badp1/1000.,vdist_track/1000.
  23161                 write(io8,'(''ht_d = '',12f10.2)') 
  23162      $            ht_difm2,ht_difm1,ht_dif0,ht_dif_wo0,
  23163      $            ht_difp1,ht_dif_wop1,ht_difp2,ht_dif_wop2,ht_difp3,
  23164      $            ht_dif_bad0,ht_dif_badp1,ht_dif_track
  23165 c                write(io8,'(''uwnd = '',3f10.2,3(10x,f10.2),)') 
  23166 c     $            uwindm2,uwindm1,uwind0,
  23167 c     $            uwindp1,uwindp2,uwindp3
  23168 c                write(io8,'(''vwnd = '',3f10.2,3(10x,f10.2),)') 
  23169 c     $            vwindm2,vwindm1,vwind0,
  23170 c     $            vwindp1,vwindp2,vwindp3
  23171 c                write(io8,'(''upsp = '',12f10.2)') 
  23172 c     $            upspdm2,upspdm1,upspd0,upspd_wo0,
  23173 c     $            upspdp1,upspd_wop1,upspdp2,upspd_wop2,upspdp3,
  23174 c     $            upspd_bad0,upspd_badp1,upspd_track
  23175 c                write(io8,'(''vpsp = '',12f10.2)') 
  23176 c     $            vpspdm2,vpspdm1,vpspd0,vpspd_wo0,
  23177 c     $            vpspdp1,vpspd_wop1,vpspdp2,vpspd_wop2,vpspdp3,
  23178 c     $            vpspd_bad0,vpspd_badp1,vpspd_track
  23179                 write(io8,'(''pspd = '',12f10.2)') 
  23180      $            pspdm2,pspdm1,pspd0,pspd_wo0,
  23181      $            pspdp1,pspd_wop1,pspdp2,pspd_wop2,pspdp3,
  23182      $            pspd_bad0,pspd_badp1,pspd_track
  23183                 write(io8,'(''pdir = '',12f10.2)') 
  23184      $            pdirm2,pdirm1,pdir0,pdir_wo0,
  23185      $            pdirp1,pdir_wop1,pdirp2,pdir_wop2,pdirp3,
  23186      $            pdir_bad0,pdir_badp1,pdir_track
  23187 c                write(io8,'(''uair = '',12f10.2)') 
  23188 c     $            uairspdm2,uairspdm1,uairspd0,uairspd_wo0,
  23189 c     $            uairspdp1,uairspd_wop1,uairspdp2,uairspd_wop2,
  23190 c     $            uairspdp3,uairspd_bad0,uairspd_badp1,uairspd_track
  23191 c                write(io8,'(''vair = '',12f10.2)') 
  23192 c     $            vairspdm2,vairspdm1,vairspd0,vairspd_wo0,
  23193 c     $            vairspdp1,vairspd_wop1,vairspdp2,vairspd_wop2,
  23194 c     $            vairspdp3,vairspd_bad0,vairspd_badp1,vairspd_track
  23195                 write(io8,'(''aspd = '',12f10.2)') 
  23196      $            airspdm2,airspdm1,airspd0,airspd_wo0,
  23197      $            airspdp1,airspd_wop1,airspdp2,airspd_wop2,airspdp3,
  23198      $            airspd_bad0,airspd_badp1,airspd_track
  23199 c                write(io8,'(''adir = '',12f10.2)') 
  23200 c     $            airdirm2,airdirm1,airdir0,airdir_wo0,
  23201 c     $            airdirp1,airdir_wop1,airdirp2,airdir_wop2,airdirp3,
  23202 c     $            airdir_bad0,airdir_badp1,airdir_track

Page 497         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  23203                 write(io8,'(''vspd = '',12f10.2)') 
  23204      $            vspdm2,vspdm1,vspd0,vspd_wo0,
  23205      $            vspdp1,vspd_wop1,vspdp2,vspd_wop2,vspdp3,
  23206      $            vspd_bad0,vspd_badp1,vspd_track
  23207 c
  23208                 if(iim2.ne.0) then
  23209                   write(io8,8002) kk,iim2
  23210      x,            c_insty_ob(itype(iim2))
  23211      x,            c_acftreg(iim2),c_acftid(iim2)
  23212      x,            idt(iim2),alat(iim2),alon(iim2)
  23213      x,            pres(iim2),ht_ft(iim2)
  23214      x,            t_prcn(iim2),ob_t(iim2),xiv_t(iim2),ichk_t(iim2)
  23215      x,            ob_q(iim2),xiv_q(iim2),ichk_q(iim2)
  23216      x,            ob_dir(iim2),xiv_d(iim2),ichk_d(iim2)
  23217      x,            ob_spd(iim2),xiv_s(iim2),ichk_s(iim2)
  23218      x,            c_qc(iim2)
  23219                 endif
  23220 c
  23221                 if(iim1.ne.0) then
  23222                   write(io8,8002) kk,iim1
  23223      x,            c_insty_ob(itype(iim1))
  23224      x,            c_acftreg(iim1),c_acftid(iim1)
  23225      x,            idt(iim1),alat(iim1),alon(iim1)
  23226      x,            pres(iim1),ht_ft(iim1)
  23227      x,            t_prcn(iim1),ob_t(iim1),xiv_t(iim1),ichk_t(iim1)
  23228      x,            ob_q(iim1),xiv_q(iim1),ichk_q(iim1)
  23229      x,            ob_dir(iim1),xiv_d(iim1),ichk_d(iim1)
  23230      x,            ob_spd(iim1),xiv_s(iim1),ichk_s(iim1)
  23231      x,            c_qc(iim1)
  23232                 endif
  23233 c
  23234                 write(io8,8002) kk,ii,c_insty_ob(itype(ii))
  23235      x,            c_acftreg(ii),c_acftid(ii)
  23236      x,            idt(ii),alat(ii),alon(ii)
  23237      x,            pres(ii),ht_ft(ii)
  23238      x,            t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
  23239      x,            ob_q(ii),xiv_q(ii),ichk_q(ii)
  23240      x,            ob_dir(ii),xiv_d(ii),ichk_d(ii)
  23241      x,            ob_spd(ii),xiv_s(ii),ichk_s(ii)
  23242      x,            c_qc(ii)
  23243 c
  23244                 if(iip1.ne.0) then
  23245                   write(io8,8002) kk,iip1
  23246      x,            c_insty_ob(itype(iip1))
  23247      x,            c_acftreg(iip1),c_acftid(iip1)
  23248      x,            idt(iip1),alat(iip1),alon(iip1)
  23249      x,            pres(iip1),ht_ft(iip1)
  23250      x,            t_prcn(iip1),ob_t(iip1),xiv_t(iip1),ichk_t(iip1)
  23251      x,            ob_q(iip1),xiv_q(iip1),ichk_q(iip1)
  23252      x,            ob_dir(iip1),xiv_d(iip1),ichk_d(iip1)
  23253      x,            ob_spd(iip1),xiv_s(iip1),ichk_s(iip1)
  23254      x,            c_qc(iip1)
  23255                 endif
  23256 c
  23257                 if(iip2.ne.0) then
  23258                   write(io8,8002) kk,iip2
  23259      x,            c_insty_ob(itype(iip2))

Page 498         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  23260      x,            c_acftreg(iip2),c_acftid(iip2)
  23261      x,            idt(iip2),alat(iip2),alon(iip2)
  23262      x,            pres(iip2),ht_ft(iip2)
  23263      x,            t_prcn(iip2),ob_t(iip2),xiv_t(iip2),ichk_t(iip2)
  23264      x,            ob_q(iip2),xiv_q(iip2),ichk_q(iip2)
  23265      x,            ob_dir(iip2),xiv_d(iip2),ichk_d(iip2)
  23266      x,            ob_spd(iip2),xiv_s(iip2),ichk_s(iip2)
  23267      x,            c_qc(iip2)
  23268                 endif
  23269 c
  23270  8002           format(i4,1x,i6,1x,a8,1x,a8,1x,a9,1x,i7,1x,2f11.5,1x
  23271      x,            f8.1,1x,f7.0
  23272      x,            1x,f5.2,4(2(1x,f8.2),1x,i5),1x,'!',a11,'!')
  23273               endif
  23274 c
  23275 c             Retest flight if specified
  23276 c             --------------------------
  23277               if(l_retest) goto 5500
  23278 c
  23279             endif
  23280           enddo
  23281 c
  23282 c If second flight found, save indices
  23283 c Don't save indices for stuck clock segments
  23284 c Don't redo check
  23285 c -------------------------------------------
  23286           ii = indx(istart)
  23287 c
  23288           if(knt_bad.gt.3.and.
  23289      $       .not.l_stuck.and.
  23290      $       c_acftid(ii)(9:9).ne.'z') then
  23291 c
  23292             write(io8,*)
  23293             write(io8,*) 'Second flight found--',knt_bad,'--reports'
  23294 c
  23295 c           Consolidate first flight
  23296 c           ------------------------
  23297             ll = 0
  23298             keep = istart-1
  23299 c
  23300             do iob=istart,iend
  23301               ii = indx(iob)
  23302 c
  23303 c             If report rejected...
  23304 c             ---------------------
  23305               if(c_qc(ii)(3:4).eq.'II'.or.
  23306      $           c_qc(ii)(5:5).eq.'I'.or.
  23307      $           c_qc(ii)(5:5).eq.'i') then
  23308 c
  23309 c                write(io8,*) 'Skipping report from 2nd flt',ii
  23310                 ll = ll + 1
  23311                 indx_save(ll) = ii
  23312 c
  23313 c             If report not rejected...
  23314 c             -------------------------
  23315               else
  23316 c                write(io8,*) 'Keeping report from 2nd flt',ii

Page 499         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  23317                 keep = keep + 1
  23318                 indx(keep) = indx(iob)
  23319 c
  23320               endif
  23321             enddo
  23322 c
  23323 c           Save second flight
  23324 c           ------------------
  23325             istart = keep + 1
  23326             knt_bad = ll
  23327             do ll=1,knt_bad
  23328 c
  23329               if(keep.gt.iend) then
  23330                 write(io8,*)
  23331                 write(io8,*) 'Keep exceeds iend!'
  23332 c
  23333               else                      
  23334 c                write(io8,*) 'Saving report from 2nd flt',
  23335 c     $            indx_save(ll)
  23336                 keep = keep + 1
  23337                 indx(keep) = indx_save(ll)
  23338                 ii = indx(keep)
  23339                 c_acftid(ii)(9:9) = 'z'
  23340               endif
  23341             enddo
  23342 c
  23343 c           Compute length of second flight
  23344 c           -------------------------------
  23345             ii = indx_save(1)
  23346             iip1 = indx_save(knt_bad)
  23347             dist_2ndflt = gcirc_qc(alat(ii  ),alon(ii  ),
  23348      $                             alat(iip1),alon(iip1))
  23349 c
  23350             write(io8,*) 'Second flight is ',dist_2ndflt,' m long'      !!! units fixed
  23351 c
  23352 c           Save second flight only if it is long enough
  23353 c           --------------------------------------------
  23354             if(dist_2ndflt.gt.100 000.0.and.
  23355 ! vvvvvDAK-future change perhaps to account for incr. lat/lon precision
  23356      $         alat(ii).ne.0.0.and.
  23357      $         alat(iip1).ne.0.0) then
  23358 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  23359 c
  23360               write(io8,*) 'Re-testing second flight'
  23361               write(io8,*)
  23362 c
  23363               do ll=1,knt_bad
  23364                 ii = indx_save(ll)
  23365 c
  23366 c               Reset QC flags
  23367 c               --------------
  23368                 if(c_qc(ii)(3:4).eq.'II') then
  23369                   c_qc(ii)(1:1) = '2'
  23370                   c_qc(ii)(3:4) = '..'
  23371 c
  23372                 elseif(c_qc(ii)(5:5).eq.'I') then
  23373                   c_qc(ii)(1:1) = '2'

Page 500         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  23374                   c_qc(ii)(5:5) = '.'
  23375 c
  23376                 elseif(c_qc(ii)(5:5).eq.'i') then
  23377                   c_qc(ii)(1:1) = '2'
  23378                   c_qc(ii)(5:5) = 'R'
  23379                 endif
  23380 c
  23381               enddo
  23382 c
  23383 c             Reset flight parameters for old flight
  23384 c             --------------------------------------
  23385               ntot_flt(kk) = ntot_flt(kk) - knt_bad
  23386 c
  23387 c             Go back and re-check flight
  23388 c             ---------------------------
  23389               goto 5500
  23390 c
  23391 c           Reset 9th character if second flight not saved
  23392 c           ----------------------------------------------
  23393             else
  23394               do ll=1,knt_bad
  23395                 ii = indx_save(ll)
  23396                 c_acftid(ii)(9:9) = ' '
  23397               enddo
  23398 c
  23399             endif
  23400           endif
  23401 c
  23402 c Perform second scan to check for odd manuevers
  23403 c ----------------------------------------------
  23404           iob = istart
  23405 c
  23406           knt_iob = 1
  23407           iob_sav = 0
  23408 c
  23409           knt_iip1_bad = 0
  23410 c
  23411 c Loop over reports for current flight
  23412 c ------------------------------------
  23413           do while(iob.le.iend)
  23414             l_print = .false.
  23415 c
  23416             knt0 = iob
  23417             ii = indx(iob)
  23418 c
  23419             if(iob.eq.iob_sav) then
  23420               knt_iob = knt_iob + 1
  23421             else
  23422               iob_sav = iob
  23423               knt_iob = 1
  23424             endif
  23425 c
  23426             if(knt_iob.gt.75) then
  23427               write(io8,*)
  23428               write(io8,*) 'Too many reps with the same iob',iob
  23429               write(io8,*) '  Sorted index ii = ',ii
  23430               write(io8,*) '  Number of reps = ',knt_iob

Page 501         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  23431               iob = iob + 1
  23432               knt_iip1_bad = 0
  23433               iob_sav = iob
  23434               knt_iob = 1
  23435 c
  23436 c            elseif(knt_iob.gt.10) then
  23437 c              write(io8,*)
  23438 c              write(io8,*) 'More than 10 reps with same iob',iob
  23439 c              write(io8,*) 'knt_iob = ',knt_iob
  23440 c              write(io8,'(a18,2i6,a18,2i6)')
  23441 c     $          ' iistart,iiend  = ',iistart,iiend,
  23442 c     $          ' iifirst,iilast = ',iifirst,iilast
  23443 c              write(io8,'(7x,12a10)') 
  23444 c     $          'iim2','iim1','ii','wo0',
  23445 c     $          'iip1','wop1','iip2','wop2','iip3',
  23446 c     $          'bad0','badp1','track'
  23447 c              write(io8,'(''indices'',3i10,3(10x,i10))') 
  23448 c     $          iim2,iim1,ii,
  23449 c     $          iip1,iip2,iip3
  23450 c              write(io8,'(''dist = '',12f10.2)') 
  23451 c     $          distm2,distm1,dist0,dist_wo0,
  23452 c     $          distp1,dist_wop1,distp2,dist_wop2,distp3,
  23453 c     $          dist_bad0,dist_badp1,dist_track
  23454 c              write(io8,'(''ht_d = '',12f10.2)') 
  23455 c     $          ht_difm2,ht_difm1,ht_dif0,ht_dif_wo0,
  23456 c     $          ht_difp1,ht_dif_wop1,ht_difp2,ht_dif_wop2,ht_difp3,
  23457 c     $          ht_dif_bad0,ht_dif_badp1,ht_dif_track
  23458 c              write(io8,'(''pspd = '',12f10.2)') 
  23459 c     $          pspdm2,pspdm1,pspd0,pspd_wo0,
  23460 c     $          pspdp1,pspd_wop1,pspdp2,pspd_wop2,pspdp3,
  23461 c     $          pspd_bad0,pspd_badp1,pspd_track
  23462 c              write(io8,'(''pdir = '',12f10.2)') 
  23463 c     $          pdirm2,pdirm1,pdir0,pdir_wo0,
  23464 c     $          pdirp1,pdir_wop1,pdirp2,pdir_wop2,pdirp3,
  23465 c     $          pdir_bad0,pdir_badp1,pdir_track
  23466 c
  23467 c              if(iim2.ne.0) then
  23468 c                write(io8,8002) kk,iim2
  23469 c     x,            c_insty_ob(itype(iim2))
  23470 c     x,            c_acftreg(iim2),c_acftid(iim2)
  23471 c     x,            idt(iim2),alat(iim2),alon(iim2)
  23472 c     x,            pres(iim2),ht_ft(iim2)
  23473 c     x,            t_prcn(iim2),ob_t(iim2),xiv_t(iim2),ichk_t(iim2)
  23474 c     x,            ob_q(iim2),xiv_q(iim2),ichk_q(iim2)
  23475 c     x,            ob_dir(iim2),xiv_d(iim2),ichk_d(iim2)
  23476 c     x,            ob_spd(iim2),xiv_s(iim2),ichk_s(iim2)
  23477 c     x,            c_qc(iim2)
  23478 c              endif
  23479 c
  23480 c              if(iim1.ne.0) then
  23481 c                write(io8,8002) kk,iim1
  23482 c     x,            c_insty_ob(itype(iim1))
  23483 c     x,            c_acftreg(iim1),c_acftid(iim1)
  23484 c     x,            idt(iim1),alat(iim1),alon(iim1)
  23485 c     x,            pres(iim1),ht_ft(iim1)
  23486 c     x,            t_prcn(iim1),ob_t(iim1),xiv_t(iim1),ichk_t(iim1)
  23487 c     x,            ob_q(iim1),xiv_q(iim1),ichk_q(iim1)

Page 502         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  23488 c     x,            ob_dir(iim1),xiv_d(iim1),ichk_d(iim1)
  23489 c     x,            ob_spd(iim1),xiv_s(iim1),ichk_s(iim1)
  23490 c     x,            c_qc(iim1)
  23491 c              endif
  23492 cc
  23493 c              write(io8,8002) kk,ii,c_insty_ob(itype(ii))
  23494 c     x,            c_acftreg(ii),c_acftid(ii)
  23495 c     x,            idt(ii),alat(ii),alon(ii)
  23496 c     x,            pres(ii),ht_ft(ii)
  23497 c     x,            t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
  23498 c     x,            ob_q(ii),xiv_q(ii),ichk_q(ii)
  23499 c     x,            ob_dir(ii),xiv_d(ii),ichk_d(ii)
  23500 c     x,            ob_spd(ii),xiv_s(ii),ichk_s(ii)
  23501 c     x,            c_qc(ii)
  23502 cc
  23503 c              if(iip1.ne.0) then
  23504 c                write(io8,8002) kk,iip1
  23505 c     x,            c_insty_ob(itype(iip1))
  23506 c     x,            c_acftreg(iip1),c_acftid(iip1)
  23507 c     x,            idt(iip1),alat(iip1),alon(iip1)
  23508 c     x,            pres(iip1),ht_ft(iip1)
  23509 c     x,            t_prcn(iip1),ob_t(iip1),xiv_t(iip1),ichk_t(iip1)
  23510 c     x,            ob_q(iip1),xiv_q(iip1),ichk_q(iip1)
  23511 c     x,            ob_dir(iip1),xiv_d(iip1),ichk_d(iip1)
  23512 c     x,            ob_spd(iip1),xiv_s(iip1),ichk_s(iip1)
  23513 c     x,            c_qc(iip1)
  23514 c              endif
  23515 cc
  23516 c              if(iip2.ne.0) then
  23517 c                write(io8,8002) kk,iip2
  23518 c     x,            c_insty_ob(itype(iip2))
  23519 c     x,            c_acftreg(iip2),c_acftid(iip2)
  23520 c     x,            idt(iip2),alat(iip2),alon(iip2)
  23521 c     x,            pres(iip2),ht_ft(iip2)
  23522 c     x,            t_prcn(iip2),ob_t(iip2),xiv_t(iip2),ichk_t(iip2)
  23523 c     x,            ob_q(iip2),xiv_q(iip2),ichk_q(iip2)
  23524 c     x,            ob_dir(iip2),xiv_d(iip2),ichk_d(iip2)
  23525 c     x,            ob_spd(iip2),xiv_s(iip2),ichk_s(iip2)
  23526 c     x,            c_qc(iip2)
  23527 c              endif
  23528 c
  23529             endif
  23530 c
  23531 c           Go to next report if ii index is invalid
  23532 c           ----------------------------------------
  23533             if(c_qc(ii)(1:1).eq.'d'.or.
  23534      $         c_qc(ii)(2:2).eq.'I'.or.
  23535      $         c_qc(ii)(2:2).eq.'K'.or.
  23536      $         c_qc(ii)(3:4).eq.'II'.or.
  23537      $         c_qc(ii)(5:5).eq.'I'.or.
  23538      $         c_qc(ii)(5:5).eq.'i'.or.
  23539      $         c_qc(ii)(11:11).eq.'I') then
  23540 c
  23541               iob = iob + 1
  23542               knt_iip1_bad = 0
  23543 c
  23544               l_print = .false.

Page 503         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  23545               if(l_print) then
  23546                 write(io8,*) 'Index invalid: ii = ',ii
  23547               endif
  23548 c
  23549 c           Check out ordering etc for valid indices
  23550 c           ----------------------------------------
  23551             else
  23552 c
  23553 c             Compute ii-1 index
  23554 c             if(iob.gt.istart)   iim1 = indx(iob-1)
  23555 c             --------------------------------------
  23556               iim1 = 0
  23557               knt1 = iob - 1
  23558 111           if(knt1.ge.istart) then
  23559                 iim1 = indx(knt1)
  23560                 if(c_qc(iim1)(1:1).eq.'d'.or.
  23561      $             c_qc(iim1)(2:2).eq.'I'.or.
  23562      $             c_qc(iim1)(2:2).eq.'K'.or.
  23563      $             c_qc(iim1)(3:4).eq.'II'.or.
  23564      $             c_qc(iim1)(5:5).eq.'I'.or.
  23565      $             c_qc(iim1)(5:5).eq.'i'.or.
  23566      $             c_qc(ii)(11:11).eq.'I') then
  23567                   knt1 = knt1 - 1
  23568                   goto 111
  23569                 endif
  23570               else
  23571                 iim1 = 0
  23572               endif
  23573 c
  23574 c             Compute ii-2 index
  23575 c             if(iob.gt.istart+1) iim2 = indx(iob-2)
  23576 c             --------------------------------------
  23577               iim2 = 0
  23578               knt2 = knt1 - 1
  23579 121           if(knt2.ge.istart) then
  23580                 iim2 = indx(knt2)
  23581                 if(c_qc(iim2)(1:1).eq.'d'.or.
  23582      $             c_qc(iim2)(2:2).eq.'I'.or.
  23583      $             c_qc(iim2)(2:2).eq.'K'.or.
  23584      $             c_qc(iim2)(3:4).eq.'II'.or.
  23585      $             c_qc(iim2)(5:5).eq.'I'.or.
  23586      $             c_qc(iim2)(5:5).eq.'i'.or.
  23587      $             c_qc(ii)(11:11).eq.'I') then
  23588                   knt2 = knt2 - 1
  23589                   goto 121
  23590                 endif
  23591               else
  23592                 iim2 = 0
  23593               endif
  23594 c
  23595 c             Compute ii-3 index
  23596 c             if(iob.gt.istart+2) iim3 = indx(iob-3)
  23597 c             --------------------------------------
  23598               iim3 = 0
  23599               knt5 = knt2 - 1
  23600 131           if(knt5.ge.istart) then
  23601                 iim3 = indx(knt5)

Page 504         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  23602                 if(c_qc(iim3)(1:1).eq.'d'.or.
  23603      $             c_qc(iim3)(2:2).eq.'I'.or.
  23604      $             c_qc(iim3)(2:2).eq.'K'.or.
  23605      $             c_qc(iim3)(3:4).eq.'II'.or.
  23606      $             c_qc(iim3)(5:5).eq.'I'.or.
  23607      $             c_qc(iim3)(5:5).eq.'i'.or.
  23608      $             c_qc(ii)(11:11).eq.'I') then
  23609                   knt5 = knt5 - 1
  23610                   goto 131
  23611                 endif
  23612               else
  23613                 iim3 = 0
  23614               endif
  23615 c
  23616 c             Compute ii+1 index
  23617 c             if(iob.lt.iend)   iip1 = indx(iob+1)
  23618 c             ------------------------------------
  23619               iip1 = 0
  23620               iobp1 = 0
  23621               knt3 = iob + 1
  23622 141           if(knt3.le.iend) then
  23623                 iip1 = indx(knt3)
  23624                 iobp1 = knt3
  23625                 if(c_qc(iip1)(1:1).eq.'d'.or.
  23626      $             c_qc(iip1)(2:2).eq.'I'.or.
  23627      $             c_qc(iip1)(2:2).eq.'K'.or.
  23628      $             c_qc(iip1)(3:4).eq.'II'.or.
  23629      $             c_qc(iip1)(5:5).eq.'I'.or.
  23630      $             c_qc(iip1)(5:5).eq.'i'.or.
  23631      $             c_qc(ii)(11:11).eq.'I') then
  23632                   knt3 = knt3 + 1
  23633                   goto 141
  23634                 endif
  23635               else
  23636                 iip1 = 0
  23637                 iobp1 = 0
  23638               endif
  23639 c
  23640 c             Compute ii+2 index
  23641 c             if(iob.lt.iend-1) iip2 = indx(iob+2)
  23642 c             ------------------------------------
  23643               iip2 = 0
  23644               iobp2 = 0
  23645               knt4 = knt3 + 1
  23646 151           if(knt4.le.iend) then
  23647                 iip2 = indx(knt4)
  23648                 iobp2 = knt4
  23649                 if(c_qc(iip2)(1:1).eq.'d'.or.
  23650      $             c_qc(iip2)(2:2).eq.'I'.or.
  23651      $             c_qc(iip2)(2:2).eq.'K'.or.
  23652      $             c_qc(iip2)(3:4).eq.'II'.or.
  23653      $             c_qc(iip2)(5:5).eq.'I'.or.
  23654      $             c_qc(iip2)(5:5).eq.'i'.or.
  23655      $             c_qc(ii)(11:11).eq.'I') then
  23656                   knt4 = knt4 + 1
  23657                   goto 151
  23658                 endif

Page 505         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  23659               else
  23660                 iip2 = 0
  23661                 iobp2 = 0
  23662               endif
  23663 c
  23664 c             Compute ii+3 index
  23665 c             if(iob.lt.iend-2) iip3 = indx(iob+3)
  23666 c             ------------------------------------
  23667               iip3 = 0
  23668               knt6 = knt4 + 1
  23669 161           if(knt6.le.iend) then
  23670                 iip3 = indx(knt6)
  23671                 if(c_qc(iip3)(1:1).eq.'d'.or.
  23672      $             c_qc(iip3)(2:2).eq.'I'.or.
  23673      $             c_qc(iip3)(2:2).eq.'K'.or.
  23674      $             c_qc(iip3)(3:4).eq.'II'.or.
  23675      $             c_qc(iip3)(5:5).eq.'I'.or.
  23676      $             c_qc(iip3)(5:5).eq.'i'.or.
  23677      $             c_qc(ii)(11:11).eq.'I') then
  23678                   knt6 = knt6 + 1
  23679                   goto 161
  23680                 endif
  23681               else
  23682                 iip3 = 0
  23683               endif
  23684 c
  23685 c             Determine if reports are manual AIREPs
  23686 c             --------------------------------------
  23687               l_ii_man_airep = .false.
  23688               if(itype(ii).eq.i_man_airep.or.
  23689      $           itype(ii).eq.i_man_Yairep) l_ii_man_airep = .true.
  23690 c 
  23691               l_iim1_man_airep = .false.
  23692               if(iim1.ne.0) then
  23693                if(itype(iim1).eq.i_man_airep.or.
  23694      $            itype(iim1).eq.i_man_Yairep) l_iim1_man_airep = .true.
  23695               endif
  23696 c 
  23697               l_iim2_man_airep = .false.
  23698               if(iim2.ne.0) then
  23699                 if(itype(iim2).eq.i_man_airep.or.
  23700      $            itype(iim2).eq.i_man_Yairep) l_iim2_man_airep = .true.
  23701               endif
  23702 c 
  23703               l_iim3_man_airep = .false.
  23704               if(iim3.ne.0) then
  23705                 if(itype(iim3).eq.i_man_airep.or.
  23706      $            itype(iim3).eq.i_man_Yairep) l_iim3_man_airep = .true.
  23707               endif
  23708 c 
  23709               l_iip1_man_airep = .false.
  23710               if(iip1.ne.0) then
  23711                 if(itype(iip1).eq.i_man_airep.or.
  23712      $            itype(iip1).eq.i_man_Yairep) l_iip1_man_airep = .true. 
  23713               endif
  23714 c 
  23715               l_iip2_man_airep = .false.

Page 506         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  23716               if(iip2.ne.0) then
  23717                 if(itype(iip2).eq.i_man_airep.or.
  23718      $            itype(iip2).eq.i_man_Yairep) l_iip2_man_airep = .true. 
  23719               endif
  23720 c
  23721 c             Set up temporary variables for ii point
  23722 c             ---------------------------------------
  23723               itype0 = itype(ii)
  23724               alat0 = alat(ii)
  23725               alon0 = alon(ii)
  23726               ht_ft0 = ht_ft(ii)
  23727               idt0 = idt(ii)
  23728 c
  23729 c              if(c_qc(ii)(7:8).ne.'..') then
  23730 c                uwind0 = amiss
  23731 c                vwind0 = amiss
  23732 c              else
  23733 c                uwind0 = -sin(ob_dir(ii)*d2r)*ob_spd(ii)
  23734 c                vwind0 = -cos(ob_dir(ii)*d2r)*ob_spd(ii)
  23735 c              endif
  23736 c
  23737 c             Set up temporary variables for iim1 point
  23738 c             -----------------------------------------
  23739               if(iim1.ne.0) then
  23740                 itypem1 = itype(iim1)
  23741                 alatm1 = alat(iim1)
  23742                 alonm1 = alon(iim1)
  23743 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  23744                 if(alon0.lt.90.0.and.alonm1.gt.270.0) 
  23745      $            alonm1 = 360.0 - alonm1
  23746                 if(alon0.gt.270.0.and.alonm1.lt.90.0) 
  23747      $            alonm1 = 360.0 + alonm1
  23748 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  23749                 ht_ftm1 = ht_ft(iim1)
  23750                 idtm1 = idt(iim1)
  23751 c
  23752 c                if(c_qc(iim1)(7:8).ne.'..') then
  23753 c                  uwindm1 = amiss
  23754 c                  vwindm1 = amiss
  23755 c                else
  23756 c                  uwindm1 = -sin(ob_dir(iim1)*d2r)*ob_spd(iim1)
  23757 c                  vwindm1 = -cos(ob_dir(iim1)*d2r)*ob_spd(iim1)
  23758 c                endif
  23759 c
  23760 c               Compute groundspeed vector components between ii and iim1 points
  23761 c               ----------------------------------------------------------------
  23762                 if(idt0.ne.imiss.and.idtm1.ne.imiss) then
  23763                   idt_dif0 = abs(idt0 - idtm1)
  23764                 else
  23765                   idt_dif0 = imiss
  23766                 endif
  23767 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  23768                 if(alat0 .ne.amiss.and.alon0 .ne.amiss.and.
  23769      $             alatm1.ne.amiss.and.alonm1.ne.amiss.and.
  23770 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  23771      $             idt_dif0.ne.imiss) then
  23772                   udist0 = gcirc_qc(alat(iim1),alon(iim1),

Page 507         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  23773      $                              alat(iim1),alon(ii  ))
  23774 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  23775                   if(sin((alon(ii)-alon(iim1))*d2r).lt.0.0)
  23776 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  23777      $              udist0 = -udist0
  23778                   vdist0 = gcirc_qc(alat(iim1),alon(iim1),
  23779      $                              alat(ii  ),alon(iim1))
  23780 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  23781                   if(sin((alat(ii)-alat(iim1))*d2r).lt.0.0)
  23782 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  23783      $              vdist0 = -vdist0
  23784                   dist0  = gcirc_qc(alat(iim1),alon(iim1),
  23785      $                              alat(ii  ),alon(ii  ))
  23786                   if(idt_dif0.gt.0) then
  23787                     upspd0 = udist0 / float(idt_dif0)
  23788                     vpspd0 = vdist0 / float(idt_dif0)
  23789                     pspd0  = dist0  / float(idt_dif0)
  23790                   else
  23791                     upspd0 = udist0 / float(idt_dif0+60)
  23792                     vpspd0 = vdist0 / float(idt_dif0+60)
  23793                     pspd0  = dist0  / float(idt_dif0+60)
  23794                   endif
  23795                   if(upspd0.eq.0.0.and.vpspd0.eq.0.0) then
  23796                     pdir0 = 0.0
  23797                   else
  23798                     pdir0 = atan2(upspd0,vpspd0) / d2r + 180.0
  23799                   endif
  23800                   dist0 = dist0 / 1000.0
  23801                 else
  23802                   udist0 = amiss
  23803                   vdist0 = amiss
  23804                   dist0  = amiss
  23805                   upspd0 = amiss
  23806                   vpspd0 = amiss
  23807                   pspd0  = amiss
  23808                   pdir0  = amiss
  23809                 endif
  23810 c
  23811                 if(ht_ft(ii).ne.amiss.and.ht_ft(iim1).ne.amiss) then
  23812                   ht_dif0  = ht_ft(ii) - ht_ft(iim1)
  23813                 else
  23814                   ht_dif0 = amiss
  23815                 endif
  23816 c
  23817               else
  23818                 itypem1 = imiss
  23819 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  23820                 alatm1 = amiss
  23821                 alonm1 = amiss
  23822 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  23823                 ht_ftm1 = amiss
  23824                 idtm1 = amiss
  23825 c                uwindm1 = amiss
  23826 c                vwindm1 = amiss
  23827 c
  23828                 idt_dif0 = imiss
  23829                 udist0 = amiss

Page 508         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  23830                 vdist0 = amiss
  23831                 dist0  = amiss
  23832                 upspd0 = amiss
  23833                 vpspd0 = amiss
  23834                 pspd0  = amiss
  23835                 pdir0  = amiss
  23836 c
  23837                 ht_dif0 = amiss
  23838               endif
  23839 c
  23840 c             Set up temporary variables for iim2 point
  23841 c             -----------------------------------------
  23842               if(iim2.ne.0) then
  23843                 alatm2 = alat(iim2)
  23844                 alonm2 = alon(iim2)
  23845 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  23846                 if(alon0.lt.90.0.and.alonm2.gt.270.0) 
  23847      $            alonm2 = 360.0 - alonm2
  23848                 if(alon0.gt.270.0.and.alonm2.lt.90.0) 
  23849      $            alonm2 = 360.0 + alonm2
  23850 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  23851                 ht_ftm2 = ht_ft(iim2)
  23852                 idtm2 = idt(iim2)
  23853 c
  23854 c                if(c_qc(iim2)(7:8).ne.'..') then
  23855 c                  uwindm2 = amiss
  23856 c                  vwindm2 = amiss
  23857 c                else
  23858 c                  uwindm2 = -sin(ob_dir(iim2)*d2r)*ob_spd(iim2)
  23859 c                  vwindm2 = -cos(ob_dir(iim2)*d2r)*ob_spd(iim2)
  23860 c                endif
  23861 c
  23862 c               Compute groundspeed vector components between iim2 and iim1 points
  23863 c               ------------------------------------------------------------------
  23864                 if(idtm1.ne.imiss.and.idtm2.ne.imiss) then
  23865                   idt_difm1 = abs(idtm1 - idtm2)
  23866                 else
  23867                   idt_difm1 = imiss
  23868                 endif
  23869 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  23870                 if(alatm2.ne.amiss.and.alonm2.ne.amiss.and.
  23871      $             alatm1.ne.amiss.and.alonm1.ne.amiss.and.
  23872 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  23873      $             idt_difm1.ne.imiss) then
  23874                   udistm1 = gcirc_qc(alat(iim2),alon(iim2),
  23875      $                               alat(iim2),alon(iim1))
  23876 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  23877                   if(sin((alon(iim1)-alon(iim2))*d2r).lt.0.0)
  23878 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  23879      $              udistm1 = -udistm1
  23880                   vdistm1 = gcirc_qc(alat(iim2),alon(iim2),
  23881      $                               alat(iim1),alon(iim2))
  23882 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  23883                   if(sin((alat(iim1)-alat(iim2))*d2r).lt.0.0)
  23884 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  23885      $              vdistm1 = -vdistm1
  23886                   distm1  = gcirc_qc(alat(iim2),alon(iim2),

Page 509         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  23887      $                               alat(iim1),alon(iim1))
  23888                   if(idt_difm1.gt.0) then
  23889                     upspdm1 = udistm1 / float(idt_difm1)
  23890                     vpspdm1 = vdistm1 / float(idt_difm1)
  23891                     pspdm1  = distm1  / float(idt_difm1)
  23892                   else
  23893                     upspdm1 = udistm1 / float(idt_difm1+60)
  23894                     vpspdm1 = vdistm1 / float(idt_difm1+60)
  23895                     pspdm1  = distm1  / float(idt_difm1+60)
  23896                   endif
  23897                   if(upspdm1.eq.0.0.and.vpspdm1.eq.0.0) then
  23898                     pdirm1 = 0.0
  23899                   else
  23900                     pdirm1 = atan2(upspdm1,vpspdm1) / d2r + 180.0
  23901                   endif
  23902                   distm1 = distm1 / 1000.0
  23903                 else
  23904                   udistm1 = amiss
  23905                   vdistm1 = amiss
  23906                   distm1  = amiss
  23907                   upspdm1 = amiss
  23908                   vpspdm1 = amiss
  23909                   pspdm1  = amiss
  23910                   pdirm1  = amiss
  23911                 endif
  23912 c
  23913                 if(ht_ft(iim2).ne.amiss.and.ht_ft(iim1).ne.amiss) then
  23914                   ht_difm1  = ht_ft(iim1) - ht_ft(iim2)
  23915                 else
  23916                   ht_difm1 = amiss
  23917                 endif
  23918 c
  23919               else
  23920 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  23921                 alatm2 = amiss
  23922                 alonm2 = amiss
  23923 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  23924                 ht_ftm2 = amiss
  23925                 idtm2 = amiss
  23926 c                uwindm2 = amiss
  23927 c                vwindm2 = amiss
  23928 c
  23929                 idt_difm1 = imiss
  23930                 udistm1 = amiss
  23931                 vdistm1 = amiss
  23932                 distm1  = amiss
  23933                 upspdm1 = amiss
  23934                 vpspdm1 = amiss
  23935                 pspdm1  = amiss
  23936                 pdirm1  = amiss
  23937 c
  23938                 ht_difm1 = amiss
  23939               endif
  23940 c
  23941 c             Set up temporary variables for iim3 point
  23942 c             -----------------------------------------
  23943               if(iim3.ne.0) then

Page 510         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  23944                 alatm3 = alat(iim3)
  23945                 alonm3 = alon(iim3)
  23946 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  23947                 if(alon0.lt.90.0.and.alonm3.gt.270.0) 
  23948      $            alonm3 = 360.0 - alonm3
  23949                 if(alon0.gt.270.0.and.alonm3.lt.90.0) 
  23950      $            alonm3 = 360.0 + alonm3
  23951 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  23952                 ht_ftm3 = ht_ft(iim3)
  23953                 idtm3 = idt(iim3)
  23954 c
  23955 c                if(c_qc(iim3)(7:8).ne.'..') then
  23956 c                  uwindm3 = amiss
  23957 c                  vwindm3 = amiss
  23958 c                else
  23959 c                  uwindm3 = -sin(ob_dir(iim3)*d2r)*ob_spd(iim3)
  23960 c                  vwindm3 = -cos(ob_dir(iim3)*d2r)*ob_spd(iim3)
  23961 c                endif
  23962 c
  23963 c               Compute groundspeed vector components between iim3 and iim2 points
  23964 c               ------------------------------------------------------------------
  23965                 if(idtm2.ne.imiss.and.idtm3.ne.imiss) then
  23966                   idt_difm2 = abs(idtm2 - idtm3)
  23967                 else
  23968                   idt_difm2 = imiss
  23969                 endif
  23970 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  23971                 if(alatm3.ne.amiss.and.alonm3.ne.amiss.and.
  23972      $             alatm2.ne.amiss.and.alonm2.ne.amiss.and.
  23973 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  23974      $             idt_difm2.ne.imiss) then
  23975                   udistm2 = gcirc_qc(alat(iim3),alon(iim3),
  23976      $                               alat(iim3),alon(iim2))
  23977 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  23978                   if(sin((alon(iim2)-alon(iim3))*d2r).lt.0.0)
  23979 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  23980      $              udistm2 = -udistm2
  23981                   vdistm2 = gcirc_qc(alat(iim3),alon(iim3),
  23982      $                               alat(iim2),alon(iim3))
  23983 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  23984                   if(sin((alat(iim2)-alat(iim3))*d2r).lt.0.0)
  23985 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  23986      $              vdistm2 = -vdistm2
  23987                   distm2  = gcirc_qc(alat(iim3),alon(iim3),
  23988      $                               alat(iim2),alon(iim2))
  23989                   if(idt_difm2.gt.0) then
  23990                     upspdm2 = udistm2 / float(idt_difm2)
  23991                     vpspdm2 = vdistm2 / float(idt_difm2)
  23992                     pspdm2  = distm2  / float(idt_difm2)
  23993                   else
  23994                     upspdm2 = udistm2 / float(idt_difm2+60)
  23995                     vpspdm2 = vdistm2 / float(idt_difm2+60)
  23996                     pspdm2  = distm2  / float(idt_difm2+60)
  23997                   endif
  23998                   if(upspdm2.eq.0.0.and.vpspdm2.eq.0.0) then
  23999                     pdirm2 = 0.0
  24000                   else

Page 511         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  24001                     pdirm2 = atan2(upspdm2,vpspdm2) / d2r + 180.0
  24002                   endif
  24003                   distm2 = distm2 / 1000.0
  24004                 else
  24005                   udistm2 = amiss
  24006                   vdistm2 = amiss
  24007                   distm2  = amiss
  24008                   upspdm2 = amiss
  24009                   vpspdm2 = amiss
  24010                   pspdm2  = amiss
  24011                   pdirm2  = amiss
  24012                 endif
  24013 c
  24014                 if(ht_ft(iim3).ne.amiss.and.ht_ft(iim2).ne.amiss) then
  24015                   ht_difm2  = ht_ft(iim2) - ht_ft(iim3)
  24016                 else
  24017                   ht_difm2 = amiss
  24018                 endif
  24019 c
  24020               else
  24021 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  24022                 alatm3 = amiss
  24023                 alonm3 = amiss
  24024 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  24025                 ht_ftm3 = amiss
  24026                 idtm3 = amiss
  24027 c                uwindm3 = amiss
  24028 c                vwindm3 = amiss
  24029 c
  24030                 idt_difm2 = imiss
  24031                 udistm2 = amiss
  24032                 vdistm2 = amiss
  24033                 distm2  = amiss
  24034                 upspdm2 = amiss
  24035                 vpspdm2 = amiss
  24036                 pspdm2  = amiss
  24037                 pdirm2  = amiss
  24038 c
  24039                 ht_difm2 = amiss
  24040               endif
  24041 c
  24042 c             Set up temporary variables for iip1 point
  24043 c             -----------------------------------------
  24044               if(iip1.ne.0) then
  24045                 itypep1 = itype(iip1)
  24046                 alatp1 = alat(iip1)
  24047                 alonp1 = alon(iip1)
  24048 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  24049                 if(alon0.lt.90.0.and.alonp1.gt.270.0) 
  24050      $            alonp1 = 360.0 - alonp1
  24051                 if(alon0.gt.270.0.and.alonp1.lt.90.0) 
  24052      $            alonp1 = 360.0 + alonp1
  24053 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  24054                 ht_ftp1 = ht_ft(iip1)
  24055                 idtp1 = idt(iip1)
  24056 c
  24057 c                if(c_qc(iip1)(7:8).ne.'..') then

Page 512         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  24058 c                  uwindp1 = amiss
  24059 c                  vwindp1 = amiss
  24060 c                else
  24061 c                  uwindp1 = -sin(ob_dir(iip1)*d2r)*ob_spd(iip1)
  24062 c                  vwindp1 = -cos(ob_dir(iip1)*d2r)*ob_spd(iip1)
  24063 c                endif
  24064 c
  24065 c               Compute groundspeed vector components between ii and iip1 points
  24066 c               ----------------------------------------------------------------
  24067                 if(idt0.ne.imiss.and.idtp1.ne.imiss) then
  24068                   idt_difp1 = abs(idt0 - idtp1)
  24069                 else
  24070                   idt_difp1 = imiss
  24071                 endif
  24072 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  24073                 if(alat0 .ne.amiss.and.alon0 .ne.amiss.and.
  24074      $             alatp1.ne.amiss.and.alonp1.ne.amiss.and.
  24075 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  24076      $             idt_difp1.ne.imiss) then
  24077                   udistp1 = gcirc_qc(alat(ii  ),alon(ii  ),
  24078      $                               alat(ii  ),alon(iip1))
  24079 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  24080                   if(sin((alon(iip1)-alon(ii))*d2r).lt.0.0)
  24081 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  24082      $              udistp1 = -udistp1
  24083                   vdistp1 = gcirc_qc(alat(ii  ),alon(ii  ),
  24084      $                               alat(iip1),alon(ii  ))
  24085 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  24086                   if(sin((alat(iip1)-alat(ii))*d2r).lt.0.0)
  24087 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  24088      $              vdistp1 = -vdistp1
  24089                   distp1  = gcirc_qc(alat(ii  ),alon(ii  ),
  24090      $                               alat(iip1),alon(iip1))
  24091                   if(idt_difp1.gt.0) then
  24092                     upspdp1 = udistp1 / float(idt_difp1)
  24093                     vpspdp1 = vdistp1 / float(idt_difp1)
  24094                     pspdp1  = distp1  / float(idt_difp1)
  24095                   else
  24096                     upspdp1 = udistp1 / float(idt_difp1+60)
  24097                     vpspdp1 = vdistp1 / float(idt_difp1+60)
  24098                     pspdp1  = distp1  / float(idt_difp1+60)
  24099                   endif
  24100                   if(upspdp1.eq.0.0.and.vpspdp1.eq.0.0) then
  24101                     pdirp1 = 0.0
  24102                   else
  24103                     pdirp1 = atan2(upspdp1,vpspdp1) / d2r + 180.0
  24104                   endif
  24105                   distp1 = distp1 / 1000.0
  24106                 else
  24107                   udistp1 = amiss
  24108                   vdistp1 = amiss
  24109                   distp1  = amiss
  24110                   upspdp1 = amiss
  24111                   vpspdp1 = amiss
  24112                   pspdp1  = amiss
  24113                   pdirp1  = amiss
  24114                 endif

Page 513         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  24115 c
  24116                 if(ht_ft(ii).ne.amiss.and.ht_ft(iip1).ne.amiss) then
  24117                   ht_difp1  = ht_ft(iip1) - ht_ft(ii)
  24118                 else
  24119                   ht_difp1 = amiss
  24120                 endif
  24121 c
  24122               else
  24123                 itypep1 = imiss
  24124 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  24125                 alatp1 = amiss
  24126                 alonp1 = amiss
  24127 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  24128                 ht_ftp1 = amiss
  24129                 idtp1 = amiss
  24130 c                uwindp1 = amiss
  24131 c                vwindp1 = amiss
  24132 c
  24133                 idt_difp1 = imiss
  24134                 udistp1 = amiss
  24135                 vdistp1 = amiss
  24136                 distp1  = amiss
  24137                 upspdp1 = amiss
  24138                 vpspdp1 = amiss
  24139                 pspdp1  = amiss
  24140                 pdirp1  = amiss
  24141 c
  24142                 ht_difp1 = amiss
  24143               endif
  24144 c
  24145 c             Set up temporary variables for iip2 point
  24146 c             -----------------------------------------
  24147               if(iip2.ne.0) then
  24148                 itypep2 = itype(iip2)
  24149                 alatp2 = alat(iip2)
  24150                 alonp2 = alon(iip2)
  24151 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  24152                 if(alon0.lt.90.0.and.alonp2.gt.270.0) 
  24153      $            alonp2 = 360.0 - alonp2
  24154                 if(alon0.gt.270.0.and.alonp2.lt.90.0) 
  24155      $            alonp2 = 360.0 + alonp2
  24156 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  24157                 ht_ftp2 = ht_ft(iip2)
  24158                 idtp2 = idt(iip2)
  24159 c
  24160 c                if(c_qc(iip2)(7:8).ne.'..') then
  24161 c                  uwindp2 = amiss
  24162 c                  vwindp2 = amiss
  24163 c                else
  24164 c                  uwindp2 = -sin(ob_dir(iip2)*d2r)*ob_spd(iip2)
  24165 c                  vwindp2 = -cos(ob_dir(iip2)*d2r)*ob_spd(iip2)
  24166 c                endif
  24167               else
  24168 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  24169                 alatp2 = amiss
  24170                 alonp2 = amiss
  24171 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision

Page 514         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  24172                 ht_ftp2 = amiss
  24173                 idtp2 = amiss
  24174 c                uwindp2 = amiss
  24175 c                vwindp2 = amiss
  24176               endif
  24177 c
  24178               if(iip2.ne.0.and.iip1.ne.0) then
  24179 c
  24180 c               Compute groundspeed vector components between iip1 and iip2 points
  24181 c               ------------------------------------------------------------------
  24182                 if(idtp1.ne.imiss.and.idtp2.ne.imiss) then
  24183                   idt_difp2 = abs(idtp1 - idtp2)
  24184                 else
  24185                   idt_difp2 = imiss
  24186                 endif
  24187 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  24188                 if(alatp1.ne.amiss.and.alonp1.ne.amiss.and.
  24189      $             alatp2.ne.amiss.and.alonp2.ne.amiss.and.
  24190 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  24191      $             idt_difp2.ne.imiss) then
  24192                   udistp2 = gcirc_qc(alat(iip1),alon(iip1),
  24193      $                               alat(iip1),alon(iip2))
  24194 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  24195                   if(sin((alon(iip2)-alon(iip1))*d2r).lt.0.0)
  24196 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  24197      $              udistp2 = -udistp2
  24198                   vdistp2 = gcirc_qc(alat(iip1),alon(iip1),
  24199      $                               alat(iip2),alon(iip1))
  24200 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  24201                   if(sin((alat(iip2)-alat(iip1))*d2r).lt.0.0)
  24202 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  24203      $              vdistp2 = -vdistp2
  24204                   distp2  = gcirc_qc(alat(iip1),alon(iip1),
  24205      $                               alat(iip2),alon(iip2))
  24206                   if(idt_difp2.gt.0) then
  24207                     upspdp2 = udistp2 / float(idt_difp2)
  24208                     vpspdp2 = vdistp2 / float(idt_difp2)
  24209                     pspdp2  = distp2  / float(idt_difp2)
  24210                   else
  24211                     upspdp2 = udistp2 / float(idt_difp2+60)
  24212                     vpspdp2 = vdistp2 / float(idt_difp2+60)
  24213                     pspdp2  = distp2  / float(idt_difp2+60)
  24214                   endif
  24215                   if(upspdp2.eq.0.0.and.vpspdp2.eq.0.0) then
  24216                     pdirp2 = 0.0
  24217                   else
  24218                     pdirp2 = atan2(upspdp2,vpspdp2) / d2r + 180.0
  24219                   endif
  24220                   distp2 = distp2 / 1000.0
  24221                 else
  24222                   udistp2 = amiss
  24223                   vdistp2 = amiss
  24224                   distp2  = amiss
  24225                   upspdp2 = amiss
  24226                   vpspdp2 = amiss
  24227                   pspdp2  = amiss
  24228                   pdirp2  = amiss

Page 515         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  24229                 endif
  24230 c
  24231                 if(ht_ft(iip1).ne.amiss.and.ht_ft(iip2).ne.amiss) then
  24232                   ht_difp2  = ht_ft(iip2) - ht_ft(iip1)
  24233                 else
  24234                   ht_difp2 = amiss
  24235                 endif
  24236 c
  24237               else
  24238                 idt_difp2 = imiss
  24239                 udistp2 = amiss
  24240                 vdistp2 = amiss
  24241                 distp2  = amiss
  24242                 upspdp2 = amiss
  24243                 vpspdp2 = amiss
  24244                 pspdp2  = amiss
  24245                 pdirp2  = amiss
  24246 c
  24247                 ht_difp2 = amiss
  24248               endif
  24249 c
  24250 c             Set up temporary variables for iip3 point
  24251 c             -----------------------------------------
  24252               if(iip3.ne.0) then
  24253                 alatp3 = alat(iip3)
  24254                 alonp3 = alon(iip3)
  24255 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  24256                 if(alon0.lt.90.0.and.alonp3.gt.270.0) 
  24257      $            alonp3 = 360.0 - alonp3
  24258                 if(alon0.gt.270.0.and.alonp3.lt.90.0) 
  24259      $            alonp3 = 360.0 + alonp3
  24260 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  24261                 ht_ftp3 = ht_ft(iip3)
  24262                 idtp3 = idt(iip3)
  24263 c
  24264 c                if(c_qc(iip3)(7:8).ne.'..') then
  24265 c                  uwindp3 = amiss
  24266 c                  vwindp3 = amiss
  24267 c                else
  24268 c                  uwindp3 = -sin(ob_dir(iip3)*d2r)*ob_spd(iip3)
  24269 c                  vwindp3 = -cos(ob_dir(iip3)*d2r)*ob_spd(iip3)
  24270 c                endif
  24271               else
  24272 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  24273                 alatp3 = amiss
  24274                 alonp3 = amiss
  24275 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  24276                 ht_ftp3 = amiss
  24277                 idtp3 = amiss
  24278 c                uwindp3 = amiss
  24279 c                vwindp3 = amiss
  24280               endif
  24281 c
  24282               if(iip3.ne.0.and.iip2.ne.0) then
  24283 c
  24284 c               Compute groundspeed vector components between iip2 and iip3 points
  24285 c               ------------------------------------------------------------------

Page 516         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  24286                 if(idtp2.ne.imiss.and.idtp3.ne.imiss) then
  24287                   idt_difp3 = abs(idtp2 - idtp3)
  24288                 else
  24289                   idt_difp3 = imiss
  24290                 endif
  24291 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  24292                 if(alatp2.ne.amiss.and.alonp2.ne.amiss.and.
  24293      $             alatp3.ne.amiss.and.alonp3.ne.amiss.and.
  24294 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  24295      $             idt_difp3.ne.imiss) then
  24296                   udistp3 = gcirc_qc(alat(iip2),alon(iip2),
  24297      $                               alat(iip2),alon(iip3))
  24298 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  24299                   if(sin((alon(iip3)-alon(iip2))*d2r).lt.0.0)
  24300 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  24301      $              udistp3 = -udistp3
  24302                   vdistp3 = gcirc_qc(alat(iip2),alon(iip2),
  24303      $                               alat(iip3),alon(iip2))
  24304 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  24305                   if(sin((alat(iip3)-alat(iip2))*d2r).lt.0.0)
  24306 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  24307      $              vdistp3 = -vdistp3
  24308                   distp3  = gcirc_qc(alat(iip2),alon(iip2),
  24309      $                               alat(iip3),alon(iip3))
  24310                   if(idt_difp3.gt.0) then
  24311                     upspdp3 = udistp3 / float(idt_difp3)
  24312                     vpspdp3 = vdistp3 / float(idt_difp3)
  24313                     pspdp3  = distp3  / float(idt_difp3)
  24314                   else
  24315                     upspdp3 = udistp3 / float(idt_difp3+60)
  24316                     vpspdp3 = vdistp3 / float(idt_difp3+60)
  24317                     pspdp3  = distp3  / float(idt_difp3+60)
  24318                   endif
  24319                   if(upspdp3.eq.0.0.and.vpspdp3.eq.0.0) then
  24320                     pdirp3 = 0.0
  24321                   else
  24322                     pdirp3 = atan2(upspdp3,vpspdp3) / d2r + 180.0
  24323                   endif
  24324                   distp3 = distp3 / 1000.0
  24325                 else
  24326                   udistp3 = amiss
  24327                   vdistp3 = amiss
  24328                   distp3  = amiss
  24329                   upspdp3 = amiss
  24330                   vpspdp3 = amiss
  24331                   pspdp3  = amiss
  24332                   pdirp3  = amiss
  24333                 endif
  24334 c
  24335                 if(ht_ft(iip2).ne.amiss.and.ht_ft(iip3).ne.amiss) then
  24336                   ht_difp3  = ht_ft(iip3) - ht_ft(iip2)
  24337                 else
  24338                   ht_difp3 = amiss
  24339                 endif
  24340 c
  24341               else
  24342                 idt_difp3 = imiss

Page 517         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  24343                 udistp3 = amiss
  24344                 vdistp3 = amiss
  24345                 distp3  = amiss
  24346                 upspdp3 = amiss
  24347                 vpspdp3 = amiss
  24348                 pspdp3  = amiss
  24349                 pdirp3  = amiss
  24350 c
  24351                 ht_difp3 = amiss
  24352               endif
  24353 c
  24354 c             Compute speeds without ii report
  24355 c             --------------------------------
  24356               if(iim1.ne.0.and.
  24357      $           idtp1.ne.amiss.and.idtm1.ne.amiss) then
  24358 c
  24359 c               Compute groundspeed vector components between iim1 and iip1 points
  24360 c               ------------------------------------------------------------------
  24361                 if(idtm1.ne.imiss.and.idtp1.ne.imiss) then
  24362                   idt_dif_wo0 = abs(idtp1 - idtm1)
  24363                 else
  24364                   idt_dif_wo0 = imiss
  24365                 endif
  24366 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  24367                 if(alatm1.ne.amiss.and.alonm1.ne.amiss.and.
  24368      $             alatp1.ne.amiss.and.alonp1.ne.amiss.and.
  24369 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  24370      $             idt_dif_wo0.ne.imiss) then
  24371                   udist_wo0 = gcirc_qc(alat(iim1),alon(iim1),
  24372      $                                 alat(iim1),alon(iip1))
  24373 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  24374                   if(sin((alon(iip1)-alon(iim1))*d2r).lt.0.0)
  24375 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  24376      $              udist_wo0 = -udist_wo0
  24377                   vdist_wo0 = gcirc_qc(alat(iim1),alon(iim1),
  24378      $                                 alat(iip1),alon(iim1))
  24379 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  24380                   if(sin((alat(iip1)-alat(iim1))*d2r).lt.0.0)
  24381 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  24382      $              vdist_wo0 = -vdist_wo0
  24383                   dist_wo0  = gcirc_qc(alat(iim1),alon(iim1),
  24384      $                                 alat(iip1),alon(iip1))
  24385                   if(idt_dif_wo0.gt.0) then
  24386                     upspd_wo0 = udist_wo0 / float(idt_dif_wo0)
  24387                     vpspd_wo0 = vdist_wo0 / float(idt_dif_wo0)
  24388                     pspd_wo0  = dist_wo0  / float(idt_dif_wo0)
  24389                   else
  24390                     upspd_wo0 = udist_wo0 / float(idt_dif_wo0+60)
  24391                     vpspd_wo0 = vdist_wo0 / float(idt_dif_wo0+60)
  24392                     pspd_wo0  = dist_wo0  / float(idt_dif_wo0+60)
  24393                   endif
  24394                   if(upspd_wo0.eq.0.0.and.vpspd_wo0.eq.0.0) then
  24395                     pdir_wo0 = 0.0
  24396                   else
  24397                     pdir_wo0 = atan2(upspd_wo0,vpspd_wo0) 
  24398      $                       / d2r + 180.0
  24399                   endif

Page 518         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  24400                   dist_wo0 = dist_wo0 / 1000.0
  24401                 else
  24402                   udist_wo0 = amiss
  24403                   vdist_wo0 = amiss
  24404                   dist_wo0  = amiss
  24405                   upspd_wo0 = amiss
  24406                   vpspd_wo0 = amiss
  24407                   pspd_wo0  = amiss
  24408                   pdir_wo0  = amiss
  24409                 endif
  24410 c
  24411               else
  24412                 udist_wo0 = amiss
  24413                 vdist_wo0 = amiss
  24414                 dist_wo0  = amiss
  24415                 upspd_wo0 = amiss
  24416                 vpspd_wo0 = amiss
  24417                 pspd_wo0  = amiss
  24418                 pdir_wo0  = amiss
  24419               endif
  24420 c
  24421               if(ht_ftp1.ne.amiss.and.ht_ftm1.ne.amiss) then
  24422                 ht_dif_wo0  = ht_ftp1 - ht_ftm1
  24423               else
  24424                 ht_dif_wo0 = amiss
  24425               endif
  24426 c
  24427 c             Compute speeds without iip1 report
  24428 c             ----------------------------------
  24429               if(iip2.ne.0.and.
  24430      $           idt0.ne.amiss.and.idtp2.ne.amiss) then
  24431 c
  24432 c               Compute groundspeed vector components between ii and iip2 points
  24433 c               ----------------------------------------------------------------
  24434                 if(idt0.ne.imiss.and.idtp2.ne.imiss) then
  24435                   idt_dif_wop1 = abs(idtp2 - idt0)
  24436                 else
  24437                   idt_dif_wop1 = imiss
  24438                 endif
  24439 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  24440                 if(alat0 .ne.amiss.and.alon0 .ne.amiss.and.
  24441      $             alatp2.ne.amiss.and.alonp2.ne.amiss.and.
  24442 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  24443      $             idt_dif_wop1.ne.imiss) then
  24444                   udist_wop1 = gcirc_qc(alat(ii  ),alon(ii  ),
  24445      $                                  alat(ii  ),alon(iip2))
  24446 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  24447                   if(sin((alon(iip2)-alon(ii))*d2r).lt.0.0)
  24448 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  24449      $              udist_wop1 = -udist_wop1
  24450                   vdist_wop1 = gcirc_qc(alat(ii  ),alon(ii  ),
  24451      $                                  alat(iip2),alon(ii  ))
  24452 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  24453                   if(sin((alat(iip2)-alat(ii))*d2r).lt.0.0)
  24454 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  24455      $              vdist_wop1 = -vdist_wop1
  24456                   dist_wop1  = gcirc_qc(alat(ii  ),alon(ii  ),

Page 519         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  24457      $                                  alat(iip2),alon(iip2))
  24458                   if(idt_dif_wop1.gt.0) then
  24459                     upspd_wop1 = udist_wop1 / float(idt_dif_wop1)
  24460                     vpspd_wop1 = vdist_wop1 / float(idt_dif_wop1)
  24461                     pspd_wop1  = dist_wop1  / float(idt_dif_wop1)
  24462                   else
  24463                     upspd_wop1 = udist_wop1 / float(idt_dif_wop1+60)
  24464                     vpspd_wop1 = vdist_wop1 / float(idt_dif_wop1+60)
  24465                     pspd_wop1  = dist_wop1  / float(idt_dif_wop1+60)
  24466                   endif
  24467                   if(upspd_wop1.eq.0.0.and.vpspd_wop1.eq.0.0) then
  24468                     pdir_wop1 = 0.0
  24469                   else
  24470                     pdir_wop1 = atan2(upspd_wop1,vpspd_wop1) 
  24471      $                        / d2r + 180.0
  24472                   endif
  24473                   dist_wop1 = dist_wop1 / 1000.0
  24474                 else
  24475                   udist_wop1 = amiss
  24476                   vdist_wop1 = amiss
  24477                   dist_wop1  = amiss
  24478                   upspd_wop1 = amiss
  24479                   vpspd_wop1 = amiss
  24480                   pspd_wop1  = amiss
  24481                   pdir_wop1  = amiss
  24482                 endif
  24483 c
  24484               else
  24485                 udist_wop1 = amiss
  24486                 vdist_wop1 = amiss
  24487                 dist_wop1  = amiss
  24488                 upspd_wop1 = amiss
  24489                 vpspd_wop1 = amiss
  24490                 pspd_wop1  = amiss
  24491                 pdir_wop1  = amiss
  24492               endif
  24493 c
  24494               if(ht_ftp2.ne.amiss.and.ht_ft0.ne.amiss) then
  24495                 ht_dif_wop1  = ht_ft(iip2) - ht_ft(ii)
  24496               else
  24497                 ht_dif_wop1 = amiss
  24498               endif
  24499 c
  24500 c             Compute speeds without iip2 report
  24501 c             ----------------------------------
  24502               if(iip3.ne.0.and.
  24503      $           idtp1.ne.amiss.and.idtp3.ne.amiss) then
  24504 c
  24505 c               Compute groundspeed vector components between iip1 and iip3 points
  24506 c               ------------------------------------------------------------------
  24507                 if(idtp1.ne.imiss.and.idtp3.ne.imiss) then
  24508                   idt_dif_wop2 = abs(idtp3 - idtp1)
  24509                 else
  24510                   idt_dif_wop2 = imiss
  24511                 endif
  24512 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  24513                 if(alatp1.ne.amiss.and.alonp1.ne.amiss.and.

Page 520         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  24514      $             alatp3.ne.amiss.and.alonp3.ne.amiss.and.
  24515 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  24516      $             idt_dif_wop2.ne.imiss) then
  24517                   udist_wop2 = gcirc_qc(alat(iip1),alon(iip1),
  24518      $                                  alat(iip1),alon(iip3))
  24519 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  24520                   if(sin((alon(iip3)-alon(iip1))*d2r).lt.0.0)
  24521 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  24522      $              udist_wop2 = -udist_wop2
  24523                   vdist_wop2 = gcirc_qc(alat(iip1),alon(iip1),
  24524      $                                  alat(iip3),alon(iip1))
  24525 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  24526                   if(sin((alat(iip3)-alat(iip1))*d2r).lt.0.0)
  24527 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  24528      $              vdist_wop2 = -vdist_wop2
  24529                   dist_wop2  = gcirc_qc(alat(iip1),alon(iip1),
  24530      $                                  alat(iip3),alon(iip3))
  24531                   if(idt_dif_wop2.gt.0) then
  24532                     upspd_wop2 = udist_wop2 / float(idt_dif_wop2)
  24533                     vpspd_wop2 = vdist_wop2 / float(idt_dif_wop2)
  24534                     pspd_wop2  = dist_wop2  / float(idt_dif_wop2)
  24535                   else
  24536                     upspd_wop2 = udist_wop2 / float(idt_dif_wop2+60)
  24537                     vpspd_wop2 = vdist_wop2 / float(idt_dif_wop2+60)
  24538                     pspd_wop2  = dist_wop2  / float(idt_dif_wop2+60)
  24539                   endif
  24540                   if(upspd_wop2.eq.0.0.and.vpspd_wop2.eq.0.0) then
  24541                     pdir_wop2 = 0.0
  24542                   else
  24543                     pdir_wop2 = atan2(upspd_wop2,vpspd_wop2) 
  24544      $                        / d2r + 180.0
  24545                   endif
  24546                   dist_wop2 = dist_wop2 / 1000.0
  24547                 else
  24548                   udist_wop2 = amiss
  24549                   vdist_wop2 = amiss
  24550                   dist_wop2  = amiss
  24551                   upspd_wop2 = amiss
  24552                   vpspd_wop2 = amiss
  24553                   pspd_wop2  = amiss
  24554                   pdir_wop2  = amiss
  24555                 endif
  24556 c
  24557               else
  24558                 udist_wop2 = amiss
  24559                 vdist_wop2 = amiss
  24560                 dist_wop2  = amiss
  24561                 upspd_wop2 = amiss
  24562                 vpspd_wop2 = amiss
  24563                 pspd_wop2  = amiss
  24564                 pdir_wop2  = amiss
  24565               endif
  24566 c
  24567               if(ht_ftp3.ne.amiss.and.ht_ftp1.ne.amiss) then
  24568                 ht_dif_wop2  = ht_ftp3 - ht_ftp1
  24569               else
  24570                 ht_dif_wop2 = amiss

Page 521         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  24571               endif
  24572 c
  24573 c             Set other variables to missing
  24574 c             ------------------------------
  24575               udist_bad0 = amiss
  24576               vdist_bad0 = amiss
  24577               dist_bad0  = amiss
  24578               upspd_bad0 = amiss
  24579               vpspd_bad0 = amiss
  24580               pspd_bad0  = amiss
  24581               pdir_bad0  = amiss
  24582 c
  24583               ht_dif_bad0 = amiss           
  24584 c
  24585               idt_last_bad = imiss
  24586 c
  24587               udist_badp1 = amiss
  24588               vdist_badp1 = amiss
  24589               dist_badp1  = amiss
  24590               upspd_badp1 = amiss
  24591               vpspd_badp1 = amiss
  24592               pspd_badp1  = amiss
  24593               pdir_badp1  = amiss
  24594 c
  24595               ht_dif_badp1 = amiss 
  24596 c
  24597 c             Compute mean direction for current flight segment
  24598 c             -------------------------------------------------
  24599               if(iob.eq.istart.or.
  24600      $           iob.gt.ioblast.or.
  24601      $           ioblast.eq.imiss) then
  24602 c
  24603                 job = iob
  24604                 jjstart = ii
  24605                 iifirst = ii
  24606                 iobfirst = iob
  24607                 iilast = iiend
  24608                 ioblast = iend
  24609 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  24610                 alat_min =  9999.9
  24611                 alat_max = -9999.9
  24612                 alon_min =  9999.9
  24613                 alon_max = -9999.9
  24614 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  24615 c
  24616 c               Loop over flight to find end of current segment
  24617 c               -----------------------------------------------
  24618                 do while(job.le.iend)
  24619 c
  24620                   jj = indx(job)
  24621                   if(job.eq.iend) then
  24622                     jjp1 = 0
  24623                   else
  24624                     jjp1 = indx(job+1)
  24625                   endif
  24626 c
  24627 c                 Compute distance between jj and jjstart

Page 522         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  24628 c                 ---------------------------------------
  24629                   dist_track = gcirc_qc(alat(jjstart),alon(jjstart),
  24630      $                                  alat(jj     ),alon(jj     ))
  24631 c
  24632                   dist_track = dist_track / 1000.0
  24633 c
  24634 c                 Save max/min lat and lon
  24635 c                 ------------------------
  24636                   if(c_qc(jj)(1:1).ne.'d'.and.
  24637      $               c_qc(jj)(2:2).ne.'I'.and.
  24638      $               c_qc(jj)(2:2).ne.'K'.and.
  24639      $               c_qc(jj)(3:4).ne.'II'.and.
  24640      $               c_qc(jj)(5:5).ne.'I'.and.
  24641      $               c_qc(jj)(5:5).ne.'i'.or.
  24642      $               c_qc(ii)(11:11).eq.'I') then
  24643 c
  24644                     if(alat(jj).lt.alat_min) then
  24645                       alat_min = alat(jj)
  24646                       job_alat_min = job
  24647                       jj_alat_min = jj
  24648                     endif
  24649 c
  24650                     if(alat(jj).gt.alat_max) then
  24651                       alat_max = alat(jj)
  24652                       job_alat_max = job
  24653                       jj_alat_max = jj
  24654                     endif
  24655 c
  24656                     if(alon(jj).lt.alon_min) then
  24657                       alon_min = alon(jj)
  24658                       job_alon_min = job
  24659                       jj_alon_min = jj
  24660                     endif
  24661 c
  24662                     if(alon(jj).gt.alon_max) then
  24663                       alon_max = alon(jj)
  24664                       job_alon_max = job
  24665                       jj_alon_max = jj
  24666                     endif
  24667                   endif
  24668 c
  24669 c                 End flight segment if significant time gap found
  24670 c                 ------------------------------------------------
  24671                   if(jjp1.ne.0) then
  24672                    if((((.not.(l_ii_man_airep.and.l_iip1_man_airep).and.
  24673      $                    (idt(jjp1)-idt(jj)).gt.idt_near).or.
  24674      $                   (l_ii_man_airep.and.l_iip1_man_airep.and.
  24675      $                    (idt(jjp1)-idt(jj)).gt.idt_near*2))).and.
  24676      $                 dist_track.gt.100.0) then
  24677 c
  24678                       iilast = jj
  24679                       ioblast = job
  24680                       job = iend + 1
  24681 c
  24682                     else
  24683                       job = job + 1
  24684                     endif

Page 523         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  24685 c
  24686                   else
  24687                     job = job + 1
  24688                   endif
  24689                 enddo
  24690 c
  24691 c               End segment if significant turn is present prior to previous end of segment
  24692 c               ---------------------------------------------------------------------------
  24693                 if((alat_max.eq.alat(iifirst).or.
  24694      $              alat_max.eq.alat(iilast)).and.
  24695      $             (alat_min.eq.alat(iifirst).or.
  24696      $              alat_min.eq.alat(iilast))) then
  24697 c
  24698                   if((alon_max.eq.alon(iifirst).or.
  24699      $                alon_max.eq.alon(iilast)).and.
  24700      $               (alon_min.eq.alon(iifirst).or.
  24701      $                alon_min.eq.alon(iilast))) then
  24702 c
  24703 c                    write(io8,*)
  24704 c                    write(io8,*) 'Latitude max/min at start/end',kk
  24705 c                    write(io8,*) 'Longitude max/min at start/end of flt'
  24706 c                    write(io8,*) 'Segment endpoints not altered'
  24707 c
  24708                   elseif(job_alon_max.ge.iobfirst.and.
  24709      $                   job_alon_max.le.ioblast) then
  24710 c
  24711                     dist_track = gcirc_qc(alat(iifirst),alon_max,
  24712      $                                    alat(iifirst),alon(iifirst))
  24713                     dist_track = dist_track / 1000.0
  24714 c
  24715                     if(dist_track.gt.100.0) then
  24716 c
  24717                       ioblast = job_alon_max
  24718                       iilast = jj_alon_max
  24719 c                      write(io8,*)
  24720 c                      write(io8,*) 'Latitude max/min at start/end',kk
  24721 c                      write(io8,*) 'Ending segment at longitude max'
  24722 c                      write(io8,*) 'ioblast = ',ioblast
  24723 c
  24724 c                    else
  24725 c                      write(io8,*)
  24726 c                      write(io8,*) 'Latitude max/min at start/end',kk
  24727 c                      write(io8,*) 'Longitude difference too small'
  24728 c                      write(io8,*) 'Segment endpoints not altered'
  24729                     endif
  24730 c
  24731                   elseif(job_alon_min.ge.iobfirst.and.
  24732      $                   job_alon_min.le.ioblast) then
  24733 c
  24734                     dist_track = gcirc_qc(alat(iifirst),alon_min,
  24735      $                                    alat(iifirst),alon(iifirst))
  24736                     dist_track = dist_track / 1000.0
  24737 c
  24738                     if(dist_track.gt.100.0) then
  24739 c
  24740                       ioblast = job_alon_min
  24741                       iilast = jj_alon_min

Page 524         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  24742 c                      write(io8,*)
  24743 c                      write(io8,*) 'Latitude max/min at start/end',kk
  24744 c                      write(io8,*) 'Ending segment at longitude min'
  24745 c                      write(io8,*) 'ioblast = ',ioblast
  24746 c
  24747 c                    else
  24748 c                      write(io8,*)
  24749 c                      write(io8,*) 'Latitude max/min at start/end',kk
  24750 c                      write(io8,*) 'Longitude difference too small'
  24751 c                      write(io8,*) 'Segment endpoints not altered'
  24752                     endif 
  24753 c
  24754                   else
  24755                     write(io8,*)
  24756                     write(io8,*) 'Latitude max/min at start/end',kk
  24757                     write(io8,*) 'Longitude min/max not handled'
  24758                     write(io8,*) 'Segment endpoints not altered'
  24759                   endif
  24760 c
  24761                 elseif((alon_max.eq.alon(iifirst).or.
  24762      $                  alon_max.eq.alon(iilast)).and.
  24763      $                 (alon_min.eq.alon(iifirst).or.
  24764      $                  alon_min.eq.alon(iilast))) then
  24765 c
  24766                   if((alat_max.eq.alat(iifirst).or.
  24767      $                alat_max.eq.alat(iilast)).and.
  24768      $               (alat_min.eq.alat(iifirst).or.
  24769      $                alat_min.eq.alat(iilast))) then
  24770 c
  24771 c                    write(io8,*)
  24772 c                    write(io8,*) 'Lon max/min at start/end',kk
  24773 c                    write(io8,*) 'Latitude max/min at start/end of flt'
  24774 c                    write(io8,*) 'Segment endpoints not altered'
  24775 c
  24776                   elseif(job_alat_max.ge.iobfirst.and.
  24777      $                   job_alat_max.le.ioblast) then
  24778 c
  24779                     dist_track = gcirc_qc(alat_max     ,alon(iifirst),
  24780      $                                    alat(iifirst),alon(iifirst))
  24781                     dist_track = dist_track / 1000.0
  24782 c
  24783                     if(dist_track.gt.100.0) then
  24784 c
  24785                       ioblast = job_alat_max
  24786                       iilast = jj_alat_max 
  24787 c                      write(io8,*)
  24788 c                      write(io8,*) 'Lon max/min at start/end',kk
  24789 c                      write(io8,*) 'Ending segment at latitude max'
  24790 c                      write(io8,*) 'ioblast = ',ioblast
  24791 c
  24792 c                    else 
  24793 c                      write(io8,*)
  24794 c                      write(io8,*) 'Lon max/min at start/end',kk
  24795 c                      write(io8,*) 'Latitude difference too small'
  24796 c                      write(io8,*) 'Segment endpoints not altered'
  24797                     endif
  24798 c

Page 525         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  24799                   elseif(job_alat_min.ge.iobfirst.and.
  24800      $                   job_alat_min.le.ioblast) then
  24801 c
  24802                     dist_track = gcirc_qc(alat_min     ,alon(iifirst),
  24803      $                                    alat(iifirst),alon(iifirst))
  24804                     dist_track = dist_track / 1000.0
  24805 c
  24806                     if(dist_track.gt.100.0) then
  24807 c
  24808                       ioblast = job_alat_min
  24809                       iilast = jj_alat_min 
  24810 c                      write(io8,*)
  24811 c                      write(io8,*) 'Lon max/min at start/end',kk
  24812 c                      write(io8,*) 'Ending segment at latitude min'
  24813 c                      write(io8,*) 'ioblast = ',ioblast
  24814 c
  24815 c                    else
  24816 c                      write(io8,*)
  24817 c                      write(io8,*) 'Lon max/min at start/end',kk
  24818 c                      write(io8,*) 'Latitude difference too small'
  24819 c                      write(io8,*) 'Segment endpoints not altered'
  24820                     endif 
  24821 c
  24822                   else
  24823                     write(io8,*)
  24824                     write(io8,*) 'Lon max/min at start/end',kk
  24825                     write(io8,*) 'Longitude min/max not handled'
  24826                     write(io8,*) 'Segment endpoints not altered'
  24827                   endif
  24828 c
  24829                 else
  24830 c
  24831                   if(job_alat_max.ge.iobfirst.and.
  24832      $               job_alat_max.le.ioblast) then
  24833 c
  24834                     dist_track = gcirc_qc(alat_max     ,alon(iifirst),
  24835      $                                    alat(iifirst),alon(iifirst))
  24836                     dist_track = dist_track / 1000.0
  24837 c
  24838                     if(dist_track.gt.100.0) then
  24839 c
  24840                       ioblast = job_alat_max
  24841                       iilast = jj_alat_max
  24842 c                      write(io8,*)
  24843 c                      write(io8,*) 'Ending segment at latitude max',kk
  24844 c                      write(io8,*) 'ioblast = ',ioblast 
  24845 c
  24846 c                    else
  24847 c                      write(io8,*)
  24848 c                      write(io8,*) 'Latitude difference too small'
  24849 c                      write(io8,*) 'Segment endpoints not altered'
  24850                     endif
  24851                   endif
  24852 c
  24853                   if(job_alat_min.ge.iobfirst.and.
  24854      $               job_alat_min.le.ioblast) then
  24855 c

Page 526         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  24856                     dist_track = gcirc_qc(alat_min     ,alon(iifirst),
  24857      $                                    alat(iifirst),alon(iifirst))
  24858                     dist_track = dist_track / 1000.0
  24859 c
  24860                     if(dist_track.gt.100.0) then
  24861 c
  24862                       ioblast = job_alat_min
  24863                       iilast = jj_alat_min
  24864 c                      write(io8,*)
  24865 c                      write(io8,*) 'Ending segment at latitude min',kk
  24866 c                      write(io8,*) 'ioblast = ',ioblast 
  24867 c
  24868 c                    else
  24869 c                      write(io8,*)
  24870 c                      write(io8,*) 'Latitude difference too small'
  24871 c                      write(io8,*) 'Segment endpoints not altered'
  24872                     endif
  24873                   endif
  24874 c
  24875                   if(job_alon_max.ge.iobfirst.and.
  24876      $               job_alon_max.le.ioblast) then
  24877 c
  24878                     dist_track = gcirc_qc(alat(iifirst),alon_max,
  24879      $                                    alat(iifirst),alon(iifirst))
  24880                     dist_track = dist_track / 1000.0
  24881 c
  24882                     if(dist_track.gt.100.0) then
  24883 c
  24884                       ioblast = job_alon_max
  24885                       iilast = jj_alon_max
  24886 c                      write(io8,*)
  24887 c                      write(io8,*) 'Ending segment at longitude max',kk
  24888 c                      write(io8,*) 'ioblast = ',ioblast 
  24889 c
  24890 c                    else
  24891 c                      write(io8,*)
  24892 c                      write(io8,*) 'Longitude difference too small'
  24893 c                      write(io8,*) 'Segment endpoints not altered'
  24894                     endif
  24895                   endif
  24896 c
  24897                   if(job_alon_min.ge.iobfirst.and.
  24898      $               job_alon_min.le.ioblast) then
  24899 c
  24900                     dist_track = gcirc_qc(alat(iifirst),alon_min,
  24901      $                                    alat(iifirst),alon(iifirst))
  24902                     dist_track = dist_track / 1000.0
  24903 c
  24904                     if(dist_track.gt.100.0) then
  24905 c
  24906                       ioblast = job_alon_min
  24907                       iilast = jj_alon_min
  24908 c                      write(io8,*)
  24909 c                      write(io8,*) 'Ending segment at longitude min',kk
  24910 c                      write(io8,*) 'ioblast = ',ioblast 
  24911 c
  24912 c                    else

Page 527         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  24913 c                      write(io8,*)
  24914 c                      write(io8,*) 'Longitude difference too small'
  24915 c                      write(io8,*) 'Segment endpoints not altered'
  24916                     endif
  24917                   endif
  24918                 endif
  24919 c
  24920 c               Compute speeds for current flight segment
  24921 c               -----------------------------------------
  24922                 if(iifirst.ne.0.and.iilast.ne.0) then
  24923 c
  24924                   idt_start = idt(iifirst)
  24925                   idt_end = idt(iilast)
  24926 c
  24927 c                  if(c_qc(iifirst)(7:8).ne.'..') then
  24928 c                    uwind_start = amiss
  24929 c                    vwind_start = amiss
  24930 c                  else
  24931 c                    uwind_start = -sin(ob_dir(iifirst)*d2r)
  24932 c     $                            *ob_spd(iifirst)
  24933 c                    vwind_start = -cos(ob_dir(iifirst)*d2r)
  24934 c     $                            *ob_spd(iifirst)
  24935 c                  endif
  24936 c                  if(c_qc(iilast)(7:8).ne.'..') then
  24937 c                    uwind_end = amiss
  24938 c                    vwind_end = amiss
  24939 c                  else
  24940 c                    uwind_end = -sin(ob_dir(iilast)*d2r)*ob_spd(iilast)
  24941 c                    vwind_end = -cos(ob_dir(iilast)*d2r)*ob_spd(iilast)
  24942 c                  endif
  24943 c
  24944 c                 Compute groundspeed vector components for current flight segment
  24945 c                 ----------------------------------------------------------------
  24946                   if(idt_start.ne.imiss.and.
  24947      $               idt_end  .ne.imiss) then
  24948                     idt_dif_track = abs(idt_end - idt_start)
  24949                   else
  24950                     idt_dif_track = imiss
  24951                   endif
  24952 c
  24953 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  24954                   if(alat(iifirst).ne.amiss.and.
  24955      $               alon(iifirst).ne.amiss.and.
  24956      $               alat(iilast) .ne.amiss.and.
  24957      $               alon(iilast) .ne.amiss.and.
  24958 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  24959      $               idt_dif_track.ne.imiss) then
  24960 c
  24961                     udist_track = gcirc_qc(alat(iilast),alon(iilast),
  24962      $                                     alat(iilast),alon(iifirst))
  24963 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  24964                     if(sin((alon(iilast)-alon(iifirst))*d2r).lt.0.0)
  24965 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  24966      $                 udist_track = -udist_track
  24967                     vdist_track = gcirc_qc(alat(iilast),alon(iilast),
  24968      $                                     alat(iifirst),alon(iilast))
  24969 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision

Page 528         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  24970                     if(sin((alat(iilast)-alat(iifirst))*d2r).lt.0.0)
  24971 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  24972      $                vdist_track = -vdist_track
  24973                     dist_track  = gcirc_qc(alat(iilast),alon(iilast),
  24974      $                                     alat(iifirst),alon(iifirst))
  24975                     if(idt_dif_track.gt.0) then
  24976                       upspd_track = udist_track / float(idt_dif_track)
  24977                       vpspd_track = vdist_track / float(idt_dif_track)
  24978                       pspd_track  = dist_track  / float(idt_dif_track)
  24979                     else
  24980                       upspd_track= udist_track / float(idt_dif_track+60)
  24981                       vpspd_track= vdist_track / float(idt_dif_track+60)
  24982                       pspd_track = dist_track  / float(idt_dif_track+60)
  24983                     endif
  24984                     if(upspd_track.eq.0.0.and.vpspd_track.eq.0.0) then
  24985                       pdir_track = 0.0
  24986                     else
  24987                       pdir_track = atan2(upspd_track,vpspd_track) 
  24988      $                           / d2r + 180.0
  24989                     endif
  24990                     dist_track = dist_track / 1000.0
  24991 c
  24992                   else
  24993                     udist_track = amiss
  24994                     vdist_track = amiss
  24995                     dist_track  = amiss
  24996                     upspd_track = amiss
  24997                     vpspd_track = amiss
  24998                     pspd_track  = amiss
  24999                     pdir_track  = amiss
  25000                   endif
  25001 c
  25002 c                 Compute vertical speed for current flight segment
  25003 c                 -------------------------------------------------
  25004                   if(ht_ft(iilast).ne.amiss.and.
  25005      $               ht_ft(iifirst).ne.amiss) then
  25006                     ht_dif_track  = ht_ft(iilast) - ht_ft(iifirst)
  25007                   else
  25008                     ht_dif_track = amiss
  25009                   endif
  25010 c
  25011                 else
  25012                   idt_start = imiss
  25013                   idt_end = imiss
  25014 c
  25015                   udist_track = amiss
  25016                   vdist_track = amiss
  25017                   dist_track  = amiss
  25018                   upspd_track = amiss
  25019                   vpspd_track = amiss
  25020                   pspd_track  = amiss
  25021                   pdir_track  = amiss
  25022 c
  25023                   ht_dif_track = amiss 
  25024                 endif
  25025               endif
  25026 c

Page 529         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  25027 c Check if neighboring points are not available
  25028 c If so, skip remaining tests
  25029 c ---------------------------------------------------
  25030               if(iim1.eq.0.and.iip2.eq.0) then
  25031 c
  25032                 c_qc(ii)(11:11)   = 'I'
  25033                 if(iip1.ne.0) c_qc(iip1)(11:11) = 'I'
  25034 c
  25035                 iob = iob + 1
  25036                 knt_iip1_bad = 0
  25037 c
  25038                 l_print = .false.
  25039                 if(l_print) then
  25040                   write(io8,*)
  25041                   write(io8,*) 'Neighboring points not available',ii
  25042                 endif
  25043 c
  25044               elseif(iim2.eq.0.and.iip1.eq.0) then
  25045 c
  25046                 if(iim1.ne.0) c_qc(iim1)(11:11) = 'I'
  25047                 c_qc(ii)(11:11)   = 'I'
  25048 c
  25049                 iob = iob + 1
  25050                 knt_iip1_bad = 0
  25051 c
  25052                 l_print = .false.
  25053                 if(l_print) then
  25054                   write(io8,*)
  25055                   write(io8,*) 'Neighboring points not available',ii
  25056                 endif
  25057 c
  25058 c Check beginning of ascents and descents with low-level manuevers
  25059 c ----------------------------------------------------------------
  25060               elseif(iip1.ne.0.and.iip2.ne.0.and.
  25061      $               (iim1.eq.0.or.
  25062      $                idt_dif0.eq.imiss.or.
  25063      $                (idt_dif0.ne.imiss.and.
  25064      $                 ((.not.(l_ii_man_airep.and.l_iim1_man_airep).and.
  25065      $                   idt_dif0.gt.idt_near).or.
  25066      $                  (l_ii_man_airep.and.l_iim1_man_airep.and.
  25067      $                   idt_dif0.gt.idt_near*2)))).and.
  25068      $               (idt_difp1.ne.imiss.and.
  25069      $                (idt_difp1.le.idt_near.or.
  25070      $                 (l_ii_man_airep.and.l_iip1_man_airep.and.
  25071      $                  idt_difp1.le.idt_near*2))).and.
  25072      $               (idt_difp2.ne.imiss.and.
  25073      $                (idt_difp2.le.idt_near.or.
  25074      $                 (l_iip1_man_airep.and.l_iip2_man_airep.and.
  25075      $                  idt_difp2.le.idt_near*2))).and.
  25076      $               (cos((pdirp1-pdirp2)*d2r).gt.0.0.or.
  25077      $                (distp1.lt.55.0.and.
  25078      $                 distp2.lt.55.0.and.
  25079      $                 abs(ht_difp1).lt.4000.0.and.
  25080      $                 abs(ht_difp2).lt.4000.0.and.
  25081      $                 abs(ht_difp1).ge.htdif_same*1.5.and.
  25082      $                 abs(ht_difp2).ge.htdif_same*1.5).or.
  25083      $                ((distp1.lt.15.0.and.

Page 530         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  25084      $                  abs(ht_difp1).lt.1500.0.and.
  25085      $                  abs(ht_difp1).ge.htdif_same*0.5).or.
  25086      $                 (distp2.lt.15.0.and.
  25087      $                  abs(ht_difp2).lt.1500.0.and.
  25088      $                  abs(ht_difp2).ge.htdif_same*0.5))).and.
  25089      $               ht_ft0.lt.21000.0.and.
  25090      $               ((ht_ft0 .lt.ht_ftp1.and.
  25091      $                 ht_ftp1.lt.ht_ftp2).or.
  25092      $                (ht_ft0 .gt.ht_ftp1.and.
  25093      $                 ht_ftp1.gt.ht_ftp2).or.
  25094      $                ((ht_ft0 .lt.ht_ftp1.or.
  25095      $                  ht_ft0 .gt.ht_ftp1).and.
  25096      $                 abs(ht_difp2).lt.htdif_same*1.5).or.
  25097      $                (abs(ht_difp1).lt.htdif_same*1.5.and.
  25098      $                 (ht_ftp1.lt.ht_ftp2.or.
  25099      $                  ht_ftp1.gt.ht_ftp2)).or.
  25100      $                (abs(ht_difp1).lt.htdif_same*1.5.and.
  25101      $                 abs(ht_difp2).lt.htdif_same*1.5))) then
  25102 c
  25103                 iob = iob + 1
  25104                 knt_iip1_bad = 0
  25105 c
  25106                 l_print = .false.
  25107                 if(l_print) then
  25108                   write(io8,*) 
  25109                   write(io8,*) 'Low-level manuever ok at 1st pt',ii
  25110                 endif
  25111 c
  25112 c Check middle of ascents and descents with low-level manuevers
  25113 c -------------------------------------------------------------
  25114               elseif(iim1.ne.0.and.iip1.ne.0.and.
  25115      $               (idt_dif0.ne.imiss.and.
  25116      $                (idt_dif0 .le.idt_near.or.
  25117      $                 (l_ii_man_airep.and.l_iim1_man_airep.and.
  25118      $                  idt_dif0 .le.idt_near*2))).and.
  25119      $                (idt_difp1.ne.imiss.and.
  25120      $                 (idt_difp1.le.idt_near.or.
  25121      $                  (l_ii_man_airep.and.l_iip1_man_airep.and.
  25122      $                   idt_difp1.le.idt_near*2))).and.
  25123      $               (cos((pdir0-pdirp1)*d2r).gt.0.0.or.
  25124      $                (dist0 .lt.55.0.and.
  25125      $                 distp1.lt.55.0.and.
  25126      $                 abs(ht_dif0) .lt.4000.0.and.
  25127      $                 abs(ht_difp1).lt.4000.0.and.
  25128      $                 abs(ht_dif0) .ge.htdif_same*1.5.and.
  25129      $                 abs(ht_difp1).ge.htdif_same*1.5).or.
  25130      $                ((dist0 .lt.15.0.and.
  25131      $                  abs(ht_dif0) .lt.2000.0.and.
  25132      $                  abs(ht_dif0) .ge.htdif_same*0.5).or.
  25133      $                 (distp1.lt.15.0.and.
  25134      $                  abs(ht_difp1).lt.2000.0.and.
  25135      $                  abs(ht_difp1).ge.htdif_same*0.5))).and.
  25136      $               (ht_ft0 .lt.21000.0.or.
  25137      $                ht_ftp1.lt.21000.0).and.
  25138      $               ((ht_ftm1.lt.ht_ft0 .and.
  25139      $                 ht_ft0 .lt.ht_ftp1).or.
  25140      $                (ht_ftm1.gt.ht_ft0 .and.

Page 531         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  25141      $                 ht_ft0 .gt.ht_ftp1).or.
  25142      $                ((ht_ftm1.lt.ht_ft0 .or.
  25143      $                  ht_ftm1.gt.ht_ft0 ).and.
  25144      $                 abs(ht_difp1).lt.htdif_same*1.5).or.
  25145      $                (abs(ht_dif0 ).lt.htdif_same*1.5.and.
  25146      $                 (ht_ft0 .lt.ht_ftp1.or.
  25147      $                  ht_ft0 .gt.ht_ftp1)).or.
  25148      $                (abs(ht_dif0 ).lt.htdif_same*1.5.and.
  25149      $                 abs(ht_difp1).lt.htdif_same*1.5))) then
  25150 c
  25151                 iob = iob + 1
  25152                 knt_iip1_bad = 0
  25153 c
  25154                 l_print = .false.
  25155                 if(l_print) then
  25156                   write(io8,*) 
  25157                   write(io8,*) 'Low-level manuever ok',ii
  25158                 endif
  25159 c
  25160 c Check middle of ascents and descents with low-level manuevers
  25161 c -------------------------------------------------------------
  25162               elseif(iim2.ne.0.and.iim1.ne.0.and.
  25163      $               iip1.ne.0.and.iip2.ne.0.and.
  25164      $               (idt_difm1.ne.imiss.and.
  25165      $                (idt_difm1.le.idt_near.or.
  25166      $                 (l_iim1_man_airep.and.l_iim2_man_airep.and.
  25167      $                  idt_difm1.le.idt_near*2))).and.
  25168      $               (idt_dif0.ne.imiss.and.
  25169      $                (idt_dif0 .le.idt_near.or.
  25170      $                 (l_ii_man_airep.and.l_iim1_man_airep.and.
  25171      $                  idt_dif0 .le.idt_near*2))).and.
  25172      $                (idt_difp1.ne.imiss.and.
  25173      $                 (idt_difp1.le.idt_near.or.
  25174      $                  (l_ii_man_airep.and.l_iip1_man_airep.and.
  25175      $                   idt_difp1.le.idt_near*2))).and.
  25176      $                (idt_difp2.ne.imiss.and.
  25177      $                 (idt_difp2.le.idt_near.or.
  25178      $                  (l_iip1_man_airep.and.l_iip2_man_airep.and.
  25179      $                   idt_difp2.le.idt_near*2))).and.
  25180      $               (cos((pdir0-pdirp1)*d2r).gt.0.0.or.
  25181      $                (dist0 .lt.55.0.and.
  25182      $                 distp1.lt.55.0.and.
  25183      $                 abs(ht_dif0) .lt.4000.0.and.
  25184      $                 abs(ht_difp1).lt.4000.0.and.
  25185      $                 abs(ht_dif0) .ge.htdif_same*1.5.and.
  25186      $                 abs(ht_difp1).ge.htdif_same*1.5).or.
  25187      $                ((dist0 .lt.15.0.and.
  25188      $                  abs(ht_dif0) .lt.2000.0.and.
  25189      $                  abs(ht_dif0) .ge.htdif_same*0.5).or.
  25190      $                 (distp1.lt.15.0.and.
  25191      $                  abs(ht_difp1).lt.2000.0.and.
  25192      $                  abs(ht_difp1).ge.htdif_same*0.5))).and.
  25193      $               (ht_ft0 .lt.21000.0.or.
  25194      $                ht_ftp1.lt.21000.0).and.
  25195      $               (ht_ftm2.lt.ht_ftm1.and.
  25196      $                ht_ftm1.lt.ht_ft0 .and.
  25197      $                ht_ft0 .gt.ht_ftp1.and.

Page 532         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  25198      $                ht_ftp1.gt.ht_ftp2)) then
  25199 c
  25200                 iob = iob + 1
  25201                 knt_iip1_bad = 0
  25202 c
  25203                 l_print = .false.
  25204                 if(l_print) then
  25205                   write(io8,*) 
  25206                   write(io8,*) 'Low-level manuever with alt max ok',ii
  25207                 endif
  25208 c
  25209 c Check end of ascents and descents with low-level manuevers
  25210 c ----------------------------------------------------------
  25211               elseif(iim2.ne.0.and.iim1.ne.0.and.
  25212      $               (iip1.eq.0.or.
  25213      $                idt_difp1.eq.imiss.or.
  25214      $                (idt_difp1.ne.imiss.and.
  25215      $                 ((.not.(l_ii_man_airep.and.l_iip1_man_airep).and.
  25216      $                   idt_difp1.gt.idt_near).or.
  25217      $                  (l_ii_man_airep.and.l_iip1_man_airep.and.
  25218      $                   idt_difp1.gt.idt_near*2)))).and.
  25219      $               (idt_difm1.ne.imiss.and.
  25220      $                (idt_difm1.le.idt_near.or.
  25221      $                 (l_iim1_man_airep.and.l_iim2_man_airep.and.
  25222      $                  idt_difm1.le.idt_near*2))).and.
  25223      $               (idt_dif0 .ne.imiss.and.
  25224      $                (idt_dif0 .le.idt_near.or.
  25225      $                 (l_ii_man_airep.and.l_iim1_man_airep.and.
  25226      $                  idt_dif0 .le.idt_near*2))).and.
  25227      $               (cos((pdirm1-pdir0)*d2r).gt.0.0.or.   
  25228      $                (distm1.lt.55.0.and.
  25229      $                 dist0.lt.55.0.and.
  25230      $                 abs(ht_difm1).lt.4000.0.and.
  25231      $                 abs(ht_dif0) .lt.4000.0.and.
  25232      $                 abs(ht_difm1).ge.htdif_same*1.5.and.
  25233      $                 abs(ht_dif0) .ge.htdif_same*1.5).or.
  25234      $                ((dist0 .lt.15.0.and.
  25235      $                  abs(ht_dif0) .lt.1500.0.and.
  25236      $                  abs(ht_dif0) .ge.htdif_same*0.5).or.
  25237      $                 (distm1.lt.15.0.and.
  25238      $                  abs(ht_difm1).lt.1500.0.and.
  25239      $                  abs(ht_difm1).ge.htdif_same*0.5))).and.
  25240      $               ht_ft0.lt.21000.0.and.
  25241      $               ((ht_ftm2.lt.ht_ftm1.and.
  25242      $                 ht_ftm1.lt.ht_ft0 ).or.
  25243      $                (ht_ftm2.gt.ht_ftm1.and.
  25244      $                 ht_ftm1.gt.ht_ft0 ).or.
  25245      $                ((ht_ftm2.lt.ht_ftm1.or.
  25246      $                  ht_ftm2.gt.ht_ftm1).and.
  25247      $                 abs(ht_dif0 ).lt.htdif_same*1.5).or.
  25248      $                (abs(ht_difm1).lt.htdif_same*1.5.and.
  25249      $                 (ht_ftm1.lt.ht_ft0 .or.
  25250      $                  ht_ftm1.gt.ht_ft0 )).or.
  25251      $                (abs(ht_difm1).lt.htdif_same*1.5.and.
  25252      $                 abs(ht_dif0 ).lt.htdif_same*1.5))) then
  25253 c
  25254                 iob = iob + 1

Page 533         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  25255                 knt_iip1_bad = 0
  25256 c
  25257                 l_print = .false.
  25258                 if(l_print) then
  25259                   write(io8,*) 
  25260                   write(io8,*) 'Low-level manuever ok at last pt',ii
  25261                 endif
  25262 c
  25263 c Check bottom points of ascents/descents with low-level manuevers
  25264 c Use iim2, iim1, ii points
  25265 c ----------------------------------------------------------------
  25266               elseif(iim2.ne.0.and.iim1.ne.0.and.
  25267      $               idt_difm1.ne.imiss.and.idt_difm1.le.idt_near.and.
  25268      $               idt_dif0 .ne.imiss.and.idt_dif0 .le.idt_near.and.
  25269      $               ht_ftm1.lt.21000.0.and.
  25270      $               (((iip1.eq.0.or.idt_difp1.gt.idt_near).and.
  25271      $                 ht_ftm2.gt.ht_ftm1.and.
  25272      $                 ht_ftm1.gt.ht_ft0.and.
  25273      $                 (dist0 .lt.25.0.or.
  25274      $                  cos((pdirm1-pdir0)*d2r).gt.-0.70710567)).or.
  25275      $                ((iim3.eq.0.or.idt_difm2.gt.idt_near).and.
  25276      $                 ht_ftm2.lt.ht_ftm1.and.
  25277      $                 ht_ftm1.lt.ht_ft0 .and.
  25278      $                 (distm1.lt.25.0.or.
  25279      $                  cos((pdirm1-pdir0)*d2r).gt.-0.70710567)))) then
  25280 c
  25281                 iob = iob + 1
  25282                 knt_iip1_bad = 0
  25283 c
  25284                 l_print = .false.
  25285                 if(l_print) then
  25286                   write(io8,*) 
  25287                   write(io8,*) 'Bottom of ascent/descent ok-1-',ii
  25288                 endif
  25289 c
  25290 c Check bottom points of ascents/descents with low-level manuevers
  25291 c Use iim1, ii, iip1 points
  25292 c ----------------------------------------------------------------
  25293               elseif(iim1.ne.0.and.iip1.ne.0.and.
  25294      $               idt_dif0 .ne.imiss.and.idt_dif0 .le.idt_near.and.
  25295      $               idt_difp1.ne.imiss.and.idt_difp1.le.idt_near.and.
  25296      $               ht_ft0.lt.21000.0.and.
  25297      $               (((iip2.eq.0.or.idt_difp2.gt.idt_near).and.
  25298      $                 ht_ftm1.gt.ht_ft0 .and.
  25299      $                 ht_ft0 .gt.ht_ftp1.and.
  25300      $                 (distp1.lt.25.0.or.
  25301      $                  cos((pdir0-pdirp1)*d2r).gt.-0.70710567)).or.
  25302      $                ((iim2.eq.0.or.idt_difm1.gt.idt_near).and.
  25303      $                 ht_ftm1.lt.ht_ft0 .and.
  25304      $                 ht_ft0 .lt.ht_ftp1.and.
  25305      $                 (dist0.lt.25.0.or.
  25306      $                  cos((pdir0-pdirp1)*d2r).gt.-0.70710567)))) then
  25307 c
  25308                 iob = iob + 1
  25309                 knt_iip1_bad = 0
  25310 c
  25311                 l_print = .false.

Page 534         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  25312                 if(l_print) then
  25313                   write(io8,*) 
  25314                   write(io8,*) 'Bottom of ascent/descent ok-2-',ii
  25315                 endif
  25316 c
  25317 c Check bottom points of ascents/descents with low-level manuevers
  25318 c Use ii, iip1, iip2 points
  25319 c ----------------------------------------------------------------
  25320               elseif(iip1.ne.0.and.iip2.ne.0.and.
  25321      $               idt_difp1.ne.imiss.and.idt_difp1.le.idt_near.and.
  25322      $               idt_difp2.ne.imiss.and.idt_difp2.le.idt_near.and.
  25323      $               ht_ftp1.lt.21000.0.and.
  25324      $               (((iip3.eq.0.or.idt_difp3.gt.idt_near).and.
  25325      $                 ht_ft0 .gt.ht_ftp1.and.
  25326      $                 ht_ftp1.gt.ht_ftp2.and.
  25327      $                 (distp2.lt.25.0.or.
  25328      $                  cos((pdirp1-pdirp2)*d2r).gt.-0.70710567)).or.
  25329      $                ((iim1.eq.0.or.idt_dif0.gt.idt_near).and.
  25330      $                 ht_ft0 .lt.ht_ftp1.and.
  25331      $                 ht_ftp1.lt.ht_ftp2.and.
  25332      $                 (distp1.lt.25.0.or.
  25333      $                  cos((pdirp1-pdirp2)*d2r).gt.-0.70710567)))) then
  25334 c
  25335                 iob = iob + 1
  25336                 knt_iip1_bad = 0
  25337 c
  25338                 l_print = .false.
  25339                 if(l_print) then
  25340                   write(io8,*) 
  25341                   write(io8,*) 'Bottom of ascent/descent ok-3-',ii
  25342                 endif
  25343 c
  25344 c Check if first point in flight/first point in hi-res segment is good
  25345 c Use ii, iip1, iip2 points
  25346 c --------------------------------------------------------------------
  25347               elseif(iip1.ne.0.and.iip2.ne.0.and.
  25348      $               (iim1.eq.0.or.
  25349      $                idt_dif0.ne.imiss.and.idt_dif0.gt.idt_near).and.
  25350      $               idt_difp1.ne.imiss.and.idt_difp1.le.idt_updn.and.
  25351      $               idt_difp2.ne.imiss.and.idt_difp2.le.idt_updn.and.
  25352      $               cos((pdirp1-pdirp2)*d2r).gt.0.8660254.and.
  25353      $               ((ht_ft0 .lt.ht_ftp1.and.
  25354      $                 ht_ftp1.lt.ht_ftp2).or.
  25355      $                (ht_ft0 .gt.ht_ftp1.and.
  25356      $                 ht_ftp1.gt.ht_ftp2).or.
  25357      $                ((ht_ft0 .lt.ht_ftp1.or.
  25358      $                  ht_ft0 .gt.ht_ftp1).and.
  25359      $                 abs(ht_difp2).lt.htdif_same*1.5).or.
  25360      $                (abs(ht_difp1).lt.htdif_same*1.5.and.
  25361      $                 (ht_ftp1.lt.ht_ftp2.or.
  25362      $                  ht_ftp1.gt.ht_ftp2)).or.
  25363      $                (abs(ht_difp1).lt.htdif_same*1.5.and.
  25364      $                 abs(ht_difp2).lt.htdif_same*1.5))) then
  25365 c
  25366                 iob = iob + 1
  25367                 knt_iip1_bad = 0
  25368 c

Page 535         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  25369                 l_print = .false.
  25370                 if(l_print) then
  25371                   write(io8,*) 
  25372                   write(io8,*) 'Hi-res time,posn agree for 1st point',ii
  25373                 endif
  25374 c
  25375 c Check if middle point in hi-res segment is good
  25376 c Use iim1, ii, iip1 points
  25377 c --------------------------------------------------------------------
  25378               elseif(iim1.ne.0.and.iip1.ne.0.and.
  25379      $               idt_dif0 .ne.imiss.and.idt_dif0 .le.idt_updn.and.
  25380      $               idt_difp1.ne.imiss.and.idt_difp1.le.idt_updn.and.
  25381      $               cos((pdir0-pdirp1)*d2r).gt.0.8660254.and.
  25382      $               ((ht_ftm1.lt.ht_ft0 .and.
  25383      $                 ht_ft0 .lt.ht_ftp1).or.
  25384      $                (ht_ftm1.gt.ht_ft0 .and.
  25385      $                 ht_ft0 .gt.ht_ftp1).or.
  25386      $                ((ht_ftm1.lt.ht_ft0 .or.
  25387      $                  ht_ftm1.gt.ht_ft0 ).and.
  25388      $                 abs(ht_difp1).lt.htdif_same*1.5).or.
  25389      $                (abs(ht_dif0 ).lt.htdif_same*1.5.and.
  25390      $                 (ht_ft0 .lt.ht_ftp1.or.
  25391      $                  ht_ft0 .gt.ht_ftp1)).or.
  25392      $                (abs(ht_dif0 ).lt.htdif_same*1.5.and.
  25393      $                 abs(ht_difp1).lt.htdif_same*1.5))) then
  25394 c
  25395                 iob = iob + 1
  25396                 knt_iip1_bad = 0
  25397 c
  25398                 l_print = .false.
  25399                 if(l_print) then
  25400                   write(io8,*) 
  25401                   write(io8,*) 'Hi-res time,posn agree',ii
  25402                 endif
  25403 c
  25404 c Check if last point in flight/last point of hi-res segment is good
  25405 c Use iim2, iim1, ii points
  25406 c ------------------------------------------------------------------
  25407               elseif(iim1.ne.0.and.iim2.ne.0.and.
  25408      $               (iip1.eq.0.or.
  25409      $                idt_difp1.ne.imiss.and.idt_difp1.gt.idt_near).and.
  25410      $               idt_difm1.ne.imiss.and.idt_difm1.le.idt_updn.and.
  25411      $               idt_dif0.ne.imiss.and.idt_dif0.le.idt_updn.and.
  25412      $               cos((pdirm1-pdir0)*d2r).gt.0.8660254.and.   
  25413      $               ((ht_ftm2.lt.ht_ftm1.and.
  25414      $                 ht_ftm1.lt.ht_ft0 ).or.
  25415      $                (ht_ftm2.gt.ht_ftm1.and.
  25416      $                 ht_ftm1.gt.ht_ft0 ).or.
  25417      $                ((ht_ftm2.lt.ht_ftm1.or.
  25418      $                  ht_ftm2.gt.ht_ftm1).and.
  25419      $                 abs(ht_dif0 ).lt.htdif_same*1.5).or.
  25420      $                (abs(ht_difm1).lt.htdif_same*1.5.and.
  25421      $                 (ht_ftm1.lt.ht_ft0 .or.
  25422      $                  ht_ftm1.gt.ht_ft0 )).or.
  25423      $                (abs(ht_difm1).lt.htdif_same*1.5.and.
  25424      $                 abs(ht_dif0 ).lt.htdif_same*1.5))) then
  25425 c

Page 536         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  25426                 iob = iob + 1
  25427                 knt_iip1_bad = 0
  25428 c
  25429                 l_print = .false.
  25430                 if(l_print) then
  25431                   write(io8,*) 
  25432                   write(io8,*) 'Hi-res time,posn agree for last pt',ii
  25433                 endif
  25434 c
  25435 c Check if track is doubling back on itself
  25436 c Compare direction of first segment with mean direction of track
  25437 c Use ii, iip1 points
  25438 c ---------------------------------------------------------------
  25439               elseif(iip1.ne.0.and.iobp1.le.ioblast.and.
  25440      $               (idt_difp1.ne.imiss.and.
  25441      $                (idt_difp1.le.idt_near*2.or.
  25442      $                 (l_ii_man_airep.and.l_iip1_man_airep.and.
  25443      $                  idt_difp1.le.idt_near*4))).and.
  25444      $               pdirp1.ne.amiss.and.
  25445 c     $               ifix(distp1*10.0).ne.0.and.
  25446      $               (.not.(distp1.lt.5.0.or.
  25447      $                      (distp1.lt.15.0.and.ht_ft0.lt.10000.))).and.
  25448      $               pdir_track.ne.amiss.and.
  25449      $               dist_track.gt.100.0.and.
  25450      $               cos((pdirp1-pdir_track)*d2r).lt.-0.258819) then
  25451 c
  25452                 if(ii.eq.iifirst.or.
  25453      $             (itype0.eq.i_mdcrs.and.
  25454      $              (itypep1.eq.i_mdcrs_asc.or.
  25455      $               itypep1.eq.i_mdcrs_des.or.
  25456      $               itypep1.eq.i_mdcrs_lvl)).or.
  25457      $             (itype0.eq.i_acars.and.
  25458      $              (itypep1.eq.i_acars_asc.or.
  25459      $               itypep1.eq.i_acars_des.or.
  25460      $               itypep1.eq.i_acars_lvl))) then
  25461 c
  25462                   iob = iob + 1
  25463                   knt_iip1_bad = 0
  25464 c
  25465                   if(c_acftreg(ii)(4:5).eq.'GU'.or.
  25466      $               c_acftreg(ii)(4:5).eq.'WU') then
  25467                     c_qc(ii)(2:2) = 'I'
  25468                     l_print = .false.
  25469                   else
  25470                     c_qc(ii)(1:1) = 'r'
  25471                     c_qc(ii)(3:4) = 'II'
  25472                     l_print = .true.
  25473                   endif
  25474 c
  25475                   if(l_print) then
  25476                     write(io8,*)
  25477                     write(io8,*) '1 Pt is headed backwards ii= ',ii
  25478                   endif
  25479 c
  25480                 else
  25481 c
  25482                   knt_iip1_bad = knt_iip1_bad + 1

Page 537         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  25483 c
  25484                   if((itypep1.eq.i_mdcrs.and.
  25485      $                (itype0.eq.i_mdcrs_asc.or.
  25486      $                 itype0.eq.i_mdcrs_des.or.
  25487      $                 itype0.eq.i_mdcrs_lvl)).or.
  25488      $               (itypep1.eq.i_acars.and.
  25489      $                (itype0.eq.i_acars_asc.or.
  25490      $                 itype0.eq.i_acars_des.or.
  25491      $                 itype0.eq.i_acars_lvl))) then
  25492 c
  25493                     c_qc(iip1)(2:2) = 'I'
  25494 c
  25495                     if(c_acftreg(iip1)(4:5).eq.'GU'.or.
  25496      $                 c_acftreg(iip1)(4:5).eq.'WU') then
  25497                       l_print = .false.
  25498                     else
  25499                       l_print = .true.
  25500                     endif
  25501 c
  25502                   else
  25503                     c_qc(iip1)(1:1) = 'r'
  25504                     c_qc(iip1)(3:4) = 'II'
  25505                     l_print = .true.
  25506                   endif
  25507 c
  25508                   if(l_print) then
  25509                     write(io8,*)
  25510                     write(io8,*) '2 Pt is headed backwards iip1= ',iip1
  25511                   endif
  25512                 endif
  25513 c
  25514 c Check if track is doubling back on itself
  25515 c Compare direction of first segment with mean direction of track
  25516 c Exclude allowed low-level manuevers
  25517 c Use iip1, iip2 points
  25518 c ---------------------------------------------------------------
  25519               elseif(iip1.ne.0.and.iip2.ne.0.and.iobp2.le.ioblast.and.
  25520      $               (idt_difp2.ne.imiss.and.
  25521      $                (idt_difp2.le.idt_near*2.or.
  25522      $                 (l_ii_man_airep.and.l_iip1_man_airep.and.
  25523      $                  idt_difp2.le.idt_near*4))).and.
  25524      $               pdirp2.ne.amiss.and.
  25525 c     $               ifix(distp2*10.0).ne.0.and.
  25526      $               (.not.(distp2.lt.5.0.or.
  25527      $                     (distp2.lt.15.0.and.ht_ftp1.lt.10000.))).and.
  25528      $               pdir_track.ne.amiss.and.
  25529      $               dist_track.gt.100.0.and.
  25530      $               cos((pdirp2-pdir_track)*d2r).lt.-0.258819.and.
  25531      $               .not.
  25532      $                (ht_ft0.lt.21000.0.and.
  25533      $                 (cos((pdirp1-pdirp2)*d2r).gt.0.0.or.
  25534      $                  (distp1.lt.55.0.and.
  25535      $                   distp2.lt.55.0.and.
  25536      $                   abs(ht_difp1).lt.4000.0.and.
  25537      $                   abs(ht_difp2).lt.4000.0.and.
  25538      $                   abs(ht_difp1).ge.htdif_same*1.5.and.
  25539      $                   abs(ht_difp2).ge.htdif_same*1.5).or.

Page 538         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  25540      $                  ((distp1.lt.15.0.and.
  25541      $                    abs(ht_difp1).lt.1500.0.and.
  25542      $                    abs(ht_difp1).ge.htdif_same*0.5).or.
  25543      $                   (distp2.lt.15.0.and.
  25544      $                    abs(ht_difp2).lt.1500.0.and.
  25545      $                    abs(ht_difp2).ge.htdif_same*0.5))))) then
  25546 c
  25547                 knt_iip1_bad = knt_iip1_bad + 1
  25548 c
  25549                 if((itypep1.eq.i_mdcrs.and.
  25550      $              (itypep2.eq.i_mdcrs_asc.or.
  25551      $               itypep2.eq.i_mdcrs_des.or.
  25552      $               itypep2.eq.i_mdcrs_lvl)).or.
  25553      $             (itypep1.eq.i_acars.and.
  25554      $              (itypep2.eq.i_acars_asc.or.
  25555      $               itypep2.eq.i_acars_des.or.
  25556      $               itypep2.eq.i_acars_lvl))) then
  25557 c
  25558                   c_qc(iip1)(2:2) = 'I'
  25559 c
  25560                   if(c_acftreg(iip1)(4:5).eq.'GU'.or.
  25561      $               c_acftreg(iip1)(4:5).eq.'WU') then
  25562                     l_print = .false.
  25563                   else
  25564                     l_print = .true.
  25565                   endif
  25566 c
  25567                   if(l_print) then
  25568                     write(io8,*)
  25569                     write(io8,*) '3 Pt is headed backwards iip1= ',iip1
  25570                   endif
  25571 c
  25572                 elseif((itypep2.eq.i_mdcrs.and.
  25573      $                  (itypep1.eq.i_mdcrs_asc.or.
  25574      $                   itypep1.eq.i_mdcrs_des.or.
  25575      $                   itypep1.eq.i_mdcrs_lvl)).or.
  25576      $                 (itypep2.eq.i_acars.and.
  25577      $                  (itypep1.eq.i_acars_asc.or.
  25578      $                   itypep1.eq.i_acars_des.or.
  25579      $                   itypep1.eq.i_acars_lvl))) then
  25580 c
  25581                   c_qc(iip2)(2:2) = 'I'
  25582 c
  25583                   if(c_acftreg(iip2)(4:5).eq.'GU'.or.
  25584      $               c_acftreg(iip2)(4:5).eq.'WU') then
  25585                     l_print = .false.
  25586                   else
  25587                     l_print = .true.
  25588                   endif
  25589 c
  25590                   if(l_print) then
  25591                     write(io8,*)
  25592                     write(io8,*) '4 Pt is headed backwards iip2= ',iip2
  25593                   endif
  25594 c
  25595                 else
  25596                   c_qc(iip2)(1:1) = 'r'

Page 539         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  25597                   c_qc(iip2)(3:4) = 'II'
  25598                   l_print = .true.
  25599 c
  25600                   if(l_print) then
  25601                     write(io8,*)
  25602                     write(io8,*) '5 Pt is headed backwards iip2= ',iip2
  25603                   endif
  25604                 endif
  25605 c
  25606 c Check if first point in flight/first point after time gap is good
  25607 c Use ii, iip1, iip2 points
  25608 c -----------------------------------------------------------------
  25609               elseif(iip1.ne.0.and.iip2.ne.0.and.
  25610      $               (iim1.eq.0.or.
  25611      $                idt_dif0.eq.imiss.or.
  25612      $                (idt_dif0.ne.imiss.and.
  25613      $                 ((.not.(l_ii_man_airep.and.l_iim1_man_airep).and.
  25614      $                   idt_dif0.gt.idt_near).or.
  25615      $                  (l_ii_man_airep.and.l_iim1_man_airep.and.
  25616      $                   idt_dif0.gt.idt_near*2)))).and.
  25617      $               (idt_difp1.ne.imiss.and.
  25618      $                (idt_difp1.le.idt_near*2.or.
  25619      $                 (l_ii_man_airep.and.l_iip1_man_airep.and.
  25620      $                  idt_difp1.le.idt_near*4))).and.
  25621      $               (idt_difp2.ne.imiss.and.
  25622      $                (idt_difp2.le.idt_near*2.or.
  25623      $                 (l_iip1_man_airep.and.l_iip2_man_airep.and.
  25624      $                  idt_difp2.le.idt_near*4))).and.
  25625      $               (cos((pdirp1-pdirp2)*d2r).gt.0.25881904.or.
  25626      $                (distp1.lt.15.0.and.ht_ftp1.lt.10000.0).or.
  25627      $                (distp2.lt.15.0.and.ht_ftp2.lt.10000.0).or.
  25628      $                (distp1.lt.5.0).or.
  25629      $                (distp2.lt.5.0)).and.
  25630      $               ((ht_ft0 .lt.ht_ftp1.and.
  25631      $                 ht_ftp1.lt.ht_ftp2).or.
  25632      $                (ht_ft0 .gt.ht_ftp1.and.
  25633      $                 ht_ftp1.gt.ht_ftp2).or.
  25634      $                (ht_ft0 .lt.ht_ftp1.and.
  25635      $                 ht_ftp1.gt.ht_ftp2.and.
  25636      $                 (abs(ht_difp1).lt.7000.0.or.
  25637      $                  abs(ht_difp2).lt.7000.0)).or.
  25638      $                (ht_ft0 .gt.ht_ftp1.and.
  25639      $                 ht_ftp1.lt.ht_ftp2.and.
  25640      $                 (abs(ht_difp1).lt.3000.0.or.
  25641      $                  abs(ht_difp2).lt.3000.0)).or.
  25642      $                ((ht_ft0 .lt.ht_ftp1.or.
  25643      $                  ht_ft0 .gt.ht_ftp1).and.
  25644      $                 abs(ht_difp2).lt.htdif_same*1.5).or.
  25645      $                (abs(ht_difp1).lt.htdif_same*1.5.and.
  25646      $                 (ht_ftp1.lt.ht_ftp2.or.
  25647      $                  ht_ftp1.gt.ht_ftp2)).or.
  25648      $                (abs(ht_difp1).lt.htdif_same*1.5.and.
  25649      $                 abs(ht_difp2).lt.htdif_same*1.5))) then
  25650 c
  25651                 iob = iob + 1
  25652                 knt_iip1_bad = 0
  25653 c

Page 540         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  25654                 l_print = .false.
  25655                 if(l_print) then
  25656                   write(io8,*) 
  25657                   write(io8,*) 'Time, pos, alt agree for 1st pt',ii
  25658                 endif
  25659 c
  25660 c Check if middle point in flight is good
  25661 c Use iim1, ii, iip1 points
  25662 c ---------------------------------------
  25663               elseif(iim1.ne.0.and.iip1.ne.0.and.
  25664      $               (idt_dif0.ne.imiss.and.
  25665      $                (idt_dif0 .le.idt_near*2.or.
  25666      $                 (l_ii_man_airep.and.l_iim1_man_airep.and.
  25667      $                  idt_dif0 .le.idt_near*4))).and.
  25668      $               (idt_difp1.ne.imiss.and.
  25669      $                (idt_difp1.le.idt_near*2.or.
  25670      $                 (l_ii_man_airep.and.l_iip1_man_airep.and.
  25671      $                  idt_difp1.le.idt_near*4))).and.
  25672      $               (cos((pdir0-pdirp1)*d2r).gt.0.25881904.or.
  25673      $                (dist0 .lt.15.0.and.ht_ft0 .lt.10000.0).or.
  25674      $                (distp1.lt.15.0.and.ht_ftp1.lt.10000.0).or.
  25675      $                (dist0 .lt.5.0).or.
  25676      $                (distp1.lt.5.0)).and.
  25677      $               ((ht_ftm1.lt.ht_ft0 .and.
  25678      $                 ht_ft0 .lt.ht_ftp1).or.
  25679      $                (ht_ftm1.gt.ht_ft0 .and.
  25680      $                 ht_ft0 .gt.ht_ftp1).or.
  25681      $                (ht_ftm1.lt.ht_ft0 .and.
  25682      $                 ht_ft0 .gt.ht_ftp1.and.
  25683      $                 (abs(ht_dif0) .lt.7000.0.or.
  25684      $                  abs(ht_difp1).lt.7000.0)).or.
  25685      $                (ht_ftm1.gt.ht_ft0 .and.
  25686      $                 ht_ft0 .lt.ht_ftp1.and.
  25687      $                 (abs(ht_dif0) .lt.3000.0.or.
  25688      $                  abs(ht_difp1).lt.3000.0)).or.
  25689      $                ((ht_ftm1.lt.ht_ft0 .or.
  25690      $                  ht_ftm1.gt.ht_ft0 ).and.
  25691      $                 abs(ht_difp1).lt.htdif_same*1.5).or.
  25692      $                (abs(ht_dif0 ).lt.htdif_same*1.5.and.
  25693      $                 (ht_ft0 .lt.ht_ftp1.or.
  25694      $                  ht_ft0 .gt.ht_ftp1)).or.
  25695      $                (abs(ht_dif0 ).lt.htdif_same*1.5.and.
  25696      $                 abs(ht_difp1).lt.htdif_same*1.5))) then
  25697 c
  25698                 iob = iob + 1
  25699                 knt_iip1_bad = 0
  25700 c
  25701                 l_print = .false.
  25702                 if(l_print) then
  25703                   write(io8,*) 
  25704                   write(io8,*) 'Time, pos, alt agree',ii
  25705                 endif
  25706 c
  25707 c Use ii, iip1, iip2 points
  25708 c -------------------------
  25709               elseif(iip1.ne.0.and.iip2.ne.0.and.
  25710      $               (idt_difp1.ne.imiss.and.

Page 541         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  25711      $                (idt_difp1.le.idt_near*2.or.
  25712      $                 (l_ii_man_airep.and.l_iip1_man_airep.and.
  25713      $                  idt_difp1.le.idt_near*4))).and.
  25714      $               (idt_difp2.ne.imiss.and.
  25715      $                (idt_difp2.le.idt_near*2.or.
  25716      $                 (l_iip1_man_airep.and.l_iip2_man_airep.and.
  25717      $                  idt_difp2.le.idt_near*4))).and.
  25718      $               (distp1.lt.5.0.or.
  25719      $                distp2.lt.5.0).and.
  25720      $               ((ht_ft0 .lt.ht_ftp1.and.
  25721      $                 ht_ftp1.lt.ht_ftp2).or.
  25722      $                (ht_ft0 .gt.ht_ftp1.and.
  25723      $                 ht_ftp1.gt.ht_ftp2).or.
  25724      $                (ht_ft0 .lt.ht_ftp1.and.
  25725      $                 ht_ftp1.gt.ht_ftp2.and.
  25726      $                 (abs(ht_difp1).lt.7000.0.or.
  25727      $                  abs(ht_difp2).lt.7000.0)).or.
  25728      $                (ht_ft0 .gt.ht_ftp1.and.
  25729      $                 ht_ftp1.lt.ht_ftp2.and.
  25730      $                 (abs(ht_difp1).lt.3000.0.or.
  25731      $                  abs(ht_difp2).lt.3000.0)).or.
  25732      $                ((ht_ft0 .lt.ht_ftp1.or.
  25733      $                  ht_ft0 .gt.ht_ftp1).and.
  25734      $                 abs(ht_difp2).lt.htdif_same*1.5).or.
  25735      $                (abs(ht_difp1).lt.htdif_same*1.5.and.
  25736      $                 (ht_ftp1.lt.ht_ftp2.or.
  25737      $                  ht_ftp1.gt.ht_ftp2)).or.
  25738      $                (abs(ht_difp1).lt.htdif_same*1.5.and.
  25739      $                 abs(ht_difp2).lt.htdif_same*1.5))) then
  25740 c
  25741                 iob = iob + 1
  25742                 knt_iip1_bad = 0
  25743 c
  25744                 l_print = .false.
  25745                 if(l_print) then
  25746                   write(io8,*) 
  25747                   write(io8,*) 'Time, pos, alt agree for near pts',ii
  25748                 endif
  25749 c             
  25750 c Check if last point in flight/last point before time gap is good
  25751 c Use iim2, iim1, ii points
  25752 c ----------------------------------------------------------------
  25753               elseif(iim2.ne.0.and.iim1.ne.0.and.
  25754      $               (iip1.eq.0.or.
  25755      $                idt_difp1.eq.imiss.or.
  25756      $                (idt_difp1.ne.imiss.and.
  25757      $                 ((.not.(l_ii_man_airep.and.l_iip1_man_airep).and.
  25758      $                   idt_difp1.gt.idt_near).or.
  25759      $                  (l_ii_man_airep.and.l_iip1_man_airep.and.
  25760      $                   idt_difp1.gt.idt_near*2)))).and.
  25761      $               (idt_difm1.ne.imiss.and.
  25762      $                (idt_difm1.le.idt_near*2.or.
  25763      $                 (l_iim1_man_airep.and.l_iim2_man_airep.and.
  25764      $                  idt_difm1.le.idt_near*4))).and.
  25765      $               (idt_dif0 .ne.imiss.and.
  25766      $                (idt_dif0 .le.idt_near*2.or.
  25767      $                 (l_ii_man_airep.and.l_iim1_man_airep.and.

Page 542         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  25768      $                  idt_dif0 .le.idt_near*4))).and.
  25769      $               (cos((pdirm1-pdir0)*d2r).gt.0.25881904.or.
  25770      $                (distm1.lt.15.0.and.ht_ftm1.lt.10000.0).or.
  25771      $                (dist0 .lt.15.0.and.ht_ft0 .lt.10000.0).or.
  25772      $                (distm1.lt.5.0).or.
  25773      $                (dist0 .lt.5.0)).and.
  25774      $               ((ht_ftm2.lt.ht_ftm1.and.
  25775      $                 ht_ftm1.lt.ht_ft0 ).or.
  25776      $                (ht_ftm2.gt.ht_ftm1.and.
  25777      $                 ht_ftm1.gt.ht_ft0 ).or.
  25778      $                (ht_ftm2.lt.ht_ftm1.and.
  25779      $                 ht_ftm1.gt.ht_ft0 .and.
  25780      $                 (abs(ht_difm1).lt.7000.0.or.
  25781      $                  abs(ht_dif0) .lt.7000.0)).or.
  25782      $                (ht_ftm2.gt.ht_ftm1.and.
  25783      $                 ht_ftm1.lt.ht_ft0 .and.
  25784      $                 (abs(ht_difm1).lt.3000.0.or.
  25785      $                  abs(ht_dif0) .lt.3000.0)).or.
  25786      $                ((ht_ftm2.lt.ht_ftm1.or.
  25787      $                  ht_ftm2.gt.ht_ftm1).and.
  25788      $                 abs(ht_dif0 ).lt.htdif_same*1.5).or.
  25789      $                (abs(ht_difm1).lt.htdif_same*1.5.and.
  25790      $                 (ht_ftm1.lt.ht_ft0 .or.
  25791      $                  ht_ftm1.gt.ht_ft0 )).or.
  25792      $                (abs(ht_difm1).lt.htdif_same*1.5.and.
  25793      $                 abs(ht_dif0 ).lt.htdif_same*1.5))) then
  25794 c
  25795                 iob = iob + 1
  25796                 knt_iip1_bad = 0
  25797 c
  25798                 l_print = .false.
  25799                 if(l_print) then
  25800                   write(io8,*) 
  25801                   write(io8,*) 'Time, pos, alt agree for last pt',ii
  25802                 endif
  25803 c
  25804 c Check for isolated manAIREPs
  25805 c ----------------------------
  25806               elseif(l_ii_man_airep.and.
  25807      $               ((iim1.ne.0.and.iip1.ne.0.and.
  25808      $                ((idt_difm1.gt.idt_near*2.and.
  25809      $                  idt_difp1.gt.idt_near*2).or.
  25810      $                 (idt_dif0 .gt.idt_near*2.and.
  25811      $                  idt_difp1.gt.idt_near*2).or.
  25812      $                 (idt_dif0 .gt.idt_near*2.and.
  25813      $                  idt_difp2.gt.idt_near*2))).or.
  25814      $               (iim1.eq.0.and.idt_difp1.gt.idt_near*2).or.
  25815      $               (iim1.eq.0.and.idt_difp2.gt.idt_near*2).or.
  25816      $               (iim2.eq.0.and.iim1.ne.0.and.
  25817      $                idt_difp1.gt.idt_near*2).or.
  25818      $               (iip1.eq.0.and.idt_dif0 .gt.idt_near*2).or.
  25819      $               (iip1.eq.0.and.idt_difm1.gt.idt_near*2).or.
  25820      $               (iip2.eq.0.and.iip1.ne.0.and.
  25821      $                idt_dif0 .gt.idt_near*2)))then
  25822 c
  25823                 c_qc(ii)(11:11) = 'I'
  25824 c

Page 543         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  25825                 iob = iob + 1
  25826                 knt_iip1_bad = 0
  25827 c
  25828                 l_print = .false.
  25829                 if(l_print) then
  25830                   write(io8,*) 
  25831                   write(io8,*) 'Isolated manAIREP(s)',ii
  25832                 endif
  25833 c
  25834 c Check for other isolated reports
  25835 c --------------------------------
  25836               elseif((.not.l_ii_man_airep).and.
  25837      $               ((iim1.ne.0.and.iip1.ne.0.and.
  25838      $                ((idt_difm1.gt.idt_near*2/3.and.
  25839      $                  idt_difp1.gt.idt_near*2/3).or.
  25840      $                 (idt_dif0 .gt.idt_near*2/3.and.
  25841      $                  idt_difp1.gt.idt_near*2/3).or.
  25842      $                 (idt_dif0 .gt.idt_near*2/3.and.
  25843      $                  idt_difp2.gt.idt_near*2/3))).or.
  25844      $               (iim1.eq.0.and.idt_difp1.gt.idt_near*2/3).or.
  25845      $               (iim1.eq.0.and.idt_difp2.gt.idt_near*2/3).or.
  25846      $               (iim2.eq.0.and.iim1.ne.0.and.
  25847      $                idt_difp1.gt.idt_near*2/3).or.
  25848      $               (iip1.eq.0.and.idt_dif0 .gt.idt_near*2/3).or.
  25849      $               (iip1.eq.0.and.idt_difm1.gt.idt_near*2/3).or.
  25850      $               (iip2.eq.0.and.iip1.ne.0.and.
  25851      $                idt_dif0 .gt.idt_near*2/3)))then
  25852 c
  25853                 c_qc(ii)(11:11) = 'I'
  25854 c
  25855                 iob = iob + 1
  25856                 knt_iip1_bad = 0
  25857 c
  25858                 l_print = .false.
  25859                 if(l_print) then
  25860                   write(io8,*) 
  25861                   write(io8,*) 'Isolated point(s)',ii
  25862                 endif
  25863 c
  25864 c Check for position reports
  25865 c ------------------------------
  25866               elseif(iim1.ne.0.and.iip1.ne.0.and.
  25867      $               idt_dif0 .ne.imiss.and.
  25868      $               idt_dif0 .le.idt_near.and.
  25869      $               idt_difp1.ne.imiss.and.
  25870      $               idt_difp1.le.idt_near.and.
  25871      $               (((itypem1.eq.i_mdcrs_asc.or.
  25872      $                  itypem1.eq.i_mdcrs_des.or.
  25873      $                  itypem1.eq.i_mdcrs_lvl).and.
  25874      $                 itype0.eq.i_mdcrs.and.
  25875      $                 (itypep1.eq.i_mdcrs_asc.or.
  25876      $                  itypep1.eq.i_mdcrs_des.or.
  25877      $                  itypep1.eq.i_mdcrs_lvl)).or.
  25878      $                (itypem1.eq.i_mdcrs_asc.and.
  25879      $                 itype0.eq.i_mdcrs.and.
  25880      $                 itypep1.eq.i_mdcrs.and.
  25881      $                 ht_ftm1.gt.20000.0).or.

Page 544         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  25882      $                (itypem1.eq.i_mdcrs.and.
  25883      $                 itype0.eq.i_mdcrs.and.
  25884      $                 itypep1.eq.i_mdcrs_des.and.
  25885      $                 ht_ftp1.gt.20000.0).or.
  25886      $                ((itypem1.eq.i_acars_asc.or.
  25887      $                  itypem1.eq.i_acars_des.or.
  25888      $                  itypem1.eq.i_acars_lvl).and.
  25889      $                 itype0.eq.i_acars.and.
  25890      $                 (itypep1.eq.i_acars_asc.or.
  25891      $                  itypep1.eq.i_acars_des.or.
  25892      $                  itypep1.eq.i_acars_lvl)).or.
  25893      $                (itypem1.eq.i_acars_asc.and.
  25894      $                 itype0.eq.i_acars.and.
  25895      $                 itypep1.eq.i_acars.and.
  25896      $                 ht_ftm1.gt.20000.0).or.
  25897      $                (itypem1.eq.i_acars.and.
  25898      $                 itype0.eq.i_acars.and.
  25899      $                 itypep1.eq.i_acars_des.and.
  25900      $                 ht_ftp1.gt.20000.0))) then
  25901 c
  25902                 c_qc(ii)(2:2) = 'I'
  25903 c
  25904                 iob = iob + 1
  25905                 knt_iip1_bad = 0
  25906 c
  25907                 if(c_acftreg(ii)(4:5).eq.'GU'.or.
  25908      $             c_acftreg(ii)(4:5).eq.'WU') then
  25909                   l_print = .false.
  25910                 else
  25911                   l_print = .true.
  25912                 endif
  25913 c
  25914                 if(l_print) then
  25915                   write(io8,*)
  25916                   write(io8,*) 'ii is position report'
  25917                 endif
  25918 c
  25919               elseif(iip1.ne.0.and.iip2.ne.0.and.
  25920      $               idt_difp1 .ne.imiss.and.
  25921      $               idt_difp1.le.idt_near.and.
  25922      $               idt_difp2.ne.imiss.and.
  25923      $               idt_difp2.le.idt_near.and.
  25924      $               (((itype0.eq.i_mdcrs_asc.or.
  25925      $                  itype0.eq.i_mdcrs_des.or.
  25926      $                  itype0.eq.i_mdcrs_lvl).and.
  25927      $                 itypep1.eq.i_mdcrs.and.
  25928      $                 (itypep2.eq.i_mdcrs_asc.or.
  25929      $                  itypep2.eq.i_mdcrs_des.or.
  25930      $                  itypep2.eq.i_mdcrs_lvl)).or.
  25931      $                (itype0.eq.i_mdcrs_asc.and.
  25932      $                 itypep1.eq.i_mdcrs.and.
  25933      $                 itypep2.eq.i_mdcrs.and.
  25934      $                 ht_ft0.gt.20000.0).or.
  25935      $                (itype0.eq.i_mdcrs.and.
  25936      $                 itypep1.eq.i_mdcrs.and.
  25937      $                 itypep2.eq.i_mdcrs_des.and.
  25938      $                 ht_ftp2.gt.20000.0).or.

Page 545         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  25939      $                ((itype0.eq.i_acars_asc.or.
  25940      $                  itype0.eq.i_acars_des.or.
  25941      $                  itype0.eq.i_acars_lvl).and.
  25942      $                 itypep1.eq.i_acars.and.
  25943      $                 (itypep2.eq.i_acars_asc.or.
  25944      $                  itypep2.eq.i_acars_des.or.
  25945      $                  itypep2.eq.i_acars_lvl)).or.
  25946      $                (itype0.eq.i_acars_asc.and.
  25947      $                 itypep1.eq.i_acars.and.
  25948      $                 itypep2.eq.i_acars.and.
  25949      $                 ht_ft0.gt.20000.0).or.
  25950      $                (itype0.eq.i_acars.and.
  25951      $                 itypep1.eq.i_acars.and.
  25952      $                 itypep2.eq.i_acars_des.and.
  25953      $                 ht_ftp2.gt.20000.0))) then
  25954 c
  25955                 c_qc(iip1)(2:2) = 'I'
  25956 c
  25957                 knt_iip1_bad = knt_iip1_bad + 1
  25958 c
  25959                 if(c_acftreg(ii)(4:5).eq.'GU'.or.
  25960      $             c_acftreg(ii)(4:5).eq.'WU') then
  25961                   l_print = .false.
  25962                 else
  25963                   l_print = .true.
  25964                 endif
  25965 c
  25966                 if(l_print) then
  25967                   write(io8,*)
  25968                   write(io8,*) 'iip1 is position report'
  25969                 endif
  25970 cc
  25971 cc Check for manAIREPs that don't fit the track properly
  25972 cc -----------------------------------------------------
  25973 c              elseif(iim1.ne.0.and.iip1.ne.0.and.
  25974 c     $               idt_dif0 .ne.imiss.and.
  25975 c     $               idt_dif0 .le.idt_near.and.
  25976 c     $               idt_difp1.ne.imiss.and.
  25977 c     $               idt_difp1.le.idt_near.and.
  25978 c     $               ( ((itype(iim1).eq.i_mdcrs_asc.or.
  25979 c     $                   itype(iim1).eq.i_mdcrs_des.or.
  25980 c     $                   itype(iim1).eq.i_mdcrs_lvl.or.
  25981 c     $                   itype(iim1).eq.i_mdcrs).and.
  25982 c     $                  (itype(ii).eq.i_man_airep.or.
  25983 c     $                   itype(ii).eq.i_man_Yairep).and.
  25984 c     $                  (itype(iip1).eq.i_mdcrs_asc.or.
  25985 c     $                   itype(iip1).eq.i_mdcrs_des.or.
  25986 c     $                   itype(iip1).eq.i_mdcrs_lvl.or.
  25987 c     $                   itype(iip1).eq.i_mdcrs)).or.
  25988 c     $                 ((itype(iim1).eq.i_acars_asc.or.
  25989 c     $                   itype(iim1).eq.i_acars_des.or.
  25990 c     $                   itype(iim1).eq.i_acars_lvl.or.
  25991 c     $                   itype(iim1).eq.i_acars).and.
  25992 c     $                  (itype(ii).eq.i_man_airep.or.
  25993 c     $                   itype(ii).eq.i_man_Yairep).and.
  25994 c     $                  (itype(iip1).eq.i_acars_asc.or.
  25995 c     $                   itype(iip1).eq.i_acars_des.or.

Page 546         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  25996 c     $                   itype(iip1).eq.i_acars_lvl.or.
  25997 c     $                   itype(iip1).eq.i_acars)) )) then
  25998 cc
  25999 c                c_qc(ii)(1:1) = 'X'
  26000 c                c_qc(ii)(3:4) = 'II'
  26001 c
  26002 c                iob = iob + 1
  26003 c                knt_iip1_bad = 0
  26004 cc
  26005 c                l_print = .false.
  26006 c                if(l_print) then
  26007 c                  write(io8,*)
  26008 c                    write(io8,*) 'manAIREP ii does not fit'
  26009 c                endif
  26010 cc
  26011 c              elseif(iip1.ne.0.and.iip2.ne.0.and.
  26012 c     $               idt_difp1 .ne.imiss.and.
  26013 c     $               idt_difp1.le.idt_near.and.
  26014 c     $               idt_difp2.ne.imiss.and.
  26015 c     $               idt_difp2.le.idt_near.and.
  26016 c     $               (((itype(ii).eq.i_mdcrs_asc.or.
  26017 c     $                  itype(ii).eq.i_mdcrs_des.or.
  26018 c     $                  itype(ii).eq.i_mdcrs_lvl.or.
  26019 c     $                  itype(ii).eq.i_mdcrs).and.
  26020 c     $                 (itype(iip1).eq.i_man_airep.or.
  26021 c     $                  itype(iip1).eq.i_man_Yairep).and.
  26022 c     $                 (itype(iip2).eq.i_mdcrs_asc.or.
  26023 c     $                  itype(iip2).eq.i_mdcrs_des.or.
  26024 c     $                  itype(iip2).eq.i_mdcrs_lvl.or.
  26025 c     $                  itype(iip2).eq.i_mdcrs))).or.
  26026 c     $                ((itype(ii).eq.i_acars_asc.or.
  26027 c     $                  itype(ii).eq.i_acars_des.or.
  26028 c     $                  itype(ii).eq.i_acars_lvl.or.
  26029 c     $                  itype(ii).eq.i_acars).and.
  26030 c     $                 (itype(iip1).eq.i_man_airep.or.
  26031 c     $                  itype(iip1).eq.i_man_Yairep).and.
  26032 c     $                 (itype(iip2).eq.i_acars_asc.or.
  26033 c     $                  itype(iip2).eq.i_acars_des.or.
  26034 c     $                  itype(iip2).eq.i_acars_lvl.or.
  26035 c     $                  itype(iip2).eq.i_acars))) then
  26036 cc             
  26037 c                c_qc(iip1)(1:1) = 'X'
  26038 c                c_qc(iip1)(3:4) = 'II'
  26039 c
  26040 c                knt_iip1_bad = knt_iip1_bad + 1
  26041 cc
  26042 c                l_print = .false.
  26043 c                if(l_print) then
  26044 c                  write(io8,*)
  26045 c                    write(io8,*) 'manAIREP iip1 does not fit'
  26046 c                endif
  26047 c
  26048 c Reject isolated altitude maxima
  26049 c Use iim1, ii, and iip1 points
  26050 c -------------------------------
  26051               elseif(iip1.ne.0.and.iip2.ne.0.and.
  26052      $               (iim1.eq.0.or.

Page 547         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  26053      $                idt_dif0.eq.imiss.or.
  26054      $                (idt_dif0.ne.imiss.and.
  26055      $                 ((.not.(l_ii_man_airep.and.l_iim1_man_airep).and.
  26056      $                   idt_dif0.gt.idt_near*2).or.
  26057      $                  (l_ii_man_airep.and.l_iim1_man_airep.and.
  26058      $                   idt_dif0.gt.idt_near*4)))).and.
  26059      $               (idt_difp1.ne.imiss.and.
  26060      $                (idt_difp1.le.idt_near*2.or.
  26061      $                 (l_ii_man_airep.and.l_iip1_man_airep.and.
  26062      $                  idt_difp1.le.idt_near*4))).and.
  26063      $               (idt_difp2.ne.imiss.and.
  26064      $                (idt_difp2.le.idt_near*2.or.
  26065      $                 (l_iip1_man_airep.and.l_iip2_man_airep.and.
  26066      $                  idt_difp2.le.idt_near*4))).and.
  26067      $               ((ht_ft0 .lt.ht_ftp1.and.
  26068      $                 ht_ftp1.gt.ht_ftp2.and.
  26069      $                 abs(ht_difp1).ge.7000.0.and.
  26070      $                 abs(ht_difp2).ge.7000.0).or.
  26071      $                (ht_ft0 .gt.ht_ftp1.and.
  26072      $                 ht_ftp1.lt.ht_ftp2.and.
  26073      $                 abs(ht_difp1).ge.3000.0.and.
  26074      $                 abs(ht_difp2).ge.3000.0))) then
  26075 c
  26076                   c_qc(iip1)(1:1) = 'X'
  26077                   c_qc(iip1)(5:5) = 'I'
  26078 c
  26079                   knt_iip1_bad = knt_iip1_bad + 1
  26080 c
  26081                   l_print = .false.
  26082                   if(l_print) then
  26083                     write(io8,*) 
  26084                     write(io8,*) 'Isolated alt max: iip1 = ',iip1
  26085                   endif
  26086 c
  26087 c Reject isolated altitude maxima
  26088 c Use iim1, ii, and iip1 points
  26089 c -------------------------------
  26090               elseif(iim1.ne.0.and.iip1.ne.0.and.
  26091      $               (idt_dif0.ne.imiss.and.
  26092      $                (idt_dif0 .le.idt_near*2.or.
  26093      $                 (l_ii_man_airep.and.l_iim1_man_airep.and.
  26094      $                  idt_dif0 .le.idt_near*4))).and.
  26095      $               (idt_difp1.ne.imiss.and.
  26096      $                (idt_difp1.le.idt_near*2.or.
  26097      $                 (l_ii_man_airep.and.l_iip1_man_airep.and.
  26098      $                  idt_difp1.le.idt_near*4))).and.
  26099      $               ((ht_ftm1.lt.ht_ft0 .and.
  26100      $                 ht_ft0 .gt.ht_ftp1.and.
  26101      $                 abs(ht_dif0) .ge.7000.0.and.
  26102      $                 abs(ht_difp1).ge.7000.0).or.
  26103      $                (ht_ftm1.gt.ht_ft0 .and.
  26104      $                 ht_ft0 .lt.ht_ftp1.and.
  26105      $                 abs(ht_dif0) .ge.3000.0.and.
  26106      $                 abs(ht_difp1).ge.3000.0))) then
  26107 c
  26108                 c_qc(ii)(1:1) = 'X'
  26109                 c_qc(ii)(5:5) = 'I'

Page 548         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  26110 c
  26111                 iob = iob + 1
  26112                 knt_iip1_bad = 0
  26113 c
  26114                 l_print = .false.
  26115                 if(l_print) then
  26116                   write(io8,*) 
  26117                     write(io8,*) 'Isolated alt max: ii = ',ii
  26118                 endif
  26119 c
  26120 c Check if first point in flight/first point after time gap is bad
  26121 c Use ii, iip1, iip2 points
  26122 c ----------------------------------------------------------------
  26123               elseif(iip1.ne.0.and.iip2.ne.0.and.
  26124      $               (iim1.eq.0.or.
  26125      $                idt_dif0.eq.imiss.or.
  26126      $                (idt_dif0.ne.imiss.and.
  26127      $                 ((.not.(l_ii_man_airep.and.l_iim1_man_airep).and.
  26128      $                   idt_dif0.gt.idt_near*2).or.
  26129      $                  (l_ii_man_airep.and.l_iim1_man_airep.and.
  26130      $                   idt_dif0.gt.idt_near*4)))).and.
  26131      $               (idt_difp1.ne.imiss.and.
  26132      $                (idt_difp1.le.idt_near*2.or.
  26133      $                 (l_ii_man_airep.and.l_iip1_man_airep.and.
  26134      $                  idt_difp1.le.idt_near*4))).and.
  26135      $               (idt_difp2.ne.imiss.and.
  26136      $                (idt_difp2.le.idt_near*2.or.
  26137      $                 (l_iip1_man_airep.and.l_iip2_man_airep.and.
  26138      $                  idt_difp2.le.idt_near*4))).and.
  26139      $               distp1.gt.5.0.and.distp2.gt.5.0.and.               ! new
  26140      $               cos((pdirp1-pdirp2)*d2r).lt.0.5) then
  26141 c 
  26142 c               Reject isolated off-track point at point iip2
  26143 c               ---------------------------------------------
  26144                 if(pdirp1.ne.amiss.and.
  26145      $             pdirp2.ne.amiss.and.
  26146      $             pdirp3.ne.amiss.and.
  26147      $             pdir_wop2.ne.amiss.and.
  26148      $             ((cos((pdirp2-pdirp3   )*d2r).lt.-0.5.and.
  26149      $               cos((pdirp1-pdir_wop2)*d2r).gt.0.25881904).or.  
  26150 c     $              (cos((pdirp2-pdirp3   )*d2r).lt.0.25881904.and.
  26151      $               cos((pdirp1-pdir_wop2)*d2r).gt.0.70710678)) then  
  26152 c
  26153                   c_qc(iip2)(1:1) = 'X'
  26154                   c_qc(iip2)(3:4) = 'II'
  26155 c
  26156                   knt_iip1_bad = knt_iip1_bad + 1
  26157 c
  26158                   l_print = .true.
  26159                   if(l_print) then
  26160                     write(io8,*) 
  26161                     write(io8,*) 'Bad manuever for 1st pt--iip2 = ',iip2
  26162                   endif
  26163 c 
  26164 c               Reject isolated off-track point at point iip1
  26165 c               ---------------------------------------------
  26166                 elseif(pdir0 .ne.amiss.and.

Page 549         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  26167      $                 pdirp1.ne.amiss.and.
  26168      $                 pdirp2.ne.amiss.and.
  26169      $                 pdir_wop1.ne.amiss.and.
  26170      $                 ((cos((pdirp1-pdirp2   )*d2r).lt.-0.5.and.
  26171      $                   cos((pdir0 -pdir_wop1)*d2r).gt.0.25881904).or.  
  26172 c     $                  (cos((pdirp1-pdirp2   )*d2r).lt.0.25881904.and.
  26173      $                   cos((pdir0 -pdir_wop1)*d2r).gt.0.70710678)
  26174      $                 ) then
  26175 c
  26176                   c_qc(iip1)(1:1) = 'X'
  26177                   c_qc(iip1)(3:4) = 'II'
  26178 c
  26179                   knt_iip1_bad = knt_iip1_bad + 1
  26180 c
  26181                   l_print = .true.
  26182                   if(l_print) then
  26183                     write(io8,*) 
  26184                     write(io8,*) 'Bad manuever for 1st pt--iip1 = ',iip1
  26185                   endif
  26186 c 
  26187 c               Reject beginning of circling manuever at point iip2
  26188 c               ---------------------------------------------------
  26189                 elseif(pdirp1.ne.amiss.and.
  26190      $             pdirp2.ne.amiss.and.
  26191      $             pdirp3.ne.amiss.and.
  26192      $             pdir_wop2.ne.amiss.and.
  26193      $             ((cos((pdirp1-pdirp3   )*d2r).lt.-0.5.and.
  26194      $               cos((pdirp1-pdir_wop2)*d2r).lt.0.5).or. 
  26195      $              (cos((pdirp1-pdirp2   )*d2r).lt.-0.5.and.
  26196      $               cos((pdirp1-pdir_wop2)*d2r).lt.0.5))) then  
  26197 c
  26198                   c_qc(iip2)(1:1) = 'X'
  26199                   c_qc(iip2)(3:4) = 'II'
  26200 c
  26201                   knt_iip1_bad = knt_iip1_bad + 1
  26202 c
  26203                   l_print = .true.
  26204                   if(l_print) then
  26205                     write(io8,*) 
  26206                     write(io8,*) 'Circle near 1st pt--iip2 = ',iip2
  26207                   endif
  26208 c
  26209 c               Otherwise reject first point
  26210 c               ----------------------------
  26211                 else
  26212 c
  26213                   c_qc(ii)(1:1) = 'X'
  26214                   c_qc(ii)(3:4) = 'II'
  26215 c
  26216                   iob = iob + 1
  26217                   knt_iip1_bad = 0
  26218 c
  26219                   l_print = .true.
  26220                   if(l_print) then
  26221                     write(io8,*) 
  26222                     write(io8,*) 'Bad manuever for 1st pt--ii = ',ii
  26223                   endif

Page 550         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  26224                 endif
  26225 c
  26226 c Check if middle point in flight is bad
  26227 c Use iim1, ii, iip1 points
  26228 c --------------------------------------
  26229               elseif(iim1.ne.0.and.iip1.ne.0.and.
  26230      $               (idt_dif0.ne.imiss.and.
  26231      $                (idt_dif0 .le.idt_near*2.or.
  26232      $                 (l_ii_man_airep.and.l_iim1_man_airep.and.
  26233      $                  idt_dif0 .le.idt_near*4))).and.
  26234      $                (idt_difp1.ne.imiss.and.
  26235      $                 (idt_difp1.le.idt_near*2.or.
  26236      $                  (l_ii_man_airep.and.l_iip1_man_airep.and.
  26237      $                   idt_difp1.le.idt_near*4))).and.
  26238      $               dist0.gt.5.0.and.distp1.gt.5.0.and.               ! new
  26239      $               cos((pdir0-pdirp1)*d2r).lt.0.5) then
  26240 c
  26241                 if(pdir0 .ne.amiss.and.
  26242      $             pdirp1.ne.amiss.and.
  26243      $             pdirm1.ne.amiss.and.
  26244      $             pdir_wo0.ne.amiss.and.
  26245      $             iip2.ne.0.and.
  26246      $             ((cos((pdir0 -pdirp1  )*d2r).lt.-0.5.and.
  26247      $               cos((pdirm1-pdir_wo0)*d2r).gt.0.25881904).or.
  26248 c     $              (cos((pdir0 -pdirp1  )*d2r).lt.0.25881904.and.
  26249      $               cos((pdirm1-pdir_wo0)*d2r).gt.0.70710678.or.
  26250      $               knt_iip1_bad.gt.0)) then  
  26251 c
  26252                   c_qc(ii)(1:1) = 'X'
  26253                   c_qc(ii)(3:4) = 'II'
  26254 c
  26255                   if(iob.gt.istart) then
  26256                     iob = iob - 1
  26257                   else
  26258                     iob = iob + 1
  26259                   endif
  26260                   knt_iip1_bad = 0
  26261 c
  26262                   l_print = .true.
  26263                   if(l_print) then
  26264                     write(io8,*) 
  26265                     write(io8,*) 'Bad manuever--ii = ',ii
  26266                   endif
  26267 c
  26268                 else
  26269 c
  26270                   c_qc(iip1)(1:1) = 'X'
  26271                   c_qc(iip1)(3:4) = 'II'
  26272 c
  26273                   knt_iip1_bad = knt_iip1_bad + 1
  26274 c
  26275                   l_print = .true.
  26276                   if(l_print) then
  26277                     write(io8,*) 
  26278                     write(io8,*) 'Bad manuever--iip1 = ',iip1
  26279                   endif
  26280 c

Page 551         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  26281                 endif
  26282 c             
  26283 c Check if last point in flight/last point before time gap is bad
  26284 c Use iim2, iim1, ii points
  26285 c ---------------------------------------------------------------
  26286               elseif(iim2.ne.0.and.iim1.ne.0.and.
  26287      $               (iip1.eq.0.or.
  26288      $                idt_difp1.eq.imiss.or.
  26289      $                (idt_difp1.ne.imiss.and.
  26290      $                 ((.not.(l_ii_man_airep.and.l_iip1_man_airep).and.
  26291      $                   idt_difp1.gt.idt_near*2).or.
  26292      $                  (l_ii_man_airep.and.l_iip1_man_airep.and.
  26293      $                   idt_difp1.gt.idt_near*4)))).and.
  26294      $               (idt_difm1.ne.imiss.and.
  26295      $                (idt_difm1.le.idt_near*2.or.
  26296      $                 (l_iim1_man_airep.and.l_iim2_man_airep.and.
  26297      $                  idt_difm1.le.idt_near*4))).and.
  26298      $               (idt_dif0 .ne.imiss.and.
  26299      $                (idt_dif0 .le.idt_near*2.or.
  26300      $                 (l_ii_man_airep.and.l_iim1_man_airep.and.
  26301      $                  idt_dif0 .le.idt_near*4))).and.
  26302      $               distm1.gt.5.0.and.dist0.gt.5.0.and.                ! new
  26303      $               cos((pdirm1-pdir0)*d2r).lt.0.5) then
  26304 c
  26305                 c_qc(ii)(1:1) = 'X'
  26306                 c_qc(ii)(3:4) = 'II'
  26307 c
  26308                 iob = iob + 1
  26309                 knt_iip1_bad = 0
  26310 c
  26311                 l_print = .true.
  26312                 if(l_print) then
  26313                   write(io8,*) 
  26314                   write(io8,*) 'Bad manuever for last pt--ii = ',ii
  26315                 endif
  26316 c
  26317 c Flag points not categorized above
  26318 c ---------------------------------
  26319               else
  26320 c
  26321                 if(c_qc(ii)(11:11).ne.'N') then
  26322 c
  26323                   c_qc(ii)(2:2) = 'I'
  26324 c
  26325                   iob = iob + 1
  26326                   knt_iip1_bad = 0
  26327 c
  26328                   l_print = .true.
  26329                   if(l_print) then
  26330                     write(io8,*) 
  26331                     write(io8,*) 'Cannot categorize report',ii
  26332                   endif
  26333 c
  26334                 elseif(c_qc(ii)(11:11).eq.'N') then
  26335 c
  26336                   iob = iob + 1
  26337                   knt_iip1_bad = 0

Page 552         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  26338 c
  26339                   l_print = .true.
  26340                   if(l_print) then
  26341                     write(io8,*) 
  26342                     write(io8,*) 'Time diff too long to check',ii
  26343                   endif
  26344 c
  26345                 else
  26346                   write(io8,*) 'How did I get here?'
  26347 c
  26348                   iob = iob + 1
  26349                   knt_iip1_bad = 0
  26350 c
  26351                   l_print = .true.
  26352                 endif
  26353               endif
  26354 c
  26355 c Check good points one last time
  26356 c -------------------------------
  26357               if(c_qc(ii)(1:1).ne.'d' .and.
  26358      $           c_qc(ii)(2:2).ne.'I' .and.
  26359      $           c_qc(ii)(2:2).ne.'K' .and.
  26360      $           c_qc(ii)(3:4).ne.'II'.and.
  26361      $           c_qc(ii)(5:5).ne.'I' .and.
  26362      $           c_qc(ii)(5:5).ne.'i' ) then
  26363 c
  26364 c               Check winds for anomalies at ends of descents
  26365 c               ---------------------------------------------
  26366                 if((iip1.eq.0.or.iip2.eq.0).and.iim1.ne.0) then
  26367                   if(idt_dif0.le.idt_near.and.
  26368      $               ht_ft0.lt.8000.0.and.
  26369      $               (ht_ftm1-ht_ft0).gt.0.0.and.
  26370      $               (ht_ftm1-ht_ft0).lt.1000.0.and.
  26371      $               ob_spd(ii).ne.amiss.and.
  26372      $               ob_spd(iim1).ne.amiss.and.
  26373      $               ob_spd(ii)-ob_spd(iim1).gt.10.0) then
  26374 c
  26375                     c_qc(ii)(8:8) = 'A'
  26376                     l_print = .true.
  26377                     if(l_print) then
  26378                       write(io8,*)
  26379                       write(io8,*) 'Anomalous wind speed found',ii
  26380                     endif
  26381                   endif
  26382                 endif
  26383 c
  26384 c               Reset suspect values if accepted as part of a track
  26385 c               ---------------------------------------------------
  26386                 if(c_qc(ii)(11:11).ne.'I') then
  26387 c
  26388 c                 Time is ok if time for either neighboring reports is nonzero
  26389 c                 ------------------------------------------------------------
  26390                   if(c_qc(ii)(2:2).eq.'S'.and.
  26391      $               (idtm1.ne.0.or.
  26392      $                idtp1.ne.0.or.
  26393      $                ht_ft(ii).lt.8000.0)) then
  26394                     c_qc(ii)(2:2) = '.'

Page 553         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  26395 c                    write(io8,*) 
  26396 c                    write(io8,*) 'Suspect time is ok'
  26397 c
  26398 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  26399 c                 Latitude is ok if latitude for both neighboring reports is nonzero
  26400 c                 ------------------------------------------------------------------
  26401                   elseif(c_qc(ii)(3:3).eq.'S'.and.
  26402      $                   (int(alatm1*100.).ne.0.0.and.
  26403      $                    int(alatp1*100.).ne.0.0)) then
  26404 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  26405                     c_qc(ii)(3:3) = '.'
  26406 c                    write(io8,*) 
  26407 c                    write(io8,*) 'Suspect latitude is ok'
  26408 c
  26409 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  26410 c                 Longitude in AMDAR report is ok if longitude for either neighboring
  26411 c                   report is nonzero
  26412 c                 -------------------------------------------------------------------
  26413                   elseif(c_qc(ii)(4:4).eq.'S'.and.
  26414      $                   (itype(ii).eq.i_amdar_asc.or.
  26415      $                    itype(ii).eq.i_amdar_des.or.
  26416      $                    itype(ii).eq.i_amdar_lvl.or.
  26417      $                    itype(ii).eq.i_amdar).and.
  26418      $                   (int(alonm1*100.).ne.0.0.or.
  26419      $                    int(alonp1*100.).ne.0.0)) then
  26420 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  26421                     c_qc(ii)(4:4) = '.'
  26422 c                    write(io8,*) 
  26423 c                    write(io8,*) 'Suspect AMDAR longitude is ok'
  26424 c
  26425 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  26426 c                 Longitude in other reports is ok if longitude for both neighboring
  26427 c                   report is nonzero
  26428 c                 ------------------------------------------------------------------
  26429                   elseif(c_qc(ii)(4:4).eq.'S'.and.
  26430      $                   (int(alonm1*100.).ne.0.0.and.
  26431      $                    int(alonp1*100.).ne.0.0)) then
  26432 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  26433                     c_qc(ii)(4:4) = '.'
  26434 c                    write(io8,*) 
  26435 c                    write(io8,*) 'Suspect longitude is ok'
  26436 c
  26437 c                 Altitude is ok if report made it this far
  26438 c                 -----------------------------------------
  26439                   elseif(c_qc(ii)(5:5).eq.'S') then
  26440                     c_qc(ii)(5:5) = '.'
  26441 c                    write(io8,*) 
  26442 c                    write(io8,*) 'Suspect altitude is ok'
  26443                   endif
  26444 c
  26445                 endif
  26446               endif
  26447 c
  26448 c Write reports used in testing if desired
  26449 c ----------------------------------------
  26450               if(l_print) then
  26451                 write(io8,'(a18,2i6,a18,2i6)')

Page 554         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  26452      $           ' iistart,iiend  = ',iistart,iiend,
  26453      $           ' iifirst,iilast = ',iifirst,iilast
  26454                 write(io8,'(7x,12a10)') 
  26455      $            'iim2','iim1','ii','wo0',
  26456      $            'iip1','wop1','iip2','wop2','iip3',
  26457      $            'bad0','badp1','track'
  26458                 write(io8,'(''indices'',3i10,3(10x,i10))') 
  26459      $            iim2,iim1,ii,
  26460      $            iip1,iip2,iip3
  26461 c                write(io8,'(''idt  = '',12i10)') 
  26462 c     $            idtm2,idtm1,idt0,imiss,
  26463 c     $            idtp1,imiss,idtp2,imiss,idtp3,
  26464 c     $            imiss,imiss,imiss
  26465 c                write(io8,'(''idtdif='',12i10)') 
  26466 c     $            idt_difm2,idt_difm1,idt_dif0,idt_dif_wo0,
  26467 c     $            idt_difp1,idt_dif_wop1,idt_difp2,idt_dif_wop2,
  26468 c     $            idt_difp3,idt_dif_bad0,idt_dif_badp1,idt_dif_track
  26469                 write(io8,'(''dist = '',12f10.2)') 
  26470      $            distm2,distm1,dist0,dist_wo0,
  26471      $            distp1,dist_wop1,distp2,dist_wop2,distp3,
  26472      $            dist_bad0,dist_badp1,dist_track
  26473                 write(io8,'(''ht_d = '',12f10.2)') 
  26474      $            ht_difm2,ht_difm1,ht_dif0,ht_dif_wo0,
  26475      $            ht_difp1,ht_dif_wop1,ht_difp2,ht_dif_wop2,ht_difp3,
  26476      $            ht_dif_bad0,ht_dif_badp1,ht_dif_track
  26477                 write(io8,'(''pspd = '',12f10.2)') 
  26478      $            pspdm2,pspdm1,pspd0,pspd_wo0,
  26479      $            pspdp1,pspd_wop1,pspdp2,pspd_wop2,pspdp3,
  26480      $            pspd_bad0,pspd_badp1,pspd_track
  26481                 write(io8,'(''pdir = '',12f10.2)') 
  26482      $            pdirm2,pdirm1,pdir0,pdir_wo0,
  26483      $            pdirp1,pdir_wop1,pdirp2,pdir_wop2,pdirp3,
  26484      $            pdir_bad0,pdir_badp1,pdir_track
  26485 c
  26486                 if(iim2.ne.0) then
  26487                   write(io8,8002) kk,iim2
  26488      x,            c_insty_ob(itype(iim2))
  26489      x,            c_acftreg(iim2),c_acftid(iim2)
  26490      x,            idt(iim2),alat(iim2),alon(iim2)
  26491      x,            pres(iim2),ht_ft(iim2)
  26492      x,            t_prcn(iim2),ob_t(iim2),xiv_t(iim2),ichk_t(iim2)
  26493      x,            ob_q(iim2),xiv_q(iim2),ichk_q(iim2)
  26494      x,            ob_dir(iim2),xiv_d(iim2),ichk_d(iim2)
  26495      x,            ob_spd(iim2),xiv_s(iim2),ichk_s(iim2)
  26496      x,            c_qc(iim2)
  26497                 endif
  26498 c
  26499                 if(iim1.ne.0) then
  26500                   write(io8,8002) kk,iim1
  26501      x,            c_insty_ob(itype(iim1))
  26502      x,            c_acftreg(iim1),c_acftid(iim1)
  26503      x,            idt(iim1),alat(iim1),alon(iim1)
  26504      x,            pres(iim1),ht_ft(iim1)
  26505      x,            t_prcn(iim1),ob_t(iim1),xiv_t(iim1),ichk_t(iim1)
  26506      x,            ob_q(iim1),xiv_q(iim1),ichk_q(iim1)
  26507      x,            ob_dir(iim1),xiv_d(iim1),ichk_d(iim1)
  26508      x,            ob_spd(iim1),xiv_s(iim1),ichk_s(iim1)

Page 555         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  26509      x,            c_qc(iim1)
  26510                 endif
  26511 c
  26512                 write(io8,8002) kk,ii,c_insty_ob(itype(ii))
  26513      x,            c_acftreg(ii),c_acftid(ii)
  26514      x,            idt(ii),alat(ii),alon(ii)
  26515      x,            pres(ii),ht_ft(ii)
  26516      x,            t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
  26517      x,            ob_q(ii),xiv_q(ii),ichk_q(ii)
  26518      x,            ob_dir(ii),xiv_d(ii),ichk_d(ii)
  26519      x,            ob_spd(ii),xiv_s(ii),ichk_s(ii)
  26520      x,            c_qc(ii)
  26521 c
  26522                 if(iip1.ne.0) then
  26523                   write(io8,8002) kk,iip1
  26524      x,            c_insty_ob(itype(iip1))
  26525      x,            c_acftreg(iip1),c_acftid(iip1)
  26526      x,            idt(iip1),alat(iip1),alon(iip1)
  26527      x,            pres(iip1),ht_ft(iip1)
  26528      x,            t_prcn(iip1),ob_t(iip1),xiv_t(iip1),ichk_t(iip1)
  26529      x,            ob_q(iip1),xiv_q(iip1),ichk_q(iip1)
  26530      x,            ob_dir(iip1),xiv_d(iip1),ichk_d(iip1)
  26531      x,            ob_spd(iip1),xiv_s(iip1),ichk_s(iip1)
  26532      x,            c_qc(iip1)
  26533                 endif
  26534 c
  26535                 if(iip2.ne.0) then
  26536                   write(io8,8002) kk,iip2
  26537      x,            c_insty_ob(itype(iip2))
  26538      x,            c_acftreg(iip2),c_acftid(iip2)
  26539      x,            idt(iip2),alat(iip2),alon(iip2)
  26540      x,            pres(iip2),ht_ft(iip2)
  26541      x,            t_prcn(iip2),ob_t(iip2),xiv_t(iip2),ichk_t(iip2)
  26542      x,            ob_q(iip2),xiv_q(iip2),ichk_q(iip2)
  26543      x,            ob_dir(iip2),xiv_d(iip2),ichk_d(iip2)
  26544      x,            ob_spd(iip2),xiv_s(iip2),ichk_s(iip2)
  26545      x,            c_qc(iip2)
  26546                 endif
  26547 c
  26548               endif
  26549 c
  26550 c             Check if last point of segment was deleted
  26551 c             ------------------------------------------
  26552               if((c_qc(ii)(1:1).eq.'d'.or.
  26553      $            c_qc(ii)(2:2).eq.'I'.or.
  26554      $            c_qc(ii)(2:2).eq.'K'.or.
  26555      $            c_qc(ii)(3:4).eq.'II'.or.
  26556      $            c_qc(ii)(5:5).eq.'I'.or.
  26557      $            c_qc(ii)(5:5).eq.'i').and.
  26558      $            ioblast.eq.iob) then
  26559 c
  26560                 ioblast = imiss
  26561                 iilast = imiss
  26562 c
  26563               endif
  26564 c
  26565               if(iip1.ne.0) then

Page 556         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  26566                 if((c_qc(iip1)(1:1).eq.'d'.or.
  26567      $              c_qc(iip1)(2:2).eq.'I'.or.
  26568      $              c_qc(iip1)(2:2).eq.'K'.or.
  26569      $              c_qc(iip1)(3:4).eq.'II'.or.
  26570      $              c_qc(iip1)(5:5).eq.'I'.or.
  26571      $              c_qc(iip1)(5:5).eq.'i').and.
  26572      $              ioblast.eq.iobp1) then
  26573 c
  26574                   ioblast = imiss
  26575                   iilast = imiss
  26576                 endif
  26577 c
  26578               endif
  26579 c
  26580             endif
  26581 c            
  26582           enddo
  26583 c
  26584 c Redo flight phase of reports 
  26585 c ----------------------------
  26586           do iob=istart,iend
  26587             l_print = .false.
  26588 c
  26589             ii = indx(iob)
  26590 c
  26591 c           Decide if report is a manual airep
  26592 c           ----------------------------------
  26593             l_ii_man_airep = .false.
  26594             if(itype(ii).eq.i_man_airep.or.
  26595      $         itype(ii).eq.i_man_Yairep) l_ii_man_airep = .true. 
  26596 c
  26597 c           Compute ii-1 index
  26598 c           if(iob.gt.istart)   iim1 = indx(iob-1)
  26599 c           --------------------------------------
  26600             iim1 = 0
  26601             knt1 = iob - 1
  26602  12         if(knt1.ge.istart) then
  26603               iim1 = indx(knt1)
  26604               if(c_qc(iim1)(1:1).eq.'d'.or.
  26605      $           c_qc(iim1)(2:2).eq.'I'.or.
  26606      $           c_qc(iim1)(2:2).eq.'K'.or.
  26607      $           c_qc(iim1)(3:4).eq.'II'.or.
  26608      $           c_qc(iim1)(5:5).eq.'I'.or.
  26609      $           c_qc(iim1)(5:5).eq.'i') then
  26610                 knt1 = knt1 - 1
  26611                 goto 12
  26612               endif
  26613             else
  26614               iim1 = 0
  26615             endif
  26616 c
  26617 c           Compute ii-2 index
  26618 c           if(iob.gt.istart+1) iim2 = indx(iob-2)
  26619 c           --------------------------------------
  26620             iim2 = 0
  26621             knt2 = knt1 - 1
  26622  22         if(knt2.ge.istart) then

Page 557         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  26623               iim2 = indx(knt2)
  26624               if(c_qc(iim2)(1:1).eq.'d'.or.
  26625      $           c_qc(iim2)(2:2).eq.'I'.or.
  26626      $           c_qc(iim2)(2:2).eq.'K'.or.
  26627      $           c_qc(iim2)(3:4).eq.'II'.or.
  26628      $           c_qc(iim2)(5:5).eq.'I'.or.
  26629      $           c_qc(iim2)(5:5).eq.'i') then
  26630                 knt2 = knt2 - 1
  26631                 goto 22
  26632               endif
  26633             else
  26634               iim2 = 0
  26635             endif
  26636 c
  26637 c           Compute ii+1 index
  26638 c           if(iob.lt.iend)   iip1 = indx(iob+1)
  26639 c           ------------------------------------
  26640             iip1 = 0
  26641             knt3 = iob + 1
  26642  32         if(knt3.le.iend) then
  26643               iip1 = indx(knt3)
  26644               if(c_qc(iip1)(1:1).eq.'d'.or.
  26645      $           c_qc(iip1)(2:2).eq.'I'.or.
  26646      $           c_qc(iip1)(2:2).eq.'K'.or.
  26647      $           c_qc(iip1)(3:4).eq.'II'.or.
  26648      $           c_qc(iip1)(5:5).eq.'I'.or.
  26649      $           c_qc(iip1)(5:5).eq.'i') then
  26650                 knt3 = knt3 + 1
  26651                 goto 32
  26652               endif
  26653             else
  26654               iip1 = 0
  26655             endif
  26656 c
  26657 c           Compute ii+2 index
  26658 c           if(iob.lt.iend-1) iip2 = indx(iob+2)
  26659 c           ------------------------------------
  26660             iip2 = 0
  26661             knt4 = knt3 + 1
  26662  42         if(knt4.le.iend) then
  26663               iip2 = indx(knt4)
  26664               if(c_qc(iip2)(1:1).eq.'d'.or.
  26665      $           c_qc(iip2)(2:2).eq.'I'.or.
  26666      $           c_qc(iip2)(2:2).eq.'K'.or.
  26667      $           c_qc(iip2)(3:4).eq.'II'.or.
  26668      $           c_qc(iip2)(5:5).eq.'I'.or.
  26669      $           c_qc(iip2)(5:5).eq.'i') then
  26670                 knt4 = knt4 + 1
  26671                 goto 42
  26672               endif
  26673             else
  26674               iip2 = 0
  26675             endif
  26676 c
  26677 c           Compute time and height differences
  26678 c           -----------------------------------
  26679             alat0 = alat(ii)

Page 558         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  26680             alon0 = alon(ii)
  26681             ht_ft0 = ht_ft(ii)
  26682 c
  26683             if(iim1.ne.0) then
  26684               idt_dif0 = abs(idt(ii)   - idt(iim1))
  26685               ht_dif0  = abs(ht_ft(ii) - ht_ft(iim1))
  26686               ht_ftm1 = ht_ft(iim1)
  26687             else
  26688               idt_dif0 = imiss
  26689               ht_dif0 = amiss
  26690               ht_ftm1 = amiss
  26691             endif
  26692 c
  26693             if(iim2.ne.0) then
  26694               ht_ftm2 = ht_ft(iim2)
  26695             else
  26696               ht_ftm2 = amiss
  26697             endif
  26698 c
  26699             if(iim1.ne.0.and.iim2.ne.0) then
  26700               idt_difm1 = abs(idt(iim1) - idt(iim2))
  26701               ht_difm1 = abs(ht_ft(iim1) - ht_ft(iim2))
  26702             else
  26703               idt_difm1 = imiss
  26704               ht_difm1 = amiss
  26705             endif
  26706 c
  26707             if(iip1.ne.0) then
  26708               idt_difp1 = abs(idt(iip1) - idt(ii))
  26709               ht_difp1 = abs(ht_ft(iip1) - ht_ft(ii))
  26710               ht_ftp1 = ht_ft(iip1)
  26711             else
  26712               idt_difp1 = imiss
  26713               ht_difp1 = amiss
  26714               ht_ftp1 = amiss
  26715             endif
  26716 c
  26717             if(iip2.ne.0) then
  26718               ht_ftp2 = ht_ft(iip2)
  26719             else
  26720               ht_ftp2 = amiss
  26721             endif
  26722 c
  26723             if(iip2.ne.0.and.iip1.ne.0) then
  26724               idt_difp2 = abs(idt(iip2) - idt(iip1))
  26725               ht_difp2 = abs(ht_ft(iip2) - ht_ft(iip1))
  26726             else
  26727               idt_difp2 = imiss
  26728               ht_difp2 = amiss
  26729             endif
  26730 c
  26731 c     Look for high resolution level legs
  26732 c     -----------------------------------
  26733 c
  26734 c           Use iim1, ii, iip1 points
  26735 c           -----------------------------------
  26736             if(iim1.ne.0.and.iip1.ne.0.and.

Page 559         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  26737      $         idt_dif0 .ne.imiss.and.idt_dif0 .le.idt_updn.and.
  26738      $         idt_difp1.ne.imiss.and.idt_difp1.le.idt_updn.and.
  26739      $         ht_dif0 .lt.htdif_same+0.5.and.
  26740      $         ht_difp1.lt.htdif_same+0.5) then
  26741 c
  26742               c_qc(ii)(11:11) = 'L'
  26743 c
  26744 c           Use iim2, iim1, ii points
  26745 c           --------------------------
  26746             elseif(iim2.ne.0.and.iim1.ne.0.and.
  26747      $             idt_difm1.ne.imiss.and.idt_difm1.le.idt_updn.and.
  26748      $             idt_dif0 .ne.imiss.and.idt_dif0 .le.idt_updn.and.
  26749      $             ht_difm1.lt.htdif_same+0.5.and.
  26750      $             ht_dif0 .lt.htdif_same+0.5) then
  26751 c
  26752               c_qc(ii)(11:11) = 'L'
  26753 c
  26754               if(iip1.ne.0.and.idt_difp1.lt.idt_updn.and.
  26755      $           ht_difp1.gt.htdif_same+0.5.and.
  26756      $           ht_difp1.lt.5000.) then
  26757                 if(ht_ftp1.gt.ht_ft0) 
  26758      $             c_qc(ii)(11:11) = 'A'      ! Ascending
  26759                 if(ht_ftp1.lt.ht_ft0) 
  26760      $             c_qc(ii)(11:11) = 'D'      ! Descending
  26761               endif
  26762 c
  26763 c           Use ii, iip1, iip2 points
  26764 c           --------------------------
  26765             elseif(iip1.ne.0.and.iip2.ne.0.and.
  26766      $             idt_difp1.ne.imiss.and.idt_difp1.le.idt_updn.and.
  26767      $             idt_difp2.ne.imiss.and.idt_difp2.le.idt_updn.and.
  26768      $             ht_difp1.lt.htdif_same+0.5.and.
  26769      $             ht_difp2.lt.htdif_same+0.5) then
  26770 c
  26771               c_qc(ii)(11:11) = 'L'
  26772 c
  26773               if(iim1.ne.0.and.idt_dif0.lt.idt_updn.and.
  26774      $           ht_dif0.gt.htdif_same+0.5.and.
  26775      $           ht_dif0.lt.5000.) then
  26776                 if(ht_ftm1.gt.ht_ft0) 
  26777      $             c_qc(ii)(11:11) = 'D'      ! Descending
  26778                 if(ht_ftm1.lt.ht_ft0) 
  26779      $             c_qc(ii)(11:11) = 'A'      ! Ascending
  26780               endif
  26781 c
  26782 c     Look for high resolution ascents and descents
  26783 c     ---------------------------------------------
  26784 c
  26785 c           Use iim1, ii, iip1 points
  26786 c           -----------------------------------
  26787             elseif(iim1.ne.0.and.iip1.ne.0.and.
  26788      $             idt_dif0.ne.imiss.and.idt_dif0.le.idt_updn.and.
  26789      $             idt_difp1.ne.imiss.and.idt_difp1.le.idt_updn.and.
  26790      $             ht_ftm1.lt.ht_ft0 .and.
  26791      $             ht_ft0 .lt.ht_ftp1) then
  26792 c
  26793               c_qc(ii)(11:11) = 'A'

Page 560         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  26794 c
  26795             elseif(iim1.ne.0.and.iip1.ne.0.and.
  26796      $             idt_dif0.ne.imiss.and.idt_dif0.le.idt_updn.and.
  26797      $             idt_difp1.ne.imiss.and.idt_difp1.le.idt_updn.and.
  26798      $             ht_ftm1.gt.ht_ft0 .and.
  26799      $             ht_ft0 .gt.ht_ftp1) then
  26800 c
  26801               c_qc(ii)(11:11) = 'D'
  26802 c
  26803 c           Use iim2, iim1, ii points
  26804 c           -----------------------------------
  26805             elseif(iim2.ne.0.and.iim1.ne.0.and.
  26806      $             idt_difm1.ne.imiss.and.idt_difm1.le.idt_updn.and.
  26807      $             idt_dif0.ne.imiss.and.idt_dif0.le.idt_updn.and.
  26808      $             ht_ftm2.lt.ht_ftm1.and.
  26809      $             ht_ftm1.lt.ht_ft0) then
  26810 c
  26811                 c_qc(ii)(11:11) = 'A'
  26812 c
  26813             elseif(iim2.ne.0.and.iim1.ne.0.and.
  26814      $             idt_difm1.ne.imiss.and.idt_difm1.le.idt_updn.and.
  26815      $             idt_dif0.ne.imiss.and.idt_dif0.le.idt_updn.and.
  26816      $             ht_ftm2.gt.ht_ftm1.and.
  26817      $             ht_ftm1.gt.ht_ft0 ) then
  26818 c
  26819                 c_qc(ii)(11:11) = 'D'
  26820 c
  26821 c           Use ii, iip1, iip2 points
  26822 c           -----------------------------------
  26823             elseif(iip1.ne.0.and.iip2.ne.0.and.
  26824      $             idt_difp1.ne.imiss.and.idt_difp1.le.idt_updn.and.
  26825      $             idt_difp2.ne.imiss.and.idt_difp2.le.idt_updn.and.
  26826      $             ht_ft0 .lt.ht_ftp1.and.
  26827      $             ht_ftp1.lt.ht_ftp2) then
  26828 c
  26829                 c_qc(ii)(11:11) = 'A'
  26830 c
  26831             elseif(iip1.ne.0.and.iip2.ne.0.and.
  26832      $             idt_difp1.ne.imiss.and.idt_difp1.le.idt_updn.and.
  26833      $             idt_difp2.ne.imiss.and.idt_difp2.le.idt_updn.and.
  26834      $             ht_ft0.gt.ht_ftp1.and.
  26835      $             ht_ftp1.gt.ht_ftp2) then
  26836 c
  26837                 c_qc(ii)(11:11) = 'D'
  26838 c
  26839 c     Look for other level legs
  26840 c     -------------------------
  26841 c
  26842 c           Use iim1, ii, iip1 points
  26843 c           -------------------------
  26844             elseif(iim1.ne.0.and.iip1.ne.0.and.
  26845      $             idt_dif0.ne.imiss.and.
  26846      $             (idt_dif0 .le.idt_near.or.
  26847      $              (l_ii_man_airep.and.idt_dif0 .le.idt_near*3)).and.
  26848      $             idt_difp1.ne.imiss.and.
  26849      $             (idt_difp1.le.idt_near.or.
  26850      $              (l_ii_man_airep.and.idt_difp1.le.idt_near*3)).and.

Page 561         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  26851      $             ht_dif0.lt.htdif_same*1.5+0.5.and.
  26852      $             ht_difp1.lt.htdif_same*1.5+0.5) then
  26853 c
  26854               c_qc(ii)(11:11) = 'L'
  26855 c
  26856 c           Use iim2, iim1, ii points
  26857 c           -------------------------
  26858             elseif(iim2.ne.0.and.iim1.ne.0.and.
  26859      $             idt_difm1.ne.imiss.and.
  26860      $             (idt_difm1.le.idt_near.or.
  26861      $              (l_ii_man_airep.and.idt_difm1.le.idt_near*3)).and.
  26862      $             idt_dif0 .ne.imiss.and.
  26863      $             (idt_dif0 .le.idt_near.or.
  26864      $              (l_ii_man_airep.and.idt_dif0 .le.idt_near*3)).and.
  26865      $             ht_difm1.lt.htdif_same*1.5+0.5.and.
  26866      $             ht_dif0 .lt.htdif_same*1.5+0.5) then
  26867 c
  26868               c_qc(ii)(11:11) = 'L'
  26869 c
  26870               if(iip1.ne.0.and.idt_difp1.lt.idt_updn.and.
  26871      $           ht_difp1.gt.htdif_same+0.5.and.
  26872      $           ht_difp1.lt.5000.) then
  26873                 if(ht_ftp1.gt.ht_ft0) 
  26874      $             c_qc(ii)(11:11) = 'A'      ! Ascending
  26875                 if(ht_ftp1.lt.ht_ft0) 
  26876      $             c_qc(ii)(11:11) = 'D'      ! Descending
  26877               endif
  26878 c
  26879 c           Use ii, iip1, iip2 points
  26880 c           -------------------------
  26881             elseif(iip1.ne.0.and.iip2.ne.0.and.
  26882      $             idt_difp1.ne.imiss.and.
  26883      $             (idt_difp1.le.idt_near.or.
  26884      $              (l_ii_man_airep.and.idt_difp1.le.idt_near*3)).and.
  26885      $             idt_difp2.ne.imiss.and.
  26886      $             (idt_difp2.le.idt_near.or.
  26887      $              (l_ii_man_airep.and.idt_difp2.le.idt_near*3)).and.
  26888      $             ht_difp1.lt.htdif_same*1.5+0.5.and.
  26889      $             ht_difp2.lt.htdif_same*1.5+0.5) then
  26890 c
  26891               c_qc(ii)(11:11) = 'L'
  26892 c
  26893               if(iim1.ne.0.and.idt_dif0.lt.idt_updn.and.
  26894      $           ht_dif0.gt.htdif_same+0.5.and.
  26895      $           ht_dif0.lt.5000.) then
  26896                 if(ht_ftm1.gt.ht_ft0) 
  26897      $             c_qc(ii)(11:11) = 'D'      ! Descending
  26898                 if(ht_ftm1.lt.ht_ft0) 
  26899      $             c_qc(ii)(11:11) = 'A'      ! Ascending
  26900               endif
  26901 c
  26902 c     Look for other ascents and descents
  26903 c     -----------------------------------
  26904 c
  26905 c           Use iim1, ii, iip1 points
  26906 c           --------------------------------
  26907             elseif(iim1.ne.0.and.iip1.ne.0.and.

Page 562         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  26908      $             idt_dif0.ne.imiss.and.
  26909      $             (idt_dif0 .le.idt_near.or.
  26910      $              (l_ii_man_airep.and.idt_dif0 .le.idt_near*2)).and.
  26911      $             idt_difp1.ne.imiss.and.
  26912      $             (idt_difp1.le.idt_near.or.
  26913      $              (l_ii_man_airep.and.idt_difp1.le.idt_near*2)).and.
  26914      $             ht_ftm1.lt.ht_ft0 .and.
  26915      $             ht_ft0 .lt.ht_ftp1) then
  26916 c
  26917               c_qc(ii)(11:11) = 'a'
  26918 c
  26919             elseif(iim1.ne.0.and.iip1.ne.0.and.
  26920      $             idt_dif0.ne.imiss.and.
  26921      $             (idt_dif0 .le.idt_near.or.
  26922      $              (l_ii_man_airep.and.idt_dif0 .le.idt_near*2)).and.
  26923      $             idt_difp1.ne.imiss.and.
  26924      $             (idt_difp1.le.idt_near.or.
  26925      $              (l_ii_man_airep.and.idt_difp1.le.idt_near*2)).and.
  26926      $             ht_ftm1.gt.ht_ft0 .and.
  26927      $             ht_ft0 .gt.ht_ftp1) then
  26928 c
  26929               c_qc(ii)(11:11) = 'd'
  26930 c
  26931 c           Use iim2, iim1, ii points
  26932 c           -------------------------
  26933             elseif(iim2.ne.0.and.iim1.ne.0.and.
  26934      $             idt_difm1.ne.imiss.and.
  26935      $             (idt_difm1.le.idt_near.or.
  26936      $              (l_ii_man_airep.and.idt_difm1.le.idt_near*2)).and.
  26937      $             idt_dif0 .ne.imiss.and.
  26938      $             (idt_dif0 .le.idt_near.or.
  26939      $              (l_ii_man_airep.and.idt_dif0 .le.idt_near*2)).and.
  26940      $             ht_ftm2.lt.ht_ftm1.and.
  26941      $             ht_ftm1.lt.ht_ft0 ) then
  26942 c
  26943               c_qc(ii)(11:11) = 'a'
  26944 c
  26945             elseif(iim2.ne.0.and.iim1.ne.0.and.
  26946      $             idt_difm1.ne.imiss.and.
  26947      $             (idt_difm1.le.idt_near.or.
  26948      $              (l_ii_man_airep.and.idt_difm1.le.idt_near*2)).and.
  26949      $             idt_dif0 .ne.imiss.and.
  26950      $             (idt_dif0 .le.idt_near.or.
  26951      $              (l_ii_man_airep.and.idt_dif0 .le.idt_near*2)).and.
  26952      $             ht_ftm2.gt.ht_ftm1.and.
  26953      $             ht_ftm1.gt.ht_ft0 ) then
  26954 c
  26955               c_qc(ii)(11:11) = 'd'
  26956 c
  26957 c           Use ii, iip1, iip2 points
  26958 c           --------------------------------
  26959             elseif(iip1.ne.0.and.iip2.ne.0.and.
  26960      $             idt_difp1.ne.imiss.and.
  26961      $             (idt_difp1.le.idt_near.or.
  26962      $              (l_ii_man_airep.and.idt_difp1.le.idt_near*2)).and.
  26963      $             idt_difp2.ne.imiss.and.
  26964      $             (idt_difp2.le.idt_near.or.

Page 563         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  26965      $              (l_ii_man_airep.and.idt_difp2.le.idt_near*2)).and.
  26966      $             ht_ft0 .lt.ht_ftp1.and.
  26967      $             ht_ftp1.lt.ht_ftp2) then
  26968 c
  26969               c_qc(ii)(11:11) = 'a'
  26970 c
  26971             elseif(iip1.ne.0.and.iip2.ne.0.and.
  26972      $             idt_difp1.ne.imiss.and.
  26973      $             (idt_difp1.le.idt_near.or.
  26974      $              (l_ii_man_airep.and.idt_difp1.le.idt_near*2)).and.
  26975      $             idt_difp2.ne.imiss.and.
  26976      $             (idt_difp2.le.idt_near.or.
  26977      $              (l_ii_man_airep.and.idt_difp2.le.idt_near*2)).and.
  26978      $             ht_ft0 .gt.ht_ftp1.and.
  26979      $             ht_ftp1.gt.ht_ftp2) then
  26980 c
  26981               c_qc(ii)(11:11) = 'd'
  26982 c
  26983 c     Look for 2-point level legs
  26984 c     ---------------------------
  26985 c
  26986 c           Use iim1, ii, iip1 points
  26987 c           -------------------------
  26988             elseif(iim1.ne.0.and.iip1.ne.0.and.
  26989      $             idt_dif0.ne.imiss.and.
  26990      $             (idt_dif0 .le.idt_near.or.
  26991      $              (l_ii_man_airep.and.idt_dif0 .le.idt_near*2)).and.
  26992      $             idt_difp1.ne.imiss.and.
  26993      $             (idt_difp1.le.idt_near.or.
  26994      $              (l_ii_man_airep.and.idt_difp1.le.idt_near*2)).and.
  26995      $             ht_dif0.lt.htdif_same*1.5+0.5) then
  26996 c
  26997               c_qc(ii)(11:11) = 'L'
  26998 c
  26999             elseif(iim1.ne.0.and.iip1.ne.0.and.
  27000      $             idt_dif0.ne.imiss.and.
  27001      $             (idt_dif0 .le.idt_near.or.
  27002      $              (l_ii_man_airep.and.idt_dif0 .le.idt_near*2)).and.
  27003      $             idt_difp1.ne.imiss.and.
  27004      $             (idt_difp1.le.idt_near.or.
  27005      $              (l_ii_man_airep.and.idt_difp1.le.idt_near*2)).and.
  27006      $             ht_difp1.lt.htdif_same*1.5+0.5) then
  27007 c
  27008               c_qc(ii)(11:11) = 'L'
  27009 c
  27010 c           Use iim2, iim1, ii points
  27011 c           -------------------------
  27012             elseif(iim2.ne.0.and.iim1.ne.0.and.
  27013      $             idt_difm1.ne.imiss.and.
  27014      $             (idt_difm1.le.idt_near.or.
  27015      $              (l_ii_man_airep.and.idt_difm1.le.idt_near*2)).and.
  27016      $             idt_dif0 .ne.imiss.and.
  27017      $             (idt_dif0 .le.idt_near.or.
  27018      $              (l_ii_man_airep.and.idt_dif0 .le.idt_near*2)).and.
  27019      $             ht_dif0 .lt.htdif_same*1.5+0.5) then
  27020 c
  27021               c_qc(ii)(11:11) = 'L'

Page 564         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  27022 c
  27023 c           Use ii, iip1, iip2 points
  27024 c           -------------------------
  27025             elseif(iip1.ne.0.and.iip2.ne.0.and.
  27026      $             idt_difp1.ne.imiss.and.
  27027      $             (idt_difp1.le.idt_near.or.
  27028      $              (l_ii_man_airep.and.idt_difp1.le.idt_near*2)).and.
  27029      $             idt_difp2.ne.imiss.and.
  27030      $             (idt_difp2.le.idt_near.or.
  27031      $              (l_ii_man_airep.and.idt_difp2.le.idt_near*2)).and.
  27032      $             ht_difp1.lt.htdif_same*1.5+0.5) then
  27033 c
  27034               c_qc(ii)(11:11) = 'L'
  27035 c
  27036 c     Look for isolated ascending and descending points
  27037 c     -------------------------------------------------
  27038 c
  27039 c           Use iim2, iim1, ii points
  27040 c           -------------------------
  27041             elseif(iim2.ne.0.and.iim1.ne.0.and.
  27042      $             idt_difm1.ne.imiss.and.
  27043      $             (idt_difm1.le.idt_near.or.
  27044      $              (l_ii_man_airep.and.idt_difm1.le.idt_near*2)).and.
  27045      $             idt_dif0 .ne.imiss.and.
  27046      $             (idt_dif0 .le.idt_near.or.
  27047      $              (l_ii_man_airep.and.idt_dif0 .le.idt_near*2)).and.
  27048      $             ht_difm1.lt.htdif_same*1.5+0.5) then
  27049 c
  27050               if(ht_ft0.lt.ht_ftm1) then
  27051                 c_qc(ii)(11:11) = 'd'
  27052               elseif(ht_ft0.gt.ht_ftm1) then
  27053                 c_qc(ii)(11:11) = 'a'
  27054               else
  27055                 write(io8,*)
  27056                 write(io8,*) 'unidentified isolated point found!'
  27057                 write(io8,*) 'hts:',ht_ftm2,ht_ftm1,ht_ft0
  27058                 c_qc(ii)(11:11) = 'U'
  27059               endif
  27060 c
  27061 c           Use ii, iip1, iip2 points
  27062 c           -------------------------
  27063             elseif(iip1.ne.0.and.iip2.ne.0.and.
  27064      $             idt_difp1.ne.imiss.and.
  27065      $             (idt_difp1.le.idt_near.or.
  27066      $              (l_ii_man_airep.and.idt_difp1.le.idt_near*2)).and.
  27067      $             idt_difp2.ne.imiss.and.
  27068      $             (idt_difp2.le.idt_near.or.
  27069      $              (l_ii_man_airep.and.idt_difp2.le.idt_near*2)).and.
  27070      $             ht_difp2.lt.htdif_same*1.5+0.5) then
  27071 c
  27072               if(ht_ft0.gt.ht_ftp1) then
  27073                 c_qc(ii)(11:11) = 'd'
  27074               elseif(ht_ft0.lt.ht_ftp1) then
  27075                 c_qc(ii)(11:11) = 'a'
  27076               else
  27077                 write(io8,*)
  27078                 write(io8,*) 'unidentified isolated point found!'

Page 565         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  27079                 write(io8,*) 'hts:',ht_ft0,ht_ftp1,ht_ftp2
  27080                 c_qc(ii)(11:11) = 'U'
  27081               endif
  27082 c
  27083 c     Check if time difference is too great to categorize manAIREPs
  27084 c     -------------------------------------------------------------
  27085             elseif(l_ii_man_airep.and.
  27086      $             ((iim1.ne.0.and.iip1.ne.0.and.
  27087      $              ((idt_difm1.gt.idt_near*2.and.
  27088      $                idt_difp1.gt.idt_near*2).or.
  27089      $               (idt_dif0 .gt.idt_near*2.and.
  27090      $                idt_difp1.gt.idt_near*2).or.
  27091      $               (idt_dif0 .gt.idt_near*2.and.
  27092      $                idt_difp2.gt.idt_near*2))).or.
  27093      $             (iim1.eq.0.and.idt_difp1.gt.idt_near*2).or.
  27094      $             (iim1.eq.0.and.idt_difp2.gt.idt_near*2).or.
  27095      $             (iim2.eq.0.and.iim1.ne.0.and.
  27096      $              idt_difp1.gt.idt_near*2).or.
  27097      $             (iip1.eq.0.and.idt_dif0 .gt.idt_near*2).or.
  27098      $             (iip1.eq.0.and.idt_difm1.gt.idt_near*2).or.
  27099      $             (iip2.eq.0.and.iip1.ne.0.and.
  27100      $              idt_dif0 .gt.idt_near*2)))then
  27101 c
  27102               c_qc(ii)(11:11) = 'I'
  27103 c
  27104 c     Check if time difference is too great to categorize remaining types
  27105 c     -------------------------------------------------------------------
  27106             elseif((.not.l_ii_man_airep).and.
  27107      $             ((iim1.ne.0.and.iip1.ne.0.and.
  27108      $              ((idt_difm1.gt.idt_near*2/3.and.
  27109      $                idt_difp1.gt.idt_near*2/3).or.
  27110      $               (idt_dif0 .gt.idt_near*2/3.and.
  27111      $                idt_difp1.gt.idt_near*2/3).or.
  27112      $               (idt_dif0 .gt.idt_near*2/3.and.
  27113      $                idt_difp2.gt.idt_near*2/3))).or.
  27114      $             (iim1.eq.0.and.idt_difp1.gt.idt_near*2/3).or.
  27115      $             (iim1.eq.0.and.idt_difp2.gt.idt_near*2/3).or.
  27116      $             (iim2.eq.0.and.iim1.ne.0.and.
  27117      $              idt_difp1.gt.idt_near*2/3).or.
  27118      $             (iip1.eq.0.and.idt_dif0 .gt.idt_near*2/3).or.
  27119      $             (iip1.eq.0.and.idt_difm1.gt.idt_near*2/3).or.
  27120      $             (iip2.eq.0.and.iip1.ne.0.and.
  27121      $              idt_dif0 .gt.idt_near*2/3)))then
  27122 c
  27123               c_qc(ii)(11:11) = 'I'
  27124 c
  27125 c     Label everything else as unknown
  27126 c     --------------------------------
  27127             else
  27128              c_qc(ii)(11:11) = 'U'
  27129             endif
  27130 c
  27131 c Save flight phase
  27132 c -----------------
  27133             l_print = .true.
  27134 c
  27135             if(itype(ii).eq.i_mdcrs.or.

Page 566         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  27136      $         itype(ii).eq.i_mdcrs_asc.or.
  27137      $         itype(ii).eq.i_mdcrs_lvl.or.
  27138      $         itype(ii).eq.i_mdcrs_des) then
  27139 c
  27140               if(c_qc(ii)(11:11).eq.'L') then
  27141                 if(itype(ii).ne.i_mdcrs_lvl.and.
  27142      $             l_print) then
  27143 c                  write(io8,*) 
  27144 c                  write(io8,*) 'Changing phase at ',ii,' from ',
  27145 c     $                 c_insty_ob(itype(ii)),' to mdcrs_lvl'
  27146                 endif
  27147                 itype(ii) = i_mdcrs_lvl
  27148 c
  27149               elseif(c_qc(ii)(11:11).eq.'a'.or.
  27150      $               c_qc(ii)(11:11).eq.'A') then
  27151                 if(itype(ii).ne.i_mdcrs_asc.and.
  27152      $             l_print) then
  27153 c                  write(io8,*) 
  27154 c                  write(io8,*) 'Changing phase at ',ii,' from ',
  27155 c     $                 c_insty_ob(itype(ii)),' to mdcrs_asc'
  27156                 endif
  27157                 itype(ii) = i_mdcrs_asc
  27158 c
  27159               elseif(c_qc(ii)(11:11).eq.'d'.or.
  27160      $               c_qc(ii)(11:11).eq.'D') then
  27161                 if(itype(ii).ne.i_mdcrs_des.and.
  27162      $             l_print) then
  27163 c                  write(io8,*) 
  27164 c                  write(io8,*) 'Changing phase at ',ii,' from ',
  27165 c     $                 c_insty_ob(itype(ii)),' to mdcrs_des'
  27166                 endif
  27167                 itype(ii) = i_mdcrs_des
  27168 c
  27169               else
  27170                 if(itype(ii).ne.i_mdcrs.and.
  27171      $             l_print) then
  27172 c                  write(io8,*) 
  27173 c                  write(io8,*) 'Changing phase at ',ii,' from ',
  27174 c     $                 c_insty_ob(itype(ii)),' to mdcrs'
  27175                 endif
  27176                 itype(ii) = i_mdcrs
  27177 c
  27178               endif
  27179 c
  27180             elseif(itype(ii).eq.i_acars.or.
  27181      $             itype(ii).eq.i_acars_asc.or.
  27182      $             itype(ii).eq.i_acars_lvl.or.
  27183      $             itype(ii).eq.i_acars_des) then
  27184 c
  27185               if(c_qc(ii)(11:11).eq.'L') then
  27186                 if(itype(ii).ne.i_acars_lvl.and.
  27187      $             l_print) then
  27188 c                  write(io8,*) 
  27189 c                  write(io8,*) 'Changing phase at ',ii,' from ',
  27190 c     $                 c_insty_ob(itype(ii)),' to acars_lvl'
  27191                 endif
  27192                 itype(ii) = i_acars_lvl           

Page 567         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  27193 c
  27194               elseif(c_qc(ii)(11:11).eq.'a'.or.
  27195      $               c_qc(ii)(11:11).eq.'A') then
  27196                 if(itype(ii).ne.i_acars_asc.and.
  27197      $             l_print) then
  27198 c                  write(io8,*) 
  27199 c                  write(io8,*) 'Changing phase at ',ii,' from ',
  27200 c     $                 c_insty_ob(itype(ii)),' to acars_asc'
  27201                 endif
  27202                 itype(ii) = i_acars_asc
  27203 c
  27204               elseif(c_qc(ii)(11:11).eq.'d'.or.
  27205      $               c_qc(ii)(11:11).eq.'D') then
  27206                 if(itype(ii).ne.i_acars_des.and.
  27207      $             l_print) then
  27208 c                  write(io8,*) 
  27209 c                  write(io8,*) 'Changing phase at ',ii,' from ',
  27210 c     $                 c_insty_ob(itype(ii)),' to acars_des'
  27211                 endif
  27212                 itype(ii) = i_acars_des
  27213 c
  27214               else
  27215                 if(itype(ii).ne.i_acars.and.
  27216      $             l_print) then
  27217 c                  write(io8,*) 
  27218 c                  write(io8,*) 'Changing phase at ',ii,' from ',
  27219 c     $                 c_insty_ob(itype(ii)),' to acars'
  27220                 endif
  27221                 itype(ii) = i_acars
  27222 c
  27223               endif
  27224 c
  27225             elseif(itype(ii).eq.i_airep.or.
  27226      $             itype(ii).eq.i_airep_asc.or.
  27227      $             itype(ii).eq.i_airep_lvl.or.
  27228      $             itype(ii).eq.i_airep_des) then
  27229 c
  27230               if(c_qc(ii)(11:11).eq.'L') then
  27231                 if(itype(ii).ne.i_airep_lvl.and.
  27232      $             l_print) then
  27233 c                  write(io8,*) 
  27234 c                  write(io8,*) 'Changing phase at ',ii,' from ',
  27235 c     $                 c_insty_ob(itype(ii)),' to airep_lvl'
  27236                 endif
  27237                 itype(ii) = i_airep_lvl
  27238 c
  27239               elseif(c_qc(ii)(11:11).eq.'a'.or.
  27240      $               c_qc(ii)(11:11).eq.'A') then
  27241                 if(itype(ii).ne.i_airep_asc.and.
  27242      $             l_print) then
  27243 c                  write(io8,*) 
  27244 c                  write(io8,*) 'Changing phase at ',ii,' from ',
  27245 c     $                 c_insty_ob(itype(ii)),' to airep_asc'
  27246                 endif
  27247                 itype(ii) = i_airep_asc
  27248 c
  27249               elseif(c_qc(ii)(11:11).eq.'d'.or.

Page 568         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  27250      $               c_qc(ii)(11:11).eq.'D') then
  27251                 if(itype(ii).ne.i_airep_des.and.
  27252      $             l_print) then
  27253 c                  write(io8,*) 
  27254 c                  write(io8,*) 'Changing phase at ',ii,' from ',
  27255 c     $                 c_insty_ob(itype(ii)),' to airep_des'
  27256                 endif
  27257                 itype(ii) = i_airep_des
  27258 c
  27259               else
  27260                 if(itype(ii).ne.i_airep.and.
  27261      $             l_print) then
  27262 c                  write(io8,*) 
  27263 c                  write(io8,*) 'Changing phase at ',ii,' from ',
  27264 c     $                 c_insty_ob(itype(ii)),' to airep'
  27265                 endif
  27266                 itype(ii) = i_airep
  27267 c
  27268               endif
  27269 c
  27270             elseif(itype(ii).eq.i_amdar.or.
  27271      $             itype(ii).eq.i_amdar_asc.or.
  27272      $             itype(ii).eq.i_amdar_lvl.or.
  27273      $             itype(ii).eq.i_amdar_des) then
  27274 c
  27275               if(c_qc(ii)(11:11).eq.'L') then
  27276                 if(itype(ii).ne.i_amdar_lvl.and.
  27277      $             l_print) then
  27278 c                  write(io8,*) 
  27279 c                  write(io8,*) 'Changing phase at ',ii,' from ',
  27280 c     $                 c_insty_ob(itype(ii)),' to amdar_lvl'
  27281                 endif
  27282                 itype(ii) = i_amdar_lvl           
  27283 c
  27284               elseif(c_qc(ii)(11:11).eq.'a'.or.
  27285      $               c_qc(ii)(11:11).eq.'A') then
  27286                 if(itype(ii).ne.i_amdar_asc.and.
  27287      $             l_print) then
  27288 c                  write(io8,*) 
  27289 c                  write(io8,*) 'Changing phase at ',ii,' from ',
  27290 c     $                 c_insty_ob(itype(ii)),' to amdar_asc'
  27291                 endif
  27292                 itype(ii) = i_amdar_asc
  27293 c
  27294               elseif(c_qc(ii)(11:11).eq.'d'.or.
  27295      $               c_qc(ii)(11:11).eq.'D') then
  27296                 if(itype(ii).ne.i_amdar_des.and.
  27297      $             l_print) then
  27298 c                  write(io8,*) 
  27299 c                  write(io8,*) 'Changing phase at ',ii,' from ',
  27300 c     $                 c_insty_ob(itype(ii)),' to amdar_des'
  27301                 endif
  27302                 itype(ii) = i_amdar_des
  27303 c
  27304               else
  27305                 if(itype(ii).ne.i_amdar.and.
  27306      $             l_print) then

Page 569         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  27307 c                  write(io8,*) 
  27308 c                  write(io8,*) 'Changing phase at ',ii,' from ',
  27309 c     $                 c_insty_ob(itype(ii)),' to amdar'
  27310                 endif
  27311                 itype(ii) = i_amdar
  27312 c
  27313               endif
  27314 c
  27315             endif
  27316 c
  27317           enddo
  27318 c
  27319 c Mark small flights
  27320 c ------------------
  27321         else
  27322           do iob=istart,iend
  27323             ii = indx(iob)
  27324             c_qc(ii)(11:11) = 'N'
  27325           enddo
  27326         endif
  27327 c
  27328 c     End loop over flights
  27329 c     ---------------------
  27330       enddo
  27331 c
  27332 c     Write out bad reports
  27333 c     ---------------------
  27334       if(.not.l_operational) then
  27335         write(io36,*)
  27336         write(io36,*)'Ordering errors'
  27337         write(io36,*)'---------------'
  27338         write(io36,3001)
  27339  3001   format(' index  type    tail num   flight     time       lat'
  27340      x,      '        lon       pres  height '
  27341      x,      't-prcn   temp     innov  ichk'
  27342      x,      ' spec hum    innov  ichk'
  27343      x,      '   ob_dir    innov  ichk'
  27344      x,      '   ob_spd    innov  ichk'
  27345      x,      '   qc flag')
  27346       endif
  27347 c
  27348       kbad = 0
  27349 c
  27350       do iob = 1,numreps
  27351         ii   = indx(iob)
  27352 c
  27353         if(itype(ii).eq.i_mdcrs.or.
  27354      $     itype(ii).eq.i_mdcrs_lvl.or.
  27355      $     itype(ii).eq.i_mdcrs_asc.or.
  27356      $     itype(ii).eq.i_mdcrs_des) then
  27357           ktype = 1
  27358 c
  27359         elseif(itype(ii).eq.i_acars.or.
  27360      $         itype(ii).eq.i_acars_lvl.or.
  27361      $         itype(ii).eq.i_acars_asc.or.
  27362      $         itype(ii).eq.i_acars_des) then
  27363           ktype = 2

Page 570         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  27364 c         
  27365         elseif(itype(ii).eq.i_amdar.or. 
  27366      $         itype(ii).eq.i_amdar_lvl.or.
  27367      $         itype(ii).eq.i_amdar_asc.or.
  27368      $         itype(ii).eq.i_amdar_des) then
  27369           ktype = 3
  27370 c
  27371         elseif(itype(ii).eq.i_airep.or.
  27372      $         itype(ii).eq.i_airep_lvl.or.
  27373      $         itype(ii).eq.i_airep_asc.or.
  27374      $         itype(ii).eq.i_airep_des) then
  27375           ktype = 4
  27376 c
  27377         elseif(itype(ii).eq.i_man_airep.or.
  27378      $         itype(ii).eq.i_man_Yairep) then
  27379           ktype = 5
  27380         endif
  27381 c
  27382         if(ktype.eq.1) then
  27383           nrep_Md = nrep_Md + 1
  27384         elseif(ktype.eq.2) then
  27385           nrep_Ac = nrep_Ac + 1
  27386         elseif(ktype.eq.3) then
  27387           nrep_Am = nrep_Am + 1
  27388         elseif(ktype.eq.4) then
  27389           nrep_Ar = nrep_Ar + 1
  27390         elseif(ktype.eq.5) then
  27391           nrep_Ma = nrep_Ma + 1
  27392         endif
  27393 c
  27394         if(c_qc(ii)(1:1).eq.'d'.or.
  27395      $     c_qc(ii)(1:1).eq.'2'.or.
  27396      $     c_qc(ii)(2:2).eq.'I'.or.
  27397      $     c_qc(ii)(2:2).eq.'K'.or.
  27398      $     c_qc(ii)(3:4).eq.'II'.or.
  27399      $     c_qc(ii)(5:5).eq.'I'.or.
  27400      $     c_qc(ii)(5:5).eq.'i'.or.
  27401      $     c_qc(ii)(8:8).eq.'A') then
  27402 c
  27403           if(.not.l_operational) then
  27404             write(io36,3002) ii,c_insty_ob(itype(ii))
  27405      x,        c_acftreg(ii),c_acftid(ii)
  27406      x,        idt(ii),alat(ii),alon(ii)
  27407      x,        pres(ii),ht_ft(ii)
  27408      x,        t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
  27409      x,        ob_q(ii),xiv_q(ii),ichk_q(ii)
  27410      x,        ob_dir(ii),xiv_d(ii),ichk_d(ii)
  27411      x,        ob_spd(ii),xiv_s(ii),ichk_s(ii)
  27412      x,        c_qc(ii)
  27413  3002       format(i6,1x,a8,1x,a8,1x,a9,1x,i7,1x,2f11.5,1x,f8.1,1x,f7.0
  27414      x,          1x,f5.2,4(2(1x,f8.2),1x,i5),1x,'!',a11,'!')
  27415           endif
  27416 c
  27417 c         Count number of rejected winds by tail number
  27418 c         ---------------------------------------------
  27419           if(c_qc(ii)(8:8).eq.'A') then
  27420             mm = 1

Page 571         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  27421             do while(mm.le.kreg)
  27422               if(c_acftreg(ii).eq.creg_reg(mm)) then 
  27423                 if(ktype.gt.0.and.ktype.le.5)
  27424      $            nwind_reg(mm,ktype) = nwind_reg(mm,ktype) + 1
  27425                 mm = kreg + 1
  27426               endif
  27427               mm = mm + 1
  27428             enddo
  27429           endif
  27430 c
  27431 c         Count by category
  27432 c         -----------------
  27433           if(c_qc(ii)(1:1).eq.'d') then
  27434             nord_dup(ktype) = nord_dup(ktype) + 1
  27435           elseif(c_qc(ii)(2:2).eq.'K') then
  27436             nord_stk(ktype) = nord_stk(ktype) + 1
  27437           elseif(c_qc(ii)(2:2).eq.'I') then
  27438             nord_time(ktype) = nord_time(ktype) + 1
  27439           elseif(c_qc(ii)(3:4).eq.'II') then
  27440             if(c_qc(ii)(1:1).eq.'p') then
  27441               nord_near(ktype) = nord_near(ktype) + 1
  27442             elseif(c_qc(ii)(1:1).eq.'P') then
  27443               nord_aspd(ktype) = nord_aspd(ktype) + 1
  27444             elseif(c_qc(ii)(1:1).eq.'O') then
  27445               nord_lone(ktype) = nord_lone(ktype) + 1
  27446             elseif(c_qc(ii)(1:1).eq.'r') then
  27447               nord_dble(ktype) = nord_dble(ktype) + 1
  27448             elseif(c_qc(ii)(1:1).eq.'X') then
  27449               nord_turn(ktype) = nord_turn(ktype) + 1
  27450             endif
  27451           elseif(c_qc(ii)(5:5).eq.'I'.or.
  27452      $           c_qc(ii)(5:5).eq.'i') then
  27453             nord_alt(ktype) = nord_alt(ktype) + 1
  27454           elseif(c_qc(ii)(8:8).eq.'A') then
  27455             nord_wind(ktype) = nord_wind(ktype) + 1
  27456           elseif(c_qc(ii)(1:1).eq.'2') then
  27457             nord_2nd(ktype) = nord_2nd(ktype) + 1
  27458           endif
  27459 c
  27460 c         Reject reports with inconsistent heights and positions
  27461 c         ------------------------------------------------------
  27462           if(c_qc(ii)(1:1).eq.'d'.or.
  27463      $       c_qc(ii)(2:2).eq.'I'.or.
  27464      $       c_qc(ii)(2:2).eq.'K'.or.
  27465      $       c_qc(ii)(3:4).eq.'II'.or.
  27466      $       c_qc(ii)(5:5).eq.'I'.or.
  27467      $       c_qc(ii)(5:5).eq.'i') then
  27468 c
  27469             csort(ii)(1:5) = 'badob'
  27470 c
  27471             kbad(ktype) = kbad(ktype) + 1
  27472 c
  27473             if(ktype.eq.1) then
  27474               nord_Md = nord_Md + 1
  27475             elseif(ktype.eq.2) then
  27476               nord_Ac = nord_Ac + 1
  27477             elseif(ktype.eq.3) then

Page 572         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  27478               nord_Am = nord_Am + 1
  27479             elseif(ktype.eq.4) then
  27480               nord_Ar = nord_Ar + 1
  27481             elseif(ktype.eq.5) then
  27482               nord_Ma = nord_Ma + 1
  27483             endif
  27484           endif
  27485 c
  27486         endif
  27487 c
  27488       enddo
  27489 c
  27490       if(.not.l_operational) then
  27491         write(io36,*)
  27492         write(io36,*) '  Number of MDCRS    reps rej by ord = ',kbad(1)
  27493 ccccdak        write(io36,*) '  Number of ACARS    reps rej by ord = ',kbad(2)
  27494         write(io36,*) '  Number of TAMDAR   reps rej by ord = ',kbad(2)
  27495         write(io36,*) '  Number of AMDAR    reps rej by ord = ',kbad(3)
  27496         write(io36,*) '  Number of AIREP    reps rej by ord = ',kbad(4)
  27497         write(io36,*) '  Number of manAIREP reps rej by ord = ',kbad(5)
  27498       endif
  27499 c
  27500       write(io8,*)
  27501       write(io8,*) '  Reports with ordering errors--rejected'
  27502       write(io8,*) '  --------------------------------------'
  27503       write(io8,*) '  Number of MDCRS    reps rej by ord = ',kbad(1)
  27504 ccccdak      write(io8,*) '  Number of ACARS    reps rej by ord = ',kbad(2)
  27505       write(io8,*) '  Number of TAMDAR   reps rej by ord = ',kbad(2)
  27506       write(io8,*) '  Number of AMDAR    reps rej by ord = ',kbad(3)
  27507       write(io8,*) '  Number of AIREP    reps rej by ord = ',kbad(4)
  27508       write(io8,*) '  Number of manAIREP reps rej by ord = ',kbad(5)
  27509 c
  27510 c     Output tail number counts
  27511 c     -------------------------
  27512       write(io8,*) 
  27513       write(io8,*) '  Tail numbers for reports with anomalous winds'
  27514 ccccdak      write(io8,*) '  Tail Num  MDCRS  ACARS  AMDAR  AIREP  MAN  '
  27515       write(io8,*) '  Tail Num  MDCRS  TAMDAR AMDAR  AIREP  MAN  '
  27516       write(io8,*) '  ---------------------------------------------'
  27517 c
  27518       do mm=1,kreg
  27519         if( nwind_reg(mm,1)+nwind_reg(mm,2)+nwind_reg(mm,3)
  27520      $     +nwind_reg(mm,4)+nwind_reg(mm,5).gt.0) then
  27521           write(io8,'(2x,a8,5(1x,i6))') 
  27522      $      creg_reg(mm),(nwind_reg(mm,kk),kk=1,5)
  27523         endif
  27524       enddo
  27525 c
  27526       write(io8,*)
  27527       write(io8,*) 'Ordering check data counts'
  27528       write(io8,*) '--------------------------'
  27529       write(io8,'(1x,a55)')
  27530 ccccdak     $ 'Type of check     MDCRS   ACARS   AMDAR   AIREP     man'
  27531      $ 'Type of check     MDCRS  TAMDAR   AMDAR   AIREP     man'
  27532       write(io8,'(1x,a55)')
  27533      $ '--------------- ------- ------- ------- ------- -------'
  27534       write(io8,'(''Num considered '',5(1x,i7))')

Page 573         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  27535      $            nrep_Md,nrep_Ac,nrep_Am,nrep_Ar,nrep_Ma
  27536       write(io8,'(''Total rejected '',5(1x,i7))')
  27537      $            nord_Md,nord_Ac,nord_Am,nord_Ar,nord_Ma
  27538       write(io8,'(1x,a55)')
  27539      $ '--------------- ------- ------- ------- ------- -------'
  27540       write(io8,'(''Near duplicate '',5(1x,i7))')
  27541      $          (nord_dup(ii),ii=1,5)
  27542       write(io8,'(''Stuck time     '',5(1x,i7))')
  27543      $          (nord_stk(ii),ii=1,5)
  27544       write(io8,'(''Incons. time   '',5(1x,i7))')
  27545      $          (nord_time(ii),ii=1,5)
  27546       write(io8,'(''Close to reject'',5(1x,i7))')
  27547      $          (nord_near(ii),ii=1,5)
  27548       write(io8,'(''High airspeed  '',5(1x,i7))')
  27549      $          (nord_aspd(ii),ii=1,5)
  27550       write(io8,'(''Off-track pt   '',5(1x,i7))')
  27551      $          (nord_lone(ii),ii=1,5)
  27552       write(io8,'(''Reversed track '',5(1x,i7))')
  27553      $          (nord_dble(ii),ii=1,5)
  27554       write(io8,'(''Large turn     '',5(1x,i7))')
  27555      $          (nord_turn(ii),ii=1,5)
  27556       write(io8,'(''Bad alt order  '',5(1x,i7))')
  27557      $          (nord_alt(ii),ii=1,5)
  27558       write(io8,'(1x,a55)')
  27559      $ '--------------- ------- ------- ------- ------- -------'
  27560       write(io8,'(''Second flight  '',5(1x,i7))')
  27561      $          (nord_2nd(ii),ii=1,5)
  27562       write(io8,'(1x,a55)')
  27563      $ '--------------- ------- ------- ------- ------- -------'
  27564       write(io8,'(''Anomalous winds'',5(1x,i7))')
  27565      $          (nord_wind(ii),ii=1,5)
  27566       write(io8,'(1x,a55)')
  27567      $ '--------------- ------- ------- ------- ------- -------'
  27568 c
  27569       kbadtot = kbad(1) + kbad(2) + kbad(3)
  27570      $        + kbad(4) + kbad(5) 
  27571 c
  27572       write(io8,*)
  27573       write(io8,*) numreps,' good reports processed'
  27574       write(io8,*) kbadtot,' reports failed qc in ordering check'
  27575 c
  27576       return
  27577       end

Page 574         Source Listing                  ORDCHEK_QC
2017-04-18 11:07 Entry Points                    acftobs_qc.f



ENTRY POINTS

  Name                   
                         
 ordchek_qc_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 10                         Label  18923                                                          18932                             
 11                         Label  19533                                                          19542                             
 111                        Label  23558                                                          23568                             
 12                         Label  26602                                                          26611                             
 121                        Label  23579                                                          23589                             
 131                        Label  23600                                                          23610                             
 141                        Label  23622                                                          23633                             
 151                        Label  23646                                                          23657                             
 161                        Label  23669                                                          23679                             
 20                         Label  18943                                                          18952                             
 21                         Label  19553                                                          19562                             
 22                         Label  26622                                                          26631                             
 30                         Label  18963                                                          18972                             
 3001                       Label  27339                                                          27338                             
 3002                       Label  27413                                                          27404                             
 32                         Label  26642                                                          26651                             
 40                         Label  18983                                                          18992                             
 41                         Label  19574                                                          19584                             
 42                         Label  26662                                                          26671                             
 51                         Label  19597                                                          19607                             
 5500                       Label  19460                                                          23277,23389                       
 8002                       Label  23270                                                          23209,23222,23234,23245,23258,2648
                                                                                                  7,26500,26512,26523,26536         
 ABS                        Func   19005                                scalar                    19005,19006,19021,19022,19029,1903
                                                                                                  0,19045,19046,19678,19744,19745,19
                                                                                                  834,19901,19902,20019,20086,20087,
                                                                                                  20189,20256,20257,20348,20416,2041
                                                                                                  7,20477,20545,20546,20625,20701,20
                                                                                                  702,20767,20837,20838,20906,20907,
                                                                                                  20915,20921,20928,20980,20982,2098
                                                                                                  5,20986,20988,20989,21002,21004,21
                                                                                                  007,21008,21009,21010,21111,21115,
                                                                                                  21116,21147,21148,21234,21235,2131
                                                                                                  7,21318,21522,21523,21535,21536,21
                                                                                                  555,21556,21568,21569,21810,21813,
                                                                                                  21816,21992,21995,21998,22223,2222
                                                                                                  6,22229,22393,22395,22397,22542,22
                                                                                                  544,22706,22707,22708,22709,22763,
                                                                                                  22764,22765,22767,22768,22770,2277
                                                                                                  1,22819,22820,22821,22823,22824,22
                                                                                                  826,22827,22962,22988,23763,23865,
                                                                                                  23966,24068,24183,24287,24362,2443
                                                                                                  5,24508,24948,25079,25080,25081,25
                                                                                                  082,25084,25085,25087,25088,25096,

Page 575         Source Listing                  ORDCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  25097,25100,25101,25126,25127,2512
                                                                                                  8,25129,25131,25132,25134,25135,25
                                                                                                  144,25145,25148,25149,25183,25184,
                                                                                                  25185,25186,25188,25189,25191,2519
                                                                                                  2,25230,25231,25232,25233,25235,25
                                                                                                  236,25238,25239,25247,25248,25251,
                                                                                                  25252,25359,25360,25363,25364,2538
                                                                                                  8,25389,25392,25393,25419,25420,25
                                                                                                  423,25424,25536,25537,25538,25539,
                                                                                                  25541,25542,25544,25545,25636,2563
                                                                                                  7,25640,25641,25644,25645,25648,25
                                                                                                  649,25683,25684,25687,25688,25691,
                                                                                                  25692,25695,25696,25726,25727,2573
                                                                                                  0,25731,25734,25735,25738,25739,25
                                                                                                  780,25781,25784,25785,25788,25789,
                                                                                                  25792,25793,26069,26070,26073,2607
                                                                                                  4,26101,26102,26105,26106,26684,26
                                                                                                  685,26700,26701,26708,26709,26724,
                                                                                                  26725                             
 AIRSPD0                    Local  18772    R(4)            4           scalar                    19734,19743,19749,19762,19802,2181
                                                                                                  1,21813,21839,21841,21875,21878,21
                                                                                                  881,21884,21885,21910,21933,21936,
                                                                                                  21993,21995,22025,22027,22067,2207
                                                                                                  0,22075,22078,22079,22104,22127,22
                                                                                                  130,22224,22226,22250,22252,22298,
                                                                                                  22301,22303,22306,22307,22347,2237
                                                                                                  0,22373,22398,22399,22404,22405,23
                                                                                                  196                               
 AIRSPDM1                   Local  18768    R(4)            4           scalar                    19890,19900,19906,19919,19959,2319
                                                                                                  6                                 
 AIRSPDM2                   Local  18770    R(4)            4           scalar                    19988,23196                       
 AIRSPDP1                   Local  18774    R(4)            4           scalar                    20075,20085,20091,20104,20144,2140
                                                                                                  3,21406,21408,21450,21482,21513,21
                                                                                                  546,21578,21611,21643,21695,21751,
                                                                                                  21807,21812,21813,21814,21816,2182
                                                                                                  3,21859,21886,21887,21903,21926,21
                                                                                                  948,21969,21989,21994,21995,21996,
                                                                                                  21998,22005,22047,22080,22081,2209
                                                                                                  7,22120,22142,22163,22213,22220,22
                                                                                                  225,22226,22227,22229,22236,22284,
                                                                                                  22308,22309,22340,22363,22385,2240
                                                                                                  0,22401,22406,22407,22449,22488,22
                                                                                                  531,23197                         
 AIRSPDP2                   Local  18776    R(4)            4           scalar                    20245,20255,20261,20274,20305,2181
                                                                                                  5,21816,21840,21843,21846,21882,21
                                                                                                  883,21888,21889,21911,21913,21934,
                                                                                                  21997,21998,22026,22031,22034,2207
                                                                                                  6,22077,22082,22083,22105,22107,22
                                                                                                  128,22178,22179,22228,22229,22251,
                                                                                                  22253,22256,22304,22305,22310,2231
                                                                                                  1,22348,22350,22371,22402,22403,22
                                                                                                  408,22409,22461,23197             
 AIRSPDP3                   Local  18778    R(4)            4           scalar                    20334,23197                       
 AIRSPD_BAD0                Local  18786    R(4)            4           scalar                    20690,20700,20706,20720,20751,2319
                                                                                                  8                                 

Page 576         Source Listing                  ORDCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 AIRSPD_BADP1               Local  18788    R(4)            4           scalar                    20826,20836,20842,20857,20890,2110
                                                                                                  0,21101,23198                     
 AIRSPD_TRACK               Local  18790    R(4)            4           scalar                    20962,23198                       
 AIRSPD_WO0                 Local  18780    R(4)            4           scalar                    20405,20415,20421,20435,20450,2100
                                                                                                  5,21006,21413,21808,21810,21831,21
                                                                                                  833,21835,21844,21867,21870,21871,
                                                                                                  21876,21879,21890,21891,21935,2193
                                                                                                  7,21990,21992,22015,22017,22019,22
                                                                                                  032,22057,22060,22061,22068,22071,
                                                                                                  22084,22085,22129,22131,22174,2217
                                                                                                  5,22221,22223,22243,22245,22247,22
                                                                                                  254,22291,22294,22295,22299,22302,
                                                                                                  22312,22313,22372,22374,22410,2241
                                                                                                  1,22456,22458,22460,23196         
 AIRSPD_WOP1                Local  18782    R(4)            4           scalar                    20534,20544,20550,20564,20579,2098
                                                                                                  3,20984,21414,21809,21810,21832,21
                                                                                                  834,21835,21845,21847,21848,21868,
                                                                                                  21869,21871,21877,21892,21893,2191
                                                                                                  2,21914,21991,21992,22016,22018,22
                                                                                                  019,22033,22035,22036,22058,22059,
                                                                                                  22061,22069,22086,22087,22106,2210
                                                                                                  8,22176,22177,22222,22223,22244,22
                                                                                                  246,22247,22255,22257,22258,22292,
                                                                                                  22293,22295,22300,22314,22315,2234
                                                                                                  9,22351,22412,22413,22457,22459,22
                                                                                                  460,23197                         
 AIRSPD_WOP2                Local  18784    R(4)            4           scalar                    20610,23197                       
 ALAT                       Dummy  18365    R(8)            8     1     0        ARG,INOUT        19000,19640,19656,19687,19688,1969
                                                                                                  3,19694,19696,19699,19700,19812,19
                                                                                                  843,19844,19849,19850,19852,19855,
                                                                                                  19856,19997,20028,20029,20034,2003
                                                                                                  5,20037,20040,20041,20154,20198,20
                                                                                                  199,20204,20205,20207,20210,20211,
                                                                                                  20357,20358,20363,20364,20366,2036
                                                                                                  9,20370,20486,20487,20492,20493,20
                                                                                                  495,20498,20499,20630,20632,20636,
                                                                                                  20638,20644,20646,20649,20652,2065
                                                                                                  4,20773,20777,20778,20783,20784,20
                                                                                                  786,20789,20790,21522,21535,21555,
                                                                                                  21568,21587,21620,23212,23225,2323
                                                                                                  6,23248,23261,23347,23348,23356,23
                                                                                                  357,23724,23741,23772,23773,23778,
                                                                                                  23779,23781,23784,23785,23843,2387
                                                                                                  4,23875,23880,23881,23883,23886,23
                                                                                                  887,23944,23975,23976,23981,23982,
                                                                                                  23984,23987,23988,24046,24077,2407
                                                                                                  8,24083,24084,24086,24089,24090,24
                                                                                                  149,24192,24193,24198,24199,24201,
                                                                                                  24204,24205,24253,24296,24297,2430
                                                                                                  2,24303,24305,24308,24309,24371,24
                                                                                                  372,24377,24378,24380,24383,24384,
                                                                                                  24444,24445,24450,24451,24453,2445
                                                                                                  6,24457,24517,24518,24523,24524,24
                                                                                                  526,24529,24530,24629,24630,24644,
                                                                                                  24645,24650,24651,24693,24694,2469

Page 577         Source Listing                  ORDCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  5,24696,24711,24712,24734,24735,24
                                                                                                  766,24767,24768,24769,24780,24803,
                                                                                                  24835,24857,24878,24879,24900,2490
                                                                                                  1,24954,24956,24961,24962,24967,24
                                                                                                  968,24970,24973,24974,26490,26503,
                                                                                                  26514,26526,26539,26679,27406     
 ALAT0                      Local  18598    R(8)            8           scalar                    19000,19640,19683,20024,20482,2090
                                                                                                  2,20906,23724,23768,24073,24440,26
                                                                                                  679                               
 ALATM1                     Local  18599    R(8)            8           scalar                    19656,19684,19783,19840,20353,2374
                                                                                                  1,23769,23820,23871,24367,26402   
 ALATM2                     Local  18600    R(8)            8           scalar                    19812,19839,19940,23843,23870,2392
                                                                                                  1,23972                           
 ALATM3                     Local  18601    R(8)            8           scalar                    19969,23944,23971,24022           
 ALATP1                     Local  18602    R(8)            8           scalar                    19997,20025,20125,20194,20354,2077
                                                                                                  2,20902,20906,24046,24074,24125,24
                                                                                                  188,24368,24513,26403             
 ALATP2                     Local  18603    R(8)            8           scalar                    20154,20175,20195,20483,24149,2416
                                                                                                  9,24189,24292,24441               
 ALATP3                     Local  18604    R(8)            8           scalar                    20315,24253,24273,24293,24514     
 ALAT_DIF                   Local  18592    R(8)            8           scalar                    20903,20906,20974                 
 ALAT_MAX                   Local  18595    R(8)            8           scalar                    20944,24611,24650,24651,24693,2469
                                                                                                  4,24766,24767,24779,24834         
 ALAT_MIN                   Local  18594    R(8)            8           scalar                    20943,24610,24644,24645,24695,2469
                                                                                                  6,24768,24769,24802,24856         
 ALON                       Dummy  18365    R(8)            8     1     0        ARG,INOUT        19001,19641,19657,19687,19688,1969
                                                                                                  0,19693,19694,19699,19700,19813,19
                                                                                                  843,19844,19846,19849,19850,19855,
                                                                                                  19856,19998,20028,20029,20031,2003
                                                                                                  4,20035,20040,20041,20155,20198,20
                                                                                                  199,20201,20204,20205,20210,20211,
                                                                                                  20357,20358,20360,20363,20364,2036
                                                                                                  9,20370,20486,20487,20489,20492,20
                                                                                                  493,20498,20499,20631,20633,20637,
                                                                                                  20639,20641,20645,20647,20653,2065
                                                                                                  5,20774,20777,20778,20780,20783,20
                                                                                                  784,20789,20790,21523,21536,21556,
                                                                                                  21569,21652,21653,21671,21676,2170
                                                                                                  8,21709,21726,21731,21733,21739,23
                                                                                                  212,23225,23236,23248,23261,23347,
                                                                                                  23348,23725,23742,23772,23773,2377
                                                                                                  5,23778,23779,23784,23785,23844,23
                                                                                                  874,23875,23877,23880,23881,23886,
                                                                                                  23887,23945,23975,23976,23978,2398
                                                                                                  1,23982,23987,23988,24047,24077,24
                                                                                                  078,24080,24083,24084,24089,24090,
                                                                                                  24150,24192,24193,24195,24198,2419
                                                                                                  9,24204,24205,24254,24296,24297,24
                                                                                                  299,24302,24303,24308,24309,24371,
                                                                                                  24372,24374,24377,24378,24383,2438
                                                                                                  4,24444,24445,24447,24450,24451,24
                                                                                                  456,24457,24517,24518,24520,24523,
                                                                                                  24524,24529,24530,24629,24630,2465
                                                                                                  6,24657,24662,24663,24698,24699,24
                                                                                                  700,24701,24712,24735,24761,24762,

Page 578         Source Listing                  ORDCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  24763,24764,24779,24780,24802,2480
                                                                                                  3,24834,24835,24856,24857,24879,24
                                                                                                  901,24955,24957,24961,24962,24964,
                                                                                                  24967,24968,24973,24974,26490,2650
                                                                                                  3,26514,26526,26539,26680,27406   
 ALON0                      Local  18605    R(8)            8           scalar                    19001,19641,19659,19661,19683,1981
                                                                                                  5,19817,20000,20002,20024,20157,20
                                                                                                  159,20482,20907,23725,23744,23746,
                                                                                                  23768,23846,23848,23947,23949,2404
                                                                                                  9,24051,24073,24152,24154,24256,24
                                                                                                  258,24440,26680                   
 ALONM1                     Local  18606    R(8)            8           scalar                    19657,19659,19660,19661,19662,1968
                                                                                                  4,19784,19840,20353,23742,23744,23
                                                                                                  745,23746,23747,23769,23821,23871,
                                                                                                  24367,26418,26430                 
 ALONM2                     Local  18607    R(8)            8           scalar                    19813,19815,19816,19817,19818,1983
                                                                                                  9,19941,23844,23846,23847,23848,23
                                                                                                  849,23870,23922,23972             
 ALONM3                     Local  18608    R(8)            8           scalar                    19970,23945,23947,23948,23949,2395
                                                                                                  0,23971,24023                     
 ALONP1                     Local  18609    R(8)            8           scalar                    19998,20000,20001,20002,20003,2002
                                                                                                  5,20126,20194,20354,20772,20907,24
                                                                                                  047,24049,24050,24051,24052,24074,
                                                                                                  24126,24188,24368,24513,26419,2643
                                                                                                  1                                 
 ALONP2                     Local  18610    R(8)            8           scalar                    20155,20157,20158,20159,20160,2017
                                                                                                  6,20195,20483,24150,24152,24153,24
                                                                                                  154,24155,24170,24189,24292,24441 
 ALONP3                     Local  18611    R(8)            8           scalar                    20316,24254,24256,24257,24258,2425
                                                                                                  9,24274,24293,24514               
 ALON_DIF                   Local  18593    R(8)            8           scalar                    20904,20907,20908,20975           
 ALON_MAX                   Local  18597    R(8)            8           scalar                    20946,24613,24662,24663,24698,2469
                                                                                                  9,24711,24761,24762,24878         
 ALON_MIN                   Local  18596    R(8)            8           scalar                    20945,24612,24656,24657,24700,2470
                                                                                                  1,24734,24763,24764,24900         
 AMISS                      Dummy  18363    R(4)            4           scalar   ARG,INOUT        19010,19011,19017,19025,19034,1903
                                                                                                  5,19041,19049,19683,19684,19717,19
                                                                                                  718,19719,19720,19721,19722,19723,
                                                                                                  19733,19768,19771,19773,19774,1978
                                                                                                  3,19784,19786,19787,19792,19793,19
                                                                                                  794,19795,19796,19797,19798,19802,
                                                                                                  19805,19806,19839,19840,19873,1987
                                                                                                  4,19875,19876,19877,19878,19879,19
                                                                                                  889,19925,19928,19930,19931,19940,
                                                                                                  19941,19943,19944,19949,19950,1995
                                                                                                  1,19952,19953,19954,19955,19959,19
                                                                                                  962,19963,19969,19970,19972,19973,
                                                                                                  19978,19979,19980,19981,19982,1998
                                                                                                  3,19984,19988,19991,19992,20024,20
                                                                                                  025,20058,20059,20060,20061,20062,
                                                                                                  20063,20064,20074,20110,20113,2011
                                                                                                  5,20116,20125,20126,20128,20129,20
                                                                                                  134,20135,20136,20137,20138,20139,
                                                                                                  20140,20144,20147,20148,20175,2017
                                                                                                  6,20178,20179,20194,20195,20228,20

Page 579         Source Listing                  ORDCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  229,20230,20231,20232,20233,20234,
                                                                                                  20244,20280,20283,20285,20286,2029
                                                                                                  5,20296,20297,20298,20299,20300,20
                                                                                                  301,20305,20308,20309,20315,20316,
                                                                                                  20318,20319,20324,20325,20326,2032
                                                                                                  7,20328,20329,20330,20334,20337,20
                                                                                                  338,20343,20353,20354,20388,20389,
                                                                                                  20390,20391,20392,20393,20394,2040
                                                                                                  4,20440,20441,20442,20443,20444,20
                                                                                                  445,20446,20450,20456,20459,20461,
                                                                                                  20462,20472,20482,20483,20517,2051
                                                                                                  8,20519,20520,20521,20522,20523,20
                                                                                                  533,20569,20570,20571,20572,20573,
                                                                                                  20574,20575,20579,20585,20588,2059
                                                                                                  0,20591,20600,20601,20602,20603,20
                                                                                                  604,20605,20606,20610,20613,20615,
                                                                                                  20630,20631,20632,20633,20673,2067
                                                                                                  4,20675,20676,20677,20678,20679,20
                                                                                                  689,20726,20727,20730,20732,20733,
                                                                                                  20741,20742,20743,20744,20745,2074
                                                                                                  6,20747,20751,20754,20755,20772,20
                                                                                                  773,20774,20808,20809,20810,20811,
                                                                                                  20812,20813,20814,20825,20863,2086
                                                                                                  4,20867,20869,20870,20880,20881,20
                                                                                                  882,20883,20884,20885,20886,20890,
                                                                                                  20893,20894,20902,20903,20904,2091
                                                                                                  1,20912,20913,20917,20918,20919,20
                                                                                                  924,20925,20926,20931,20932,20933,
                                                                                                  20952,20953,20954,20955,20956,2095
                                                                                                  7,20958,20962,20965,20966,20974,20
                                                                                                  975,20979,20981,20983,20987,21001,
                                                                                                  21003,21005,21100,21102,21103,2110
                                                                                                  6,21110,21112,21113,21145,21232,21
                                                                                                  311,21312,21313,21413,21414,21808,
                                                                                                  21809,21811,21812,21814,21815,2183
                                                                                                  1,21832,21839,21840,21843,21844,21
                                                                                                  845,21867,21868,21875,21876,21877,
                                                                                                  21881,21882,21884,21886,21888,2189
                                                                                                  0,21892,21910,21911,21912,21933,21
                                                                                                  934,21935,21990,21991,21993,21994,
                                                                                                  21996,21997,22015,22016,22025,2202
                                                                                                  6,22031,22032,22033,22057,22058,22
                                                                                                  067,22068,22069,22075,22076,22078,
                                                                                                  22080,22082,22084,22086,22104,2210
                                                                                                  5,22106,22127,22128,22129,22174,22
                                                                                                  176,22178,22221,22222,22224,22225,
                                                                                                  22227,22228,22243,22244,22250,2225
                                                                                                  1,22253,22254,22255,22291,22292,22
                                                                                                  298,22299,22300,22303,22304,22306,
                                                                                                  22308,22310,22312,22314,22347,2234
                                                                                                  8,22349,22370,22371,22372,22392,22
                                                                                                  394,22396,22398,22400,22402,22404,
                                                                                                  22406,22408,22410,22412,22456,2245
                                                                                                  7,22541,22548,22705,22761,22762,22
                                                                                                  766,22769,22817,22818,22822,22825,

Page 580         Source Listing                  ORDCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  23025,23026,23027,23028,23066,2306
                                                                                                  7,23068,23069,23102,23103,23104,23
                                                                                                  105,23768,23769,23802,23803,23804,
                                                                                                  23805,23806,23807,23808,23811,2381
                                                                                                  4,23820,23821,23823,23824,23829,23
                                                                                                  830,23831,23832,23833,23834,23835,
                                                                                                  23837,23870,23871,23904,23905,2390
                                                                                                  6,23907,23908,23909,23910,23913,23
                                                                                                  916,23921,23922,23924,23925,23930,
                                                                                                  23931,23932,23933,23934,23935,2393
                                                                                                  6,23938,23971,23972,24005,24006,24
                                                                                                  007,24008,24009,24010,24011,24014,
                                                                                                  24017,24022,24023,24025,24026,2403
                                                                                                  1,24032,24033,24034,24035,24036,24
                                                                                                  037,24039,24073,24074,24107,24108,
                                                                                                  24109,24110,24111,24112,24113,2411
                                                                                                  6,24119,24125,24126,24128,24129,24
                                                                                                  134,24135,24136,24137,24138,24139,
                                                                                                  24140,24142,24169,24170,24172,2417
                                                                                                  3,24188,24189,24222,24223,24224,24
                                                                                                  225,24226,24227,24228,24231,24234,
                                                                                                  24239,24240,24241,24242,24243,2424
                                                                                                  4,24245,24247,24273,24274,24276,24
                                                                                                  277,24292,24293,24326,24327,24328,
                                                                                                  24329,24330,24331,24332,24335,2433
                                                                                                  8,24343,24344,24345,24346,24347,24
                                                                                                  348,24349,24351,24357,24367,24368,
                                                                                                  24402,24403,24404,24405,24406,2440
                                                                                                  7,24408,24412,24413,24414,24415,24
                                                                                                  416,24417,24418,24421,24424,24430,
                                                                                                  24440,24441,24475,24476,24477,2447
                                                                                                  8,24479,24480,24481,24485,24486,24
                                                                                                  487,24488,24489,24490,24491,24494,
                                                                                                  24497,24503,24513,24514,24548,2454
                                                                                                  9,24550,24551,24552,24553,24554,24
                                                                                                  558,24559,24560,24561,24562,24563,
                                                                                                  24564,24567,24570,24575,24576,2457
                                                                                                  7,24578,24579,24580,24581,24583,24
                                                                                                  587,24588,24589,24590,24591,24592,
                                                                                                  24593,24595,24954,24955,24956,2495
                                                                                                  7,24993,24994,24995,24996,24997,24
                                                                                                  998,24999,25004,25005,25008,25015,
                                                                                                  25016,25017,25018,25019,25020,2502
                                                                                                  1,25023,25444,25448,25524,25528,26
                                                                                                  144,26145,26146,26147,26166,26167,
                                                                                                  26168,26169,26189,26190,26191,2619
                                                                                                  2,26241,26242,26243,26244,26371,26
                                                                                                  372,26689,26690,26696,26704,26713,
                                                                                                  26714,26720,26728                 
 ATAN                       Func   18837                                scalar                    18837                             
 ATAN2                      Func   19713                                scalar                    19713,19869,20054,20224,20383,2051
                                                                                                  2,20668,20803,23798,23900,24001,24
                                                                                                  103,24218,24322,24397,24470,24543,
                                                                                                  24987                             
 CIDMISS                    Dummy  18364    CHAR            8           scalar   ARG,INOUT        18902                             

Page 581         Source Listing                  ORDCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 COS                        Func   19735                                scalar                    19735,19892,20077,20247,20407,2053
                                                                                                  6,20692,20828,21108,21109,21836,21
                                                                                                  837,21872,21873,21915,21938,22020,
                                                                                                  22021,22062,22063,22109,22132,2224
                                                                                                  8,22249,22296,22297,22352,22375,22
                                                                                                  462,22463,23033,23034,23035,23037,
                                                                                                  23074,23075,23077,23110,23111,2311
                                                                                                  3,25076,25123,25180,25227,25274,25
                                                                                                  279,25301,25306,25328,25333,25352,
                                                                                                  25381,25412,25450,25530,25533,2562
                                                                                                  5,25672,25769,26140,26148,26149,26
                                                                                                  151,26170,26171,26173,26193,26194,
                                                                                                  26195,26196,26239,26246,26247,2624
                                                                                                  9,26303                           
 CREG_REG                   Dummy  18368    CHAR            8     1     0        ARG,INOUT        27422,27522                       
 CSORT                      Dummy  18363    CHAR            25    1     0        ARG,INOUT        27469                             
 C_ACFTID                   Dummy  18364    CHAR            9     1     0        ARG,INOUT        18902,21401,21402,21404,21405,2180
                                                                                                  2,21803,21983,21984,23211,23224,23
                                                                                                  235,23247,23260,23290,23339,23396,
                                                                                                  26489,26502,26513,26525,26538,2740
                                                                                                  5                                 
 C_ACFTREG                  Dummy  18364    CHAR            8     1     0        ARG,INOUT        21175,21176,21193,21194,21254,2125
                                                                                                  5,21272,21273,21473,21474,21504,21
                                                                                                  505,21604,21636,22617,22618,22648,
                                                                                                  22649,23211,23224,23235,23247,2326
                                                                                                  0,25465,25466,25495,25496,25560,25
                                                                                                  561,25583,25584,25907,25908,25959,
                                                                                                  25960,26489,26502,26513,26525,2653
                                                                                                  8,27405,27422                     
 C_INSTY_OB                 Func   18440    CHAR            16          scalar                    23210,23223,23234,23246,23259,2648
                                                                                                  8,26501,26512,26524,26537,27404   
 C_QC                       Dummy  18365    CHAR            11    1     0        ARG,INOUT        18925,18926,18927,18928,18929,1893
                                                                                                  0,18945,18946,18947,18948,18949,18
                                                                                                  950,18965,18966,18967,18968,18969,
                                                                                                  18970,18985,18986,18987,18988,1898
                                                                                                  9,18990,19063,19073,19079,19081,19
                                                                                                  092,19098,19100,19114,19122,19132,
                                                                                                  19140,19150,19158,19175,19189,1919
                                                                                                  5,19197,19212,19218,19220,19238,19
                                                                                                  250,19264,19276,19290,19302,19318,
                                                                                                  19329,19342,19355,19372,19374,1937
                                                                                                  9,19394,19396,19401,19423,19444,19
                                                                                                  449,19510,19511,19512,19513,19514,
                                                                                                  19515,19535,19536,19537,19538,1953
                                                                                                  9,19540,19555,19556,19557,19558,19
                                                                                                  559,19560,19577,19578,19579,19580,
                                                                                                  19581,19582,19600,19601,19602,1960
                                                                                                  3,19604,19605,20991,21012,21023,21
                                                                                                  041,21073,21118,21119,21173,21191,
                                                                                                  21216,21217,21218,21220,21252,2127
                                                                                                  0,21295,21296,21297,21299,21331,21
                                                                                                  353,21366,21367,21368,21370,21416,
                                                                                                  21417,21427,21428,21468,21500,2153
                                                                                                  5,21536,21568,21569,21598,21599,21
                                                                                                  631,21632,21664,21665,21680,21681,

Page 582         Source Listing                  ORDCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  21720,21721,21735,21736,21850,2185
                                                                                                  1,21895,21896,21917,21918,21940,21
                                                                                                  941,21957,21958,21960,21961,22038,
                                                                                                  22039,22089,22090,22111,22112,2213
                                                                                                  4,22135,22151,22152,22154,22155,22
                                                                                                  181,22191,22260,22261,22317,22318,
                                                                                                  22354,22355,22377,22378,22415,2241
                                                                                                  6,22427,22428,22465,22466,22497,22
                                                                                                  498,22508,22509,22550,22551,22552,
                                                                                                  22554,22566,22567,22568,22570,2261
                                                                                                  2,22644,22713,22714,22715,22717,22
                                                                                                  728,22729,22730,22732,22783,22784,
                                                                                                  22785,22787,22839,22840,22841,2284
                                                                                                  3,22874,22875,22876,22878,22890,22
                                                                                                  891,22892,22894,22930,22931,22943,
                                                                                                  22944,22966,22967,22969,22992,2299
                                                                                                  3,22995,23039,23040,23079,23080,23
                                                                                                  115,23116,23218,23231,23242,23254,
                                                                                                  23267,23305,23306,23307,23368,2336
                                                                                                  9,23370,23372,23373,23374,23376,23
                                                                                                  377,23378,23533,23534,23535,23536,
                                                                                                  23537,23538,23539,23560,23561,2356
                                                                                                  2,23563,23564,23565,23566,23581,23
                                                                                                  582,23583,23584,23585,23586,23587,
                                                                                                  23602,23603,23604,23605,23606,2360
                                                                                                  7,23608,23625,23626,23627,23628,23
                                                                                                  629,23630,23631,23649,23650,23651,
                                                                                                  23652,23653,23654,23655,23671,2367
                                                                                                  2,23673,23674,23675,23676,23677,24
                                                                                                  636,24637,24638,24639,24640,24641,
                                                                                                  24642,25032,25033,25046,25047,2546
                                                                                                  7,25470,25471,25493,25503,25504,25
                                                                                                  558,25581,25596,25597,25823,25853,
                                                                                                  25902,25955,26076,26077,26108,2610
                                                                                                  9,26153,26154,26176,26177,26198,26
                                                                                                  199,26213,26214,26252,26253,26270,
                                                                                                  26271,26305,26306,26321,26323,2633
                                                                                                  4,26357,26358,26359,26360,26361,26
                                                                                                  362,26375,26386,26390,26394,26401,
                                                                                                  26405,26413,26421,26429,26433,2643
                                                                                                  9,26440,26496,26509,26520,26532,26
                                                                                                  545,26552,26553,26554,26555,26556,
                                                                                                  26557,26566,26567,26568,26569,2657
                                                                                                  0,26571,26604,26605,26606,26607,26
                                                                                                  608,26609,26624,26625,26626,26627,
                                                                                                  26628,26629,26644,26645,26646,2664
                                                                                                  7,26648,26649,26664,26665,26666,26
                                                                                                  667,26668,26669,26742,26752,26758,
                                                                                                  26760,26771,26777,26779,26793,2680
                                                                                                  1,26811,26819,26829,26837,26854,26
                                                                                                  868,26874,26876,26891,26897,26899,
                                                                                                  26917,26929,26943,26955,26969,2698
                                                                                                  1,26997,27008,27021,27034,27051,27
                                                                                                  053,27058,27073,27075,27080,27102,
                                                                                                  27123,27128,27140,27149,27150,2715

Page 583         Source Listing                  ORDCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  9,27160,27185,27194,27195,27204,27
                                                                                                  205,27230,27239,27240,27249,27250,
                                                                                                  27275,27284,27285,27294,27295,2732
                                                                                                  4,27394,27395,27396,27397,27398,27
                                                                                                  399,27400,27401,27412,27419,27433,
                                                                                                  27435,27437,27439,27440,27442,2744
                                                                                                  4,27446,27448,27451,27452,27454,27
                                                                                                  456,27462,27463,27464,27465,27466,
                                                                                                  27467                             
 D2R                        Local  18528    R(4)            4           scalar                    18837,19690,19696,19713,19735,1984
                                                                                                  6,19852,19869,19892,20031,20037,20
                                                                                                  054,20077,20201,20207,20224,20247,
                                                                                                  20360,20366,20384,20407,20489,2049
                                                                                                  5,20513,20536,20641,20649,20669,20
                                                                                                  692,20780,20786,20804,20828,21108,
                                                                                                  21109,21836,21837,21872,21873,2191
                                                                                                  5,21938,22020,22021,22062,22063,22
                                                                                                  109,22132,22248,22249,22296,22297,
                                                                                                  22352,22375,22462,22463,23033,2303
                                                                                                  4,23035,23037,23074,23075,23077,23
                                                                                                  110,23111,23113,23775,23781,23798,
                                                                                                  23877,23883,23900,23978,23984,2400
                                                                                                  1,24080,24086,24103,24195,24201,24
                                                                                                  218,24299,24305,24322,24374,24380,
                                                                                                  24398,24447,24453,24471,24520,2452
                                                                                                  6,24544,24964,24970,24988,25076,25
                                                                                                  123,25180,25227,25274,25279,25301,
                                                                                                  25306,25328,25333,25352,25381,2541
                                                                                                  2,25450,25530,25533,25625,25672,25
                                                                                                  769,26140,26148,26149,26151,26170,
                                                                                                  26171,26173,26193,26194,26195,2619
                                                                                                  6,26239,26246,26247,26249,26303   
 DIF_DIR                    Local  18625    R(4)            4           scalar                    20919,20921,20922,20932           
 DIF_SPD                    Local  18626    R(4)            4           scalar                    20926,20928,20933                 
 DIF_T                      Local  18624    R(4)            4           scalar                    20913,20915,20931                 
 DIST0                      Local  18659    R(4)            4           scalar                    19699,19704,19708,19715,19719,1979
                                                                                                  4,23106,23108,23148,23784,23789,23
                                                                                                  793,23800,23804,23831,25124,25130,
                                                                                                  25181,25187,25229,25234,25273,2530
                                                                                                  5,25673,25675,25771,25773,26238,26
                                                                                                  302,26470                         
 DISTM1                     Local  18657    R(4)            4           scalar                    19855,19860,19864,19871,19875,1995
                                                                                                  1,23148,23886,23891,23895,23902,23
                                                                                                  906,23932,25228,25237,25278,25770,
                                                                                                  25772,26302,26470                 
 DISTM2                     Local  18658    R(4)            4           scalar                    19980,23148,23987,23992,23996,2400
                                                                                                  3,24007,24033,26470               
 DISTP1                     Local  18660    R(4)            4           scalar                    20040,20045,20049,20056,20060,2013
                                                                                                  6,21103,21104,23070,23072,23107,23
                                                                                                  109,23149,24089,24094,24098,24105,
                                                                                                  24109,24136,25077,25083,25125,2513
                                                                                                  3,25182,25190,25300,25332,25446,25
                                                                                                  447,25534,25540,25626,25628,25674,
                                                                                                  25676,25718,26139,26238,26471     
 DISTP2                     Local  18661    R(4)            4           scalar                    20210,20215,20219,20226,20230,2029

Page 584         Source Listing                  ORDCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  7,23029,23031,23071,23073,23149,24
                                                                                                  204,24209,24213,24220,24224,24241,
                                                                                                  25078,25086,25327,25526,25527,2553
                                                                                                  5,25543,25627,25629,25719,26139,26
                                                                                                  471                               
 DISTP3                     Local  18662    R(4)            4           scalar                    20326,23030,23032,23149,24308,2431
                                                                                                  3,24317,24324,24328,24345,26471   
 DIST_2NDFLT                Local  18669    R(4)            4           scalar                    23347,23350,23354                 
 DIST_BAD0                  Local  18666    R(4)            4           scalar                    20652,20659,20663,20671,20675,2074
                                                                                                  3,23150,24577,26472               
 DIST_BADP1                 Local  18667    R(4)            4           scalar                    20789,20794,20798,20806,20810,2088
                                                                                                  2,21102,21104,21105,21107,21114,23
                                                                                                  150,24589,26472                   
 DIST_TRACK                 Local  18668    R(4)            4           scalar                    20954,23150,24629,24632,24676,2471
                                                                                                  1,24713,24715,24734,24736,24738,24
                                                                                                  779,24781,24783,24802,24804,24806,
                                                                                                  24834,24836,24838,24856,24858,2486
                                                                                                  0,24878,24880,24882,24900,24902,24
                                                                                                  904,24973,24978,24982,24990,24995,
                                                                                                  25017,25449,25529,26472           
 DIST_WO0                   Local  18663    R(4)            4           scalar                    20369,20374,20378,20386,20390,2044
                                                                                                  2,23108,23109,23148,24383,24388,24
                                                                                                  392,24400,24404,24414,26470       
 DIST_WOP1                  Local  18664    R(4)            4           scalar                    20498,20503,20507,20515,20519,2057
                                                                                                  1,23072,23073,23149,24456,24461,24
                                                                                                  465,24473,24477,24487,26471       
 DIST_WOP2                  Local  18665    R(4)            4           scalar                    20602,23031,23032,23149,24529,2453
                                                                                                  4,24538,24546,24550,24560,26471   
 FLOAT                      Func   19702                                scalar                    19702,19703,19704,19706,19707,1970
                                                                                                  8,19776,19778,19858,19859,19860,19
                                                                                                  862,19863,19864,19933,19935,20043,
                                                                                                  20044,20045,20047,20048,20049,2011
                                                                                                  8,20120,20213,20214,20215,20217,20
                                                                                                  218,20219,20288,20290,20372,20373,
                                                                                                  20374,20376,20377,20378,20464,2046
                                                                                                  6,20501,20502,20503,20505,20506,20
                                                                                                  507,20593,20595,20657,20658,20659,
                                                                                                  20661,20662,20663,20735,20737,2079
                                                                                                  2,20793,20794,20796,20797,20798,20
                                                                                                  872,20874,21587,21620,23787,23788,
                                                                                                  23789,23791,23792,23793,23889,2389
                                                                                                  0,23891,23893,23894,23895,23990,23
                                                                                                  991,23992,23994,23995,23996,24092,
                                                                                                  24093,24094,24096,24097,24098,2420
                                                                                                  7,24208,24209,24211,24212,24213,24
                                                                                                  311,24312,24313,24315,24316,24317,
                                                                                                  24386,24387,24388,24390,24391,2439
                                                                                                  2,24459,24460,24461,24463,24464,24
                                                                                                  465,24532,24533,24534,24536,24537,
                                                                                                  24538,24976,24977,24978,24980,2498
                                                                                                  1,24982                           
 GCIRC_QC                   Func   18444    R(4)            4           scalar                    19687,19693,19699,19843,19849,1985
                                                                                                  5,20028,20034,20040,20198,20204,20
                                                                                                  210,20357,20363,20369,20486,20492,
                                                                                                  20498,20636,20644,20652,20777,2078

Page 585         Source Listing                  ORDCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  3,20789,23347,23772,23778,23784,23
                                                                                                  874,23880,23886,23975,23981,23987,
                                                                                                  24077,24083,24089,24192,24198,2420
                                                                                                  4,24296,24302,24308,24371,24377,24
                                                                                                  383,24444,24450,24456,24517,24523,
                                                                                                  24529,24629,24711,24734,24779,2480
                                                                                                  2,24834,24856,24878,24900,24961,24
                                                                                                  967,24973                         
 HTDIF_SAME                 Dummy  18364    R(4)            4           scalar   ARG,INOUT        19060,19061,19070,19071,19076,1908
                                                                                                  9,19090,19095,19172,19173,19186,19
                                                                                                  187,19192,19209,19210,19215,19316,
                                                                                                  19327,19340,19353,19369,19391,2098
                                                                                                  0,20982,21002,21004,22962,22988,25
                                                                                                  081,25082,25085,25088,25096,25097,
                                                                                                  25100,25101,25128,25129,25132,2513
                                                                                                  5,25144,25145,25148,25149,25185,25
                                                                                                  186,25189,25192,25232,25233,25236,
                                                                                                  25239,25247,25248,25251,25252,2535
                                                                                                  9,25360,25363,25364,25388,25389,25
                                                                                                  392,25393,25419,25420,25423,25424,
                                                                                                  25538,25539,25542,25545,25644,2564
                                                                                                  5,25648,25649,25691,25692,25695,25
                                                                                                  696,25734,25735,25738,25739,25788,
                                                                                                  25789,25792,25793,26739,26740,2674
                                                                                                  9,26750,26755,26768,26769,26774,26
                                                                                                  851,26852,26865,26866,26871,26888,
                                                                                                  26889,26894,26995,27006,27019,2703
                                                                                                  2,27048,27070                     
 HT_DIF0                    Local  18612    R(4)            4           scalar                    19006,19010,19060,19071,19095,1909
                                                                                                  6,19172,19187,19215,19216,19316,19
                                                                                                  340,19769,19771,19773,19776,19778,
                                                                                                  19805,20987,20989,21001,21002,2100
                                                                                                  9,22988,23162,23812,23814,23837,25
                                                                                                  126,25128,25131,25132,25145,25148,
                                                                                                  25183,25185,25188,25189,25231,2523
                                                                                                  3,25235,25236,25247,25252,25389,25
                                                                                                  392,25419,25424,25683,25687,25692,
                                                                                                  25695,25781,25785,25788,25793,2610
                                                                                                  1,26105,26474,26685,26689,26739,26
                                                                                                  750,26774,26775,26851,26866,26894,
                                                                                                  26895,26995,27019                 
 HT_DIFM1                   Local  18613    R(4)            4           scalar                    19022,19025,19070,19186,19369,1992
                                                                                                  6,19928,19930,19933,19935,19962,23
                                                                                                  162,23914,23916,23938,25230,25232,
                                                                                                  25238,25239,25248,25251,25420,2542
                                                                                                  3,25780,25784,25789,25792,26474,26
                                                                                                  701,26704,26749,26865,27048       
 HT_DIFM2                   Local  18614    R(4)            4           scalar                    19991,23162,24015,24017,24039,2647
                                                                                                  4                                 
 HT_DIFP1                   Local  18615    R(4)            4           scalar                    19030,19034,19061,19076,19077,1908
                                                                                                  9,19173,19192,19193,19209,19327,19
                                                                                                  353,20111,20113,20115,20118,20120,
                                                                                                  20147,21115,21116,22962,23163,2411
                                                                                                  7,24119,24142,25079,25081,25084,25
                                                                                                  085,25097,25100,25127,25129,25134,

Page 586         Source Listing                  ORDCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  25135,25144,25149,25184,25186,2519
                                                                                                  1,25192,25360,25363,25388,25393,25
                                                                                                  536,25538,25541,25542,25636,25640,
                                                                                                  25645,25648,25684,25688,25691,2569
                                                                                                  6,25726,25730,25735,25738,26069,26
                                                                                                  073,26102,26106,26475,26709,26713,
                                                                                                  26740,26755,26756,26768,26852,2687
                                                                                                  1,26872,26888,27006,27032         
 HT_DIFP2                   Local  18616    R(4)            4           scalar                    19046,19049,19090,19210,19391,2028
                                                                                                  1,20283,20285,20288,20290,20308,20
                                                                                                  979,20980,20985,21008,23163,24232,
                                                                                                  24234,24247,25080,25082,25087,2508
                                                                                                  8,25096,25101,25359,25364,25537,25
                                                                                                  539,25544,25545,25637,25641,25644,
                                                                                                  25649,25727,25731,25734,25739,2607
                                                                                                  0,26074,26475,26725,26728,26769,26
                                                                                                  889,27070                         
 HT_DIFP3                   Local  18617    R(4)            4           scalar                    20337,23163,24336,24338,24351,2647
                                                                                                  5                                 
 HT_DIF_BAD0                Local  18621    R(4)            4           scalar                    20728,20730,20732,20735,20737,2075
                                                                                                  4,23164,24583,26476               
 HT_DIF_BADP1               Local  18622    R(4)            4           scalar                    20865,20867,20869,20872,20874,2089
                                                                                                  3,21112,21115,21116,23164,24595,26
                                                                                                  476                               
 HT_DIF_TRACK               Local  18623    R(4)            4           scalar                    20965,23164,25006,25008,25023,2647
                                                                                                  6                                 
 HT_DIF_WO0                 Local  18618    R(4)            4           scalar                    20457,20459,20461,20464,20466,2098
                                                                                                  1,20982,20988,21010,21113,23162,24
                                                                                                  422,24424,26474                   
 HT_DIF_WOP1                Local  18619    R(4)            4           scalar                    20586,20588,20590,20593,20595,2098
                                                                                                  6,21003,21004,21007,23163,24495,24
                                                                                                  497,26475                         
 HT_DIF_WOP2                Local  18620    R(4)            4           scalar                    20613,23163,24568,24570,26475     
 HT_FT                      Dummy  18365    R(4)            4     1     0        ARG,INOUT        19002,19006,19007,19015,19022,1903
                                                                                                  0,19031,19039,19046,19642,19664,19
                                                                                                  769,19820,19926,20005,20111,20162,
                                                                                                  20281,20726,20727,20728,20864,2086
                                                                                                  5,23213,23226,23237,23249,23262,23
                                                                                                  726,23749,23811,23812,23851,23913,
                                                                                                  23914,23952,24014,24015,24054,2411
                                                                                                  6,24117,24157,24231,24232,24261,24
                                                                                                  335,24336,24495,25004,25005,25006,
                                                                                                  26393,26491,26504,26515,26527,2654
                                                                                                  0,26681,26685,26686,26694,26701,26
                                                                                                  709,26710,26718,26725,27407       
 HT_FT0                     Local  18627    R(4)            4           scalar                    19002,19078,19080,19097,19099,1911
                                                                                                  1,19112,19119,19120,19130,19138,19
                                                                                                  147,19155,19194,19196,19217,19219,
                                                                                                  19235,19236,19247,19248,19262,1927
                                                                                                  4,19287,19299,19371,19373,19378,19
                                                                                                  393,19395,19400,19642,19768,20110,
                                                                                                  20585,20586,20977,22961,22963,2298
                                                                                                  7,22990,23726,24494,25089,25090,25
                                                                                                  092,25094,25095,25136,25138,25139,
                                                                                                  25140,25141,25142,25143,25146,2514

Page 587         Source Listing                  ORDCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  7,25193,25196,25197,25240,25242,25
                                                                                                  244,25249,25250,25272,25277,25296,
                                                                                                  25298,25299,25303,25304,25325,2533
                                                                                                  0,25353,25355,25357,25358,25382,25
                                                                                                  383,25384,25385,25386,25387,25390,
                                                                                                  25391,25414,25416,25421,25422,2544
                                                                                                  7,25532,25630,25632,25634,25638,25
                                                                                                  642,25643,25673,25677,25678,25679,
                                                                                                  25680,25681,25682,25685,25686,2568
                                                                                                  9,25690,25693,25694,25720,25722,25
                                                                                                  724,25728,25732,25733,25771,25775,
                                                                                                  25777,25779,25783,25790,25791,2593
                                                                                                  4,25949,26067,26071,26099,26100,26
                                                                                                  103,26104,26368,26369,26370,26681,
                                                                                                  26757,26759,26776,26778,26790,2679
                                                                                                  1,26798,26799,26809,26817,26826,26
                                                                                                  834,26873,26875,26896,26898,26914,
                                                                                                  26915,26926,26927,26941,26953,2696
                                                                                                  6,26978,27050,27052,27057,27072,27
                                                                                                  074,27079                         
 HT_FTM1                    Local  18628    R(4)            4           scalar                    19007,19011,19097,19099,19111,1911
                                                                                                  9,19129,19130,19137,19138,19217,19
                                                                                                  219,19235,19247,19261,19262,19273,
                                                                                                  19274,19371,19373,19378,19664,1976
                                                                                                  8,19786,19925,20456,20457,22989,22
                                                                                                  990,23749,23823,24421,24422,25138,
                                                                                                  25140,25142,25143,25195,25196,2524
                                                                                                  1,25242,25243,25244,25245,25246,25
                                                                                                  249,25250,25269,25271,25272,25276,
                                                                                                  25277,25298,25303,25382,25384,2538
                                                                                                  6,25387,25413,25414,25415,25416,25
                                                                                                  417,25418,25421,25422,25677,25679,
                                                                                                  25681,25685,25689,25690,25770,2577
                                                                                                  4,25775,25776,25777,25778,25779,25
                                                                                                  782,25783,25786,25787,25790,25791,
                                                                                                  25881,25896,26099,26103,26369,2637
                                                                                                  0,26686,26690,26776,26778,26790,26
                                                                                                  798,26808,26809,26816,26817,26896,
                                                                                                  26898,26914,26926,26940,26941,2695
                                                                                                  2,26953,27050,27052,27057         
 HT_FTM2                    Local  18629    R(4)            4           scalar                    19015,19017,19129,19137,19261,1927
                                                                                                  3,19378,19820,19925,19943,22989,23
                                                                                                  851,23924,25195,25241,25243,25245,
                                                                                                  25246,25271,25276,25413,25415,2541
                                                                                                  7,25418,25774,25776,25778,25782,25
                                                                                                  786,25787,26694,26696,26808,26816,
                                                                                                  26940,26952,27057                 
 HT_FTM3                    Local  18630    R(4)            4           scalar                    19972,23952,24025                 
 HT_FTP1                    Local  18631    R(4)            4           scalar                    19031,19035,19078,19080,19112,1912
                                                                                                  0,19147,19148,19155,19156,19194,19
                                                                                                  196,19236,19248,19287,19288,19299,
                                                                                                  19300,19393,19395,19400,20005,2011
                                                                                                  0,20128,20280,20456,20457,20863,22
                                                                                                  963,22964,24054,24128,24421,24422,
                                                                                                  24567,24568,25090,25091,25092,2509

Page 588         Source Listing                  ORDCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  3,25094,25095,25098,25099,25137,25
                                                                                                  139,25141,25146,25147,25194,25197,
                                                                                                  25198,25299,25304,25323,25325,2532
                                                                                                  6,25330,25331,25353,25354,25355,25
                                                                                                  356,25357,25358,25361,25362,25383,
                                                                                                  25385,25390,25391,25527,25626,2563
                                                                                                  0,25631,25632,25633,25634,25635,25
                                                                                                  638,25639,25642,25643,25646,25647,
                                                                                                  25674,25678,25680,25682,25686,2569
                                                                                                  3,25694,25720,25721,25722,25723,25
                                                                                                  724,25725,25728,25729,25732,25733,
                                                                                                  25736,25737,25885,25900,26067,2606
                                                                                                  8,26071,26072,26100,26104,26710,26
                                                                                                  714,26757,26759,26791,26799,26826,
                                                                                                  26827,26834,26835,26873,26875,2691
                                                                                                  5,26927,26966,26967,26978,26979,27
                                                                                                  072,27074,27079                   
 HT_FTP2                    Local  18632    R(4)            4           scalar                    19039,19041,19148,19156,19288,1930
                                                                                                  0,19400,20162,20178,20280,20585,20
                                                                                                  586,22964,24157,24172,24494,25091,
                                                                                                  25093,25098,25099,25198,25326,2533
                                                                                                  1,25354,25356,25361,25362,25627,25
                                                                                                  631,25633,25635,25639,25646,25647,
                                                                                                  25721,25723,25725,25729,25736,2573
                                                                                                  7,25938,25953,26068,26072,26718,26
                                                                                                  720,26827,26835,26967,26979,27079 
 HT_FTP3                    Local  18633    R(4)            4           scalar                    20318,24261,24276,24567,24568     
 ICHK_D                     Dummy  18367    I(4)            4     1     0        ARG,INOUT        23216,23229,23240,23252,23265,2649
                                                                                                  4,26507,26518,26530,26543,27410   
 ICHK_Q                     Dummy  18367    I(4)            4     1     0        ARG,INOUT        23215,23228,23239,23251,23264,2649
                                                                                                  3,26506,26517,26529,26542,27409   
 ICHK_S                     Dummy  18367    I(4)            4     1     0        ARG,INOUT        23217,23230,23241,23253,23266,2649
                                                                                                  5,26508,26519,26531,26544,27411   
 ICHK_T                     Dummy  18367    I(4)            4     1     0        ARG,INOUT        23214,23227,23238,23250,23263,2649
                                                                                                  2,26505,26516,26528,26541,27408   
 IDT                        Dummy  18367    I(4)            4     1     0        ARG,INOUT        19005,19021,19029,19045,19643,1966
                                                                                                  5,19746,19747,19821,19903,19904,20
                                                                                                  006,20088,20089,20163,20258,20259,
                                                                                                  20418,20419,20547,20548,20623,2062
                                                                                                  4,20625,20703,20704,20762,20766,20
                                                                                                  767,20839,20840,21039,23212,23225,
                                                                                                  23236,23248,23261,23727,23750,2385
                                                                                                  2,23953,24055,24158,24262,24673,24
                                                                                                  675,24924,24925,26490,26503,26514,
                                                                                                  26526,26539,26684,26700,26708,2672
                                                                                                  4,27406                           
 IDT0                       Local  18562    I(4)            4           scalar                    19643,19677,19678,20018,20019,2047
                                                                                                  2,20476,20477,23727,23762,23763,24
                                                                                                  067,24068,24430,24434,24435       
 IDTM1                      Local  18563    I(4)            4           scalar                    19665,19677,19678,19787,19833,1983
                                                                                                  4,20343,20347,20348,23750,23762,23
                                                                                                  763,23824,23864,23865,24357,24361,
                                                                                                  24362,26391                       
 IDTM2                      Local  18564    I(4)            4           scalar                    19821,19833,19834,19944,23852,2386
                                                                                                  4,23865,23925,23965,23966         

Page 589         Source Listing                  ORDCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 IDTM3                      Local  18565    I(4)            4           scalar                    19973,23953,23965,23966,24026     
 IDTP1                      Local  18566    I(4)            4           scalar                    20006,20018,20019,20129,20188,2018
                                                                                                  9,20343,20347,20348,20766,20767,24
                                                                                                  055,24067,24068,24129,24182,24183,
                                                                                                  24357,24361,24362,24503,24507,2450
                                                                                                  8,26392                           
 IDTP2                      Local  18567    I(4)            4           scalar                    20163,20179,20188,20189,20472,2047
                                                                                                  6,20477,24158,24173,24182,24183,24
                                                                                                  286,24287,24430,24434,24435       
 IDTP3                      Local  18568    I(4)            4           scalar                    20319,24262,24277,24286,24287,2450
                                                                                                  3,24507,24508                     
 IDT_DIF0                   Local  18572    I(4)            4           scalar                    19005,19009,19058,19069,19094,1910
                                                                                                  9,19117,19128,19136,19166,19167,19
                                                                                                  168,19183,19184,19185,19214,19229,
                                                                                                  19230,19231,19241,19242,19243,1925
                                                                                                  8,19259,19260,19270,19271,19272,19
                                                                                                  310,19311,19312,19321,19322,19323,
                                                                                                  19337,19338,19339,19366,19367,1936
                                                                                                  8,19410,19412,19418,19421,19431,19
                                                                                                  433,19439,19442,19678,19680,19686,
                                                                                                  19701,19702,19703,19704,19706,1970
                                                                                                  7,19708,19744,19745,19773,19775,19
                                                                                                  776,19778,19791,22958,22986,23011,
                                                                                                  23012,23014,23016,23052,23053,2305
                                                                                                  5,23057,23094,23095,23097,23763,23
                                                                                                  765,23771,23786,23787,23788,23789,
                                                                                                  23791,23792,23793,23828,25062,2506
                                                                                                  3,25065,25067,25115,25116,25118,25
                                                                                                  168,25169,25171,25223,25224,25226,
                                                                                                  25268,25294,25329,25349,25379,2541
                                                                                                  1,25611,25612,25614,25616,25664,25
                                                                                                  665,25667,25765,25766,25768,25810,
                                                                                                  25812,25818,25821,25840,25842,2584
                                                                                                  8,25851,25867,25868,26053,26054,26
                                                                                                  056,26058,26091,26092,26094,26125,
                                                                                                  26126,26128,26130,26230,26231,2623
                                                                                                  3,26298,26299,26301,26367,26684,26
                                                                                                  688,26737,26748,26773,26788,26796,
                                                                                                  26807,26815,26845,26846,26847,2686
                                                                                                  2,26863,26864,26893,26908,26909,26
                                                                                                  910,26920,26921,26922,26937,26938,
                                                                                                  26939,26949,26950,26951,26989,2699
                                                                                                  0,26991,27000,27001,27002,27016,27
                                                                                                  017,27018,27045,27046,27047,27089,
                                                                                                  27091,27097,27100,27110,27112,2711
                                                                                                  8,27121                           
 IDT_DIFM1                  Local  18573    I(4)            4           scalar                    19021,19024,19068,19127,19135,1918
                                                                                                  0,19181,19182,19255,19256,19257,19
                                                                                                  267,19268,19269,19334,19335,19336,
                                                                                                  19363,19364,19365,19408,19419,1942
                                                                                                  9,19440,19834,19836,19842,19857,19
                                                                                                  858,19859,19860,19862,19863,19864,
                                                                                                  19901,19902,19930,19932,19933,1993
                                                                                                  5,19948,22985,23865,23867,23873,23
                                                                                                  888,23889,23890,23891,23893,23894,

Page 590         Source Listing                  ORDCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  23895,23929,25164,25165,25167,2521
                                                                                                  9,25220,25222,25267,25302,25410,25
                                                                                                  761,25762,25764,25808,25819,25838,
                                                                                                  25849,26294,26295,26297,26700,2670
                                                                                                  3,26747,26806,26814,26859,26860,26
                                                                                                  861,26934,26935,26936,26946,26947,
                                                                                                  26948,27013,27014,27015,27042,2704
                                                                                                  3,27044,27087,27098,27108,27119   
 IDT_DIFM2                  Local  18574    I(4)            4           scalar                    19977,23966,23968,23974,23989,2399
                                                                                                  0,23991,23992,23994,23995,23996,24
                                                                                                  030,25275                         
 IDT_DIFP1                  Local  18575    I(4)            4           scalar                    19029,19033,19059,19075,19087,1911
                                                                                                  0,19118,19145,19153,19169,19170,19
                                                                                                  171,19191,19203,19204,19205,19232,
                                                                                                  19233,19234,19244,19245,19246,1928
                                                                                                  1,19282,19283,19293,19294,19295,19
                                                                                                  313,19314,19315,19324,19325,19326,
                                                                                                  19347,19348,19349,19385,19386,1938
                                                                                                  7,19409,19411,19414,19417,19430,19
                                                                                                  432,19435,19438,20019,20021,20027,
                                                                                                  20042,20043,20044,20045,20047,2004
                                                                                                  8,20049,20086,20087,20115,20117,20
                                                                                                  118,20120,20133,21407,21458,21490,
                                                                                                  21985,22543,22602,22634,22960,2298
                                                                                                  4,23017,23018,23020,23058,23059,23
                                                                                                  061,23098,23099,23101,24068,24070,
                                                                                                  24076,24091,24092,24093,24094,2409
                                                                                                  6,24097,24098,24133,25068,25069,25
                                                                                                  071,25119,25120,25122,25172,25173,
                                                                                                  25175,25213,25214,25216,25218,2527
                                                                                                  0,25295,25321,25350,25380,25409,25
                                                                                                  440,25441,25443,25617,25618,25620,
                                                                                                  25668,25669,25671,25710,25711,2571
                                                                                                  3,25755,25756,25758,25760,25809,25
                                                                                                  811,25814,25817,25839,25841,25844,
                                                                                                  25847,25869,25870,25920,25921,2605
                                                                                                  9,26060,26062,26095,26096,26098,26
                                                                                                  131,26132,26134,26234,26235,26237,
                                                                                                  26288,26289,26291,26293,26708,2671
                                                                                                  2,26738,26754,26766,26789,26797,26
                                                                                                  824,26832,26848,26849,26850,26870,
                                                                                                  26882,26883,26884,26911,26912,2691
                                                                                                  3,26923,26924,26925,26960,26961,26
                                                                                                  962,26972,26973,26974,26992,26993,
                                                                                                  26994,27003,27004,27005,27026,2702
                                                                                                  7,27028,27064,27065,27066,27088,27
                                                                                                  090,27093,27096,27109,27111,27114,
                                                                                                  27117                             
 IDT_DIFP2                  Local  18576    I(4)            4           scalar                    19045,19048,19088,19146,19154,1920
                                                                                                  6,19207,19208,19284,19285,19286,19
                                                                                                  296,19297,19298,19350,19351,19352,
                                                                                                  19388,19389,19390,19413,19415,1943
                                                                                                  4,19436,20189,20191,20197,20212,20
                                                                                                  213,20214,20215,20217,20218,20219,
                                                                                                  20256,20257,20285,20287,20288,2029

Page 591         Source Listing                  ORDCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  0,20294,22173,22959,23021,23022,23
                                                                                                  024,23062,23063,23065,24183,24185,
                                                                                                  24191,24206,24207,24208,24209,2421
                                                                                                  1,24212,24213,24238,25072,25073,25
                                                                                                  075,25176,25177,25179,25297,25322,
                                                                                                  25351,25520,25521,25523,25621,2562
                                                                                                  2,25624,25714,25715,25717,25813,25
                                                                                                  815,25843,25845,25922,25923,26063,
                                                                                                  26064,26066,26135,26136,26138,2672
                                                                                                  4,26727,26767,26825,26833,26885,26
                                                                                                  886,26887,26963,26964,26965,26975,
                                                                                                  26976,26977,27029,27030,27031,2706
                                                                                                  7,27068,27069,27092,27094,27113,27
                                                                                                  115                               
 IDT_DIFP3                  Local  18577    I(4)            4           scalar                    20323,24287,24289,24295,24310,2431
                                                                                                  1,24312,24313,24315,24316,24317,24
                                                                                                  342,25324                         
 IDT_DIF_BAD0               Local  18581    I(4)            4           scalar                    20625,20627,20635,20656,20657,2065
                                                                                                  8,20659,20661,20662,20663,20701,20
                                                                                                  702,20732,20734,20735,20737       
 IDT_DIF_BADP1              Local  18582    I(4)            4           scalar                    20767,20769,20776,20791,20792,2079
                                                                                                  3,20794,20796,20797,20798,20837,20
                                                                                                  838,20869,20871,20872,20874,21071 
 IDT_DIF_TRACK              Local  18583    I(4)            4           scalar                    24948,24950,24959,24975,24976,2497
                                                                                                  7,24978,24980,24981,24982         
 IDT_DIF_WO0                Local  18578    I(4)            4           scalar                    20348,20350,20356,20371,20372,2037
                                                                                                  3,20374,20376,20377,20378,20416,20
                                                                                                  417,20461,20463,20464,20466,24362,
                                                                                                  24364,24370,24385,24386,24387,2438
                                                                                                  8,24390,24391,24392               
 IDT_DIF_WOP1               Local  18579    I(4)            4           scalar                    20477,20479,20485,20500,20501,2050
                                                                                                  2,20503,20505,20506,20507,20545,20
                                                                                                  546,20590,20592,20593,20595,24435,
                                                                                                  24437,24443,24458,24459,24460,2446
                                                                                                  1,24463,24464,24465               
 IDT_DIF_WOP2               Local  18580    I(4)            4           scalar                    24508,24510,24516,24531,24532,2453
                                                                                                  3,24534,24536,24537,24538         
 IDT_END                    Local  18570    I(4)            4           scalar                    20950,24925,24947,24948,25013     
 IDT_LAST_BAD               Local  18571    I(4)            4           scalar                    20762,20878,21038,21039,24585     
 IDT_NEAR                   Dummy  18364    I(4)            4           scalar   ARG,INOUT        19167,19168,19170,19171,19181,1918
                                                                                                  2,19184,19185,19204,19205,19207,19
                                                                                                  208,19230,19231,19233,19234,19242,
                                                                                                  19243,19245,19246,19256,19257,1925
                                                                                                  9,19260,19268,19269,19271,19272,19
                                                                                                  282,19283,19285,19286,19294,19295,
                                                                                                  19297,19298,19311,19312,19314,1931
                                                                                                  5,19322,19323,19325,19326,19335,19
                                                                                                  336,19338,19339,19348,19349,19351,
                                                                                                  19352,19364,19365,19367,19368,1938
                                                                                                  6,19387,19389,19390,19408,19409,19
                                                                                                  410,19411,19412,19413,19414,19415,
                                                                                                  19417,19418,19419,19421,19429,1943
                                                                                                  0,19431,19432,19433,19434,19435,19
                                                                                                  436,19438,19439,19440,19442,22958,
                                                                                                  22984,23014,23016,23018,23020,2302

Page 592         Source Listing                  ORDCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  2,23024,23055,23057,23059,23061,23
                                                                                                  063,23065,23095,23097,23099,23101,
                                                                                                  24673,24675,25065,25067,25069,2507
                                                                                                  1,25073,25075,25116,25118,25120,25
                                                                                                  122,25165,25167,25169,25171,25173,
                                                                                                  25175,25177,25179,25216,25218,2522
                                                                                                  0,25222,25224,25226,25267,25268,25
                                                                                                  270,25275,25294,25295,25297,25302,
                                                                                                  25321,25322,25324,25329,25349,2540
                                                                                                  9,25441,25443,25521,25523,25614,25
                                                                                                  616,25618,25620,25622,25624,25665,
                                                                                                  25667,25669,25671,25711,25713,2571
                                                                                                  5,25717,25758,25760,25762,25764,25
                                                                                                  766,25768,25808,25809,25810,25811,
                                                                                                  25812,25813,25814,25815,25817,2581
                                                                                                  8,25819,25821,25838,25839,25840,25
                                                                                                  841,25842,25843,25844,25845,25847,
                                                                                                  25848,25849,25851,25868,25870,2592
                                                                                                  1,25923,26056,26058,26060,26062,26
                                                                                                  064,26066,26092,26094,26096,26098,
                                                                                                  26128,26130,26132,26134,26136,2613
                                                                                                  8,26231,26233,26235,26237,26291,26
                                                                                                  293,26295,26297,26299,26301,26367,
                                                                                                  26846,26847,26849,26850,26860,2686
                                                                                                  1,26863,26864,26883,26884,26886,26
                                                                                                  887,26909,26910,26912,26913,26921,
                                                                                                  26922,26924,26925,26935,26936,2693
                                                                                                  8,26939,26947,26948,26950,26951,26
                                                                                                  961,26962,26964,26965,26973,26974,
                                                                                                  26976,26977,26990,26991,26993,2699
                                                                                                  4,27001,27002,27004,27005,27014,27
                                                                                                  015,27017,27018,27027,27028,27030,
                                                                                                  27031,27043,27044,27046,27047,2706
                                                                                                  5,27066,27068,27069,27087,27088,27
                                                                                                  089,27090,27091,27092,27093,27094,
                                                                                                  27096,27097,27098,27100,27108,2710
                                                                                                  9,27110,27111,27112,27113,27114,27
                                                                                                  115,27117,27118,27119,27121       
 IDT_START                  Local  18569    I(4)            4           scalar                    20949,24924,24946,24948,25012     
 IDT_UPDN                   Dummy  18364    I(4)            4           scalar   ARG,INOUT        19058,19059,19068,19069,19075,1908
                                                                                                  7,19088,19094,19109,19110,19117,19
                                                                                                  118,19127,19128,19135,19136,19145,
                                                                                                  19146,19153,19154,19191,19214,2295
                                                                                                  9,22960,22985,22986,25350,25351,25
                                                                                                  379,25380,25410,25411,26737,26738,
                                                                                                  26747,26748,26754,26766,26767,2677
                                                                                                  3,26788,26789,26796,26797,26806,26
                                                                                                  807,26814,26815,26824,26825,26832,
                                                                                                  26833,26870,26893                 
 IEND                       Local  18455    I(4)            4           scalar                    18896,18897,18907,18963,18983,1948
                                                                                                  4,19574,19597,20941,21728,21740,23
                                                                                                  300,23329,23413,23622,23646,23669,
                                                                                                  24608,24618,24621,24680,26586,2664
                                                                                                  2,26662,27322                     
 II                         Local  18531    I(4)            4           scalar                    18910,18915,18916,19000,19001,1900

Page 593         Source Listing                  ORDCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  2,19005,19006,19029,19030,19063,19
                                                                                                  073,19079,19081,19092,19098,19100,
                                                                                                  19114,19122,19132,19140,19150,1915
                                                                                                  8,19175,19189,19195,19197,19212,19
                                                                                                  218,19220,19238,19250,19264,19276,
                                                                                                  19290,19302,19318,19329,19342,1935
                                                                                                  5,19372,19374,19379,19394,19396,19
                                                                                                  401,19423,19444,19449,19489,19501,
                                                                                                  19510,19511,19512,19513,19514,1951
                                                                                                  5,19521,19617,19618,19640,19641,19
                                                                                                  642,19643,19688,19690,19694,19696,
                                                                                                  19700,19733,19734,19735,19746,1976
                                                                                                  9,20028,20029,20031,20034,20035,20
                                                                                                  037,20040,20088,20111,20486,20487,
                                                                                                  20489,20492,20493,20495,20498,2054
                                                                                                  7,20911,20915,20917,20921,20924,20
                                                                                                  928,20937,20938,20991,20998,21023,
                                                                                                  21030,21039,21041,21045,21047,2104
                                                                                                  9,21053,21054,21063,21082,21128,21
                                                                                                  162,21163,21168,21169,21173,21175,
                                                                                                  21176,21182,21186,21191,21193,2119
                                                                                                  4,21204,21206,21208,21212,21213,21
                                                                                                  216,21217,21218,21220,21227,21239,
                                                                                                  21240,21245,21246,21288,21323,2132
                                                                                                  4,21325,21327,21328,21329,21344,21
                                                                                                  348,21353,21361,21380,21401,21402,
                                                                                                  21404,21405,21416,21417,21421,2142
                                                                                                  3,21437,21451,21459,21463,21468,21
                                                                                                  473,21474,21483,21492,21493,21494,
                                                                                                  21496,21497,21498,21514,21522,2152
                                                                                                  3,21525,21529,21535,21536,21547,21
                                                                                                  559,21560,21561,21563,21564,21565,
                                                                                                  21568,21569,21579,21587,21589,2159
                                                                                                  0,21591,21592,21598,21599,21604,21
                                                                                                  612,21622,21623,21624,21625,21636,
                                                                                                  21644,21652,21655,21656,21657,2165
                                                                                                  8,21664,21665,21671,21696,21709,21
                                                                                                  711,21712,21713,21714,21752,21802,
                                                                                                  21803,21824,21850,21851,21860,2190
                                                                                                  4,21917,21918,21927,21949,21957,21
                                                                                                  958,21970,21983,21984,22006,22038,
                                                                                                  22039,22048,22098,22111,22112,2212
                                                                                                  1,22143,22151,22152,22164,22214,22
                                                                                                  237,22260,22261,22266,22268,22270,
                                                                                                  22274,22275,22285,22328,22341,2235
                                                                                                  4,22355,22364,22386,22450,22471,22
                                                                                                  476,22489,22497,22498,22502,22504,
                                                                                                  22518,22532,22550,22551,22552,2255
                                                                                                  4,22560,22562,22581,22595,22603,22
                                                                                                  607,22612,22617,22618,22627,22636,
                                                                                                  22637,22638,22640,22641,22642,2265
                                                                                                  8,22755,22783,22784,22785,22787,22
                                                                                                  792,22794,22796,22800,22801,22811,
                                                                                                  22853,22866,22874,22875,22876,2287
                                                                                                  8,22884,22886,22905,22919,22930,22

Page 594         Source Listing                  ORDCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  938,22944,22951,22966,22967,22969,
                                                                                                  22992,22993,22995,23115,23116,2312
                                                                                                  4,23145,23234,23235,23236,23237,23
                                                                                                  238,23239,23240,23241,23242,23286,
                                                                                                  23290,23301,23305,23306,23307,2331
                                                                                                  1,23338,23339,23345,23347,23356,23
                                                                                                  364,23368,23369,23370,23372,23373,
                                                                                                  23374,23376,23377,23378,23395,2339
                                                                                                  6,23417,23429,23533,23534,23535,23
                                                                                                  536,23537,23538,23539,23546,23566,
                                                                                                  23587,23608,23631,23655,23677,2368
                                                                                                  8,23689,23723,23724,23725,23726,23
                                                                                                  727,23773,23775,23779,23781,23785,
                                                                                                  23811,23812,24077,24078,24080,2408
                                                                                                  3,24084,24086,24089,24116,24117,24
                                                                                                  444,24445,24447,24450,24451,24453,
                                                                                                  24456,24495,24604,24605,24642,2503
                                                                                                  2,25041,25047,25055,25109,25157,25
                                                                                                  206,25260,25287,25314,25341,25372,
                                                                                                  25401,25432,25452,25465,25466,2546
                                                                                                  7,25470,25471,25477,25657,25704,25
                                                                                                  747,25801,25823,25831,25853,25861,
                                                                                                  25902,25907,25908,25959,25960,2610
                                                                                                  8,26109,26117,26213,26214,26222,26
                                                                                                  252,26253,26265,26305,26306,26314,
                                                                                                  26321,26323,26331,26334,26342,2635
                                                                                                  7,26358,26359,26360,26361,26362,26
                                                                                                  371,26373,26375,26379,26386,26390,
                                                                                                  26393,26394,26401,26405,26413,2641
                                                                                                  4,26415,26416,26417,26421,26429,26
                                                                                                  433,26439,26440,26459,26512,26513,
                                                                                                  26514,26515,26516,26517,26518,2651
                                                                                                  9,26520,26552,26553,26554,26555,26
                                                                                                  556,26557,26589,26594,26595,26679,
                                                                                                  26680,26681,26684,26685,26708,2670
                                                                                                  9,26742,26752,26758,26760,26771,26
                                                                                                  777,26779,26793,26801,26811,26819,
                                                                                                  26829,26837,26854,26868,26874,2687
                                                                                                  6,26891,26897,26899,26917,26929,26
                                                                                                  943,26955,26969,26981,26997,27008,
                                                                                                  27021,27034,27051,27053,27058,2707
                                                                                                  3,27075,27080,27102,27123,27128,27
                                                                                                  135,27136,27137,27138,27140,27141,
                                                                                                  27147,27149,27150,27151,27157,2715
                                                                                                  9,27160,27161,27167,27170,27176,27
                                                                                                  180,27181,27182,27183,27185,27186,
                                                                                                  27192,27194,27195,27196,27202,2720
                                                                                                  4,27205,27206,27212,27215,27221,27
                                                                                                  225,27226,27227,27228,27230,27231,
                                                                                                  27237,27239,27240,27241,27247,2724
                                                                                                  9,27250,27251,27257,27260,27266,27
                                                                                                  270,27271,27272,27273,27275,27276,
                                                                                                  27282,27284,27285,27286,27292,2729
                                                                                                  4,27295,27296,27302,27305,27311,27
                                                                                                  323,27324,27351,27353,27354,27355,

Page 595         Source Listing                  ORDCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  27356,27359,27360,27361,27362,2736
                                                                                                  5,27366,27367,27368,27371,27372,27
                                                                                                  373,27374,27377,27378,27394,27395,
                                                                                                  27396,27397,27398,27399,27400,2740
                                                                                                  1,27404,27405,27406,27407,27408,27
                                                                                                  409,27410,27411,27412,27419,27422,
                                                                                                  27433,27435,27437,27439,27440,2744
                                                                                                  2,27444,27446,27448,27451,27452,27
                                                                                                  454,27456,27462,27463,27464,27465,
                                                                                                  27466,27467,27469,27541,27543,2754
                                                                                                  5,27547,27549,27551,27553,27555,27
                                                                                                  557,27561,27565                   
 IIEND                      Local  18456    I(4)            4           scalar                    18897,20940,23138,24607,26452     
 IIFIRST                    Local  18457    I(4)            4           scalar                    20938,23139,24605,24693,24695,2469
                                                                                                  8,24700,24711,24712,24734,24735,24
                                                                                                  761,24763,24766,24768,24779,24780,
                                                                                                  24802,24803,24834,24835,24856,2485
                                                                                                  7,24878,24879,24900,24901,24922,24
                                                                                                  924,24954,24955,24962,24964,24968,
                                                                                                  24970,24974,25005,25006,25452,2645
                                                                                                  3                                 
 IILAST                     Local  18460    I(4)            4           scalar                    20940,23139,24607,24678,24694,2469
                                                                                                  6,24699,24701,24718,24741,24762,24
                                                                                                  764,24767,24769,24786,24809,24841,
                                                                                                  24863,24885,24907,24922,24925,2495
                                                                                                  6,24957,24961,24962,24964,24967,24
                                                                                                  968,24970,24973,25004,25006,26453,
                                                                                                  26561,26575                       
 IIM1                       Local  18533    I(4)            4           scalar                    18921,18924,18925,18926,18927,1892
                                                                                                  8,18929,18930,18935,19004,19005,19
                                                                                                  006,19007,19020,19021,19022,19057,
                                                                                                  19067,19094,19108,19116,19126,1913
                                                                                                  4,19165,19179,19214,19228,19240,19
                                                                                                  254,19266,19309,19320,19333,19362,
                                                                                                  19407,19414,19415,19416,19428,1943
                                                                                                  5,19436,19437,19531,19534,19535,19
                                                                                                  536,19537,19538,19539,19540,19545,
                                                                                                  19621,19622,19623,19655,19656,1965
                                                                                                  7,19664,19665,19687,19688,19690,19
                                                                                                  693,19694,19696,19699,19747,19769,
                                                                                                  19811,19844,19846,19850,19852,1985
                                                                                                  6,19889,19890,19891,19892,19903,19
                                                                                                  926,20342,20357,20358,20360,20363,
                                                                                                  20364,20366,20369,20418,21050,2115
                                                                                                  3,21154,21209,21670,21671,22271,22
                                                                                                  797,22928,22943,22957,22958,22982,
                                                                                                  23010,23051,23093,23145,23221,2322
                                                                                                  2,23223,23224,23225,23226,23227,23
                                                                                                  228,23229,23230,23231,23556,23559,
                                                                                                  23560,23561,23562,23563,23564,2356
                                                                                                  5,23571,23692,23693,23694,23739,23
                                                                                                  740,23741,23742,23749,23750,23772,
                                                                                                  23773,23775,23778,23779,23781,2378
                                                                                                  4,23811,23812,23875,23877,23881,23
                                                                                                  883,23887,23913,23914,24356,24371,

Page 596         Source Listing                  ORDCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  24372,24374,24377,24378,24380,2438
                                                                                                  3,25030,25046,25061,25114,25162,25
                                                                                                  211,25266,25293,25329,25348,25378,
                                                                                                  25407,25610,25663,25753,25807,2581
                                                                                                  4,25815,25816,25837,25844,25845,25
                                                                                                  846,25866,26052,26090,26124,26229,
                                                                                                  26286,26366,26372,26373,26459,2649
                                                                                                  9,26500,26501,26502,26503,26504,26
                                                                                                  505,26506,26507,26508,26509,26600,
                                                                                                  26603,26604,26605,26606,26607,2660
                                                                                                  8,26609,26614,26683,26684,26685,26
                                                                                                  686,26699,26700,26701,26736,26746,
                                                                                                  26773,26787,26795,26805,26813,2684
                                                                                                  4,26858,26893,26907,26919,26933,26
                                                                                                  945,26988,26999,27012,27041,27086,
                                                                                                  27093,27094,27095,27107,27114,2711
                                                                                                  5,27116                           
 IIM2                       Local  18534    I(4)            4           scalar                    18941,18944,18945,18946,18947,1894
                                                                                                  8,18949,18950,18955,19014,19015,19
                                                                                                  020,19021,19022,19067,19126,19134,
                                                                                                  19179,19254,19266,19333,19362,1941
                                                                                                  6,19437,19551,19554,19555,19556,19
                                                                                                  557,19558,19559,19560,19565,19811,
                                                                                                  19812,19813,19820,19821,19843,1984
                                                                                                  4,19846,19849,19850,19852,19855,19
                                                                                                  904,19926,22941,22982,23145,23208,
                                                                                                  23209,23210,23211,23212,23213,2321
                                                                                                  4,23215,23216,23217,23218,23577,23
                                                                                                  580,23581,23582,23583,23584,23585,
                                                                                                  23586,23592,23698,23699,23700,2384
                                                                                                  2,23843,23844,23851,23852,23874,23
                                                                                                  875,23877,23880,23881,23883,23886,
                                                                                                  23913,23914,23976,23978,23982,2398
                                                                                                  4,23988,24014,24015,25044,25162,25
                                                                                                  211,25266,25302,25407,25753,25816,
                                                                                                  25846,26286,26459,26486,26487,2648
                                                                                                  8,26489,26490,26491,26492,26493,26
                                                                                                  494,26495,26496,26620,26623,26624,
                                                                                                  26625,26626,26627,26628,26629,2663
                                                                                                  4,26693,26694,26699,26700,26701,26
                                                                                                  746,26805,26813,26858,26933,26945,
                                                                                                  27012,27041,27095,27116           
 IIM3                       Local  18535    I(4)            4           scalar                    23598,23601,23602,23603,23604,2360
                                                                                                  5,23606,23607,23613,23704,23705,23
                                                                                                  706,23943,23944,23945,23952,23953,
                                                                                                  23975,23976,23978,23981,23982,2398
                                                                                                  4,23987,24014,24015,25275         
 IIP1                       Local  18536    I(4)            4           scalar                    18961,18964,18965,18966,18967,1896
                                                                                                  8,18969,18970,18975,19028,19029,19
                                                                                                  030,19031,19044,19045,19046,19057,
                                                                                                  19075,19086,19108,19116,19144,1915
                                                                                                  2,19165,19191,19202,19228,19240,19
                                                                                                  280,19292,19309,19320,19346,19384,
                                                                                                  19407,19418,19419,19420,19428,1943
                                                                                                  9,19440,19441,19571,19575,19577,19

Page 597         Source Listing                  ORDCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  578,19579,19580,19581,19582,19587,
                                                                                                  19627,19628,19629,19996,19997,1999
                                                                                                  8,20005,20006,20029,20031,20035,20
                                                                                                  037,20041,20074,20075,20076,20077,
                                                                                                  20089,20111,20184,20198,20199,2020
                                                                                                  1,20204,20205,20207,20210,20258,20
                                                                                                  281,20342,20358,20360,20364,20366,
                                                                                                  20370,20404,20405,20406,20407,2041
                                                                                                  9,20760,20778,20780,20784,20786,20
                                                                                                  790,20825,20826,20827,20828,20840,
                                                                                                  20865,20900,20912,20915,20918,2092
                                                                                                  1,20925,20928,20970,21012,21018,21
                                                                                                  069,21073,21077,21079,21081,21085,
                                                                                                  21086,21094,21118,21119,21123,2112
                                                                                                  5,21127,21131,21132,21140,21164,21
                                                                                                  165,21170,21171,21183,21184,21185,
                                                                                                  21187,21188,21189,21241,21242,2124
                                                                                                  7,21248,21252,21254,21255,21261,21
                                                                                                  265,21270,21272,21273,21283,21285,
                                                                                                  21287,21291,21292,21295,21296,2129
                                                                                                  7,21299,21306,21322,21326,21331,21
                                                                                                  338,21345,21346,21347,21349,21350,
                                                                                                  21351,21366,21367,21368,21370,2137
                                                                                                  5,21377,21379,21383,21384,21392,21
                                                                                                  400,21427,21428,21432,21434,21436,
                                                                                                  21440,21441,21460,21461,21462,2146
                                                                                                  4,21465,21466,21491,21495,21500,21
                                                                                                  504,21505,21526,21527,21528,21530,
                                                                                                  21531,21532,21555,21556,21558,2156
                                                                                                  2,21593,21594,21595,21596,21620,21
                                                                                                  626,21627,21628,21629,21631,21632,
                                                                                                  21653,21659,21660,21661,21662,2170
                                                                                                  8,21715,21716,21717,21718,21720,21
                                                                                                  721,21726,21895,21896,21940,21941,
                                                                                                  21960,21961,22089,22090,22134,2213
                                                                                                  5,22154,22155,22181,22185,22187,22
                                                                                                  200,22317,22318,22323,22325,22327,
                                                                                                  22331,22332,22377,22378,22415,2241
                                                                                                  6,22421,22423,22437,22465,22466,22
                                                                                                  473,22475,22479,22480,22508,22509,
                                                                                                  22513,22515,22517,22521,22522,2254
                                                                                                  0,22566,22567,22568,22570,22576,22
                                                                                                  578,22580,22584,22585,22604,22605,
                                                                                                  22606,22608,22609,22610,22635,2263
                                                                                                  9,22644,22648,22649,22713,22714,22
                                                                                                  715,22717,22722,22724,22742,22839,
                                                                                                  22840,22841,22843,22848,22850,2285
                                                                                                  2,22856,22857,22890,22891,22892,22
                                                                                                  894,22900,22902,22904,22908,22909,
                                                                                                  22931,22941,22956,22983,22984,2300
                                                                                                  9,23050,23079,23080,23087,23093,23
                                                                                                  146,23244,23245,23246,23247,23248,
                                                                                                  23249,23250,23251,23252,23253,2325
                                                                                                  4,23346,23348,23357,23619,23623,23
                                                                                                  625,23626,23627,23628,23629,23630,

Page 598         Source Listing                  ORDCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  23636,23710,23711,23712,24044,2404
                                                                                                  5,24046,24047,24054,24055,24078,24
                                                                                                  080,24084,24086,24090,24116,24117,
                                                                                                  24178,24192,24193,24195,24198,2419
                                                                                                  9,24201,24204,24231,24232,24372,24
                                                                                                  374,24378,24380,24384,24517,24518,
                                                                                                  24520,24523,24524,24526,24529,2503
                                                                                                  3,25044,25060,25114,25163,25212,25
                                                                                                  270,25293,25320,25347,25378,25408,
                                                                                                  25439,25493,25495,25496,25503,2550
                                                                                                  4,25510,25519,25558,25560,25561,25
                                                                                                  569,25609,25663,25709,25754,25807,
                                                                                                  25818,25819,25820,25837,25848,2584
                                                                                                  9,25850,25866,25919,25955,26051,26
                                                                                                  076,26077,26084,26090,26123,26176,
                                                                                                  26177,26184,26229,26270,26271,2627
                                                                                                  8,26287,26366,26460,26522,26523,26
                                                                                                  524,26525,26526,26527,26528,26529,
                                                                                                  26530,26531,26532,26565,26566,2656
                                                                                                  7,26568,26569,26570,26571,26640,26
                                                                                                  643,26644,26645,26646,26647,26648,
                                                                                                  26649,26654,26707,26708,26709,2671
                                                                                                  0,26723,26724,26725,26736,26754,26
                                                                                                  765,26787,26795,26823,26831,26844,
                                                                                                  26870,26881,26907,26919,26959,2697
                                                                                                  1,26988,26999,27025,27063,27086,27
                                                                                                  097,27098,27099,27107,27118,27119,
                                                                                                  27120                             
 IIP2                       Local  18537    I(4)            4           scalar                    18981,18984,18985,18986,18987,1898
                                                                                                  8,18989,18990,18995,19038,19039,19
                                                                                                  044,19045,19046,19086,19144,19152,
                                                                                                  19202,19280,19292,19346,19384,1942
                                                                                                  0,19441,19594,19598,19600,19601,19
                                                                                                  602,19603,19604,19605,19610,19633,
                                                                                                  19634,19635,20153,20154,20155,2016
                                                                                                  2,20163,20184,20199,20201,20205,20
                                                                                                  207,20211,20244,20245,20246,20247,
                                                                                                  20259,20281,20471,20487,20489,2049
                                                                                                  3,20495,20499,20533,20534,20535,20
                                                                                                  536,20548,21243,21244,21249,21250,
                                                                                                  21262,21263,21264,21266,21267,2126
                                                                                                  8,21725,21726,22191,22195,22197,22
                                                                                                  199,22203,22204,22427,22428,22432,
                                                                                                  22434,22436,22440,22441,22728,2272
                                                                                                  9,22730,22732,22737,22739,22741,22
                                                                                                  745,22746,22928,22956,23009,23039,
                                                                                                  23040,23047,23050,23093,23146,2325
                                                                                                  7,23258,23259,23260,23261,23262,23
                                                                                                  263,23264,23265,23266,23267,23643,
                                                                                                  23647,23649,23650,23651,23652,2365
                                                                                                  3,23654,23660,23716,23717,23718,24
                                                                                                  147,24148,24149,24150,24157,24158,
                                                                                                  24178,24193,24195,24199,24201,2420
                                                                                                  5,24231,24232,24282,24296,24297,24
                                                                                                  299,24302,24303,24305,24308,24335,

Page 599         Source Listing                  ORDCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  24336,24429,24445,24447,24451,2445
                                                                                                  3,24457,24495,25030,25060,25163,25
                                                                                                  297,25320,25347,25519,25581,25583,
                                                                                                  25584,25592,25596,25597,25602,2560
                                                                                                  9,25709,25820,25850,25919,26051,26
                                                                                                  123,26153,26154,26161,26198,26199,
                                                                                                  26206,26245,26366,26460,26535,2653
                                                                                                  6,26537,26538,26539,26540,26541,26
                                                                                                  542,26543,26544,26545,26660,26663,
                                                                                                  26664,26665,26666,26667,26668,2666
                                                                                                  9,26674,26717,26718,26723,26724,26
                                                                                                  725,26765,26823,26831,26881,26959,
                                                                                                  26971,27025,27063,27099,27120     
 IIP3                       Local  18538    I(4)            4           scalar                    23146,23667,23670,23671,23672,2367
                                                                                                  3,23674,23675,23676,23682,24252,24
                                                                                                  253,24254,24261,24262,24282,24297,
                                                                                                  24299,24303,24305,24309,24335,2433
                                                                                                  6,24502,24518,24520,24524,24526,24
                                                                                                  530,25324,26460                   
 IISTART                    Local  18454    I(4)            4           scalar                    18895,18902,23138,26452           
 IMISS                      Dummy  18363    I(4)            4           scalar   ARG,INOUT        19009,19024,19033,19048,19058,1905
                                                                                                  9,19068,19069,19087,19088,19109,19
                                                                                                  110,19117,19118,19127,19128,19135,
                                                                                                  19136,19145,19146,19153,19154,1916
                                                                                                  6,19169,19180,19183,19203,19206,19
                                                                                                  229,19232,19241,19244,19255,19258,
                                                                                                  19267,19270,19281,19284,19293,1929
                                                                                                  6,19310,19313,19321,19324,19334,19
                                                                                                  337,19347,19350,19363,19366,19385,
                                                                                                  19388,19474,19677,19680,19686,1977
                                                                                                  3,19791,19833,19836,19842,19930,19
                                                                                                  948,19977,20018,20021,20027,20115,
                                                                                                  20133,20188,20191,20197,20285,2029
                                                                                                  4,20323,20347,20350,20356,20461,20
                                                                                                  476,20479,20485,20590,20623,20624,
                                                                                                  20627,20635,20732,20766,20769,2077
                                                                                                  6,20869,20878,20949,20950,21038,21
                                                                                                  156,21159,22959,22960,22985,22986,
                                                                                                  23011,23012,23017,23021,23052,2305
                                                                                                  3,23058,23062,23094,23098,23762,23
                                                                                                  765,23771,23818,23828,23864,23867,
                                                                                                  23873,23929,23965,23968,23974,2403
                                                                                                  0,24067,24070,24076,24123,24133,24
                                                                                                  182,24185,24191,24238,24286,24289,
                                                                                                  24295,24342,24361,24364,24370,2443
                                                                                                  4,24437,24443,24507,24510,24516,24
                                                                                                  585,24601,24946,24947,24950,24959,
                                                                                                  25012,25013,25062,25063,25068,2507
                                                                                                  2,25115,25119,25164,25168,25172,25
                                                                                                  176,25213,25214,25219,25223,25267,
                                                                                                  25268,25294,25295,25321,25322,2534
                                                                                                  9,25350,25351,25379,25380,25409,25
                                                                                                  410,25411,25440,25520,25611,25612,
                                                                                                  25617,25621,25664,25668,25710,2571
                                                                                                  4,25755,25756,25761,25765,25867,25

Page 600         Source Listing                  ORDCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  869,25920,25922,26053,26054,26059,
                                                                                                  26063,26091,26095,26125,26126,2613
                                                                                                  1,26135,26230,26234,26288,26289,26
                                                                                                  294,26298,26560,26561,26574,26575,
                                                                                                  26688,26703,26712,26727,26737,2673
                                                                                                  8,26747,26748,26766,26767,26788,26
                                                                                                  789,26796,26797,26806,26807,26814,
                                                                                                  26815,26824,26825,26832,26833,2684
                                                                                                  5,26848,26859,26862,26882,26885,26
                                                                                                  908,26911,26920,26923,26934,26937,
                                                                                                  26946,26949,26960,26963,26972,2697
                                                                                                  5,26989,26992,27000,27003,27013,27
                                                                                                  016,27026,27029,27042,27045,27064,
                                                                                                  27067                             
 INDX                       Dummy  18363    I(4)            4     1     0        ARG,INOUT        18895,18897,18910,18924,18944,1896
                                                                                                  4,18984,19489,19534,19554,19575,19
                                                                                                  598,21674,21675,21729,21730,23286,
                                                                                                  23301,23318,23337,23338,23417,2355
                                                                                                  9,23580,23601,23623,23647,23670,24
                                                                                                  620,24624,26589,26603,26623,26643,
                                                                                                  26663,27323,27351                 
 INDX_SAVE                  Local  18807    I(4)            4     1     200                       19474,21047,21079,21125,21206,2128
                                                                                                  5,21377,21423,21434,22187,22197,22
                                                                                                  268,22325,22423,22434,22473,22504,
                                                                                                  22515,22562,22578,22724,22739,2279
                                                                                                  4,22850,22886,22902,23311,23337,23
                                                                                                  345,23346,23364,23395             
 INSTY_OB_FUN               Func   18442    I(4)            4           scalar                    18841,18842,18843,18844,18845,1884
                                                                                                  6,18847,18848,18849,18850,18851,18
                                                                                                  852,18853,18854,18855,18856,18857,
                                                                                                  18858                             
 INT                        Func   21587                                scalar                    21587,21620,26402,26403,26418,2641
                                                                                                  9,26430,26431                     
 IO36                       Dummy  18370    I(4)            4           scalar   ARG,INOUT        27335,27336,27337,27338,27404,2749
                                                                                                  1,27492,27494,27495,27496,27497   
 IO8                        Dummy  18370    I(4)            4           scalar   ARG,INOUT        19376,19377,19378,19398,19399,1940
                                                                                                  0,19499,19500,19501,19502,19521,20
                                                                                                  997,20998,21017,21018,21029,21030,
                                                                                                  21044,21062,21063,21076,21093,2109
                                                                                                  4,21122,21139,21140,21203,21226,21
                                                                                                  227,21282,21305,21306,21337,21338,
                                                                                                  21339,21360,21361,21362,21374,2139
                                                                                                  1,21392,21420,21431,21449,21450,21
                                                                                                  452,21481,21482,21484,21512,21513,
                                                                                                  21515,21545,21546,21548,21577,2157
                                                                                                  8,21580,21610,21611,21613,21642,21
                                                                                                  643,21645,21694,21695,21697,21732,
                                                                                                  21733,21738,21739,21750,21751,2175
                                                                                                  3,21822,21823,21825,21858,21859,21
                                                                                                  861,21902,21903,21905,21925,21926,
                                                                                                  21928,21947,21948,21950,21968,2196
                                                                                                  9,21971,21972,22004,22005,22007,22
                                                                                                  046,22047,22049,22096,22097,22099,
                                                                                                  22119,22120,22122,22141,22142,2214
                                                                                                  4,22162,22163,22165,22166,22184,22

Page 601         Source Listing                  ORDCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  194,22212,22213,22215,22235,22236,
                                                                                                  22238,22265,22283,22284,22286,2232
                                                                                                  2,22339,22340,22342,22362,22363,22
                                                                                                  365,22384,22385,22387,22420,22431,
                                                                                                  22448,22449,22451,22470,22487,2248
                                                                                                  8,22490,22501,22512,22530,22531,22
                                                                                                  533,22534,22559,22575,22593,22594,
                                                                                                  22596,22625,22626,22628,22656,2265
                                                                                                  7,22659,22721,22736,22753,22754,22
                                                                                                  756,22791,22809,22810,22812,22847,
                                                                                                  22864,22865,22867,22883,22899,2291
                                                                                                  7,22918,22920,22921,22937,22938,22
                                                                                                  950,22951,22976,22977,23002,23003,
                                                                                                  23046,23047,23086,23087,23123,2312
                                                                                                  4,23137,23140,23144,23147,23161,23
                                                                                                  179,23183,23195,23203,23209,23222,
                                                                                                  23234,23245,23258,23292,23293,2333
                                                                                                  0,23331,23350,23360,23361,23427,23
                                                                                                  428,23429,23430,23546,24755,24756,
                                                                                                  24757,24758,24823,24824,24825,2482
                                                                                                  6,25040,25041,25054,25055,25108,25
                                                                                                  109,25156,25157,25205,25206,25259,
                                                                                                  25260,25286,25287,25313,25314,2534
                                                                                                  0,25341,25371,25372,25400,25401,25
                                                                                                  431,25432,25476,25477,25509,25510,
                                                                                                  25568,25569,25591,25592,25601,2560
                                                                                                  2,25656,25657,25703,25704,25746,25
                                                                                                  747,25800,25801,25830,25831,25860,
                                                                                                  25861,25915,25916,25967,25968,2608
                                                                                                  3,26084,26116,26117,26160,26161,26
                                                                                                  183,26184,26205,26206,26221,26222,
                                                                                                  26264,26265,26277,26278,26313,2631
                                                                                                  4,26330,26331,26341,26342,26346,26
                                                                                                  378,26379,26451,26454,26458,26469,
                                                                                                  26473,26477,26481,26487,26500,2651
                                                                                                  2,26523,26536,27055,27056,27057,27
                                                                                                  077,27078,27079,27500,27501,27502,
                                                                                                  27503,27505,27506,27507,27508,2751
                                                                                                  2,27513,27515,27516,27521,27526,27
                                                                                                  527,27528,27529,27532,27534,27536,
                                                                                                  27538,27540,27542,27544,27546,2754
                                                                                                  8,27550,27552,27554,27556,27558,27
                                                                                                  560,27562,27564,27566,27572,27573,
                                                                                                  27574                             
 IOB                        Local  18530    I(4)            4           scalar                    18907,18910,18922,18962,19472,1948
                                                                                                  4,19488,19489,19491,19494,19500,19
                                                                                                  503,19504,19517,19532,19573,20936,
                                                                                                  20939,20992,21024,21057,21150,2135
                                                                                                  5,21444,21470,21539,21601,21672,21
                                                                                                  689,21727,21853,21920,21963,22041,
                                                                                                  22114,22157,22278,22357,22525,2258
                                                                                                  8,22614,22804,22912,22932,22945,22
                                                                                                  971,22997,23118,23130,23300,23301,
                                                                                                  23318,23404,23413,23416,23417,2341
                                                                                                  9,23422,23428,23431,23433,23541,23

Page 602         Source Listing                  ORDCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  557,23621,24599,24600,24603,24606,
                                                                                                  25035,25049,25103,25151,25200,2525
                                                                                                  4,25281,25308,25335,25366,25395,25
                                                                                                  426,25462,25651,25698,25741,25795,
                                                                                                  25825,25855,25904,26111,26216,2625
                                                                                                  5,26256,26258,26308,26325,26336,26
                                                                                                  348,26558,26586,26589,26601,26641,
                                                                                                  27322,27323,27350,27351           
 IOBFIRST                   Local  18459    I(4)            4           scalar                    20939,24606,24708,24731,24776,2479
                                                                                                  9,24831,24853,24875,24897         
 IOBLAST                    Local  18461    I(4)            4           scalar                    20941,24600,24601,24608,24679,2470
                                                                                                  9,24717,24732,24740,24777,24785,24
                                                                                                  800,24808,24832,24840,24854,24862,
                                                                                                  24876,24884,24898,24906,25439,2551
                                                                                                  9,26558,26560,26572,26574         
 IOBP1                      Local  18539    I(4)            4           scalar                    19572,19576,19588,23620,23624,2363
                                                                                                  7,25439,26572                     
 IOBP2                      Local  18540    I(4)            4           scalar                    19595,19599,19611,23644,23648,2366
                                                                                                  1,25519                           
 IOBS_FLT                   Dummy  18369    I(4)            4     1     0        ARG,INOUT        18894,18896                       
 IOB_SAV                    Local  18549    I(4)            4           scalar                    19480,19491,19494,19504,23407,2341
                                                                                                  9,23422,23433                     
 ISTART                     Local  18453    I(4)            4           scalar                    18894,18895,18907,18923,18943,1947
                                                                                                  2,19533,19553,21673,21683,23286,23
                                                                                                  298,23300,23325,23404,23558,23579,
                                                                                                  23600,24599,26255,26586,26602,2662
                                                                                                  2,27322                           
 ITYPE                      Dummy  18367    I(4)            4     1     0        ARG,INOUT        18915,18916,19617,19618,19622,1962
                                                                                                  3,19628,19629,19634,19635,21154,21
                                                                                                  162,21163,21164,21165,21168,21169,
                                                                                                  21170,21171,21182,21183,21184,2118
                                                                                                  5,21186,21187,21188,21189,21239,21
                                                                                                  240,21241,21242,21243,21244,21245,
                                                                                                  21246,21247,21248,21249,21250,2126
                                                                                                  1,21262,21263,21264,21265,21266,21
                                                                                                  267,21268,21322,21323,21324,21325,
                                                                                                  21326,21327,21328,21329,21344,2134
                                                                                                  5,21346,21347,21348,21349,21350,21
                                                                                                  351,21459,21460,21461,21462,21463,
                                                                                                  21464,21465,21466,21491,21492,2149
                                                                                                  3,21494,21495,21496,21497,21498,21
                                                                                                  525,21526,21527,21528,21529,21530,
                                                                                                  21531,21532,21558,21559,21560,2156
                                                                                                  1,21562,21563,21564,21565,21589,21
                                                                                                  590,21591,21592,21593,21594,21595,
                                                                                                  21596,21622,21623,21624,21625,2162
                                                                                                  6,21627,21628,21629,21655,21656,21
                                                                                                  657,21658,21659,21660,21661,21662,
                                                                                                  21711,21712,21713,21714,21715,2171
                                                                                                  6,21717,21718,22603,22604,22605,22
                                                                                                  606,22607,22608,22609,22610,22635,
                                                                                                  22636,22637,22638,22639,22640,2264
                                                                                                  1,22642,23210,23223,23234,23246,23
                                                                                                  259,23688,23689,23693,23694,23699,
                                                                                                  23700,23705,23706,23711,23712,2371

Page 603         Source Listing                  ORDCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  7,23718,23723,23740,24045,24148,26
                                                                                                  414,26415,26416,26417,26488,26501,
                                                                                                  26512,26524,26537,26594,26595,2713
                                                                                                  5,27136,27137,27138,27141,27147,27
                                                                                                  151,27157,27161,27167,27170,27176,
                                                                                                  27180,27181,27182,27183,27186,2719
                                                                                                  2,27196,27202,27206,27212,27215,27
                                                                                                  221,27225,27226,27227,27228,27231,
                                                                                                  27237,27241,27247,27251,27257,2726
                                                                                                  0,27266,27270,27271,27272,27273,27
                                                                                                  276,27282,27286,27292,27296,27302,
                                                                                                  27305,27311,27353,27354,27355,2735
                                                                                                  6,27359,27360,27361,27362,27365,27
                                                                                                  366,27367,27368,27371,27372,27373,
                                                                                                  27374,27377,27378,27404           
 ITYPE0                     Local  18586    I(4)            4           scalar                    23723,25453,25457,25485,25486,2548
                                                                                                  7,25489,25490,25491,25874,25879,25
                                                                                                  883,25889,25894,25898,25924,25925,
                                                                                                  25926,25931,25935,25939,25940,2594
                                                                                                  1,25946,25950                     
 ITYPEM1                    Local  18587    I(4)            4           scalar                    21154,21156,21159,21160,21161,2116
                                                                                                  6,21167,23740,23818,25871,25872,25
                                                                                                  873,25878,25882,25886,25887,25888,
                                                                                                  25893,25897                       
 ITYPEP1                    Local  18588    I(4)            4           scalar                    24045,24123,25454,25455,25456,2545
                                                                                                  8,25459,25460,25484,25488,25549,25
                                                                                                  553,25573,25574,25575,25577,25578,
                                                                                                  25579,25875,25876,25877,25880,2588
                                                                                                  4,25890,25891,25892,25895,25899,25
                                                                                                  927,25932,25936,25942,25947,25951 
 ITYPEP2                    Local  18589    I(4)            4           scalar                    24148,25550,25551,25552,25554,2555
                                                                                                  5,25556,25572,25576,25928,25929,25
                                                                                                  930,25933,25937,25943,25944,25945,
                                                                                                  25948,25952                       
 I_ACARS                    Local  18500    I(4)            4           scalar                    18841,21168,21186,21247,21265,2132
                                                                                                  6,21348,21463,21495,21529,21562,22
                                                                                                  607,22639,25457,25488,25553,25576,
                                                                                                  25889,25894,25895,25897,25898,2594
                                                                                                  2,25947,25948,25950,25951,27180,27
                                                                                                  215,27221,27359                   
 I_ACARS_ASC                Local  18504    I(4)            4           scalar                    18843,21166,21170,21187,21245,2124
                                                                                                  9,21266,21327,21349,21464,21496,21
                                                                                                  530,21563,22608,22640,25458,25489,
                                                                                                  25554,25577,25886,25890,25893,2593
                                                                                                  9,25943,25946,27181,27196,27202,27
                                                                                                  361                               
 I_ACARS_DES                Local  18506    I(4)            4           scalar                    18844,21167,21171,21188,21246,2125
                                                                                                  0,21267,21328,21350,21465,21497,21
                                                                                                  531,21564,22609,22641,25459,25490,
                                                                                                  25555,25578,25887,25891,25899,2594
                                                                                                  0,25944,25952,27183,27206,27212,27
                                                                                                  362                               
 I_ACARS_LVL                Local  18502    I(4)            4           scalar                    18842,21169,21189,21248,21268,2132
                                                                                                  9,21351,21466,21498,21532,21565,22
                                                                                                  610,22642,25460,25491,25556,25579,

Page 604         Source Listing                  ORDCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  25888,25892,25941,25945,27182,2718
                                                                                                  6,27192,27360                     
 I_AIREP                    Local  18513    I(4)            4           scalar                    18851,27225,27260,27266,27371     
 I_AIREP_ASC                Local  18515    I(4)            4           scalar                    18853,27226,27241,27247,27373     
 I_AIREP_DES                Local  18516    I(4)            4           scalar                    18854,27228,27251,27257,27374     
 I_AIREP_LVL                Local  18514    I(4)            4           scalar                    18852,27227,27231,27237,27372     
 I_AMDAR                    Local  18517    I(4)            4           scalar                    18855,21589,21593,21622,21626,2165
                                                                                                  5,21659,21711,21715,26417,27270,27
                                                                                                  305,27311,27365                   
 I_AMDAR_ASC                Local  18519    I(4)            4           scalar                    18857,21590,21594,21623,21627,2165
                                                                                                  6,21660,21712,21716,26414,27271,27
                                                                                                  286,27292,27367                   
 I_AMDAR_DES                Local  18520    I(4)            4           scalar                    18858,21591,21595,21624,21628,2165
                                                                                                  7,21661,21713,21717,26415,27273,27
                                                                                                  296,27302,27368                   
 I_AMDAR_LVL                Local  18518    I(4)            4           scalar                    18856,21592,21596,21625,21629,2165
                                                                                                  8,21662,21714,21718,26416,27272,27
                                                                                                  276,27282,27366                   
 I_MAN_AIREP                Local  18511    I(4)            4           scalar                    18849,18915,19617,19622,19628,1963
                                                                                                  4,23688,23693,23699,23705,23711,23
                                                                                                  717,26594,27377                   
 I_MAN_YAIREP               Local  18512    I(4)            4           scalar                    18850,18916,19618,19623,19629,1963
                                                                                                  5,23689,23694,23700,23706,23712,23
                                                                                                  718,26595,27378                   
 I_MDCRS                    Local  18507    I(4)            4           scalar                    18845,21162,21182,21241,21261,2132
                                                                                                  2,21344,21459,21491,21525,21558,22
                                                                                                  603,22635,25453,25484,25549,25572,
                                                                                                  25874,25879,25880,25882,25883,2592
                                                                                                  7,25932,25933,25935,25936,27135,27
                                                                                                  170,27176,27353                   
 I_MDCRS_ASC                Local  18509    I(4)            4           scalar                    18847,21160,21164,21183,21239,2124
                                                                                                  3,21262,21323,21345,21460,21492,21
                                                                                                  526,21559,22604,22636,25454,25485,
                                                                                                  25550,25573,25871,25875,25878,2592
                                                                                                  4,25928,25931,27136,27151,27157,27
                                                                                                  355                               
 I_MDCRS_DES                Local  18510    I(4)            4           scalar                    18848,21161,21165,21184,21240,2124
                                                                                                  4,21263,21324,21346,21461,21493,21
                                                                                                  527,21560,22605,22637,25455,25486,
                                                                                                  25551,25574,25872,25876,25884,2592
                                                                                                  5,25929,25937,27138,27161,27167,27
                                                                                                  356                               
 I_MDCRS_LVL                Local  18508    I(4)            4           scalar                    18846,21163,21185,21242,21264,2132
                                                                                                  5,21347,21462,21494,21528,21561,22
                                                                                                  606,22638,25456,25487,25552,25575,
                                                                                                  25873,25877,25926,25930,27137,2714
                                                                                                  1,27147,27354                     
 JJ                         Local  18531    I(4)            4           scalar                    24620,24630,24636,24637,24638,2463
                                                                                                  9,24640,24641,24644,24645,24647,24
                                                                                                  650,24651,24653,24656,24657,24659,
                                                                                                  24662,24663,24665,24673,24675,2467
                                                                                                  8                                 
 JJP1                       Local  18536    I(4)            4           scalar                    24622,24624,24671,24673,24675     
 JJSTART                    Local  18458    I(4)            4           scalar                    20937,24604,24629                 
 JJ_ALAT_MAX                Local  18556    I(4)            4           scalar                    24653,24786,24841                 

Page 605         Source Listing                  ORDCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 JJ_ALAT_MIN                Local  18555    I(4)            4           scalar                    24647,24809,24863                 
 JJ_ALON_MAX                Local  18558    I(4)            4           scalar                    24665,24718,24885                 
 JJ_ALON_MIN                Local  18557    I(4)            4           scalar                    24659,24741,24907                 
 JOB                        Local  18530    I(4)            4           scalar                    20936,24603,24618,24620,24621,2462
                                                                                                  4,24646,24652,24658,24664,24679,24
                                                                                                  680,24683,24687                   
 JOB_ALAT_MAX               Local  18552    I(4)            4           scalar                    24652,24776,24777,24785,24831,2483
                                                                                                  2,24840                           
 JOB_ALAT_MIN               Local  18551    I(4)            4           scalar                    24646,24799,24800,24808,24853,2485
                                                                                                  4,24862                           
 JOB_ALON_MAX               Local  18554    I(4)            4           scalar                    24664,24708,24709,24717,24875,2487
                                                                                                  6,24884                           
 JOB_ALON_MIN               Local  18553    I(4)            4           scalar                    24658,24731,24732,24740,24897,2489
                                                                                                  8,24906                           
 KBAD                       Local  18482    I(4)            4     1     5                         27348,27471,27492,27494,27495,2749
                                                                                                  6,27497,27503,27505,27506,27507,27
                                                                                                  508,27569,27570                   
 KBADTOT                    Dummy  18369    I(4)            4           scalar   ARG,INOUT        27569,27574                       
 KEEP                       Local  18809    I(4)            4           scalar                    23298,23317,23318,23325,23329,2333
                                                                                                  6,23337,23338                     
 KFLIGHT                    Dummy  18369    I(4)            4           scalar   ARG,INOUT        18890                             
 KK                         Local  18530    I(4)            4           scalar                    18890,18894,18896,18903,23209,2322
                                                                                                  2,23234,23245,23258,23385,24756,24
                                                                                                  824,26487,26500,26512,26523,26536,
                                                                                                  27522                             
 KNT0                       Local  18541    I(4)            4           scalar                    19488,23416                       
 KNT1                       Local  18542    I(4)            4           scalar                    18922,18923,18924,18931,18942,1953
                                                                                                  2,19533,19534,19541,19552,23557,23
                                                                                                  558,23559,23567,23578,26601,26602,
                                                                                                  26603,26610,26621                 
 KNT2                       Local  18543    I(4)            4           scalar                    18942,18943,18944,18951,19552,1955
                                                                                                  3,19554,19561,23578,23579,23580,23
                                                                                                  588,23599,26621,26622,26623,26630 
 KNT3                       Local  18544    I(4)            4           scalar                    18962,18963,18964,18971,18982,1957
                                                                                                  3,19574,19575,19576,19583,19596,23
                                                                                                  621,23622,23623,23624,23632,23645,
                                                                                                  26641,26642,26643,26650,26661     
 KNT4                       Local  18545    I(4)            4           scalar                    18982,18983,18984,18991,19596,1959
                                                                                                  7,19598,19599,19606,23645,23646,23
                                                                                                  647,23648,23656,23668,26661,26662,
                                                                                                  26663,26670                       
 KNT5                       Local  18546    I(4)            4           scalar                    23599,23600,23601,23609           
 KNT6                       Local  18547    I(4)            4           scalar                    23668,23669,23670,23678           
 KNT_BAD                    Local  18810    I(4)            4           scalar                    19476,21048,21080,21126,21207,2128
                                                                                                  6,21378,21424,21435,22188,22198,22
                                                                                                  269,22326,22424,22435,22474,22505,
                                                                                                  22516,22563,22579,22725,22740,2279
                                                                                                  5,22851,22887,22903,23288,23293,23
                                                                                                  326,23327,23346,23363,23385,23394 
 KNT_IIP1_BAD               Local  18550    I(4)            4           scalar                    23409,23432,23542,25036,25050,2510
                                                                                                  4,25152,25201,25255,25282,25309,25
                                                                                                  336,25367,25396,25427,25463,25482,
                                                                                                  25547,25652,25699,25742,25796,2582
                                                                                                  6,25856,25905,25957,26079,26112,26
                                                                                                  156,26179,26201,26217,26250,26260,

Page 606         Source Listing                  ORDCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  26273,26309,26326,26337,26349     
 KNT_IOB                    Local  18548    I(4)            4           scalar                    19479,19492,19495,19498,19502,1950
                                                                                                  5,23406,23420,23423,23426,23430,23
                                                                                                  434                               
 KREG                       Dummy  18368    I(4)            4           scalar   ARG,INOUT        27421,27425,27518                 
 KTYPE                      Local  18585    I(4)            4           scalar                    27357,27363,27369,27375,27379,2738
                                                                                                  2,27384,27386,27388,27390,27423,27
                                                                                                  424,27434,27436,27438,27441,27443,
                                                                                                  27445,27447,27449,27453,27455,2745
                                                                                                  7,27471,27473,27475,27477,27479,27
                                                                                                  481                               
 LAST_BAD                   Local  18811    I(4)            4           scalar                    19477,20619,20624,20625,20630,2063
                                                                                                  1,20639,20641,20646,20649,20654,20
                                                                                                  655,20704,20726,20728,20760,20762,
                                                                                                  20766,20767,20773,20774,20777,2077
                                                                                                  8,20780,20783,20784,20786,20789,20
                                                                                                  839,20864,20865,21049,21070,21081,
                                                                                                  21127,21208,21287,21379,21436,2219
                                                                                                  9,22270,22327,22436,22475,22517,22
                                                                                                  580,22741,22796,22852,22904       
 LAST_BAD_M1                Local  18812    I(4)            4           scalar                    19478,20619,20623,20625,20632,2063
                                                                                                  3,20636,20637,20638,20641,20644,20
                                                                                                  645,20647,20649,20652,20653,20703,
                                                                                                  20727,20728,21050,21082,21128,2120
                                                                                                  9,21288,21380,21437,22200,22271,22
                                                                                                  328,22437,22476,22518,22581,22742,
                                                                                                  22797,22853,22905                 
 LL                         Local  18808    I(4)            4           scalar                    19475,21042,21043,21047,21074,2107
                                                                                                  5,21079,21120,21121,21125,21201,21
                                                                                                  202,21206,21280,21281,21285,21372,
                                                                                                  21373,21377,21418,21419,21423,2142
                                                                                                  9,21430,21434,22182,22183,22187,22
                                                                                                  192,22193,22197,22263,22264,22268,
                                                                                                  22320,22321,22325,22418,22419,2242
                                                                                                  3,22429,22430,22434,22468,22469,22
                                                                                                  473,22499,22500,22504,22510,22511,
                                                                                                  22515,22557,22558,22562,22573,2257
                                                                                                  4,22578,22719,22720,22724,22734,22
                                                                                                  735,22739,22789,22790,22794,22845,
                                                                                                  22846,22850,22881,22882,22886,2289
                                                                                                  7,22898,22902,23297,23310,23311,23
                                                                                                  326,23327,23337,23363,23364,23394,
                                                                                                  23395                             
 L_IIM1_MAN_AIREP           Local  18824    L(4)            4           scalar                    19620,19623,21801,21830,21838,2186
                                                                                                  6,21874,23013,23015,23054,23056,23
                                                                                                  096,23691,23694,25064,25066,25117,
                                                                                                  25166,25170,25221,25225,25613,2561
                                                                                                  5,25666,25763,25767,26055,26057,26
                                                                                                  093,26127,26129,26232,26296,26300 
 L_IIM2_MAN_AIREP           Local  18825    L(4)            4           scalar                    23697,23700,25166,25221,25763,2629
                                                                                                  6                                 
 L_IIM3_MAN_AIREP           Local  18826    L(4)            4           scalar                    23703,23706                       
 L_IIP1_MAN_AIREP           Local  18827    L(4)            4           scalar                    19626,19629,20972,21800,23019,2302
                                                                                                  3,23060,23064,23100,23709,23712,24
                                                                                                  672,24674,25070,25074,25121,25174,

Page 607         Source Listing                  ORDCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  25178,25215,25217,25442,25522,2561
                                                                                                  9,25623,25670,25712,25716,25757,25
                                                                                                  759,26061,26065,26097,26133,26137,
                                                                                                  26236,26290,26292                 
 L_IIP2_MAN_AIREP           Local  18828    L(4)            4           scalar                    19632,19635,21801,21830,21842,2186
                                                                                                  6,21880,23023,23064,23715,23718,25
                                                                                                  074,25178,25623,25716,26065,26137 
 L_II_MAN_AIREP             Local  18823    L(4)            4           scalar                    18914,18916,19168,19171,19182,1918
                                                                                                  5,19205,19208,19231,19234,19243,19
                                                                                                  246,19257,19260,19269,19272,19283,
                                                                                                  19286,19295,19298,19312,19315,1932
                                                                                                  3,19326,19336,19339,19349,19352,19
                                                                                                  365,19368,19387,19390,19406,19427,
                                                                                                  19616,19618,20971,21800,23013,2301
                                                                                                  5,23019,23054,23056,23060,23096,23
                                                                                                  100,23687,23689,24672,24674,25064,
                                                                                                  25066,25070,25117,25121,25170,2517
                                                                                                  4,25215,25217,25225,25442,25522,25
                                                                                                  613,25615,25619,25666,25670,25712,
                                                                                                  25757,25759,25767,25806,25836,2605
                                                                                                  5,26057,26061,26093,26097,26127,26
                                                                                                  129,26133,26232,26236,26290,26292,
                                                                                                  26300,26593,26595,26847,26850,2686
                                                                                                  1,26864,26884,26887,26910,26913,26
                                                                                                  922,26925,26936,26939,26948,26951,
                                                                                                  26962,26965,26974,26977,26991,2699
                                                                                                  4,27002,27005,27015,27018,27028,27
                                                                                                  031,27044,27047,27066,27069,27085,
                                                                                                  27106                             
 L_II_PSPD_OK               Local  18829    L(4)            4           scalar                    19464,19518,20993,21013,21025,2105
                                                                                                  8,21089,21135,21151,21237,21333,21
                                                                                                  356,21387,21409,21445,21471,21502,
                                                                                                  21540,21572,21602,21634,21690,2174
                                                                                                  6,21818,21854,21898,21921,21943,21
                                                                                                  964,22000,22042,22092,22115,22137,
                                                                                                  22158,22207,22231,22279,22335,2235
                                                                                                  8,22380,22444,22483,22526,22589,22
                                                                                                  615,22646,22749,22805,22860,22913,
                                                                                                  22933,22946,22972,22998,23042,2308
                                                                                                  2,23119,23131                     
 L_INIT                     Dummy  18370    L(4)            4           scalar   ARG,INOUT        18862                             
 L_OPERATIONAL              Dummy  18370    L(4)            4           scalar   ARG,INOUT        27334,27403,27490                 
 L_PRINT                    Local  18818    L(4)            4           scalar                    18908,19485,19519,19520,20995,2099
                                                                                                  6,21015,21016,21027,21028,21060,21
                                                                                                  061,21091,21092,21137,21138,21177,
                                                                                                  21179,21195,21197,21222,21225,2125
                                                                                                  6,21258,21274,21276,21301,21304,21
                                                                                                  335,21336,21358,21359,21389,21390,
                                                                                                  21447,21448,21475,21477,21480,2150
                                                                                                  6,21508,21511,21542,21544,21574,21
                                                                                                  576,21605,21607,21609,21637,21639,
                                                                                                  21641,21692,21693,21748,21749,2182
                                                                                                  0,21821,21856,21857,21900,21901,21
                                                                                                  923,21924,21945,21946,21966,21967,
                                                                                                  22002,22003,22044,22045,22094,2209

Page 608         Source Listing                  ORDCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  5,22117,22118,22139,22140,22160,22
                                                                                                  161,22210,22211,22233,22234,22281,
                                                                                                  22282,22337,22338,22360,22361,2238
                                                                                                  2,22383,22446,22447,22485,22486,22
                                                                                                  528,22529,22591,22592,22619,22621,
                                                                                                  22624,22650,22652,22655,22751,2275
                                                                                                  2,22807,22808,22862,22863,22915,22
                                                                                                  916,22935,22936,22948,22949,22974,
                                                                                                  22975,23000,23001,23044,23045,2308
                                                                                                  4,23085,23121,23122,23136,23414,23
                                                                                                  544,23545,25038,25039,25052,25053,
                                                                                                  25106,25107,25154,25155,25203,2520
                                                                                                  4,25257,25258,25284,25285,25311,25
                                                                                                  312,25338,25339,25369,25370,25398,
                                                                                                  25399,25429,25430,25468,25472,2547
                                                                                                  5,25497,25499,25505,25508,25562,25
                                                                                                  564,25567,25585,25587,25590,25598,
                                                                                                  25600,25654,25655,25701,25702,2574
                                                                                                  4,25745,25798,25799,25828,25829,25
                                                                                                  858,25859,25909,25911,25914,25961,
                                                                                                  25963,25966,26081,26082,26114,2611
                                                                                                  5,26158,26159,26181,26182,26203,26
                                                                                                  204,26219,26220,26262,26263,26275,
                                                                                                  26276,26311,26312,26328,26329,2633
                                                                                                  9,26340,26351,26376,26377,26450,26
                                                                                                  587,27133,27142,27152,27162,27171,
                                                                                                  27187,27197,27207,27216,27232,2724
                                                                                                  2,27252,27261,27277,27287,27297,27
                                                                                                  306                               
 L_RETEST                   Local  18820    L(4)            4           scalar                    19486,21702,21758,23277           
 L_STUCK                    Local  18830    L(4)            4           scalar                    19465,21037,21069,22208,23289     
 MAXFLT                     Dummy  18369    I(4)            4           scalar   ARG,INOUT        18449,18450,18451,18466,18467     
 MAX_REPS                   Dummy  18363    I(4)            4           scalar   ARG,INOUT        18406,18411,18412,18413,18414,1841
                                                                                                  5,18416,18417,18418,18419,18420,18
                                                                                                  421,18422,18423,18424,18425,18426,
                                                                                                  18427,18428,18429,18430,18431,1843
                                                                                                  2,18436                           
 MM                         Local  18532    I(4)            4           scalar                    27420,27421,27422,27424,27425,2742
                                                                                                  7,27518,27519,27520,27522         
 NN                         Local  18531    I(4)            4           scalar                    21674,21676,21680,21681,21729,2173
                                                                                                  1,21733,21735,21736,21739         
 NNM1                       Local  18533    I(4)            4           scalar                    21675,21676                       
 NNP1                       Local  18536    I(4)            4           scalar                    21730,21731,21733,21739           
 NOB                        Local  18530    I(4)            4           scalar                    21672,21673,21674,21675,21679,2168
                                                                                                  3,21727,21728,21729,21730,21734,21
                                                                                                  740                               
 NOBS_FLT                   Dummy  18369    I(4)            4     1     0        ARG,INOUT        18896,18903                       
 NORD_2ND                   Local  18474    I(4)            4     1     5                         18866,27457,27561                 
 NORD_AC                    Local  18491    I(4)            4           scalar                    18879,27476,27537                 
 NORD_ALT                   Local  18480    I(4)            4     1     5                         18872,27453,27557                 
 NORD_AM                    Local  18495    I(4)            4           scalar                    18883,27478,27537                 
 NORD_AR                    Local  18494    I(4)            4           scalar                    18882,27480,27537                 
 NORD_ASPD                  Local  18476    I(4)            4     1     5                         18868,27443,27549                 
 NORD_DBLE                  Local  18478    I(4)            4     1     5                         18870,27447,27553                 
 NORD_DUP                   Local  18471    I(4)            4     1     5                         18863,27434,27541                 

Page 609         Source Listing                  ORDCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 NORD_LONE                  Local  18477    I(4)            4     1     5                         18869,27445,27551                 
 NORD_MA                    Local  18493    I(4)            4           scalar                    18881,27482,27537                 
 NORD_MD                    Local  18492    I(4)            4           scalar                    18880,27474,27537                 
 NORD_NEAR                  Local  18475    I(4)            4     1     5                         18867,27441,27547                 
 NORD_STK                   Local  18472    I(4)            4     1     5                         18864,27436,27543                 
 NORD_TIME                  Local  18473    I(4)            4     1     5                         18865,27438,27545                 
 NORD_TURN                  Local  18479    I(4)            4     1     5                         18871,27449,27555                 
 NORD_WIND                  Local  18481    I(4)            4     1     5                         18873,27455,27565                 
 NREP_AC                    Local  18485    I(4)            4           scalar                    18874,27385,27535                 
 NREP_AM                    Local  18489    I(4)            4           scalar                    18878,27387,27535                 
 NREP_AR                    Local  18488    I(4)            4           scalar                    18877,27389,27535                 
 NREP_MA                    Local  18487    I(4)            4           scalar                    18876,27391,27535                 
 NREP_MD                    Local  18486    I(4)            4           scalar                    18875,27383,27535                 
 NTOT_FLT                   Dummy  18369    I(4)            4     1     0        ARG,INOUT        23385                             
 NUMREPS                    Dummy  18363    I(4)            4           scalar   ARG,INOUT        27350,27573                       
 NWIND_REG                  Dummy  18368    I(4)            4     2     0        ARG,INOUT        18886,27424,27519,27520,27522     
 OB_DIR                     Dummy  18365    R(4)            4     1     0        ARG,INOUT        19733,19735,19889,19892,20074,2007
                                                                                                  7,20244,20247,20404,20407,20533,20
                                                                                                  536,20825,20828,20917,20918,20921,
                                                                                                  21054,21086,21132,21213,21292,2138
                                                                                                  4,21441,22204,22275,22332,22441,22
                                                                                                  480,22522,22585,22746,22801,22857,
                                                                                                  22909,23216,23229,23240,23252,2326
                                                                                                  5,26494,26507,26518,26530,26543,27
                                                                                                  410                               
 OB_Q                       Dummy  18365    R(4)            4     1     0        ARG,INOUT        23215,23228,23239,23251,23264,2649
                                                                                                  3,26506,26517,26529,26542,27409   
 OB_SPD                     Dummy  18366    R(4)            4     1     0        ARG,INOUT        19733,19734,19735,19889,19890,1989
                                                                                                  1,20074,20075,20076,20244,20245,20
                                                                                                  246,20404,20405,20406,20533,20534,
                                                                                                  20535,20825,20826,20827,20924,2092
                                                                                                  5,20928,21053,21085,21131,21212,21
                                                                                                  291,21383,21440,22203,22274,22331,
                                                                                                  22440,22479,22521,22584,22745,2280
                                                                                                  0,22856,22908,23217,23230,23241,23
                                                                                                  253,23266,26371,26372,26373,26495,
                                                                                                  26508,26519,26531,26544,27411     
 OB_T                       Dummy  18365    R(4)            4     1     0        ARG,INOUT        20911,20912,20915,23214,23227,2323
                                                                                                  8,23250,23263,26492,26505,26516,26
                                                                                                  528,26541,27408                   
 ORDCHEK_QC                 Subr   18363                                                                                            
 PDIR0                      Local  18720    R(4)            4           scalar                    19711,19713,19723,19735,19798,2183
                                                                                                  6,21873,21938,22020,22063,22132,22
                                                                                                  248,22297,22375,22462,23066,23075,
                                                                                                  23077,23102,23110,23184,23796,2379
                                                                                                  8,23808,23835,25123,25180,25227,25
                                                                                                  274,25279,25301,25306,25381,25412,
                                                                                                  25672,25769,26166,26171,26173,2623
                                                                                                  9,26241,26246,26303,26482         
 PDIRM1                     Local  18718    R(4)            4           scalar                    19867,19869,19879,19892,19955,2310
                                                                                                  4,23111,23113,23184,23898,23900,23
                                                                                                  910,23936,25227,25274,25279,25412,
                                                                                                  25769,26243,26247,26249,26303,2648
                                                                                                  2                                 
 PDIRM2                     Local  18719    R(4)            4           scalar                    19984,23184,23999,24001,24011,2403

Page 610         Source Listing                  ORDCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  7,26482                           
 PDIRP1                     Local  18721    R(4)            4           scalar                    20052,20054,20064,20077,20140,2183
                                                                                                  6,21872,21915,21938,22020,22062,22
                                                                                                  109,22132,22248,22296,22352,22375,
                                                                                                  22462,23025,23033,23035,23037,2306
                                                                                                  7,23074,23103,23110,23185,24101,24
                                                                                                  103,24113,24140,25076,25123,25180,
                                                                                                  25301,25306,25328,25333,25352,2538
                                                                                                  1,25444,25450,25533,25625,25672,26
                                                                                                  140,26144,26149,26151,26167,26170,
                                                                                                  26189,26193,26194,26195,26196,2623
                                                                                                  9,26242,26246,26483               
 PDIRP2                     Local  18722    R(4)            4           scalar                    20222,20224,20234,20247,20301,2183
                                                                                                  7,21872,21915,22021,22062,22109,22
                                                                                                  249,22296,22352,22463,23026,23033,
                                                                                                  23034,23068,23074,23185,24216,2421
                                                                                                  8,24228,24245,25076,25328,25333,25
                                                                                                  352,25524,25530,25533,25625,26140,
                                                                                                  26145,26148,26168,26170,26190,2619
                                                                                                  5,26483                           
 PDIRP3                     Local  18723    R(4)            4           scalar                    20330,23027,23034,23185,24320,2432
                                                                                                  2,24332,24349,26146,26148,26191,26
                                                                                                  193,26483                         
 PDIR_BAD0                  Local  18727    R(4)            4           scalar                    20666,20668,20679,20692,20747,2110
                                                                                                  6,21108,21109,23186,24581,26484   
 PDIR_BADP1                 Local  18728    R(4)            4           scalar                    20801,20803,20814,20828,20886,2110
                                                                                                  8,21109,23186,24593,26484         
 PDIR_TRACK                 Local  18729    R(4)            4           scalar                    20958,23186,24985,24987,24999,2502
                                                                                                  1,25448,25450,25528,25530,26484   
 PDIR_WO0                   Local  18724    R(4)            4           scalar                    20381,20383,20394,20407,20446,2183
                                                                                                  7,22021,22249,22463,23105,23111,23
                                                                                                  113,23184,24395,24397,24408,24418,
                                                                                                  26244,26247,26249,26482           
 PDIR_WOP1                  Local  18725    R(4)            4           scalar                    20510,20512,20523,20536,20575,2187
                                                                                                  3,22063,22297,23069,23075,23077,23
                                                                                                  185,24468,24470,24481,24491,26169,
                                                                                                  26171,26173,26483                 
 PDIR_WOP2                  Local  18726    R(4)            4           scalar                    20606,23028,23035,23037,23185,2454
                                                                                                  1,24543,24554,24564,26147,26149,26
                                                                                                  151,26192,26194,26196,26483       
 PRES                       Dummy  18365    R(4)            4     1     0        ARG,INOUT        23213,23226,23237,23249,23262,2649
                                                                                                  1,26504,26515,26527,26540,27407   
 PSPD0                      Local  18732    R(4)            4           scalar                    19704,19708,19722,19734,19735,1976
                                                                                                  2,19797,23180,23789,23793,23807,23
                                                                                                  834,26478                         
 PSPDM1                     Local  18730    R(4)            4           scalar                    19860,19864,19878,19890,19891,1991
                                                                                                  9,19954,23180,23891,23895,23909,23
                                                                                                  935,26478                         
 PSPDM2                     Local  18731    R(4)            4           scalar                    19983,23180,23992,23996,24010,2403
                                                                                                  6,26478                           
 PSPDP1                     Local  18733    R(4)            4           scalar                    20045,20049,20063,20075,20076,2010
                                                                                                  4,20139,23181,24094,24098,24112,24
                                                                                                  139,26479                         
 PSPDP2                     Local  18734    R(4)            4           scalar                    20215,20219,20233,20245,20246,2027
                                                                                                  4,20300,23181,24209,24213,24227,24

Page 611         Source Listing                  ORDCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  244,26479                         
 PSPDP3                     Local  18735    R(4)            4           scalar                    20329,23181,24313,24317,24331,2434
                                                                                                  8,26479                           
 PSPD_BAD0                  Local  18739    R(4)            4           scalar                    20659,20663,20678,20690,20691,2072
                                                                                                  0,20746,23182,24580,26480         
 PSPD_BADP1                 Local  18740    R(4)            4           scalar                    20794,20798,20813,20826,20827,2085
                                                                                                  7,20885,23182,24592,26480         
 PSPD_TRACK                 Local  18741    R(4)            4           scalar                    20957,23182,24978,24982,24998,2502
                                                                                                  0,26480                           
 PSPD_WO0                   Local  18736    R(4)            4           scalar                    20374,20378,20393,20405,20406,2043
                                                                                                  5,20445,23180,24388,24392,24407,24
                                                                                                  417,26478                         
 PSPD_WOP1                  Local  18737    R(4)            4           scalar                    20503,20507,20522,20534,20535,2056
                                                                                                  4,20574,23181,24461,24465,24480,24
                                                                                                  490,26479                         
 PSPD_WOP2                  Local  18738    R(4)            4           scalar                    20605,23181,24534,24538,24553,2456
                                                                                                  3,26479                           
 SIN                        Func   19690                                scalar                    19690,19696,19846,19852,20031,2003
                                                                                                  7,20201,20207,20360,20366,20489,20
                                                                                                  495,20641,20649,20780,20786,23775,
                                                                                                  23781,23877,23883,23978,23984,2408
                                                                                                  0,24086,24195,24201,24299,24305,24
                                                                                                  374,24380,24447,24453,24520,24526,
                                                                                                  24964,24970                       
 SPD_MAN_THRESH             Local  18743    R(4)            4           scalar                    19468,21403,21408,21833,21834,2184
                                                                                                  1,21846,21847,21848,21869,21870,21
                                                                                                  878,21879,21883,21885,21887,21889,
                                                                                                  21891,21893,21913,21914,21936,2193
                                                                                                  7,22017,22018,22027,22034,22035,22
                                                                                                  036,22059,22060,22070,22071,22077,
                                                                                                  22079,22081,22083,22085,22087,2210
                                                                                                  7,22108,22130,22131               
 SPD_THRESH                 Local  18742    R(4)            4           scalar                    19467,19743,19900,20085,20255,2041
                                                                                                  5,20544,20700,20836,20984,21006,21
                                                                                                  101,21406,22175,22177,22179,22245,
                                                                                                  22246,22252,22256,22257,22258,2229
                                                                                                  3,22294,22301,22302,22305,22307,22
                                                                                                  309,22311,22313,22315,22350,22351,
                                                                                                  22373,22374,22399,22401,22403,2240
                                                                                                  5,22407,22409,22411,22413,22458,22
                                                                                                  459,22461                         
 SQRT                       Func   19734                                scalar                    19734,19890,20075,20245,20405,2053
                                                                                                  4,20690,20826                     
 T_PRCN                     Dummy  18365    R(4)            4     1     0        ARG,INOUT        23214,23227,23238,23250,23263,2649
                                                                                                  2,26505,26516,26528,26541,27408   
 UDIST0                     Local  18674    R(4)            4           scalar                    19687,19692,19702,19706,19717,1979
                                                                                                  2,23772,23777,23787,23791,23802,23
                                                                                                  829                               
 UDISTM1                    Local  18670    R(4)            4           scalar                    19843,19848,19858,19862,19873,1994
                                                                                                  9,23874,23879,23889,23893,23904,23
                                                                                                  930                               
 UDISTM2                    Local  18672    R(4)            4           scalar                    19978,23975,23980,23990,23994,2400
                                                                                                  5,24031                           
 UDISTP1                    Local  18676    R(4)            4           scalar                    20028,20033,20043,20047,20058,2013
                                                                                                  4,24077,24082,24092,24096,24107,24

Page 612         Source Listing                  ORDCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  134                               
 UDISTP2                    Local  18678    R(4)            4           scalar                    20198,20203,20213,20217,20228,2029
                                                                                                  5,24192,24197,24207,24211,24222,24
                                                                                                  239                               
 UDISTP3                    Local  18680    R(4)            4           scalar                    20324,24296,24301,24311,24315,2432
                                                                                                  6,24343                           
 UDIST_BAD0                 Local  18688    R(4)            4           scalar                    20636,20643,20657,20661,20673,2074
                                                                                                  1,24575                           
 UDIST_BADP1                Local  18690    R(4)            4           scalar                    20777,20782,20792,20796,20808,2088
                                                                                                  0,24587                           
 UDIST_TRACK                Local  18692    R(4)            4           scalar                    20952,24961,24966,24976,24980,2499
                                                                                                  3,25015                           
 UDIST_WO0                  Local  18682    R(4)            4           scalar                    20357,20362,20372,20376,20388,2044
                                                                                                  0,24371,24376,24386,24390,24402,24
                                                                                                  412                               
 UDIST_WOP1                 Local  18684    R(4)            4           scalar                    20486,20491,20501,20505,20517,2056
                                                                                                  9,24444,24449,24459,24463,24475,24
                                                                                                  485                               
 UDIST_WOP2                 Local  18686    R(4)            4           scalar                    20600,24517,24522,24532,24536,2454
                                                                                                  8,24558                           
 UPSPD0                     Local  18698    R(4)            4           scalar                    19702,19706,19710,19713,19720,1979
                                                                                                  5,23787,23791,23795,23798,23805,23
                                                                                                  832                               
 UPSPDM1                    Local  18694    R(4)            4           scalar                    19858,19862,19866,19869,19876,1995
                                                                                                  2,23889,23893,23897,23900,23907,23
                                                                                                  933                               
 UPSPDM2                    Local  18696    R(4)            4           scalar                    19981,23990,23994,23998,24001,2400
                                                                                                  8,24034                           
 UPSPDP1                    Local  18700    R(4)            4           scalar                    20043,20047,20051,20054,20061,2013
                                                                                                  7,24092,24096,24100,24103,24110,24
                                                                                                  137                               
 UPSPDP2                    Local  18702    R(4)            4           scalar                    20213,20217,20221,20224,20231,2029
                                                                                                  8,24207,24211,24215,24218,24225,24
                                                                                                  242                               
 UPSPDP3                    Local  18704    R(4)            4           scalar                    20327,24311,24315,24319,24322,2432
                                                                                                  9,24346                           
 UPSPD_BAD0                 Local  18712    R(4)            4           scalar                    20657,20661,20665,20668,20676,2074
                                                                                                  4,24578                           
 UPSPD_BADP1                Local  18714    R(4)            4           scalar                    20792,20796,20800,20803,20811,2088
                                                                                                  3,24590                           
 UPSPD_TRACK                Local  18716    R(4)            4           scalar                    20955,24976,24980,24984,24987,2499
                                                                                                  6,25018                           
 UPSPD_WO0                  Local  18706    R(4)            4           scalar                    20372,20376,20380,20383,20391,2044
                                                                                                  3,24386,24390,24394,24397,24405,24
                                                                                                  415                               
 UPSPD_WOP1                 Local  18708    R(4)            4           scalar                    20501,20505,20509,20512,20520,2057
                                                                                                  2,24459,24463,24467,24470,24478,24
                                                                                                  488                               
 UPSPD_WOP2                 Local  18710    R(4)            4           scalar                    20603,24532,24536,24540,24543,2455
                                                                                                  1,24561                           
 VDIST0                     Local  18675    R(4)            4           scalar                    19693,19698,19703,19707,19718,1979
                                                                                                  3,23778,23783,23788,23792,23803,23
                                                                                                  830                               
 VDISTM1                    Local  18671    R(4)            4           scalar                    19849,19854,19859,19863,19874,1995
                                                                                                  0,23880,23885,23890,23894,23905,23

Page 613         Source Listing                  ORDCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  931                               
 VDISTM2                    Local  18673    R(4)            4           scalar                    19979,23981,23986,23991,23995,2400
                                                                                                  6,24032                           
 VDISTP1                    Local  18677    R(4)            4           scalar                    20034,20039,20044,20048,20059,2013
                                                                                                  5,24083,24088,24093,24097,24108,24
                                                                                                  135                               
 VDISTP2                    Local  18679    R(4)            4           scalar                    20204,20209,20214,20218,20229,2029
                                                                                                  6,24198,24203,24208,24212,24223,24
                                                                                                  240                               
 VDISTP3                    Local  18681    R(4)            4           scalar                    20325,24302,24307,24312,24316,2432
                                                                                                  7,24344                           
 VDIST_BAD0                 Local  18689    R(4)            4           scalar                    20644,20651,20658,20662,20674,2074
                                                                                                  2,24576                           
 VDIST_BADP1                Local  18691    R(4)            4           scalar                    20783,20788,20793,20797,20809,2088
                                                                                                  1,24588                           
 VDIST_TRACK                Local  18693    R(4)            4           scalar                    20953,24967,24972,24977,24981,2499
                                                                                                  4,25016                           
 VDIST_WO0                  Local  18683    R(4)            4           scalar                    20363,20368,20373,20377,20389,2044
                                                                                                  1,24377,24382,24387,24391,24403,24
                                                                                                  413                               
 VDIST_WOP1                 Local  18685    R(4)            4           scalar                    20492,20497,20502,20506,20518,2057
                                                                                                  0,24450,24455,24460,24464,24476,24
                                                                                                  486                               
 VDIST_WOP2                 Local  18687    R(4)            4           scalar                    20601,24523,24528,24533,24537,2454
                                                                                                  9,24559                           
 VPSPD0                     Local  18699    R(4)            4           scalar                    19703,19707,19710,19713,19721,1979
                                                                                                  6,23788,23792,23795,23798,23806,23
                                                                                                  833                               
 VPSPDM1                    Local  18695    R(4)            4           scalar                    19859,19863,19866,19869,19877,1995
                                                                                                  3,23890,23894,23897,23900,23908,23
                                                                                                  934                               
 VPSPDM2                    Local  18697    R(4)            4           scalar                    19982,23991,23995,23998,24001,2400
                                                                                                  9,24035                           
 VPSPDP1                    Local  18701    R(4)            4           scalar                    20044,20048,20051,20054,20062,2013
                                                                                                  8,24093,24097,24100,24103,24111,24
                                                                                                  138                               
 VPSPDP2                    Local  18703    R(4)            4           scalar                    20214,20218,20221,20224,20232,2029
                                                                                                  9,24208,24212,24215,24218,24226,24
                                                                                                  243                               
 VPSPDP3                    Local  18705    R(4)            4           scalar                    20328,24312,24316,24319,24322,2433
                                                                                                  0,24347                           
 VPSPD_BAD0                 Local  18713    R(4)            4           scalar                    20658,20662,20665,20668,20677,2074
                                                                                                  5,24579                           
 VPSPD_BADP1                Local  18715    R(4)            4           scalar                    20793,20797,20800,20803,20812,2088
                                                                                                  4,24591                           
 VPSPD_TRACK                Local  18717    R(4)            4           scalar                    20956,24977,24981,24984,24987,2499
                                                                                                  7,25019                           
 VPSPD_WO0                  Local  18707    R(4)            4           scalar                    20373,20377,20380,20383,20392,2044
                                                                                                  4,24387,24391,24394,24397,24406,24
                                                                                                  416                               
 VPSPD_WOP1                 Local  18709    R(4)            4           scalar                    20502,20506,20509,20512,20521,2057
                                                                                                  3,24460,24464,24467,24470,24479,24
                                                                                                  489                               
 VPSPD_WOP2                 Local  18711    R(4)            4           scalar                    20604,24533,24537,24540,24543,2455
                                                                                                  2,24562                           

Page 614         Source Listing                  ORDCHEK_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 VSPD0                      Local  18794    R(4)            4           scalar                    19774,19776,19778,19806,21145,2114
                                                                                                  6,21147,21311,21314,22392,22393,22
                                                                                                  705,22706,22761,22764,22766,22767,
                                                                                                  22817,22819,22825,22826,23204     
 VSPDM1                     Local  18792    R(4)            4           scalar                    19931,19933,19935,19963,23204     
 VSPDM2                     Local  18793    R(4)            4           scalar                    19992,23204                       
 VSPDP1                     Local  18795    R(4)            4           scalar                    20116,20118,20120,20148,21145,2114
                                                                                                  6,21148,21232,21233,21234,21312,21
                                                                                                  315,21317,21318,22394,22395,22541,
                                                                                                  22542,22544,22594,22626,22657,2275
                                                                                                  4,22810,22865,22918,23205         
 VSPDP2                     Local  18796    R(4)            4           scalar                    20286,20288,20290,20309,21232,2123
                                                                                                  3,21235,21313,21316,22396,22397,22
                                                                                                  705,22707,22761,22763,22769,22770,
                                                                                                  22817,22820,22822,22823,23205     
 VSPDP3                     Local  18797    R(4)            4           scalar                    20338,23205                       
 VSPD_BAD0                  Local  18801    R(4)            4           scalar                    20733,20735,20737,20755,23206     
 VSPD_BADP1                 Local  18802    R(4)            4           scalar                    20870,20872,20874,20894,21110,2111
                                                                                                  1,23206                           
 VSPD_BOUNCE                Local  18805    R(4)            4           scalar                    19470,21147,21148,21234,21235     
 VSPD_THRESH                Local  18804    R(4)            4           scalar                    19469,21111,21317,21318,22393,2239
                                                                                                  5,22397,22542,22544,22706,22707,22
                                                                                                  708,22709,22763,22764,22767,22768,
                                                                                                  22770,22771,22819,22820,22823,2282
                                                                                                  4,22826,22827                     
 VSPD_TRACK                 Local  18803    R(4)            4           scalar                    20966,23206                       
 VSPD_WO0                   Local  18798    R(4)            4           scalar                    20462,20464,20466,22548,22708,2276
                                                                                                  2,22765,22766,22768,22818,22821,22
                                                                                                  825,22827,23204                   
 VSPD_WOP1                  Local  18799    R(4)            4           scalar                    20591,20593,20595,22548,22709,2276
                                                                                                  2,22765,22769,22771,22818,22821,22
                                                                                                  822,22824,23205                   
 VSPD_WOP2                  Local  18800    R(4)            4           scalar                    20615,23205                       
 WDIR_LAST                  Local  18656    R(4)            4           scalar                    20689,20692,21054,21086,21132,2121
                                                                                                  3,21292,21384,21441,22204,22275,22
                                                                                                  332,22441,22480,22522,22585,22746,
                                                                                                  22801,22857,22909                 
 WSPD_LAST                  Local  18655    R(4)            4           scalar                    20689,20690,20691,21053,21085,2113
                                                                                                  1,21212,21291,21383,21440,22203,22
                                                                                                  274,22331,22440,22479,22521,22584,
                                                                                                  22745,22800,22856,22908           
 XIV_D                      Dummy  18366    R(4)            4     1     0        ARG,INOUT        23216,23229,23240,23252,23265,2649
                                                                                                  4,26507,26518,26530,26543,27410   
 XIV_Q                      Dummy  18366    R(4)            4     1     0        ARG,INOUT        23215,23228,23239,23251,23264,2649
                                                                                                  3,26506,26517,26529,26542,27409   
 XIV_S                      Dummy  18366    R(4)            4     1     0        ARG,INOUT        23217,23230,23241,23253,23266,2649
                                                                                                  5,26508,26519,26531,26544,27411   
 XIV_T                      Dummy  18366    R(4)            4     1     0        ARG,INOUT        23214,23227,23238,23250,23263,2649
                                                                                                  2,26505,26516,26528,26541,27408   

Page 615         Source Listing                  ORDCHEK_QC
2017-04-18 11:07                                 acftobs_qc.f

  27578 c
  27579 c ###################################################################
  27580 c                            subroutine suspect_qc
  27581 c ###################################################################
  27582 c
  27583       subroutine suspect_qc(numreps,max_reps,indx,csort,imiss,idt_near
  27584      $,          amiss,c_acftreg,c_acftid,c_qc
  27585      $,          alat,alon,pres,ht_ft,t_prcn,ob_t,ob_q,ob_dir,ob_spd
  27586      $,          xiv_t,xiv_q,xiv_d,xiv_s
  27587      $,          idt,itype,ichk_t,ichk_q,ichk_d,ichk_s
  27588      $,          maxflt,kflight,creg_flt,nobs_flt,ntot_flt
  27589      $,          nrej_flt,iobs_flt,kreg,creg_reg,nobs_reg,nwind_reg
  27590      $,          ntot_reg,kbadtot,io8,io37,l_operational,l_init)
  27591 c
  27592 c Re-examine suspect data points 
  27593 c Also, mark as suspect reports from flights with only one or two reports 
  27594 c remainder of reports from flights with excessive rejects
  27595 c
  27596 c modified by p.m.pauley (4/3/01) to decrease threshold percentage for bad flight
  27597 c                                 rejects from 50% to 35%
  27598 c
  27599       implicit none
  27600 c
  27601 c Declaration statements
  27602 c ----------------------
  27603       integer      max_reps            ! maximum number of reports
  27604 c
  27605       character*11 c_qc(max_reps)      ! internal qc flags
  27606 c
  27607 c     Data arrays
  27608 c     -----------
  27609       integer      numreps             ! actual number of reports
  27610       integer      itype(max_reps)     ! type of aircraft data
  27611       integer      idt(max_reps)       ! time in seconds to analysis time 
  27612       character*8  c_acftreg(max_reps) ! aircraft registration (tail) number
  27613       character*9  c_acftid(max_reps)  ! aircraft flight number
  27614       real*8       alat(max_reps)      ! latitude
  27615      $,            alon(max_reps)      ! longitude
  27616       real         pres(max_reps)      ! pressure
  27617      $,            ht_ft(max_reps)     ! height in feet
  27618       real         t_prcn(max_reps)    ! temperature precision
  27619       real         ob_t(max_reps)      ! temperature
  27620      $,            ob_q(max_reps)      ! specific humidity
  27621      $,            ob_dir(max_reps)    ! wind direction
  27622      $,            ob_spd(max_reps)    ! wind speed
  27623       real         xiv_t(max_reps)     ! temperature innovation (ob - bk)
  27624      $,            xiv_q(max_reps)     ! specific humidity innovation (ob - bk)
  27625      $,            xiv_d(max_reps)     ! wind direction innovation (ob - bk)
  27626      $,            xiv_s(max_reps)     ! wind speed innovation (ob - bk)
  27627       integer      ichk_t(max_reps)    ! NRL QC flag for temperature ob
  27628      $,            ichk_q(max_reps)    ! NRL QC flag for specific humidity ob
  27629      $,            ichk_d(max_reps)    ! NRL QC flag for wind direction ob
  27630      $,            ichk_s(max_reps)    ! NRL QC flag for wind speed ob
  27631       character*25 csort(max_reps)     ! sort variable    
  27632 c
  27633 c     Pointers
  27634 c     --------

Page 616         Source Listing                  SUSPECT_QC
2017-04-18 11:07                                 acftobs_qc.f

  27635       integer      indx(max_reps)      ! pointer index for good reports
  27636 c
  27637 c     Functions
  27638 c     ---------
  27639       character*16 c_insty_ob          ! function to convert integer instrument 
  27640                                        !   type to character instrument type
  27641       integer      insty_ob_fun        ! function to convert character
  27642                                        !   instrument type to integer
  27643 c
  27644 c     Flight statistics
  27645 c     -----------------
  27646       integer      maxflt              ! max number of flights allowed
  27647      $,            kflight             ! number of flights in dataset
  27648       character*8  creg_flt(maxflt)    ! tail number for each flight
  27649       integer      nobs_flt(maxflt)    ! number of reports per flight
  27650      $,            ntot_flt(maxflt)    ! previous value of total number of reports per flight
  27651      $,            nrej_flt(maxflt)    ! number of reports rejected per flight
  27652      $,            iobs_flt(maxflt)    ! index for first report in each flight
  27653 c
  27654       integer      istart              ! index for 1st rep in current flight 
  27655      $,            iistart             ! index from pointer array for istart
  27656      $,            iend                ! index for last rep in current flight
  27657      $,            iiend               ! index from pointer array for iend
  27658 c
  27659 c     Tail number statistics
  27660 c     ----------------------
  27661       integer      kreg                ! actual number of tail#s in dataset
  27662       character*8  creg_reg(maxflt)    ! tail numbers
  27663       integer      nobs_reg(maxflt,5)  ! number of reports per tail# per type
  27664       integer      ntot_reg(maxflt,5)  ! total number of reports rejected per tail#
  27665       integer      nwind_reg(maxflt,5) ! number of reports w. rejected winds
  27666 c
  27667 c     Counters
  27668 c     --------
  27669       integer      nsus_small(5)       ! number of reports from small flights
  27670      $,            nsus_perct(5)       ! number of reports from bad flights
  27671      $,            nsus_time(5)        ! number of reports with bad times
  27672      $,            nsus_lat(5)         ! number of reports with bad latitudes
  27673      $,            nsus_lon(5)         ! number of reports with bad longitudes
  27674      $,            nsus_alt(5)         ! number of reports with bad altitudes
  27675      $,            nsus_wind(5)        ! number of reports with bad windspeeds
  27676      $,            nsus_roll(5)        ! number of reports with bad roll angles
  27677       integer      kbad(5)             ! counter for number of bad reports
  27678      $,            kbadtot             ! counter for total number of bad reports
  27679 ccccdak      integer      nrep_Ac             ! number of acars reports considered
  27680       integer      nrep_Ac             ! number of tamdar reports considered
  27681      $,            nrep_Md             ! number of mdcrs reports considered
  27682      $,            nrep_Ma             ! number of manual airep reports considered
  27683      $,            nrep_Ar             ! number of airep reports considered
  27684      $,            nrep_Am             ! number of amdar reports considered
  27685 ccccdak      integer      nsus_Ac             ! number of acars reports rejected
  27686       integer      nsus_Ac             ! number of tamdar reports rejected
  27687      $,            nsus_Md             ! number of mdcrs reports rejected
  27688      $,            nsus_Ma             ! number of manual airep reports rejected
  27689      $,            nsus_Ar             ! number of airep reports rejected
  27690      $,            nsus_Am             ! number of amdar reports rejected
  27691 c

Page 617         Source Listing                  SUSPECT_QC
2017-04-18 11:07                                 acftobs_qc.f

  27692 c     Instrument types
  27693 c     ----------------
  27694 ccccdak      integer      i_acars             ! instrument type for acars
  27695       integer      i_acars             ! instrument type for tamdar
  27696 ccccdak     $,            i_acars_lvl         ! instrument type for acars--level flt
  27697      $,            i_acars_lvl         ! instrument type for tamdar--level flt
  27698 ccccdak     $,            i_acars_asc         ! instrument type for acars--ascent
  27699      $,            i_acars_asc         ! instrument type for tamdar--ascent
  27700 ccccdak     $,            i_acars_des         ! instrument type for acars--descent
  27701      $,            i_acars_des         ! instrument type for tamdar--descent
  27702      $,            i_mdcrs             ! instrument type for mdcrs
  27703      $,            i_mdcrs_lvl         ! instrument type for mdcrs--level flt
  27704      $,            i_mdcrs_asc         ! instrument type for mdcrs--ascent
  27705      $,            i_mdcrs_des         ! instrument type for mdcrs--descent
  27706      $,            i_man_airep         ! instrument type for manual aireps
  27707      $,            i_man_Yairep        ! instrument type for manual aireps (YRXX)
  27708      $,            i_airep             ! instrument type for airep
  27709      $,            i_airep_lvl         ! instrument type for airep--level flt
  27710      $,            i_airep_asc         ! instrument type for airep--ascent
  27711      $,            i_airep_des         ! instrument type for airep--descent
  27712      $,            i_amdar             ! instrument type for amdar
  27713      $,            i_amdar_lvl         ! instrument type for amdar--level flt
  27714      $,            i_amdar_asc         ! instrument type for amdar--ascent
  27715      $,            i_amdar_des         ! instrument type for amdar--descent
  27716      $,            ktype               !
  27717 c
  27718 c     Other variables
  27719 c     ---------------
  27720       integer      io8                 ! i/o unit number for log file
  27721       integer      io37                ! i/o unit number for suspect data check rejects
  27722 c
  27723       real         perct_flt           ! percent of rejected reports for this flight
  27724      $,            perct_reg           ! percent of rejected reports for this aircraft
  27725      $,            spdm1               ! speed in iim1 report
  27726      $,            spdp1               ! speed in iip1 report
  27727      $,            amiss               ! real missing value flag
  27728 c
  27729       integer      imiss               ! integer missing value
  27730       integer      iob                 ! do loop index 
  27731      $,            ii                  ! index pointing to current report
  27732      $,            iim1                ! index pointing to previous report
  27733      $,            iip1                ! index pointing to following report
  27734       integer      knt                 ! counter used to define iim1 index
  27735      $,            knt0                ! counter used to define iip1 index
  27736 c
  27737       integer      kk,mm               ! do loop index
  27738      $,            ntot                ! sum over data types of ntot_reg
  27739      $,            nobs                ! sum over data types of nobs_reg
  27740      $,            idt_dif0            ! time difference (current - previous report)
  27741      $,            idt_difp1           ! time difference (current - following report)
  27742       integer      idt_near            ! time difference between "near" neighbors
  27743 c
  27744       logical      l_print             ! switch for printing
  27745      $,            l_init              ! if true, initialize counters
  27746      $,            l_operational       ! true if operational mode used
  27747 c
  27748 c # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

Page 618         Source Listing                  SUSPECT_QC
2017-04-18 11:07                                 acftobs_qc.f

  27749 c
  27750 c Initialize aircraft data types
  27751 c ------------------------------
  27752       i_acars      = insty_ob_fun('acars')
  27753       i_acars_lvl  = insty_ob_fun('acars_lvl') 
  27754       i_acars_asc  = insty_ob_fun('acars_asc') 
  27755       i_acars_des  = insty_ob_fun('acars_des') 
  27756       i_mdcrs      = insty_ob_fun('mdcrs')
  27757       i_mdcrs_lvl  = insty_ob_fun('mdcrs_lvl') 
  27758       i_mdcrs_asc  = insty_ob_fun('mdcrs_asc') 
  27759       i_mdcrs_des  = insty_ob_fun('mdcrs_des')
  27760       i_man_airep  = insty_ob_fun('man-airep') 
  27761       i_man_Yairep = insty_ob_fun('man-Yairep') 
  27762       i_airep      = insty_ob_fun('airep')
  27763       i_airep_lvl  = insty_ob_fun('airep_lvl')
  27764       i_airep_asc  = insty_ob_fun('airep_asc')
  27765       i_airep_des  = insty_ob_fun('airep_des')
  27766       i_amdar      = insty_ob_fun('amdar')
  27767       i_amdar_lvl  = insty_ob_fun('amdar_lvl')
  27768       i_amdar_asc  = insty_ob_fun('amdar_asc')
  27769       i_amdar_des  = insty_ob_fun('amdar_des')
  27770 c
  27771 c Initialize counters
  27772 c -------------------
  27773       if(l_init) then
  27774         nsus_small = 0
  27775         nsus_perct = 0
  27776         nsus_time = 0
  27777         nsus_lat = 0
  27778         nsus_lon = 0
  27779         nsus_alt = 0
  27780         nsus_wind = 0
  27781         nsus_roll = 0
  27782         nrep_Ac = 0
  27783         nrep_Md = 0
  27784         nrep_Ma = 0
  27785         nrep_Ar = 0
  27786         nrep_Am = 0
  27787         nsus_Ac = 0
  27788         nsus_Md = 0
  27789         nsus_Ma = 0
  27790         nsus_Ar = 0
  27791         nsus_Am = 0
  27792       endif
  27793 c
  27794       nwind_reg = 0
  27795 c
  27796 c Begin loop over flights
  27797 c -----------------------
  27798       do kk = 1,kflight
  27799 c
  27800 c       Initialize variables
  27801 c       --------------------
  27802         istart = iobs_flt(kk)
  27803         iistart = indx(istart)
  27804         iend = iobs_flt(kk) + nobs_flt(kk) - 1
  27805         iiend = indx(iend)

Page 619         Source Listing                  SUSPECT_QC
2017-04-18 11:07                                 acftobs_qc.f

  27806 c
  27807 c Mark as suspect reports from flights with only one or two reports
  27808 c -----------------------------------------------------------------
  27809         if(nobs_flt(kk).eq.1.and.
  27810      $     itype(iistart).ne.i_man_airep.and.
  27811      $     itype(iistart).ne.i_man_Yairep) then
  27812           c_qc(iistart)(1:1) = 's'
  27813 c
  27814         elseif(nobs_flt(kk).eq.2.and.
  27815      $     itype(iistart).ne.i_man_airep.and.
  27816      $     itype(iistart).ne.i_man_Yairep) then
  27817           c_qc(iistart)(1:1) = 's'
  27818           c_qc(iiend)(1:1) = 's'
  27819 c
  27820 c Do further checks on flights with 3 or more reports
  27821 c ---------------------------------------------------
  27822         elseif(nobs_flt(kk).ge.3) then
  27823 c
  27824 c         Loop over flights
  27825 c         -----------------
  27826           do iob=istart,iend
  27827             ii = indx(iob)
  27828             l_print = .false.
  27829 c
  27830 c Check suspect time, lat, lon, height, or winds
  27831 c ---------------------------------------------- 
  27832             if(c_qc(ii)(2:2).eq.'S'.or.
  27833      $         c_qc(ii)(3:3).eq.'S'.or.
  27834      $         c_qc(ii)(4:4).eq.'S'.or.
  27835      $         c_qc(ii)(5:5).eq.'S'.or.
  27836      $         c_qc(ii)(8:8).eq.'S'.or.
  27837      $         ichk_s(ii).eq.-10) then
  27838 c
  27839 c             Compute ii-1 index
  27840 c             ------------------
  27841               knt = iob - 1
  27842  10           if(knt.ge.istart) then
  27843                 iim1 = indx(knt)
  27844                 if(c_qc(iim1)(1:1).eq.'s'.or.
  27845      $             c_qc(iim1)(2:2).eq.'B'.or.
  27846      $             c_qc(iim1)(3:3).eq.'B'.or.
  27847      $             c_qc(iim1)(4:4).eq.'B'.or.
  27848      $             c_qc(iim1)(5:5).eq.'B') then
  27849                   knt = knt - 1
  27850                   goto 10
  27851                 endif
  27852               else
  27853                 iim1 = 0
  27854               endif
  27855 c
  27856 c             Compute ii+1 index
  27857 c             ------------------
  27858               knt0 = iob + 1
  27859  20           if(knt0.le.iend) then
  27860                 iip1 = indx(knt0)
  27861                 if(c_qc(iip1)(1:1).eq.'s'.or.
  27862      $             c_qc(iip1)(2:2).eq.'B'.or.

Page 620         Source Listing                  SUSPECT_QC
2017-04-18 11:07                                 acftobs_qc.f

  27863      $             c_qc(iip1)(3:3).eq.'B'.or.
  27864      $             c_qc(iip1)(4:4).eq.'B'.or.
  27865      $             c_qc(iip1)(5:5).eq.'B') then
  27866                   knt0 = knt0 + 1
  27867                   goto 20
  27868                 endif
  27869               else
  27870                 iip1 = 0
  27871               endif
  27872 c
  27873 c             Compute time differences
  27874 c             ------------------------
  27875               if(iim1.ne.0) then
  27876                 idt_dif0 = abs(idt(ii) - idt(iim1))
  27877                 spdm1 = ob_spd(iim1)
  27878               else
  27879                 idt_dif0 = imiss
  27880                 spdm1 = amiss
  27881               endif
  27882 c
  27883               if(iip1.ne.0) then
  27884                 idt_difp1 = abs(idt(iip1) - idt(ii))
  27885                 spdp1 = ob_spd(iip1)
  27886               else
  27887                 idt_difp1 = imiss
  27888                 spdp1 = amiss
  27889               endif
  27890 c
  27891 c             Check suspect winds
  27892 c             -------------------
  27893               if(c_qc(ii)(8:8).eq.'S'.and.ob_spd(ii).eq.0.0) then
  27894 c
  27895                 if((idt_dif0 .le.idt_near*2.and.idt_dif0 .ne.imiss.and.
  27896      $              idt_difp1.le.idt_near*2.and.idt_difp1.ne.imiss.and.
  27897      $              (spdm1.ne.0.0.or.spdp1.ne.0.0).and.
  27898      $              ((spdm1.le.5.0.and.spdm1.ne.amiss.and.
  27899      $                spdp1.le.5.0.and.spdp1.ne.amiss).or.
  27900      $               ht_ft(ii).le.5000.)).or.
  27901      $             (idt_dif0 .le.idt_near*2.and.idt_dif0.ne.imiss.and.
  27902      $              idt_difp1.gt.idt_near*2.and.
  27903      $              spdm1.ne.0.0.and.spdm1.ne.amiss.and.
  27904      $              (spdm1.le.5.0.or.ht_ft(ii).le.5000.)).or.
  27905      $             (idt_dif0 .gt.idt_near*2.and.
  27906      $              idt_difp1.le.idt_near*2.and.idt_difp1.ne.imiss.and.
  27907      $              spdp1.ne.0.0.and.spdp1.ne.amiss.and.
  27908      $              (spdp1.le.5.0.or.ht_ft(ii).le.5000.))) then
  27909 c
  27910                   c_qc(ii)(8:8) = '.'
  27911 c
  27912                   if(ht_ft(ii).gt.10000.0) then
  27913                     l_print = .true.
  27914                   else
  27915                     l_print = .false.
  27916                   endif
  27917                   if(l_print) then
  27918                     write(io8,*) 
  27919                     write(io8,*) 'Suspect winds are ok at ii = ',ii

Page 621         Source Listing                  SUSPECT_QC
2017-04-18 11:07                                 acftobs_qc.f

  27920                   endif
  27921 c
  27922                 else
  27923                   c_qc(ii)(8:8) = 'B'
  27924 c
  27925                   l_print = .false.
  27926                   if(l_print) then
  27927                     write(io8,*) 
  27928                     write(io8,*) 'Suspect winds are NOT ok at ii = ',ii
  27929                   endif
  27930                 endif
  27931 c
  27932 c             Reject remaining suspect times, latitudes, longitudes, altitudes
  27933 c             (Previously checked in ordchek and ok'ed values reset)
  27934 c             ------------------------------------------------------
  27935               elseif(c_qc(ii)(2:2).eq.'S') then
  27936 c
  27937                 c_qc(ii)(2:2) = 'B'
  27938                 nrej_flt(kk) = nrej_flt(kk) + 1
  27939 c
  27940                 l_print = .true.
  27941                 if(l_print) then
  27942                   write(io8,*) 
  27943                   write(io8,*) 'Suspect time is NOT ok at ii =',ii
  27944                 endif
  27945 c
  27946               elseif(c_qc(ii)(3:3).eq.'S') then
  27947 c
  27948                 c_qc(ii)(3:3) = 'B'
  27949                 nrej_flt(kk) = nrej_flt(kk) + 1
  27950 c
  27951                 l_print = .true.
  27952                 if(l_print) then
  27953                   write(io8,*) 
  27954                   write(io8,*) 'Suspect latitude is NOT ok at ii = ',ii
  27955                 endif
  27956 c
  27957               elseif(c_qc(ii)(4:4).eq.'S') then
  27958 c
  27959                 c_qc(ii)(4:4) = 'B'
  27960                 nrej_flt(kk) = nrej_flt(kk) + 1
  27961 c
  27962                 l_print = .true.
  27963                 if(l_print) then
  27964                   write(io8,*) 
  27965                   write(io8,*) 'Suspect longitude is NOT ok at ii = ',ii
  27966                 endif
  27967 c
  27968               elseif(c_qc(ii)(5:5).eq.'S') then
  27969 c
  27970                 c_qc(ii)(5:5) = 'B'
  27971                 nrej_flt(kk) = nrej_flt(kk) + 1
  27972 c
  27973                 l_print = .true.
  27974                 if(l_print) then
  27975                   write(io8,*) 
  27976                   write(io8,*) 'Suspect altitude is NOT ok at ii = ',ii

Page 622         Source Listing                  SUSPECT_QC
2017-04-18 11:07                                 acftobs_qc.f

  27977                 endif
  27978               endif
  27979 c
  27980 c             Check if roll angle qc flag is set
  27981 c             ----------------------------------
  27982               if(ichk_s(ii).eq.-10) then
  27983                 if(c_acftreg(ii)(4:5).eq.'WU'.or.
  27984      $             c_acftreg(ii)(4:5).eq.'GU'.or.
  27985      $             c_acftreg(ii)(4:5).eq.'KJ'.or.
  27986      $             c_acftreg(ii)(4:5).eq.'0J'.or.
  27987      $             c_acftreg(ii)(4:5).eq.'YC'.or.
  27988      $             c_acftreg(ii)(4:5).eq.'IC'.or.
  27989      $             c_acftreg(ii)(4:5).eq.'EI'.or.
  27990      $             c_acftreg(ii)(4:5).eq.'UI'.or.
  27991      $             c_acftreg(ii)(1:2).eq.'AU'.or.
  27992      $             c_acftreg(ii)(1:2).eq.'EU') then
  27993                   l_print = .false.
  27994                 else
  27995                   l_print = .true.
  27996                 endif
  27997 c
  27998                 c_qc(ii)(7:8) = 'ss'
  27999 c
  28000                 if(l_print) then
  28001                   write(io8,*)
  28002                   write(io8,*) 'Bad roll angle QC flag on unlisted acft'
  28003                 endif
  28004               endif
  28005             endif
  28006 c
  28007 c           Print set of reports if print flag is set
  28008 c           -----------------------------------------
  28009             if(l_print) then
  28010               if(iim1.ne.0) then
  28011                 write(io8,8002) kk,iim1
  28012      x,            c_insty_ob(itype(iim1))
  28013      x,            c_acftreg(iim1),c_acftid(iim1)
  28014      x,            idt(iim1),alat(iim1),alon(iim1)
  28015      x,            pres(iim1),ht_ft(iim1)
  28016      x,            t_prcn(iim1),ob_t(iim1),xiv_t(iim1),ichk_t(iim1)
  28017      x,            ob_q(iim1),xiv_q(iim1),ichk_q(iim1)
  28018      x,            ob_dir(iim1),xiv_d(iim1),ichk_d(iim1)
  28019      x,            ob_spd(iim1),xiv_s(iim1),ichk_s(iim1)
  28020      x,            c_qc(iim1)
  28021               endif
  28022 c
  28023               write(io8,8002) kk,ii,c_insty_ob(itype(ii))
  28024      x,            c_acftreg(ii),c_acftid(ii)
  28025      x,            idt(ii),alat(ii),alon(ii)
  28026      x,            pres(ii),ht_ft(ii)
  28027      x,            t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
  28028      x,            ob_q(ii),xiv_q(ii),ichk_q(ii)
  28029      x,            ob_dir(ii),xiv_d(ii),ichk_d(ii)
  28030      x,            ob_spd(ii),xiv_s(ii),ichk_s(ii)
  28031      x,            c_qc(ii)
  28032 c
  28033               if(iip1.ne.0) then

Page 623         Source Listing                  SUSPECT_QC
2017-04-18 11:07                                 acftobs_qc.f

  28034                 write(io8,8002) kk,iip1
  28035      x,            c_insty_ob(itype(iip1))
  28036      x,            c_acftreg(iip1),c_acftid(iip1)
  28037      x,            idt(iip1),alat(iip1),alon(iip1)
  28038      x,            pres(iip1),ht_ft(iip1)
  28039      x,            t_prcn(iip1),ob_t(iip1),xiv_t(iip1),ichk_t(iip1)
  28040      x,            ob_q(iip1),xiv_q(iip1),ichk_q(iip1)
  28041      x,            ob_dir(iip1),xiv_d(iip1),ichk_d(iip1)
  28042      x,            ob_spd(iip1),xiv_s(iip1),ichk_s(iip1)
  28043      x,            c_qc(iip1)
  28044               endif
  28045  8002         format(i4,1x,i6,1x,a8,1x,a8,1x,a9,1x,i7,1x,2f11.5,1x
  28046      x,            f8.1,1x,f7.0
  28047      x,            1x,f5.2,4(2(1x,f8.2),1x,i5),1x,'!',a11,'!')
  28048             endif
  28049           enddo
  28050 c
  28051 c         Check if excessive rejects are present for this flight
  28052 c         ------------------------------------------------------
  28053           if(ntot_flt(kk).eq.0) then
  28054             write(io8,*)
  28055             write(io8,*) 'ntot_flt(kk) = 0 for kk =',kk,' ',creg_flt(kk)
  28056             perct_flt = -9999.
  28057           else
  28058             perct_flt = 100.0 * float(nrej_flt(kk))/float(ntot_flt(kk))
  28059           endif
  28060 c
  28061 c         Check if excessive rejects are present for this aircraft
  28062 c         --------------------------------------------------------
  28063           if(nrej_flt(kk).ne.ntot_flt(kk)) then
  28064             mm = 1
  28065             perct_reg = 0.0
  28066             do while(mm.le.kreg)
  28067               if(creg_flt(kk).eq.creg_reg(mm)) then 
  28068                 ntot = ntot_reg(mm,1) + ntot_reg(mm,2)
  28069      $               + ntot_reg(mm,3) + ntot_reg(mm,4) + ntot_reg(mm,5)
  28070                 nobs = nobs_reg(mm,1) + nobs_reg(mm,2)
  28071      $               + nobs_reg(mm,3) + nobs_reg(mm,4) + nobs_reg(mm,5)
  28072                 if(nobs.eq.0) then
  28073                   write(io8,*)
  28074                   write(io8,*) 'nobs_reg(mm) = 0 for mm = ',mm
  28075                   perct_flt = -9999.
  28076                 else
  28077                   perct_reg = 100.0 * float(ntot) / float(nobs)
  28078                 endif
  28079                 mm = kreg + 1
  28080               endif
  28081               mm = mm + 1
  28082             enddo
  28083 c
  28084 c           Check percentage of reports from flight and percentage of 
  28085 c           reports from non-manAIREP tail numbers
  28086 c           ---------------------------------------------------------
  28087             if((perct_flt.ne.-9999..and.perct_flt.gt.35.0).or.
  28088      $         (creg_flt(kk)(5:8).ne.'    '.and.
  28089      $          (perct_reg.ne.-9999..and.perct_reg.gt.35.0))) then
  28090 c

Page 624         Source Listing                  SUSPECT_QC
2017-04-18 11:07                                 acftobs_qc.f

  28091               l_print = .true.
  28092               if(l_print) then
  28093                 write(io8,*)
  28094                 write(io8,*) 'Excessive rejects found for flight ',kk
  28095                 write(io8,*) '% flt = ',perct_flt,' nrej = ',
  28096      $            nrej_flt(kk),' nobs = ',ntot_flt(kk)
  28097                 write(io8,*) '% reg = ',perct_reg,' nrej = ',ntot,
  28098      $            ' nobs = ',nobs
  28099               endif
  28100 c
  28101 c             Loop over flights
  28102 c             -----------------
  28103               do iob=istart,iend
  28104                 ii = indx(iob)
  28105                 if(c_qc(ii)(1:1).ne.'s'.and.
  28106      $             c_qc(ii)(2:2).ne.'B'.and.
  28107      $             c_qc(ii)(3:3).ne.'B'.and.
  28108      $             c_qc(ii)(4:4).ne.'B'.and.
  28109      $             c_qc(ii)(5:5).ne.'B') then
  28110 c
  28111                   c_qc(ii)(1:1) = 'S'
  28112                   write(io8,8002) kk,ii,c_insty_ob(itype(ii))
  28113      x,              c_acftreg(ii),c_acftid(ii)
  28114      x,              idt(ii),alat(ii),alon(ii)
  28115      x,              pres(ii),ht_ft(ii)
  28116      x,              t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
  28117      x,              ob_q(ii),xiv_q(ii),ichk_q(ii)
  28118      x,              ob_dir(ii),xiv_d(ii),ichk_d(ii)
  28119      x,              ob_spd(ii),xiv_s(ii),ichk_s(ii)
  28120      x,              c_qc(ii)
  28121 c
  28122                 endif
  28123               enddo
  28124             endif
  28125           endif
  28126         endif
  28127 c
  28128 c     End loop over flights
  28129 c     ---------------------
  28130       enddo
  28131 c
  28132 c     Write out bad reports
  28133 c     ---------------------
  28134       if(.not.l_operational) then
  28135         write(io37,*)
  28136         write(io37,*) 'Suspect data check'
  28137         write(io37,*) '------------------'
  28138         write(io37,3001)
  28139  3001   format(' index  type    tail num   flight     time       lat'
  28140      x,      '        lon       pres  height '
  28141      x,      't-prcn   temp     innov  ichk'
  28142      x,      ' spec hum    innov  ichk'
  28143      x,      '   ob_dir    innov  ichk'
  28144      x,      '   ob_spd    innov  ichk'
  28145      x,      '   qc flag')
  28146       endif
  28147 c

Page 625         Source Listing                  SUSPECT_QC
2017-04-18 11:07                                 acftobs_qc.f

  28148       kbad = 0
  28149 c
  28150       do iob = 1,numreps
  28151         ii   = indx(iob)
  28152 c
  28153         if(itype(ii).eq.i_mdcrs.or.
  28154      $     itype(ii).eq.i_mdcrs_lvl.or.
  28155      $     itype(ii).eq.i_mdcrs_asc.or.
  28156      $     itype(ii).eq.i_mdcrs_des) then
  28157           ktype = 1
  28158 c
  28159         elseif(itype(ii).eq.i_acars.or.
  28160      $         itype(ii).eq.i_acars_lvl.or.
  28161      $         itype(ii).eq.i_acars_asc.or.
  28162      $         itype(ii).eq.i_acars_des) then
  28163           ktype = 2
  28164 c
  28165         elseif(itype(ii).eq.i_amdar.or. 
  28166      $         itype(ii).eq.i_amdar_lvl.or.
  28167      $         itype(ii).eq.i_amdar_asc.or.
  28168      $         itype(ii).eq.i_amdar_des) then
  28169           ktype = 3
  28170 c
  28171         elseif(itype(ii).eq.i_airep.or.
  28172      $         itype(ii).eq.i_airep_lvl.or.
  28173      $         itype(ii).eq.i_airep_asc.or.
  28174      $         itype(ii).eq.i_airep_des) then
  28175           ktype = 4
  28176 c
  28177         elseif(itype(ii).eq.i_man_airep.or.
  28178      $         itype(ii).eq.i_man_Yairep) then
  28179           ktype = 5
  28180         endif
  28181 c
  28182         if(ktype.eq.1) then
  28183           nrep_Md = nrep_Md + 1
  28184         elseif(ktype.eq.2) then
  28185           nrep_Ac = nrep_Ac + 1
  28186         elseif(ktype.eq.3) then
  28187           nrep_Am = nrep_Am + 1
  28188         elseif(ktype.eq.4) then
  28189           nrep_Ar = nrep_Ar + 1
  28190         elseif(ktype.eq.5) then
  28191           nrep_Ma = nrep_Ma + 1
  28192         endif
  28193 c
  28194         if(c_qc(ii)(1:1).eq.'s'.or.
  28195      $     c_qc(ii)(1:1).eq.'S'.or.
  28196      $     c_qc(ii)(2:2).eq.'B'.or.
  28197      $     c_qc(ii)(3:3).eq.'B'.or.
  28198      $     c_qc(ii)(4:4).eq.'B'.or.
  28199      $     c_qc(ii)(5:5).eq.'B'.or.
  28200      $     c_qc(ii)(8:8).eq.'B'.or.
  28201      $     c_qc(ii)(7:8).eq.'ss') then
  28202 c
  28203           if(.not.l_operational) then
  28204             write(io37,3002) ii,c_insty_ob(itype(ii))

Page 626         Source Listing                  SUSPECT_QC
2017-04-18 11:07                                 acftobs_qc.f

  28205      x,        c_acftreg(ii),c_acftid(ii)
  28206      x,        idt(ii),alat(ii),alon(ii)
  28207      x,        pres(ii),ht_ft(ii)
  28208      x,        t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
  28209      x,        ob_q(ii),xiv_q(ii),ichk_q(ii)
  28210      x,        ob_dir(ii),xiv_d(ii),ichk_d(ii)
  28211      x,        ob_spd(ii),xiv_s(ii),ichk_s(ii)
  28212      x,        c_qc(ii)
  28213  3002       format(i6,1x,a8,1x,a8,1x,a9,1x,i7,1x,2f11.5,1x,f8.1,1x,f7.0
  28214      x,          1x,f5.2,4(2(1x,f8.2),1x,i5),1x,'!',a11,'!')
  28215           endif
  28216 c
  28217 c         Count number of rejected temps/winds by tail number
  28218 c         ---------------------------------------------------
  28219           if(c_qc(ii)(8:8).eq.'B') then
  28220             mm = 1
  28221             do while(mm.le.kreg)
  28222               if(c_acftreg(ii).eq.creg_reg(mm)) then 
  28223                 if(ktype.gt.0.and.ktype.le.5)
  28224      $            nwind_reg(mm,ktype) = nwind_reg(mm,ktype) + 1
  28225                 mm = kreg + 1
  28226               endif
  28227               mm = mm + 1
  28228             enddo
  28229           endif
  28230 c
  28231 c         Count by category
  28232 c         -----------------
  28233           if(c_qc(ii)(1:1).eq.'s') then
  28234             nsus_small(ktype) = nsus_small(ktype) + 1
  28235           elseif(c_qc(ii)(1:1).eq.'S') then
  28236             nsus_perct(ktype) = nsus_perct(ktype) + 1
  28237           elseif(c_qc(ii)(2:2).eq.'B') then
  28238             nsus_time(ktype) = nsus_time(ktype) + 1
  28239           elseif(c_qc(ii)(3:3).eq.'B') then
  28240             nsus_lat(ktype) = nsus_lat(ktype) + 1
  28241           elseif(c_qc(ii)(4:4).eq.'B') then
  28242             nsus_lon(ktype) = nsus_lon(ktype) + 1
  28243           elseif(c_qc(ii)(5:5).eq.'B') then
  28244             nsus_alt(ktype) = nsus_alt(ktype) + 1
  28245           elseif(c_qc(ii)(8:8).eq.'B') then
  28246             nsus_wind(ktype) = nsus_wind(ktype) + 1
  28247           elseif(c_qc(ii)(7:8).eq.'ss') then
  28248             nsus_roll(ktype) = nsus_roll(ktype) + 1
  28249           endif
  28250 c
  28251 c         Reject reports with inconsistent heights and positions
  28252 c         ------------------------------------------------------
  28253           if(c_qc(ii)(1:1).eq.'s'.or.
  28254      $       c_qc(ii)(1:1).eq.'S'.or.
  28255      $       c_qc(ii)(2:2).eq.'B'.or.
  28256      $       c_qc(ii)(3:3).eq.'B'.or.
  28257      $       c_qc(ii)(4:4).eq.'B'.or.
  28258      $       c_qc(ii)(5:5).eq.'B') then
  28259 c
  28260             csort(ii)(1:5) = 'badob'
  28261 c

Page 627         Source Listing                  SUSPECT_QC
2017-04-18 11:07                                 acftobs_qc.f

  28262             kbad(ktype) = kbad(ktype) + 1
  28263 c
  28264             if(ktype.eq.1) then
  28265               nsus_Md = nsus_Md + 1
  28266             elseif(ktype.eq.2) then
  28267               nsus_Ac = nsus_Ac + 1
  28268             elseif(ktype.eq.3) then
  28269               nsus_Am = nsus_Am + 1
  28270             elseif(ktype.eq.4) then
  28271               nsus_Ar = nsus_Ar + 1
  28272             elseif(ktype.eq.5) then
  28273               nsus_Ma = nsus_Ma + 1
  28274             endif
  28275           endif
  28276 c
  28277         endif
  28278       enddo
  28279 c
  28280       if(.not.l_operational) then
  28281         write(io37,*)
  28282         write(io37,*) '  Number of MDCRS    reps rej by sus = ',kbad(1)
  28283 ccccdak        write(io37,*) '  Number of ACARS    reps rej by sus = ',kbad(2)
  28284         write(io37,*) '  Number of TAMDAR   reps rej by sus = ',kbad(2)
  28285         write(io37,*) '  Number of AMDAR    reps rej by sus = ',kbad(3)
  28286         write(io37,*) '  Number of AIREP    reps rej by sus = ',kbad(4)
  28287         write(io37,*) '  Number of manAIREP reps rej by sus = ',kbad(5)
  28288       endif
  28289 c
  28290       write(io8,*)
  28291       write(io8,*) '  Reports with suspect data errors--rejected'
  28292       write(io8,*) '  ------------------------------------------'
  28293       write(io8,*) '  Number of MDCRS    reps rej by sus = ',kbad(1)
  28294 ccccdak      write(io8,*) '  Number of ACARS    reps rej by sus = ',kbad(2)
  28295       write(io8,*) '  Number of TAMDAR   reps rej by sus = ',kbad(2)
  28296       write(io8,*) '  Number of AMDAR    reps rej by sus = ',kbad(3)
  28297       write(io8,*) '  Number of AIREP    reps rej by sus = ',kbad(4)
  28298       write(io8,*) '  Number of manAIREP reps rej by sus = ',kbad(5)
  28299 c
  28300 c     Output tail number counts
  28301 c     -------------------------
  28302       write(io8,*) 
  28303       write(io8,*) '  Tail numbers for reps with rejected zero winds'
  28304 ccccdak      write(io8,*) '  Tail Num  MDCRS  ACARS  AMDAR  AIREP  MAN  '
  28305       write(io8,*) '  Tail Num  MDCRS  TAMDAR AMDAR  AIREP  MAN  '
  28306       write(io8,*) '  ----------------------------------------------'
  28307 c
  28308       do mm=1,kreg
  28309         if( nwind_reg(mm,1)+nwind_reg(mm,2)+nwind_reg(mm,3)
  28310      $     +nwind_reg(mm,4)+nwind_reg(mm,5).gt.0) then
  28311           write(io8,'(2x,a8,5(1x,i6))') 
  28312      $      creg_reg(mm),(nwind_reg(mm,kk),kk=1,5)
  28313         endif
  28314       enddo
  28315 c
  28316       write(io8,*)
  28317       write(io8,*) 'Suspect data check counts'
  28318       write(io8,*) '-------------------------'

Page 628         Source Listing                  SUSPECT_QC
2017-04-18 11:07                                 acftobs_qc.f

  28319       write(io8,'(1x,a55)')
  28320 ccccdak     $ 'Type of check     MDCRS   ACARS   AMDAR   AIREP     man'
  28321      $ 'Type of check     MDCRS  TAMDAR   AMDAR   AIREP     man'
  28322       write(io8,'(1x,a55)')
  28323      $ '--------------- ------- ------- ------- ------- -------'
  28324       write(io8,'(''Num considered '',5(1x,i7))')
  28325      $            nrep_Md,nrep_Ac,nrep_Am,nrep_Ar,nrep_Ma
  28326       write(io8,'(''Total rejected '',5(1x,i7))')
  28327      $            nsus_Md,nsus_Ac,nsus_Am,nsus_Ar,nsus_Ma
  28328       write(io8,'(1x,a55)')
  28329      $ '--------------- ------- ------- ------- ------- -------'
  28330       write(io8,'(''Small flights  '',5(1x,i7))')
  28331      $          (nsus_small(ii),ii=1,5)
  28332       write(io8,'(''Bad flights    '',5(1x,i7))')
  28333      $          (nsus_perct(ii),ii=1,5)
  28334       write(io8,'(''Bad times      '',5(1x,i7))')
  28335      $          (nsus_time(ii),ii=1,5)
  28336       write(io8,'(''Bad lats       '',5(1x,i7))')
  28337      $          (nsus_lat(ii),ii=1,5)
  28338       write(io8,'(''Bad lons       '',5(1x,i7))')
  28339      $          (nsus_lon(ii),ii=1,5)
  28340       write(io8,'(''Bad alts       '',5(1x,i7))')
  28341      $          (nsus_alt(ii),ii=1,5)
  28342       write(io8,'(1x,a55)')
  28343      $ '--------------- ------- ------- ------- ------- -------'
  28344       write(io8,'(''Bad winds      '',5(1x,i7))')
  28345      $          (nsus_wind(ii),ii=1,5)
  28346       write(io8,'(''Bad roll angle '',5(1x,i7))')
  28347      $          (nsus_roll(ii),ii=1,5)
  28348       write(io8,'(1x,a55)')
  28349      $ '--------------- ------- ------- ------- ------- -------'
  28350 c
  28351       kbadtot = kbad(1) + kbad(2) + kbad(3)
  28352      $        + kbad(4) + kbad(5) 
  28353 c
  28354       write(io8,*)
  28355       write(io8,*) numreps,' good reports processed'
  28356       write(io8,*) kbadtot,' reports failed qc in suspect data check'
  28357 c
  28358       return
  28359       end

Page 629         Source Listing                  SUSPECT_QC
2017-04-18 11:07 Entry Points                    acftobs_qc.f



ENTRY POINTS

  Name                   
                         
 suspect_qc_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 10                         Label  27842                                                          27850                             
 20                         Label  27859                                                          27867                             
 3001                       Label  28139                                                          28138                             
 3002                       Label  28213                                                          28204                             
 8002                       Label  28045                                                          28011,28023,28034,28112           
 ABS                        Func   27876                                scalar                    27876,27884                       
 ALAT                       Dummy  27585    R(8)            8     1     0        ARG,INOUT        28014,28025,28037,28114,28206     
 ALON                       Dummy  27585    R(8)            8     1     0        ARG,INOUT        28014,28025,28037,28114,28206     
 AMISS                      Dummy  27584    R(4)            4           scalar   ARG,INOUT        27880,27888,27898,27899,27903,2790
                                                                                                  7                                 
 CREG_FLT                   Dummy  27588    CHAR            8     1     0        ARG,INOUT        28055,28067,28088                 
 CREG_REG                   Dummy  27589    CHAR            8     1     0        ARG,INOUT        28067,28222,28312                 
 CSORT                      Dummy  27583    CHAR            25    1     0        ARG,INOUT        28260                             
 C_ACFTID                   Dummy  27584    CHAR            9     1     0        ARG,INOUT        28013,28024,28036,28113,28205     
 C_ACFTREG                  Dummy  27584    CHAR            8     1     0        ARG,INOUT        27983,27984,27985,27986,27987,2798
                                                                                                  8,27989,27990,27991,27992,28013,28
                                                                                                  024,28036,28113,28205,28222       
 C_INSTY_OB                 Func   27639    CHAR            16          scalar                    28012,28023,28035,28112,28204     
 C_QC                       Dummy  27584    CHAR            11    1     0        ARG,INOUT        27812,27817,27818,27832,27833,2783
                                                                                                  4,27835,27836,27844,27845,27846,27
                                                                                                  847,27848,27861,27862,27863,27864,
                                                                                                  27865,27893,27910,27923,27935,2793
                                                                                                  7,27946,27948,27957,27959,27968,27
                                                                                                  970,27998,28020,28031,28043,28105,
                                                                                                  28106,28107,28108,28109,28111,2812
                                                                                                  0,28194,28195,28196,28197,28198,28
                                                                                                  199,28200,28201,28212,28219,28233,
                                                                                                  28235,28237,28239,28241,28243,2824
                                                                                                  5,28247,28253,28254,28255,28256,28
                                                                                                  257,28258                         
 FLOAT                      Func   28058                                scalar                    28058,28077                       
 HT_FT                      Dummy  27585    R(4)            4     1     0        ARG,INOUT        27900,27904,27908,27912,28015,2802
                                                                                                  6,28038,28115,28207               
 ICHK_D                     Dummy  27587    I(4)            4     1     0        ARG,INOUT        28018,28029,28041,28118,28210     
 ICHK_Q                     Dummy  27587    I(4)            4     1     0        ARG,INOUT        28017,28028,28040,28117,28209     
 ICHK_S                     Dummy  27587    I(4)            4     1     0        ARG,INOUT        27837,27982,28019,28030,28042,2811
                                                                                                  9,28211                           
 ICHK_T                     Dummy  27587    I(4)            4     1     0        ARG,INOUT        28016,28027,28039,28116,28208     
 IDT                        Dummy  27587    I(4)            4     1     0        ARG,INOUT        27876,27884,28014,28025,28037,2811
                                                                                                  4,28206                           
 IDT_DIF0                   Local  27740    I(4)            4           scalar                    27876,27879,27895,27901,27905     
 IDT_DIFP1                  Local  27741    I(4)            4           scalar                    27884,27887,27896,27902,27906     
 IDT_NEAR                   Dummy  27583    I(4)            4           scalar   ARG,INOUT        27895,27896,27901,27902,27905,2790
                                                                                                  6                                 

Page 630         Source Listing                  SUSPECT_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 IEND                       Local  27656    I(4)            4           scalar                    27804,27805,27826,27859,28103     
 II                         Local  27731    I(4)            4           scalar                    27827,27832,27833,27834,27835,2783
                                                                                                  6,27837,27876,27884,27893,27900,27
                                                                                                  904,27908,27910,27912,27919,27923,
                                                                                                  27928,27935,27937,27943,27946,2794
                                                                                                  8,27954,27957,27959,27965,27968,27
                                                                                                  970,27976,27982,27983,27984,27985,
                                                                                                  27986,27987,27988,27989,27990,2799
                                                                                                  1,27992,27998,28023,28024,28025,28
                                                                                                  026,28027,28028,28029,28030,28031,
                                                                                                  28104,28105,28106,28107,28108,2810
                                                                                                  9,28111,28112,28113,28114,28115,28
                                                                                                  116,28117,28118,28119,28120,28151,
                                                                                                  28153,28154,28155,28156,28159,2816
                                                                                                  0,28161,28162,28165,28166,28167,28
                                                                                                  168,28171,28172,28173,28174,28177,
                                                                                                  28178,28194,28195,28196,28197,2819
                                                                                                  8,28199,28200,28201,28204,28205,28
                                                                                                  206,28207,28208,28209,28210,28211,
                                                                                                  28212,28219,28222,28233,28235,2823
                                                                                                  7,28239,28241,28243,28245,28247,28
                                                                                                  253,28254,28255,28256,28257,28258,
                                                                                                  28260,28331,28333,28335,28337,2833
                                                                                                  9,28341,28345,28347               
 IIEND                      Local  27657    I(4)            4           scalar                    27805,27818                       
 IIM1                       Local  27732    I(4)            4           scalar                    27843,27844,27845,27846,27847,2784
                                                                                                  8,27853,27875,27876,27877,28010,28
                                                                                                  011,28012,28013,28014,28015,28016,
                                                                                                  28017,28018,28019,28020           
 IIP1                       Local  27733    I(4)            4           scalar                    27860,27861,27862,27863,27864,2786
                                                                                                  5,27870,27883,27884,27885,28033,28
                                                                                                  034,28035,28036,28037,28038,28039,
                                                                                                  28040,28041,28042,28043           
 IISTART                    Local  27655    I(4)            4           scalar                    27803,27810,27811,27812,27815,2781
                                                                                                  6,27817                           
 IMISS                      Dummy  27583    I(4)            4           scalar   ARG,INOUT        27879,27887,27895,27896,27901,2790
                                                                                                  6                                 
 INDX                       Dummy  27583    I(4)            4     1     0        ARG,INOUT        27803,27805,27827,27843,27860,2810
                                                                                                  4,28151                           
 INSTY_OB_FUN               Func   27641    I(4)            4           scalar                    27752,27753,27754,27755,27756,2775
                                                                                                  7,27758,27759,27760,27761,27762,27
                                                                                                  763,27764,27765,27766,27767,27768,
                                                                                                  27769                             
 IO37                       Dummy  27590    I(4)            4           scalar   ARG,INOUT        28135,28136,28137,28138,28204,2828
                                                                                                  1,28282,28284,28285,28286,28287   
 IO8                        Dummy  27590    I(4)            4           scalar   ARG,INOUT        27918,27919,27927,27928,27942,2794
                                                                                                  3,27953,27954,27964,27965,27975,27
                                                                                                  976,28001,28002,28011,28023,28034,
                                                                                                  28054,28055,28073,28074,28093,2809
                                                                                                  4,28095,28097,28112,28290,28291,28
                                                                                                  292,28293,28295,28296,28297,28298,
                                                                                                  28302,28303,28305,28306,28311,2831
                                                                                                  6,28317,28318,28319,28322,28324,28
                                                                                                  326,28328,28330,28332,28334,28336,
                                                                                                  28338,28340,28342,28344,28346,2834

Page 631         Source Listing                  SUSPECT_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  8,28354,28355,28356               
 IOB                        Local  27730    I(4)            4           scalar                    27826,27827,27841,27858,28103,2810
                                                                                                  4,28150,28151                     
 IOBS_FLT                   Dummy  27589    I(4)            4     1     0        ARG,INOUT        27802,27804                       
 ISTART                     Local  27654    I(4)            4           scalar                    27802,27803,27826,27842,28103     
 ITYPE                      Dummy  27587    I(4)            4     1     0        ARG,INOUT        27810,27811,27815,27816,28012,2802
                                                                                                  3,28035,28112,28153,28154,28155,28
                                                                                                  156,28159,28160,28161,28162,28165,
                                                                                                  28166,28167,28168,28171,28172,2817
                                                                                                  3,28174,28177,28178,28204         
 I_ACARS                    Local  27695    I(4)            4           scalar                    27752,28159                       
 I_ACARS_ASC                Local  27699    I(4)            4           scalar                    27754,28161                       
 I_ACARS_DES                Local  27701    I(4)            4           scalar                    27755,28162                       
 I_ACARS_LVL                Local  27697    I(4)            4           scalar                    27753,28160                       
 I_AIREP                    Local  27708    I(4)            4           scalar                    27762,28171                       
 I_AIREP_ASC                Local  27710    I(4)            4           scalar                    27764,28173                       
 I_AIREP_DES                Local  27711    I(4)            4           scalar                    27765,28174                       
 I_AIREP_LVL                Local  27709    I(4)            4           scalar                    27763,28172                       
 I_AMDAR                    Local  27712    I(4)            4           scalar                    27766,28165                       
 I_AMDAR_ASC                Local  27714    I(4)            4           scalar                    27768,28167                       
 I_AMDAR_DES                Local  27715    I(4)            4           scalar                    27769,28168                       
 I_AMDAR_LVL                Local  27713    I(4)            4           scalar                    27767,28166                       
 I_MAN_AIREP                Local  27706    I(4)            4           scalar                    27760,27810,27815,28177           
 I_MAN_YAIREP               Local  27707    I(4)            4           scalar                    27761,27811,27816,28178           
 I_MDCRS                    Local  27702    I(4)            4           scalar                    27756,28153                       
 I_MDCRS_ASC                Local  27704    I(4)            4           scalar                    27758,28155                       
 I_MDCRS_DES                Local  27705    I(4)            4           scalar                    27759,28156                       
 I_MDCRS_LVL                Local  27703    I(4)            4           scalar                    27757,28154                       
 KBAD                       Local  27677    I(4)            4     1     5                         28148,28262,28282,28284,28285,2828
                                                                                                  6,28287,28293,28295,28296,28297,28
                                                                                                  298,28351,28352                   
 KBADTOT                    Dummy  27590    I(4)            4           scalar   ARG,INOUT        28351,28356                       
 KFLIGHT                    Dummy  27588    I(4)            4           scalar   ARG,INOUT        27798                             
 KK                         Local  27737    I(4)            4           scalar                    27798,27802,27804,27809,27814,2782
                                                                                                  2,27938,27949,27960,27971,28011,28
                                                                                                  023,28034,28053,28055,28058,28063,
                                                                                                  28067,28088,28094,28096,28112,2831
                                                                                                  2                                 
 KNT                        Local  27734    I(4)            4           scalar                    27841,27842,27843,27849           
 KNT0                       Local  27735    I(4)            4           scalar                    27858,27859,27860,27866           
 KREG                       Dummy  27589    I(4)            4           scalar   ARG,INOUT        28066,28079,28221,28225,28308     
 KTYPE                      Local  27716    I(4)            4           scalar                    28157,28163,28169,28175,28179,2818
                                                                                                  2,28184,28186,28188,28190,28223,28
                                                                                                  224,28234,28236,28238,28240,28242,
                                                                                                  28244,28246,28248,28262,28264,2826
                                                                                                  6,28268,28270,28272               
 L_INIT                     Dummy  27590    L(4)            4           scalar   ARG,INOUT        27773                             
 L_OPERATIONAL              Dummy  27590    L(4)            4           scalar   ARG,INOUT        28134,28203,28280                 
 L_PRINT                    Local  27744    L(4)            4           scalar                    27828,27913,27915,27917,27925,2792
                                                                                                  6,27940,27941,27951,27952,27962,27
                                                                                                  963,27973,27974,27993,27995,28000,
                                                                                                  28009,28091,28092                 
 MAXFLT                     Dummy  27588    I(4)            4           scalar   ARG,INOUT        27648,27649,27650,27651,27652,2766
                                                                                                  2,27663,27664,27665               
 MAX_REPS                   Dummy  27583    I(4)            4           scalar   ARG,INOUT        27605,27610,27611,27612,27613,2761

Page 632         Source Listing                  SUSPECT_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  4,27615,27616,27617,27618,27619,27
                                                                                                  620,27621,27622,27623,27624,27625,
                                                                                                  27626,27627,27628,27629,27630,2763
                                                                                                  1,27635                           
 MM                         Local  27737    I(4)            4           scalar                    28064,28066,28067,28068,28069,2807
                                                                                                  0,28071,28074,28079,28081,28220,28
                                                                                                  221,28222,28224,28225,28227,28308,
                                                                                                  28309,28310,28312                 
 NOBS                       Local  27739    I(4)            4           scalar                    28070,28072,28077,28098           
 NOBS_FLT                   Dummy  27588    I(4)            4     1     0        ARG,INOUT        27804,27809,27814,27822           
 NOBS_REG                   Dummy  27589    I(4)            4     2     0        ARG,INOUT        28070,28071                       
 NREJ_FLT                   Dummy  27589    I(4)            4     1     0        ARG,INOUT        27938,27949,27960,27971,28058,2806
                                                                                                  3,28096                           
 NREP_AC                    Local  27680    I(4)            4           scalar                    27782,28185,28325                 
 NREP_AM                    Local  27684    I(4)            4           scalar                    27786,28187,28325                 
 NREP_AR                    Local  27683    I(4)            4           scalar                    27785,28189,28325                 
 NREP_MA                    Local  27682    I(4)            4           scalar                    27784,28191,28325                 
 NREP_MD                    Local  27681    I(4)            4           scalar                    27783,28183,28325                 
 NSUS_AC                    Local  27686    I(4)            4           scalar                    27787,28267,28327                 
 NSUS_ALT                   Local  27674    I(4)            4     1     5                         27779,28244,28341                 
 NSUS_AM                    Local  27690    I(4)            4           scalar                    27791,28269,28327                 
 NSUS_AR                    Local  27689    I(4)            4           scalar                    27790,28271,28327                 
 NSUS_LAT                   Local  27672    I(4)            4     1     5                         27777,28240,28337                 
 NSUS_LON                   Local  27673    I(4)            4     1     5                         27778,28242,28339                 
 NSUS_MA                    Local  27688    I(4)            4           scalar                    27789,28273,28327                 
 NSUS_MD                    Local  27687    I(4)            4           scalar                    27788,28265,28327                 
 NSUS_PERCT                 Local  27670    I(4)            4     1     5                         27775,28236,28333                 
 NSUS_ROLL                  Local  27676    I(4)            4     1     5                         27781,28248,28347                 
 NSUS_SMALL                 Local  27669    I(4)            4     1     5                         27774,28234,28331                 
 NSUS_TIME                  Local  27671    I(4)            4     1     5                         27776,28238,28335                 
 NSUS_WIND                  Local  27675    I(4)            4     1     5                         27780,28246,28345                 
 NTOT                       Local  27738    I(4)            4           scalar                    28068,28077,28097                 
 NTOT_FLT                   Dummy  27588    I(4)            4     1     0        ARG,INOUT        28053,28058,28063,28096           
 NTOT_REG                   Dummy  27590    I(4)            4     2     0        ARG,INOUT        28068,28069                       
 NUMREPS                    Dummy  27583    I(4)            4           scalar   ARG,INOUT        28150,28355                       
 NWIND_REG                  Dummy  27589    I(4)            4     2     0        ARG,INOUT        27794,28224,28309,28310,28312     
 OB_DIR                     Dummy  27585    R(4)            4     1     0        ARG,INOUT        28018,28029,28041,28118,28210     
 OB_Q                       Dummy  27585    R(4)            4     1     0        ARG,INOUT        28017,28028,28040,28117,28209     
 OB_SPD                     Dummy  27585    R(4)            4     1     0        ARG,INOUT        27877,27885,27893,28019,28030,2804
                                                                                                  2,28119,28211                     
 OB_T                       Dummy  27585    R(4)            4     1     0        ARG,INOUT        28016,28027,28039,28116,28208     
 PERCT_FLT                  Local  27723    R(4)            4           scalar                    28056,28058,28075,28087,28095     
 PERCT_REG                  Local  27724    R(4)            4           scalar                    28065,28077,28089,28097           
 PRES                       Dummy  27585    R(4)            4     1     0        ARG,INOUT        28015,28026,28038,28115,28207     
 SPDM1                      Local  27725    R(4)            4           scalar                    27877,27880,27897,27898,27903,2790
                                                                                                  4                                 
 SPDP1                      Local  27726    R(4)            4           scalar                    27885,27888,27897,27899,27907,2790
                                                                                                  8                                 
 SUSPECT_QC                 Subr   27583                                                                                            
 T_PRCN                     Dummy  27585    R(4)            4     1     0        ARG,INOUT        28016,28027,28039,28116,28208     
 XIV_D                      Dummy  27586    R(4)            4     1     0        ARG,INOUT        28018,28029,28041,28118,28210     
 XIV_Q                      Dummy  27586    R(4)            4     1     0        ARG,INOUT        28017,28028,28040,28117,28209     
 XIV_S                      Dummy  27586    R(4)            4     1     0        ARG,INOUT        28019,28030,28042,28119,28211     
 XIV_T                      Dummy  27586    R(4)            4     1     0        ARG,INOUT        28016,28027,28039,28116,28208     

Page 633         Source Listing                  SUSPECT_QC
2017-04-18 11:07                                 acftobs_qc.f

  28360 c
  28361 c ###################################################################
  28362 c                            subroutine rejlist_qc
  28363 c ###################################################################
  28364 c
  28365       subroutine rejlist_qc(numreps,max_reps,indx,csort
  28366      $,          c_acftreg,c_acftid,c_qc
  28367      $,          alat,alon,pres,ht_ft,t_prcn,ob_t,ob_q,ob_dir,ob_spd
  28368      $,          xiv_t,xiv_q,xiv_d,xiv_s
  28369      $,          idt,itype,ichk_t,ichk_q,ichk_d,ichk_s
  28370      $,          nchk_t,nchk_q,nchk_d,nchk_s
  28371      $,          maxflt,kreg,creg_reg,nwind_reg,ntemp_reg
  28372      $,          kbadtot,io8,io38,l_operational,l_init,l_ncep)
  28373 c
  28374 c Reject temperatures and winds from aircraft on reject list
  28375 c
  28376 c Just reject manAIREP aircraft for now.  Suspect airlines determined
  28377 c by Colin Parrett (UKMet) are listed in a data statement.
  28378 c
  28379 c Written by P.M. Pauley (6/5/02)
  28380 c
  28381       implicit none
  28382 c
  28383 c Parameter statements
  28384 c --------------------
  28385       integer   nwind                  ! number of aircraft on wind reject list
  28386       integer   ntemp                  ! number of aircraft on temperature reject list
  28387       parameter(nwind = 12,ntemp = 12)
  28388 c
  28389 c Declaration statements
  28390 c ----------------------
  28391       integer      max_reps            ! maximum number of reports
  28392 c
  28393       character*11 c_qc(max_reps)      ! internal qc flags
  28394 c
  28395 c     Data arrays
  28396 c     -----------
  28397       integer      numreps             ! actual number of reports
  28398       integer      itype(max_reps)     ! type of aircraft data
  28399       integer      idt(max_reps)       ! time in seconds to analysis time 
  28400       character*8  c_acftreg(max_reps) ! aircraft registration (tail) number
  28401       character*9  c_acftid(max_reps)  ! aircraft flight number
  28402       real*8       alat(max_reps)      ! latitude
  28403      $,            alon(max_reps)      ! longitude
  28404       real         pres(max_reps)      ! pressure
  28405      $,            ht_ft(max_reps)     ! height in feet
  28406       real         t_prcn(max_reps)    ! temperature precision
  28407       real         ob_t(max_reps)      ! temperature
  28408      $,            ob_q(max_reps)      ! specific humidity
  28409      $,            ob_dir(max_reps)    ! wind direction
  28410      $,            ob_spd(max_reps)    ! wind speed
  28411       real         xiv_t(max_reps)     ! temperature innovation (ob - bk)
  28412      $,            xiv_q(max_reps)     ! specific humidity innovation (ob - bk)
  28413      $,            xiv_d(max_reps)     ! wind direction innovation (ob - bk)
  28414      $,            xiv_s(max_reps)     ! wind speed innovation (ob - bk)
  28415       integer      ichk_t(max_reps)    ! NRL QC flag for temperature ob
  28416      $,            ichk_q(max_reps)    ! NRL QC flag for specific humidity ob

Page 634         Source Listing                  REJLIST_QC
2017-04-18 11:07                                 acftobs_qc.f

  28417      $,            ichk_d(max_reps)    ! NRL QC flag for wind direction ob
  28418      $,            ichk_s(max_reps)    ! NRL QC flag for wind speed ob
  28419       integer      nchk_t(max_reps)    ! NCEP QC flag for temperature ob
  28420      $,            nchk_q(max_reps)    ! NCEP QC flag for specific humidity ob
  28421      $,            nchk_d(max_reps)    ! NCEP QC flag for wind direction ob
  28422      $,            nchk_s(max_reps)    ! NCEP QC flag for wind speed ob
  28423       character*25 csort(max_reps)     ! sort variable    
  28424 c
  28425 c     Pointers
  28426 c     --------
  28427       integer      indx(max_reps)      ! pointer index for good reports
  28428 c
  28429 c     Functions
  28430 c     ---------
  28431       character*16 c_insty_ob          ! function to convert integer instrument 
  28432                                        !   type to character instrument type
  28433       integer      insty_ob_fun        ! function to convert character
  28434                                        !   instrument type to integer
  28435 c
  28436 c     Tail number statistics
  28437 c     ----------------------
  28438       integer      maxflt              ! max number of flights allowed
  28439       integer      kreg                ! actual number of tail#s in dataset
  28440       character*8  creg_reg(maxflt)    ! tail numbers
  28441       integer      nwind_reg(maxflt,5) ! number of reports w. rejected winds
  28442       integer      ntemp_reg(maxflt,5) ! number of reports w. rejected temperatures
  28443 c
  28444 c     Counters
  28445 c     --------
  28446       integer      kbad(5)             ! counter for number of bad reports
  28447      $,            kbadtot             ! counter for total number of bad reports
  28448 ccccdak      integer      nrep_Ac             ! number of acars reports considered
  28449       integer      nrep_Ac             ! number of tamdar reports considered
  28450      $,            nrep_Md             ! number of mdcrs reports considered
  28451      $,            nrep_Ma             ! number of manual airep reports considered
  28452      $,            nrep_Ar             ! number of airep reports considered
  28453      $,            nrep_Am             ! number of amdar reports considered
  28454 ccccdak      integer      nlst_Ac             ! number of acars reports rejected
  28455       integer      nlst_Ac             ! number of tamdar reports rejected
  28456      $,            nlst_Md             ! number of mdcrs reports rejected
  28457      $,            nlst_Ma             ! number of manual airep reports rejected
  28458      $,            nlst_Ar             ! number of airep reports rejected
  28459      $,            nlst_Am             ! number of amdar reports rejected
  28460 c
  28461       integer      nlst_wind(5)        ! number of winds rejected by aircraft type
  28462      $,            nlst_temp(5)        ! number of temperatures rejected by aircraft type
  28463      $,            nlst_both(5)        ! number of both winds/temps by aircraft type
  28464 c
  28465 c     Instrument types
  28466 c     ----------------
  28467 ccccdak      integer      i_acars             ! instrument type for acars
  28468       integer      i_acars             ! instrument type for tamdar
  28469 ccccdak     $,            i_acars_lvl         ! instrument type for acars--level flt
  28470      $,            i_acars_lvl         ! instrument type for tamdar--level flt
  28471 ccccdak     $,            i_acars_asc         ! instrument type for acars--ascent
  28472      $,            i_acars_asc         ! instrument type for tamdar--ascent
  28473 ccccdak     $,            i_acars_des         ! instrument type for acars--descent

Page 635         Source Listing                  REJLIST_QC
2017-04-18 11:07                                 acftobs_qc.f

  28474      $,            i_acars_des         ! instrument type for tamdar--descent
  28475      $,            i_mdcrs             ! instrument type for mdcrs
  28476      $,            i_mdcrs_lvl         ! instrument type for mdcrs--level flt
  28477      $,            i_mdcrs_asc         ! instrument type for mdcrs--ascent
  28478      $,            i_mdcrs_des         ! instrument type for mdcrs--descent
  28479      $,            i_man_airep         ! instrument type for manual aireps
  28480      $,            i_man_Yairep        ! instrument type for manual aireps (YRXX)
  28481      $,            i_airep             ! instrument type for airep
  28482      $,            i_airep_lvl         ! instrument type for airep--level flt
  28483      $,            i_airep_asc         ! instrument type for airep--ascent
  28484      $,            i_airep_des         ! instrument type for airep--descent
  28485      $,            i_amdar             ! instrument type for amdar
  28486      $,            i_amdar_lvl         ! instrument type for amdar--level flt
  28487      $,            i_amdar_asc         ! instrument type for amdar--ascent
  28488      $,            i_amdar_des         ! instrument type for amdar--descent
  28489      $,            ktype               ! index for instrument type
  28490 c
  28491 c     Other variables
  28492 c     ---------------
  28493       integer      io8                 ! i/o unit number for log file
  28494       integer      io38                ! i/o unit number for reject list rejects
  28495 c
  28496       integer      kwind               ! index for wind list
  28497      $,            ktemp               ! index for temperature list
  28498 c
  28499       integer      iob                 ! index for observations
  28500      $,            ii                  ! index for sorted observations
  28501      $,            mm                  ! index for tail numbers
  28502      $,            kk                  ! index for flight (not used in this way - dak - ??)
  28503 c
  28504       logical      l_print             ! switch for printing
  28505      $,            l_init              ! if true, initialize counters
  28506      $,            l_operational       ! true if operational mode used
  28507      $,            l_ncep              ! run QC w/ NCEP preferences if true
  28508 c
  28509 c     Reject list
  28510 c     -----------
  28511       character*8  c_reg_wind(nwind)   ! reject list for wind data
  28512      $,            c_reg_temp(ntemp)   ! reject list for temperature data
  28513 c
  28514 c Data statements
  28515 c Last tail number in each list must be blank
  28516 c -------------------------------------------
  28517 
  28518 c Per Pat Pauley on 9/27/05, these reject lists are very old and should
  28519 c be set to all blanks.
  28520 cc      data c_reg_wind/'CCA     ','EIA     ','GCO     ','RCH     '
  28521 cc     $,               'VRG     ','WA      ','        ','        '
  28522 cc     $,               '        ','        ','        ','        '/
  28523       data c_reg_wind/'        ','        ','        ','        '
  28524      $,               '        ','        ','        ','        '
  28525      $,               '        ','        ','        ','        '/
  28526 c
  28527 cc      data c_reg_temp/'RCH     ','RZO     ','VRG     ','AR      '
  28528 cc     $,               'WA      ','        ','        ','        '
  28529 cc     $,               '        ','        ','        ','        '/
  28530       data c_reg_temp/'        ','        ','        ','        '

Page 636         Source Listing                  REJLIST_QC
2017-04-18 11:07                                 acftobs_qc.f

  28531      $,               '        ','        ','        ','        '
  28532      $,               '        ','        ','        ','        '/
  28533 c
  28534 c # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  28535 c
  28536 c Initialize aircraft data types
  28537 c ------------------------------
  28538       i_acars      = insty_ob_fun('acars')
  28539       i_acars_lvl  = insty_ob_fun('acars_lvl') 
  28540       i_acars_asc  = insty_ob_fun('acars_asc') 
  28541       i_acars_des  = insty_ob_fun('acars_des') 
  28542       i_mdcrs      = insty_ob_fun('mdcrs')
  28543       i_mdcrs_lvl  = insty_ob_fun('mdcrs_lvl') 
  28544       i_mdcrs_asc  = insty_ob_fun('mdcrs_asc') 
  28545       i_mdcrs_des  = insty_ob_fun('mdcrs_des')
  28546       i_man_airep  = insty_ob_fun('man-airep') 
  28547       i_man_Yairep = insty_ob_fun('man-Yairep') 
  28548       i_airep      = insty_ob_fun('airep')
  28549       i_airep_lvl  = insty_ob_fun('airep_lvl')
  28550       i_airep_asc  = insty_ob_fun('airep_asc')
  28551       i_airep_des  = insty_ob_fun('airep_des')
  28552       i_amdar      = insty_ob_fun('amdar')
  28553       i_amdar_lvl  = insty_ob_fun('amdar_lvl')
  28554       i_amdar_asc  = insty_ob_fun('amdar_asc')
  28555       i_amdar_des  = insty_ob_fun('amdar_des')
  28556 c
  28557 c Initialize counters
  28558 c -------------------
  28559       if(l_init) then
  28560         nrep_Ac = 0
  28561         nrep_Md = 0
  28562         nrep_Ma = 0
  28563         nrep_Ar = 0
  28564         nrep_Am = 0
  28565 c
  28566         nlst_Ac = 0
  28567         nlst_Md = 0
  28568         nlst_Ma = 0
  28569         nlst_Ar = 0
  28570         nlst_Am = 0
  28571       endif
  28572 c
  28573       nwind_reg = 0
  28574       ntemp_reg = 0
  28575 c DAK: kk was never initialized - set it to -99 (used in several prints below)
  28576       kk = -99
  28577 
  28578 c
  28579 c Begin loop over obs
  28580 c -------------------
  28581       do iob=1,numreps
  28582         ii = indx(iob)
  28583 c
  28584 c       Check wind reject list
  28585 c       ----------------------
  28586         if(.not.l_ncep) then
  28587 

Page 637         Source Listing                  REJLIST_QC
2017-04-18 11:07                                 acftobs_qc.f

  28588         kwind = 1
  28589         do while(c_reg_wind(kwind)(1:1).ne.' ')
  28590 c
  28591 c         Tail number found on list
  28592 c         -------------------------
  28593           if(c_acftreg(ii)(1:8).eq.c_reg_wind(kwind)(1:8)) then
  28594 c
  28595             c_qc(ii)(10:10) = 'W'
  28596 c
  28597             l_print = .true.
  28598             if(l_print) then
  28599               write(io8,*)
  28600               write(io8,*) 'Aircraft found on NRL wind reject list'
  28601               write(io8,8002) kk,ii,c_insty_ob(itype(ii))
  28602      x,            c_acftreg(ii),c_acftid(ii)
  28603      x,            idt(ii),alat(ii),alon(ii)
  28604      x,            pres(ii),ht_ft(ii)
  28605      x,            t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
  28606      x,            ob_q(ii),xiv_q(ii),ichk_q(ii)
  28607      x,            ob_dir(ii),xiv_d(ii),ichk_d(ii)
  28608      x,            ob_spd(ii),xiv_s(ii),ichk_s(ii)
  28609      x,            c_qc(ii)
  28610  8002         format(i4,1x,i6,1x,a8,1x,a8,1x,a9,1x,i7,1x,2f11.5,1x
  28611      x,            f8.1,1x,f7.0
  28612      x,            1x,f5.2,4(2(1x,f8.2),1x,i5),1x,'!',a11,'!')
  28613             endif
  28614 c
  28615             kwind = nwind
  28616 c
  28617           else
  28618             kwind = kwind + 1
  28619           endif
  28620         enddo
  28621         else
  28622 
  28623 c For NCEP runs, if NCEP/PREPBUFR QM of 14 found on wind dir or spd, this report's wind is on
  28624 c  NCEP's SDMEDIT reject list which is read prior to PREPBUFR processing - set byte 10 to
  28625 c  'W" so that this report's wind also fails NRL QC reject data check
  28626 c -------------------------------------------------------------------------------------------
  28627           if(nchk_d(ii).eq.14.or.nchk_s(ii).eq.14) then
  28628             c_qc(ii)(10:10) = 'W'
  28629             l_print = .true.
  28630             if(l_print) then
  28631               write(io8,*)
  28632               write(io8,*) 'Aircraft found on NCEP wind reject list'
  28633               write(io8,8002) kk,ii,c_insty_ob(itype(ii))
  28634      x,            c_acftreg(ii),c_acftid(ii)
  28635      x,            idt(ii),alat(ii),alon(ii)
  28636      x,            pres(ii),ht_ft(ii)
  28637      x,            t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
  28638      x,            ob_q(ii),xiv_q(ii),ichk_q(ii)
  28639      x,            ob_dir(ii),xiv_d(ii),ichk_d(ii)
  28640      x,            ob_spd(ii),xiv_s(ii),ichk_s(ii)
  28641      x,            c_qc(ii)
  28642             endif
  28643           endif
  28644         endif

Page 638         Source Listing                  REJLIST_QC
2017-04-18 11:07                                 acftobs_qc.f

  28645 c
  28646 c       Check temperature reject list
  28647 c       -----------------------------
  28648         if(.not.l_ncep) then
  28649 
  28650         ktemp = 1
  28651         do while(c_reg_temp(ktemp)(1:1).ne.' ')
  28652 c
  28653 c         Tail number found on list
  28654 c         -------------------------
  28655           if(c_acftreg(ii)(1:8).eq.c_reg_temp(ktemp)(1:8)) then
  28656 c
  28657             if(c_qc(ii)(10:10).eq.'W') then
  28658               c_qc(ii)(10:10) = 'O'
  28659             else
  28660               c_qc(ii)(10:10) = 'T'
  28661             endif
  28662 c
  28663             l_print = .true.
  28664             if(l_print) then
  28665               write(io8,*)
  28666             write(io8,*) 'Aircraft found on NRL temperature reject list'
  28667               write(io8,8002) kk,ii,c_insty_ob(itype(ii))
  28668      x,            c_acftreg(ii),c_acftid(ii)
  28669      x,            idt(ii),alat(ii),alon(ii)
  28670      x,            pres(ii),ht_ft(ii)
  28671      x,            t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
  28672      x,            ob_q(ii),xiv_q(ii),ichk_q(ii)
  28673      x,            ob_dir(ii),xiv_d(ii),ichk_d(ii)
  28674      x,            ob_spd(ii),xiv_s(ii),ichk_s(ii)
  28675      x,            c_qc(ii)
  28676             endif
  28677 c
  28678             ktemp = ntemp
  28679 c
  28680           else
  28681             ktemp = ktemp + 1
  28682           endif
  28683         enddo
  28684         else
  28685 
  28686 c For NCEP runs, if NCEP/PREPBUFR QM of 14 found on temperature, this report's temperature is
  28687 c  on NCEP's SDMEDIT reject list which is read prior to PREPBUFR processing - set byte 10 to
  28688 c  'T" so that this report's temperature fails NRL QC reject data check, or if wind for this
  28689 c  report is also on NCEP's SDMEDIT reject list set byte 10 to 'O' so that this report's
  28690 c  wind and temperature fail NRL QC reject data check
  28691 c -------------------------------------------------------------------------------------------
  28692           if(nchk_t(ii).eq.14) then
  28693             if(c_qc(ii)(10:10).eq.'W') then
  28694               c_qc(ii)(10:10) = 'O'
  28695             else
  28696               c_qc(ii)(10:10) = 'T'
  28697             endif
  28698             l_print = .true.
  28699             if(l_print) then
  28700               write(io8,*)
  28701            write(io8,*) 'Aircraft found on NCEP temperature reject list'

Page 639         Source Listing                  REJLIST_QC
2017-04-18 11:07                                 acftobs_qc.f

  28702               write(io8,8002) kk,ii,c_insty_ob(itype(ii))
  28703      x,            c_acftreg(ii),c_acftid(ii)
  28704      x,            idt(ii),alat(ii),alon(ii)
  28705      x,            pres(ii),ht_ft(ii)
  28706      x,            t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
  28707      x,            ob_q(ii),xiv_q(ii),ichk_q(ii)
  28708      x,            ob_dir(ii),xiv_d(ii),ichk_d(ii)
  28709      x,            ob_spd(ii),xiv_s(ii),ichk_s(ii)
  28710      x,            c_qc(ii)
  28711             endif
  28712           endif
  28713         endif
  28714 c
  28715       enddo
  28716 c
  28717 c     Write out bad reports
  28718 c     ---------------------
  28719       if(.not.l_operational) then
  28720         write(io38,*)
  28721         write(io38,*) 'Reject list check'
  28722         write(io38,*) '-----------------'
  28723         write(io38,3001)
  28724  3001   format(' index  type    tail num   flight     time       lat'
  28725      x,      '        lon       pres  height '
  28726      x,      't-prcn   temp     innov  ichk'
  28727      x,      ' spec hum    innov  ichk'
  28728      x,      '   ob_dir    innov  ichk'
  28729      x,      '   ob_spd    innov  ichk'
  28730      x,      '   qc flag')
  28731       endif
  28732 c
  28733       kbad = 0
  28734 c
  28735       do iob = 1,numreps
  28736         ii   = indx(iob)
  28737 c
  28738         if(itype(ii).eq.i_mdcrs.or.
  28739      $     itype(ii).eq.i_mdcrs_lvl.or.
  28740      $     itype(ii).eq.i_mdcrs_asc.or.
  28741      $     itype(ii).eq.i_mdcrs_des) then
  28742           ktype = 1
  28743 c
  28744         elseif(itype(ii).eq.i_acars.or.
  28745      $         itype(ii).eq.i_acars_lvl.or.
  28746      $         itype(ii).eq.i_acars_asc.or.
  28747      $         itype(ii).eq.i_acars_des) then
  28748           ktype = 2
  28749 c
  28750         elseif(itype(ii).eq.i_amdar.or. 
  28751      $         itype(ii).eq.i_amdar_lvl.or.
  28752      $         itype(ii).eq.i_amdar_asc.or.
  28753      $         itype(ii).eq.i_amdar_des) then
  28754           ktype = 3
  28755 c
  28756         elseif(itype(ii).eq.i_airep.or.
  28757      $         itype(ii).eq.i_airep_lvl.or.
  28758      $         itype(ii).eq.i_airep_asc.or.

Page 640         Source Listing                  REJLIST_QC
2017-04-18 11:07                                 acftobs_qc.f

  28759      $         itype(ii).eq.i_airep_des) then
  28760           ktype = 4
  28761 c
  28762         elseif(itype(ii).eq.i_man_airep.or.
  28763      $         itype(ii).eq.i_man_Yairep) then
  28764           ktype = 5
  28765         endif
  28766 c
  28767         if(ktype.eq.1) then
  28768           nrep_Md = nrep_Md + 1
  28769         elseif(ktype.eq.2) then
  28770           nrep_Ac = nrep_Ac + 1
  28771         elseif(ktype.eq.3) then
  28772           nrep_Am = nrep_Am + 1
  28773         elseif(ktype.eq.4) then
  28774           nrep_Ar = nrep_Ar + 1
  28775         elseif(ktype.eq.5) then
  28776           nrep_Ma = nrep_Ma + 1
  28777         endif
  28778 c
  28779         if(c_qc(ii)(10:10).eq.'T'.or.
  28780      $     c_qc(ii)(10:10).eq.'W'.or.
  28781      $     c_qc(ii)(10:10).eq.'O') then
  28782 c
  28783           if(.not.l_operational) then
  28784             write(io38,3002) ii,c_insty_ob(itype(ii))
  28785      x,        c_acftreg(ii),c_acftid(ii)
  28786      x,        idt(ii),alat(ii),alon(ii)
  28787      x,        pres(ii),ht_ft(ii)
  28788      x,        t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
  28789      x,        ob_q(ii),xiv_q(ii),ichk_q(ii)
  28790      x,        ob_dir(ii),xiv_d(ii),ichk_d(ii)
  28791      x,        ob_spd(ii),xiv_s(ii),ichk_s(ii)
  28792      x,        c_qc(ii)
  28793  3002       format(i6,1x,a8,1x,a8,1x,a9,1x,i7,1x,2f11.5,1x,f8.1,1x,f7.0
  28794      x,          1x,f5.2,4(2(1x,f8.2),1x,i5),1x,'!',a11,'!')
  28795           endif
  28796 c
  28797 c         Count number of rejected winds by tail number
  28798 c         ---------------------------------------------
  28799           if(c_qc(ii)(10:10).eq.'W'.or.
  28800      $       c_qc(ii)(10:10).eq.'O') then
  28801             mm = 1
  28802             do while(mm.le.kreg)
  28803               if(c_acftreg(ii).eq.creg_reg(mm)) then 
  28804                 if(ktype.gt.0.and.ktype.le.5)
  28805      $            nwind_reg(mm,ktype) = nwind_reg(mm,ktype) + 1
  28806                 mm = kreg + 1
  28807               endif
  28808               mm = mm + 1
  28809             enddo
  28810           endif
  28811 c
  28812 c         Count number of rejected temperatures by tail number
  28813 c         ----------------------------------------------------
  28814           if(c_qc(ii)(10:10).eq.'T'.or.
  28815      $       c_qc(ii)(10:10).eq.'O') then

Page 641         Source Listing                  REJLIST_QC
2017-04-18 11:07                                 acftobs_qc.f

  28816             mm = 1
  28817             do while(mm.le.kreg)
  28818               if(c_acftreg(ii).eq.creg_reg(mm)) then 
  28819                 if(ktype.gt.0.and.ktype.le.5)
  28820      $            ntemp_reg(mm,ktype) = ntemp_reg(mm,ktype) + 1
  28821                 mm = kreg + 1
  28822               endif
  28823               mm = mm + 1
  28824             enddo
  28825           endif
  28826 c
  28827 c         Count by category
  28828 c         -----------------
  28829           if(c_qc(ii)(10:10).eq.'W') then
  28830             nlst_wind(ktype) = nlst_wind(ktype) + 1
  28831           elseif(c_qc(ii)(10:10).eq.'T') then
  28832             nlst_temp(ktype) = nlst_temp(ktype) + 1
  28833           elseif(c_qc(ii)(10:10).eq.'O') then
  28834             nlst_both(ktype) = nlst_both(ktype) + 1
  28835           endif
  28836 c
  28837 c         Reject reports with inconsistent heights and positions
  28838 c         ------------------------------------------------------
  28839           if(c_qc(ii)(10:10).eq.'O') then
  28840 c
  28841             csort(ii)(1:5) = 'badob'
  28842 c
  28843             kbad(ktype) = kbad(ktype) + 1
  28844 c
  28845             if(ktype.eq.1) then
  28846               nlst_Md = nlst_Md + 1
  28847             elseif(ktype.eq.2) then
  28848               nlst_Ac = nlst_Ac + 1
  28849             elseif(ktype.eq.3) then
  28850               nlst_Am = nlst_Am + 1
  28851             elseif(ktype.eq.4) then
  28852               nlst_Ar = nlst_Ar + 1
  28853             elseif(ktype.eq.5) then
  28854               nlst_Ma = nlst_Ma + 1
  28855             endif
  28856           endif
  28857 c
  28858         endif
  28859       enddo
  28860 c
  28861       if(.not.l_operational) then
  28862         write(io38,*)
  28863         write(io38,*) '  Number of MDCRS    reps rej by lst = ',kbad(1)
  28864 ccccdak        write(io38,*) '  Number of ACARS    reps rej by lst = ',kbad(2)
  28865         write(io38,*) '  Number of TAMDAR   reps rej by lst = ',kbad(2)
  28866         write(io38,*) '  Number of AMDAR    reps rej by lst = ',kbad(3)
  28867         write(io38,*) '  Number of AIREP    reps rej by lst = ',kbad(4)
  28868         write(io38,*) '  Number of manAIREP reps rej by lst = ',kbad(5)
  28869       endif
  28870 c
  28871       write(io8,*)
  28872       write(io8,*) '  Reports on reject list--rejected'

Page 642         Source Listing                  REJLIST_QC
2017-04-18 11:07                                 acftobs_qc.f

  28873       write(io8,*) '  --------------------------------'
  28874       write(io8,*) '  Number of MDCRS    reps rej by lst = ',kbad(1)
  28875 ccccdak      write(io8,*) '  Number of ACARS    reps rej by lst = ',kbad(2)
  28876       write(io8,*) '  Number of TAMDAR   reps rej by lst = ',kbad(2)
  28877       write(io8,*) '  Number of AMDAR    reps rej by lst = ',kbad(3)
  28878       write(io8,*) '  Number of AIREP    reps rej by lst = ',kbad(4)
  28879       write(io8,*) '  Number of manAIREP reps rej by lst = ',kbad(5)
  28880 c
  28881 c     Output tail number counts
  28882 c     -------------------------
  28883       write(io8,*) 
  28884       write(io8,*) '  Tail numbers on reject list for winds'
  28885 ccccdak      write(io8,*) '  Tail Num  MDCRS  ACARS  AMDAR  AIREP  MAN  '
  28886       write(io8,*) '  Tail Num  MDCRS  TAMDAR AMDAR  AIREP  MAN  '
  28887       write(io8,*) '  ----------------------------------------------'
  28888 c
  28889       do mm=1,kreg
  28890         if( nwind_reg(mm,1)+nwind_reg(mm,2)+nwind_reg(mm,3)
  28891      $     +nwind_reg(mm,4)+nwind_reg(mm,5).gt.0) then
  28892           write(io8,'(2x,a8,5(1x,i6))') 
  28893      $      creg_reg(mm),(nwind_reg(mm,kk),kk=1,5)
  28894         endif
  28895       enddo
  28896 c
  28897       write(io8,*) 
  28898       write(io8,*) '  Tail numbers on reject list for temperatures'
  28899 ccccdak      write(io8,*) '  Tail Num  MDCRS  ACARS  AMDAR  AIREP  MAN  '
  28900       write(io8,*) '  Tail Num  MDCRS  TAMDAR AMDAR  AIREP  MAN  '
  28901       write(io8,*) '  ----------------------------------------------'
  28902 c
  28903       do mm=1,kreg
  28904         if( ntemp_reg(mm,1)+ntemp_reg(mm,2)+ntemp_reg(mm,3)
  28905      $     +ntemp_reg(mm,4)+ntemp_reg(mm,5).gt.0) then
  28906           write(io8,'(2x,a8,5(1x,i6))') 
  28907      $      creg_reg(mm),(ntemp_reg(mm,kk),kk=1,5)
  28908         endif
  28909       enddo
  28910 c
  28911       write(io8,*)
  28912       write(io8,*) 'Reject list counts'
  28913       write(io8,*) '------------------'
  28914       write(io8,'(1x,a55)')
  28915 ccccdak     $ 'Type of check     MDCRS   ACARS   AMDAR   AIREP     man'
  28916      $ 'Type of check     MDCRS  TAMDAR   AMDAR   AIREP     man'
  28917       write(io8,'(1x,a55)')
  28918      $ '--------------- ------- ------- ------- ------- -------'
  28919       write(io8,'(''Num considered '',5(1x,i7))')
  28920      $            nrep_Md,nrep_Ac,nrep_Am,nrep_Ar,nrep_Ma
  28921       write(io8,'(''Total rejected '',5(1x,i7))')
  28922      $            nlst_Md,nlst_Ac,nlst_Am,nlst_Ar,nlst_Ma
  28923       write(io8,'(1x,a55)')
  28924      $ '--------------- ------- ------- ------- ------- -------'
  28925       write(io8,'(''Listed winds   '',5(1x,i7))')
  28926      $          (nlst_wind(ii),ii=1,5)
  28927       write(io8,'(''Listed temps   '',5(1x,i7))')
  28928      $          (nlst_temp(ii),ii=1,5)
  28929       write(io8,'(''Listed both    '',5(1x,i7))')

Page 643         Source Listing                  REJLIST_QC
2017-04-18 11:07                                 acftobs_qc.f

  28930      $          (nlst_both(ii),ii=1,5)
  28931       write(io8,'(1x,a55)')
  28932      $ '--------------- ------- ------- ------- ------- -------'
  28933 c
  28934       kbadtot = kbad(1) + kbad(2) + kbad(3)
  28935      $        + kbad(4) + kbad(5) 
  28936 c
  28937       write(io8,*)
  28938       write(io8,*) numreps,' good reports processed'
  28939       write(io8,*) kbadtot,' reports failed qc in reject list check'
  28940 c
  28941       return
  28942       end


ENTRY POINTS

  Name                   
                         
 rejlist_qc_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 3001                       Label  28724                                                          28723                             
 3002                       Label  28793                                                          28784                             
 8002                       Label  28610                                                          28601,28633,28667,28702           
 ALAT                       Dummy  28367    R(8)            8     1     0        ARG,INOUT        28603,28635,28669,28704,28786     
 ALON                       Dummy  28367    R(8)            8     1     0        ARG,INOUT        28603,28635,28669,28704,28786     
 CREG_REG                   Dummy  28371    CHAR            8     1     0        ARG,INOUT        28803,28818,28893,28907           
 CSORT                      Dummy  28365    CHAR            25    1     0        ARG,INOUT        28841                             
 C_ACFTID                   Dummy  28366    CHAR            9     1     0        ARG,INOUT        28602,28634,28668,28703,28785     
 C_ACFTREG                  Dummy  28366    CHAR            8     1     0        ARG,INOUT        28593,28602,28634,28655,28668,2870
                                                                                                  3,28785,28803,28818               
 C_INSTY_OB                 Func   28431    CHAR            16          scalar                    28601,28633,28667,28702,28784     
 C_QC                       Dummy  28366    CHAR            11    1     0        ARG,INOUT        28595,28609,28628,28641,28657,2865
                                                                                                  8,28660,28675,28693,28694,28696,28
                                                                                                  710,28779,28780,28781,28792,28799,
                                                                                                  28800,28814,28815,28829,28831,2883
                                                                                                  3,28839                           
 C_REG_TEMP                 Local  28512    CHAR            8     1     12                        28530,28651,28655                 
 C_REG_WIND                 Local  28511    CHAR            8     1     12                        28523,28589,28593                 
 HT_FT                      Dummy  28367    R(4)            4     1     0        ARG,INOUT        28604,28636,28670,28705,28787     
 ICHK_D                     Dummy  28369    I(4)            4     1     0        ARG,INOUT        28607,28639,28673,28708,28790     
 ICHK_Q                     Dummy  28369    I(4)            4     1     0        ARG,INOUT        28606,28638,28672,28707,28789     
 ICHK_S                     Dummy  28369    I(4)            4     1     0        ARG,INOUT        28608,28640,28674,28709,28791     
 ICHK_T                     Dummy  28369    I(4)            4     1     0        ARG,INOUT        28605,28637,28671,28706,28788     
 IDT                        Dummy  28369    I(4)            4     1     0        ARG,INOUT        28603,28635,28669,28704,28786     
 II                         Local  28500    I(4)            4           scalar                    28582,28593,28595,28601,28602,2860
                                                                                                  3,28604,28605,28606,28607,28608,28
                                                                                                  609,28627,28628,28633,28634,28635,
                                                                                                  28636,28637,28638,28639,28640,2864
                                                                                                  1,28655,28657,28658,28660,28667,28
                                                                                                  668,28669,28670,28671,28672,28673,
                                                                                                  28674,28675,28692,28693,28694,2869

Page 644         Source Listing                  REJLIST_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  6,28702,28703,28704,28705,28706,28
                                                                                                  707,28708,28709,28710,28736,28738,
                                                                                                  28739,28740,28741,28744,28745,2874
                                                                                                  6,28747,28750,28751,28752,28753,28
                                                                                                  756,28757,28758,28759,28762,28763,
                                                                                                  28779,28780,28781,28784,28785,2878
                                                                                                  6,28787,28788,28789,28790,28791,28
                                                                                                  792,28799,28800,28803,28814,28815,
                                                                                                  28818,28829,28831,28833,28839,2884
                                                                                                  1,28926,28928,28930               
 INDX                       Dummy  28365    I(4)            4     1     0        ARG,INOUT        28582,28736                       
 INSTY_OB_FUN               Func   28433    I(4)            4           scalar                    28538,28539,28540,28541,28542,2854
                                                                                                  3,28544,28545,28546,28547,28548,28
                                                                                                  549,28550,28551,28552,28553,28554,
                                                                                                  28555                             
 IO38                       Dummy  28372    I(4)            4           scalar   ARG,INOUT        28720,28721,28722,28723,28784,2886
                                                                                                  2,28863,28865,28866,28867,28868   
 IO8                        Dummy  28372    I(4)            4           scalar   ARG,INOUT        28599,28600,28601,28631,28632,2863
                                                                                                  3,28665,28666,28667,28700,28701,28
                                                                                                  702,28871,28872,28873,28874,28876,
                                                                                                  28877,28878,28879,28883,28884,2888
                                                                                                  6,28887,28892,28897,28898,28900,28
                                                                                                  901,28906,28911,28912,28913,28914,
                                                                                                  28917,28919,28921,28923,28925,2892
                                                                                                  7,28929,28931,28937,28938,28939   
 IOB                        Local  28499    I(4)            4           scalar                    28581,28582,28735,28736           
 ITYPE                      Dummy  28369    I(4)            4     1     0        ARG,INOUT        28601,28633,28667,28702,28738,2873
                                                                                                  9,28740,28741,28744,28745,28746,28
                                                                                                  747,28750,28751,28752,28753,28756,
                                                                                                  28757,28758,28759,28762,28763,2878
                                                                                                  4                                 
 I_ACARS                    Local  28468    I(4)            4           scalar                    28538,28744                       
 I_ACARS_ASC                Local  28472    I(4)            4           scalar                    28540,28746                       
 I_ACARS_DES                Local  28474    I(4)            4           scalar                    28541,28747                       
 I_ACARS_LVL                Local  28470    I(4)            4           scalar                    28539,28745                       
 I_AIREP                    Local  28481    I(4)            4           scalar                    28548,28756                       
 I_AIREP_ASC                Local  28483    I(4)            4           scalar                    28550,28758                       
 I_AIREP_DES                Local  28484    I(4)            4           scalar                    28551,28759                       
 I_AIREP_LVL                Local  28482    I(4)            4           scalar                    28549,28757                       
 I_AMDAR                    Local  28485    I(4)            4           scalar                    28552,28750                       
 I_AMDAR_ASC                Local  28487    I(4)            4           scalar                    28554,28752                       
 I_AMDAR_DES                Local  28488    I(4)            4           scalar                    28555,28753                       
 I_AMDAR_LVL                Local  28486    I(4)            4           scalar                    28553,28751                       
 I_MAN_AIREP                Local  28479    I(4)            4           scalar                    28546,28762                       
 I_MAN_YAIREP               Local  28480    I(4)            4           scalar                    28547,28763                       
 I_MDCRS                    Local  28475    I(4)            4           scalar                    28542,28738                       
 I_MDCRS_ASC                Local  28477    I(4)            4           scalar                    28544,28740                       
 I_MDCRS_DES                Local  28478    I(4)            4           scalar                    28545,28741                       
 I_MDCRS_LVL                Local  28476    I(4)            4           scalar                    28543,28739                       
 KBAD                       Local  28446    I(4)            4     1     5                         28733,28843,28863,28865,28866,2886
                                                                                                  7,28868,28874,28876,28877,28878,28
                                                                                                  879,28934,28935                   
 KBADTOT                    Dummy  28372    I(4)            4           scalar   ARG,INOUT        28934,28939                       
 KK                         Local  28502    I(4)            4           scalar                    28576,28601,28633,28667,28702,2889
                                                                                                  3,28907                           

Page 645         Source Listing                  REJLIST_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 KREG                       Dummy  28371    I(4)            4           scalar   ARG,INOUT        28802,28806,28817,28821,28889,2890
                                                                                                  3                                 
 KTEMP                      Local  28497    I(4)            4           scalar                    28650,28651,28655,28678,28681     
 KTYPE                      Local  28489    I(4)            4           scalar                    28742,28748,28754,28760,28764,2876
                                                                                                  7,28769,28771,28773,28775,28804,28
                                                                                                  805,28819,28820,28830,28832,28834,
                                                                                                  28843,28845,28847,28849,28851,2885
                                                                                                  3                                 
 KWIND                      Local  28496    I(4)            4           scalar                    28588,28589,28593,28615,28618     
 L_INIT                     Dummy  28372    L(4)            4           scalar   ARG,INOUT        28559                             
 L_NCEP                     Dummy  28372    L(4)            4           scalar   ARG,INOUT        28586,28648                       
 L_OPERATIONAL              Dummy  28372    L(4)            4           scalar   ARG,INOUT        28719,28783,28861                 
 L_PRINT                    Local  28504    L(4)            4           scalar                    28597,28598,28629,28630,28663,2866
                                                                                                  4,28698,28699                     
 MAXFLT                     Dummy  28371    I(4)            4           scalar   ARG,INOUT        28440,28441,28442                 
 MAX_REPS                   Dummy  28365    I(4)            4           scalar   ARG,INOUT        28393,28398,28399,28400,28401,2840
                                                                                                  2,28403,28404,28405,28406,28407,28
                                                                                                  408,28409,28410,28411,28412,28413,
                                                                                                  28414,28415,28416,28417,28418,2841
                                                                                                  9,28420,28421,28422,28423,28427   
 MM                         Local  28501    I(4)            4           scalar                    28801,28802,28803,28805,28806,2880
                                                                                                  8,28816,28817,28818,28820,28821,28
                                                                                                  823,28889,28890,28891,28893,28903,
                                                                                                  28904,28905,28907                 
 NCHK_D                     Dummy  28370    I(4)            4     1     0        ARG,INOUT        28627                             
 NCHK_Q                     Dummy  28370    I(4)            4     1     0        ARG,INOUT                                          
 NCHK_S                     Dummy  28370    I(4)            4     1     0        ARG,INOUT        28627                             
 NCHK_T                     Dummy  28370    I(4)            4     1     0        ARG,INOUT        28692                             
 NLST_AC                    Local  28455    I(4)            4           scalar                    28566,28848,28922                 
 NLST_AM                    Local  28459    I(4)            4           scalar                    28570,28850,28922                 
 NLST_AR                    Local  28458    I(4)            4           scalar                    28569,28852,28922                 
 NLST_BOTH                  Local  28463    I(4)            4     1     5                         28834,28930                       
 NLST_MA                    Local  28457    I(4)            4           scalar                    28568,28854,28922                 
 NLST_MD                    Local  28456    I(4)            4           scalar                    28567,28846,28922                 
 NLST_TEMP                  Local  28462    I(4)            4     1     5                         28832,28928                       
 NLST_WIND                  Local  28461    I(4)            4     1     5                         28830,28926                       
 NREP_AC                    Local  28449    I(4)            4           scalar                    28560,28770,28920                 
 NREP_AM                    Local  28453    I(4)            4           scalar                    28564,28772,28920                 
 NREP_AR                    Local  28452    I(4)            4           scalar                    28563,28774,28920                 
 NREP_MA                    Local  28451    I(4)            4           scalar                    28562,28776,28920                 
 NREP_MD                    Local  28450    I(4)            4           scalar                    28561,28768,28920                 
 NTEMP                      Param  28386    I(4)            4           scalar                    28512,28678                       
 NTEMP_REG                  Dummy  28371    I(4)            4     2     0        ARG,INOUT        28574,28820,28904,28905,28907     
 NUMREPS                    Dummy  28365    I(4)            4           scalar   ARG,INOUT        28581,28735,28938                 
 NWIND                      Param  28385    I(4)            4           scalar                    28511,28615                       
 NWIND_REG                  Dummy  28371    I(4)            4     2     0        ARG,INOUT        28573,28805,28890,28891,28893     
 OB_DIR                     Dummy  28367    R(4)            4     1     0        ARG,INOUT        28607,28639,28673,28708,28790     
 OB_Q                       Dummy  28367    R(4)            4     1     0        ARG,INOUT        28606,28638,28672,28707,28789     
 OB_SPD                     Dummy  28367    R(4)            4     1     0        ARG,INOUT        28608,28640,28674,28709,28791     
 OB_T                       Dummy  28367    R(4)            4     1     0        ARG,INOUT        28605,28637,28671,28706,28788     
 PRES                       Dummy  28367    R(4)            4     1     0        ARG,INOUT        28604,28636,28670,28705,28787     
 REJLIST_QC                 Subr   28365                                                                                            
 T_PRCN                     Dummy  28367    R(4)            4     1     0        ARG,INOUT        28605,28637,28671,28706,28788     
 XIV_D                      Dummy  28368    R(4)            4     1     0        ARG,INOUT        28607,28639,28673,28708,28790     
 XIV_Q                      Dummy  28368    R(4)            4     1     0        ARG,INOUT        28606,28638,28672,28707,28789     

Page 646         Source Listing                  REJLIST_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 XIV_S                      Dummy  28368    R(4)            4     1     0        ARG,INOUT        28608,28640,28674,28709,28791     
 XIV_T                      Dummy  28368    R(4)            4     1     0        ARG,INOUT        28605,28637,28671,28706,28788     

Page 647         Source Listing                  REJLIST_QC
2017-04-18 11:07                                 acftobs_qc.f

  28943 c
  28944 c ###################################################################
  28945 c                            subroutine p2ht_qc
  28946 c ###################################################################
  28947 c
  28948       subroutine p2ht_qc(pressure,height_m,amiss)
  28949 c
  28950 c Compute height from pressure after checking for gross errors
  28951 c
  28952       implicit none
  28953 c
  28954       real pressure               ! input pressure (mb)
  28955      x,    height_m               ! output height (m)
  28956      x,    amiss                  ! missing value flag
  28957 c
  28958 c # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
  28959 c
  28960 c Check for missing value
  28961 c -----------------------
  28962       if(pressure.eq.amiss) then
  28963 c        write(io8,*)
  28964 c        write(io8,*) 'Pressure missing'
  28965         height_m = amiss
  28966 c
  28967 c Check for gross errors
  28968 c ----------------------
  28969       elseif(pressure.gt.1080..or.
  28970      $       pressure.lt.50.) then
  28971 c        write(io8,*)
  28972 c        write(io8,*) 'Bad pressure--',pressure
  28973         height_m = amiss
  28974 c
  28975 c Compute height for high pressures
  28976 c ---------------------------------
  28977       elseif(pressure.ge.226.313) then
  28978 c
  28979 c       Function below is inverse of Dennis Keyser's function
  28980 c       -----------------------------------------------------
  28981 c       height_m = 288.15/.0065 * (1.-(pressure/1013.25)**.190259)
  28982 c
  28983 c       Function below is from Manual of Barometry
  28984 c       ------------------------------------------
  28985         height_m = 288.15/.0065 * (1.-(pressure/1013.25)**.1902632)
  28986 c        write(io8,*)
  28987 c        write(io8,*) 'Computed height',height_m,
  28988 c     $             ' for high pressure = ',pressure
  28989 c
  28990 c Compute height for low pressures
  28991 c --------------------------------
  28992       elseif(pressure.lt.226.313) then
  28993 c
  28994 c       Function below is inverse of Dennis Keyser's function
  28995 c       -----------------------------------------------------
  28996         height_m = 11000. - alog(pressure/226.3) / 1.576106E-4
  28997 c        write(io8,*)
  28998 c        write(io8,*) 'Computed height',height_m,
  28999 c     $             ' for low pressure = ',pressure

Page 648         Source Listing                  P2HT_QC
2017-04-18 11:07                                 acftobs_qc.f

  29000       endif
  29001 c
  29002       return
  29003       end


ENTRY POINTS

  Name                
                      
 p2ht_qc_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALOG                       Func   28996                                scalar                    28996                             
 AMISS                      Dummy  28948    R(4)            4           scalar   ARG,INOUT        28962,28965,28973                 
 HEIGHT_M                   Dummy  28948    R(4)            4           scalar   ARG,INOUT        28965,28973,28985,28996           
 P2HT_QC                    Subr   28948                                                                                            
 PRESSURE                   Dummy  28948    R(4)            4           scalar   ARG,INOUT        28962,28969,28970,28977,28985,2899
                                                                                                  2,28996                           

Page 649         Source Listing                  P2HT_QC
2017-04-18 11:07                                 acftobs_qc.f

  29004 c
  29005 c ###################################################################
  29006 c                            subroutine ht2fl_qc
  29007 c ###################################################################
  29008 c
  29009       subroutine ht2fl_qc(height_m,height_ft,amiss,ft2m)
  29010 c
  29011 c Compute height in feet and round to nearest hundred feet
  29012 c (This is done to recover original altitudes, which were
  29013 c presumably rounded to the nearest hundred feet.)
  29014 c
  29015       implicit none
  29016 c
  29017       real height_m               ! input height (m)
  29018      x,    height_ft              ! output height (ft)
  29019      x,    amiss                  ! missing value flag
  29020      x,    ft2m                   ! conversion factor for m to ft
  29021 c
  29022 c # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  29023 c     
  29024       if(height_m.ne.amiss) then
  29025         height_ft = height_m * ft2m
  29026       else
  29027         height_ft = amiss
  29028       endif
  29029 c
  29030       return
  29031       end

Page 650         Source Listing                  HT2FL_QC
2017-04-18 11:07 Entry Points                    acftobs_qc.f



ENTRY POINTS

  Name                 
                       
 ht2fl_qc_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 AMISS                      Dummy  29009    R(4)            4           scalar   ARG,INOUT        29024,29027                       
 FT2M                       Dummy  29009    R(4)            4           scalar   ARG,INOUT        29025                             
 HEIGHT_FT                  Dummy  29009    R(4)            4           scalar   ARG,INOUT        29025,29027                       
 HEIGHT_M                   Dummy  29009    R(4)            4           scalar   ARG,INOUT        29024,29025                       
 HT2FL_QC                   Subr   29009                                                                                            

Page 651         Source Listing                  HT2FL_QC
2017-04-18 11:07                                 acftobs_qc.f

  29032 c
  29033 c ###################################################################
  29034 c                            function gcirc_qc
  29035 c ###################################################################
  29036 c
  29037 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
  29038       function gcirc_qc(rlat1,rlon1,rlat2,rlon2)
  29039 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
  29040 c
  29041 c This function computes great circle distances using the Haversine formula.
  29042 c Reference: http://www.census.gov/cgi-bin/geo/gisfaq?Q5.1
  29043 c Programmer: P.M. Pauley 2/24/2000
  29044 c
  29045       implicit none
  29046 c
  29047       real       pi,deg_rad,radius
  29048       parameter (pi = 3.14159274, deg_rad = pi/180.)    ! conversion factor
  29049       parameter (radius = 6371229.)                     ! earth's radius in m
  29050 c
  29051       real         gcirc_qc            ! great circle distance
  29052       real*8       rlat1               ! first latitude (degrees)
  29053      $,            rlat2               ! second latitude (degrees)
  29054      $,            rlon1               ! first longitude (degrees)
  29055      $,            rlon2               ! second longitude (degrees)
  29056       real*8       dlon                ! difference in longitude / 2 (radians)
  29057      $,            dlat                ! difference in latitude / 2 (radians)
  29058       real*8       arg                 ! argument for the arcsin
  29059 c
  29060       dlon = (rlon2 - rlon1) * deg_rad * 0.5
  29061       dlat = (rlat2 - rlat1) * deg_rad * 0.5
  29062 c
  29063 c What if longitudes are equal?
  29064 c -----------------------------
  29065       if(int(rlon1*100.0).eq.int(rlon2*100.0)) then
  29066         gcirc_qc = radius * abs(rlat2 - rlat1) * deg_rad
  29067 c
  29068 c What if latitudes are equal?
  29069 c ----------------------------
  29070       elseif(int(rlat1*100.0).eq.int(rlat2*100.0)) then
  29071         arg = abs(cos(rlat1*deg_rad) * sin(dlon))
  29072         gcirc_qc = radius * 2.0 * asin(min(1.0,arg))
  29073 c
  29074 c What if neither are equal?
  29075 c --------------------------
  29076       else
  29077         arg = (sin(dlat))**2 
  29078      $      + cos(rlat1*deg_rad) * cos(rlat2*deg_rad) * (sin(dlon))**2
  29079         gcirc_qc = radius * 2.0 * asin(min(1.0,sqrt(arg)))
  29080       endif
  29081 c
  29082       return
  29083       end

Page 652         Source Listing                  GCIRC_QC
2017-04-18 11:07 Entry Points                    acftobs_qc.f



ENTRY POINTS

  Name                 
                       
 gcirc_qc_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ABS                        Func   29066                                scalar                    29066,29071                       
 ARG                        Local  29058    R(8)            8           scalar                    29071,29072,29077,29079           
 ASIN                       Func   29072                                scalar                    29072,29079                       
 COS                        Func   29071                                scalar                    29071,29078                       
 DEG_RAD                    Param  29047    R(4)            4           scalar                    29060,29061,29066,29071,29078     
 DLAT                       Local  29057    R(8)            8           scalar                    29061,29077                       
 DLON                       Local  29056    R(8)            8           scalar                    29060,29071,29078                 
 GCIRC_QC                   Func   29038    R(4)            4           scalar                    29066,29072,29079                 
 GCIRC_QC@0                 Local  29038    R(4)            4           scalar                                                      
 INT                        Func   29065                                scalar                    29065,29070                       
 MIN                        Func   29072                                scalar                    29072,29079                       
 PI                         Param  29047    R(4)            4           scalar                    29048                             
 RADIUS                     Param  29047    R(4)            4           scalar                    29066,29072,29079                 
 RLAT1                      Dummy  29038    R(8)            8           scalar   ARG,INOUT        29061,29066,29070,29071,29078     
 RLAT2                      Dummy  29038    R(8)            8           scalar   ARG,INOUT        29061,29066,29070,29078           
 RLON1                      Dummy  29038    R(8)            8           scalar   ARG,INOUT        29060,29065                       
 RLON2                      Dummy  29038    R(8)            8           scalar   ARG,INOUT        29060,29065                       
 SIN                        Func   29071                                scalar                    29071,29077,29078                 
 SQRT                       Func   29079                                scalar                    29079                             

Page 653         Source Listing                  GCIRC_QC
2017-04-18 11:07                                 acftobs_qc.f

  29084 c
  29085 c ###################################################################
  29086 c                            subroutine p_ddtg
  29087 c ###################################################################
  29088 c
  29089       subroutine p_ddtg(c_hdg,io8)
  29090 c
  29091 cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
  29092 c     prints message with the system date and time
  29093 c
  29094 c     by p.pauley
  29095 c     - Update by D. Keyser 2/7/13: Use GNU standard call
  29096 c       "date_and_time" instead of calls to "date" and "time" to avoid
  29097 c       ifort compiler warning on NCEP WCOSS
  29098 cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
  29099 c
  29100       implicit none
  29101 c
  29102       integer io8
  29103 c
  29104       character*(*) c_hdg              ! message
  29105       character*8  cdate               ! system date
  29106       character*10 ctime               ! system time
  29107       character*5  czone               ! time zone
  29108       character*3  cmonth(13)          ! month
  29109       integer idat(8)
  29110       data cmonth /'Jan','Feb','Mar','Apr','May','Jun','Jul','Aug',
  29111      +             'Sep','Oct','Nov','Dec','???'/
  29112 c
  29113       call date_and_time(cdate,ctime,czone,idat)
  29114       if(idat(2).lt.1 .or. idat(2).gt.12) idat(2) = 13
  29115 c
  29116       write(io8,*)
  29117       write(io8,*) c_hdg
  29118       write(io8,*) '  System date/time: ',cdate(7:8),'-',
  29119      + cmonth(idat(2)),'-',cdate(3:4),'  ',ctime(1:2),':',ctime(3:4),
  29120      + ':',ctime(5:6)
  29121 c
  29122       return
  29123       end

Page 654         Source Listing                  P_DDTG
2017-04-18 11:07 Entry Points                    acftobs_qc.f



ENTRY POINTS

  Name               
                     
 p_ddtg_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CDATE                      Local  29105    CHAR            8           scalar                    29113,29118,29119                 
 CMONTH                     Local  29108    CHAR            3     1     13                        29110,29119                       
 CTIME                      Local  29106    CHAR            10          scalar                    29113,29119,29120                 
 CZONE                      Local  29107    CHAR            5           scalar                    29113                             
 C_HDG                      Dummy  29089    CHAR                        scalar   ARG,INOUT        29117                             
 DATE_AND_TIME              Intrin 29113                                                          29113                             
 IDAT                       Local  29109    I(4)            4     1     8                         29113,29114,29119                 
 IO8                        Dummy  29089    I(4)            4           scalar   ARG,INOUT        29116,29117,29118                 
 P_DDTG                     Subr   29089                                                                                            

Page 655         Source Listing                  P_DDTG
2017-04-18 11:07                                 acftobs_qc.f

  29124 c
  29125 c ###################################################################
  29126 c                            subroutine spike_qc
  29127 c ###################################################################
  29128 c
  29129       subroutine spike_qc(numreps,max_reps,c_acftreg,c_acftid,c_qc
  29130      $,     alat,alon,pres,ht_ft,t_prcn,ob_t,ob_q,ob_dir,ob_spd
  29131      $,     xiv_t,xiv_q,xiv_d,xiv_s,idt,itype,ichk_t,ichk_q
  29132      $,     ichk_d,ichk_s,kbadtot,indx,csort,amiss,imiss,io8
  29133      $,     io31,cdtg_an,l_operational,l_init)
  29134 c
  29135 c Check for spikes in the time distribution of data.
  29136 c Erroneous AIREPs from Tinker tend to be clustered by minute.
  29137 c
  29138       implicit none
  29139 c
  29140 c     Parameter statements
  29141 c     --------------------
  29142       integer      max_min             ! number of minutes in one file
  29143 cc smb      parameter(max_min=361)
  29144       parameter(max_min=721)
  29145       integer      min_offset          ! offset used to compute index
  29146 cc smb      parameter(min_offset=181)
  29147       parameter(min_offset=361)
  29148 c
  29149 c     Data arrays
  29150 c     -----------
  29151       character*10 cdtg_an             ! date time group for analysis
  29152       integer      max_reps            ! maximum number of reports
  29153       integer      numreps             ! actual number of reports
  29154       integer      itype(max_reps)     ! type of aircraft data
  29155       integer      idt(max_reps)       ! time in seconds to analysis time 
  29156       character*8  c_acftreg(max_reps) ! aircraft registration (tail) number
  29157       character*9  c_acftid(max_reps)  ! aircraft flight number
  29158       real*8       alat(max_reps)      ! latitude
  29159      $,            alon(max_reps)      ! longitude
  29160       real         pres(max_reps)      ! pressure
  29161      $,            ht_ft(max_reps)     ! height in feet
  29162       real         t_prcn(max_reps)    ! temperature precision
  29163       real         ob_t(max_reps)      ! temperature
  29164      $,            ob_q(max_reps)      ! specific humidity
  29165      $,            ob_dir(max_reps)    ! wind direction
  29166      $,            ob_spd(max_reps)    ! wind speed
  29167       real         xiv_t(max_reps)     ! temperature innovation (ob - bk)
  29168      $,            xiv_q(max_reps)     ! specific humidity innovation (ob - bk)
  29169      $,            xiv_d(max_reps)     ! wind direction innovation (ob - bk)
  29170      $,            xiv_s(max_reps)     ! wind speed innovation (ob - bk)
  29171       integer      ichk_t(max_reps)    ! NRL QC flag for temperature ob
  29172      $,            ichk_q(max_reps)    ! NRL QC flag for specific humidity ob
  29173      $,            ichk_d(max_reps)    ! NRL QC flag for wind direction ob
  29174      $,            ichk_s(max_reps)    ! NRL QC flag for wind speed ob
  29175       character*25 csort(max_reps)     ! sort variable    
  29176       character*11 c_qc(max_reps)      ! internal qc flags
  29177 c
  29178 c     Pointers
  29179 c     --------
  29180       integer      indx(max_reps)      ! pointer index for good reports

Page 656         Source Listing                  SPIKE_QC
2017-04-18 11:07                                 acftobs_qc.f

  29181 c
  29182 c     Functions
  29183 c     ---------
  29184       character*16 c_insty_ob          ! function to convert integer instrument
  29185                                        !   type to character instrument type
  29186 c
  29187       integer      insty_ob_fun        ! function to convert character
  29188                                        !   instrument type to integer
  29189 c
  29190 c     Other variables
  29191 c     ---------------
  29192       integer      io8                 ! i/o unit number for log file
  29193       integer      io31                ! i/o unit number for rejected dups
  29194 c
  29195       integer      imiss               ! integer missing value flag
  29196       real         amiss               ! real missing value flag
  29197 c
  29198       integer      n_minute(6,max_min) ! counter for obs by type and minute
  29199      $,            n_min_avg(6)        ! average number of obs per minute by type
  29200      $,            n_min_knt(6)        ! number of minutes with obs by type
  29201      $,            i_min               ! minute index
  29202      $,            ii_min              ! minute index
  29203      $,            n_thresh            ! threshold used to define a spike
  29204      $,            idiff_before        ! difference w.r.t. previous count
  29205      $,            idiff_after         ! difference w.r.t. following count
  29206       real         xiv_minute(6,max_min)  ! average innovation by type and minute
  29207 c
  29208       integer      iob                 ! do loop index 
  29209      $,            ibeg                ! beginning index
  29210       integer      ii                  ! do loop index
  29211      $,            kk                  ! do loop index
  29212      $,            kkbeg               ! beginning index
  29213       integer      kbad(6)             ! counter for number of bad reports
  29214      $,            kbadtot             ! counter for total number of bad reports
  29215 c
  29216 ccccdak      integer      i_acars             ! instrument type for acars
  29217       integer      i_acars             ! instrument type for tamdar
  29218 ccccdak     $,            i_acars_lvl         ! instrument type for acars--level flt
  29219      $,            i_acars_lvl         ! instrument type for tamdar--level flt
  29220 ccccdak     $,            i_acars_asc         ! instrument type for acars--ascent
  29221      $,            i_acars_asc         ! instrument type for tamdar--ascent
  29222 ccccdak     $,            i_acars_des         ! instrument type for acars--descent
  29223      $,            i_acars_des         ! instrument type for tamdar--descent
  29224      $,            i_mdcrs             ! instrument type for mdcrs
  29225      $,            i_mdcrs_lvl         ! instrument type for mdcrs--level flt
  29226      $,            i_mdcrs_asc         ! instrument type for mdcrs--ascent
  29227      $,            i_mdcrs_des         ! instrument type for mdcrs--descent
  29228      $,            i_man_airep         ! instrument type for manual aireps
  29229      $,            i_man_Yairep        ! instrument type for manual aireps (YRXX)
  29230      $,            i_airep             ! instrument type for airep
  29231      $,            i_airep_lvl         ! instrument type for airep--level flt
  29232      $,            i_airep_asc         ! instrument type for airep--ascent
  29233      $,            i_airep_des         ! instrument type for airep--descent
  29234      $,            i_amdar             ! instrument type for amdar
  29235      $,            i_amdar_lvl         ! instrument type for amdar--level flt
  29236      $,            i_amdar_asc         ! instrument type for amdar--ascent
  29237      $,            i_amdar_des         ! instrument type for amdar--descent

Page 657         Source Listing                  SPIKE_QC
2017-04-18 11:07                                 acftobs_qc.f

  29238 c
  29239 ccccdak      integer      nrep_Ac             ! number of acars reports considered
  29240       integer      nrep_Ac             ! number of tamdar reports considered
  29241      $,            nrep_Md             ! number of mdcrs reports considered
  29242      $,            nrep_Ma             ! number of manual airep reports considered
  29243      $,            nrep_Ar             ! number of airep reports considered
  29244      $,            nrep_Am             ! number of amdar reports considered
  29245 ccccdak     $,            nbad_Ac             ! number of bad acars
  29246      $,            nbad_Ac             ! number of bad tamdar
  29247      $,            nbad_Md             ! number of bad mdcrs
  29248      $,            nbad_Ma             ! number of bad manual aireps
  29249      $,            nbad_Ar             ! number of bad aireps
  29250      $,            nbad_Am             ! number of bad amdar 
  29251 c
  29252 c     Switches
  29253 c     --------
  29254       logical      l_print             ! print values if true
  29255      $,            l_operational       ! run QC in operational mode if true
  29256      $,            l_init              ! initialize counters if true
  29257      $,            l_all_types         ! spike check all types if true
  29258 c
  29259 c # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  29260 c
  29261 c Initialize aircraft data types
  29262 c ------------------------------
  29263       i_acars      = insty_ob_fun('acars')
  29264       i_acars_lvl  = insty_ob_fun('acars_lvl') 
  29265       i_acars_asc  = insty_ob_fun('acars_asc') 
  29266       i_acars_des  = insty_ob_fun('acars_des') 
  29267       i_mdcrs      = insty_ob_fun('mdcrs')
  29268       i_mdcrs_lvl  = insty_ob_fun('mdcrs_lvl') 
  29269       i_mdcrs_asc  = insty_ob_fun('mdcrs_asc') 
  29270       i_mdcrs_des  = insty_ob_fun('mdcrs_des')
  29271       i_man_airep  = insty_ob_fun('man-airep') 
  29272       i_man_Yairep = insty_ob_fun('man-Yairep') 
  29273       i_airep      = insty_ob_fun('airep')
  29274       i_airep_lvl  = insty_ob_fun('airep_lvl')
  29275       i_airep_asc  = insty_ob_fun('airep_asc')
  29276       i_airep_des  = insty_ob_fun('airep_des')
  29277       i_amdar      = insty_ob_fun('amdar')
  29278       i_amdar_lvl  = insty_ob_fun('amdar_lvl')
  29279       i_amdar_asc  = insty_ob_fun('amdar_asc')
  29280       i_amdar_des  = insty_ob_fun('amdar_des')
  29281 c
  29282 c Initialize other arrays
  29283 c -----------------------
  29284       n_min_avg = 0
  29285       n_min_knt = 0
  29286       kbad = 0
  29287 c
  29288       n_minute = 0
  29289       xiv_minute = 0.0
  29290 c
  29291 c Initialize counters
  29292 c -------------------
  29293       if(l_init) then
  29294         nrep_Ac = 0

Page 658         Source Listing                  SPIKE_QC
2017-04-18 11:07                                 acftobs_qc.f

  29295         nrep_Md = 0
  29296         nrep_Ma = 0
  29297         nrep_Ar = 0
  29298         nrep_Am = 0
  29299         nbad_Ac = 0
  29300         nbad_Md = 0
  29301         nbad_Ma = 0
  29302         nbad_Ar = 0
  29303         nbad_Am = 0
  29304       endif
  29305 c
  29306 c Loop over reports
  29307 c -----------------
  29308       do iob=1,numreps
  29309 c
  29310         ii = indx(iob)
  29311 c
  29312 c       Compute minute index
  29313 c       --------------------
  29314         if(idt(ii).ne.imiss) then
  29315           i_min = idt(ii)/60 + min_offset
  29316         else
  29317           i_min = max_min
  29318         endif
  29319 c
  29320         if(i_min.lt.1.or.
  29321      $     i_min.gt.max_min) then
  29322           write(io8,*)
  29323           write(io8,*) 'i_min out of bounds',ii,iob,
  29324      +			c_acftreg(ii),c_acftid(ii)
  29325           write(io8,*) '  i_min = ',i_min
  29326           write(io8,*) '  idt = ',idt(ii)
  29327           i_min = max_min
  29328         endif
  29329 c
  29330 c       Accumulate distribution of obs and speed innovations
  29331 c       ----------------------------------------------------
  29332         if(itype(ii).eq.i_mdcrs.or.
  29333      $     itype(ii).eq.i_mdcrs_lvl.or.
  29334      $     itype(ii).eq.i_mdcrs_asc.or.
  29335      $     itype(ii).eq.i_mdcrs_des) then
  29336 c
  29337           nrep_Md = nrep_Md + 1
  29338           n_minute(1,i_min) = n_minute(1,i_min) + 1
  29339           if(xiv_s(ii).ne.amiss) then
  29340             xiv_minute(1,i_min) = xiv_minute(1,i_min) + abs(xiv_s(ii))
  29341           endif
  29342 c
  29343         elseif(itype(ii).eq.i_acars.or.
  29344      $         itype(ii).eq.i_acars_lvl.or.
  29345      $         itype(ii).eq.i_acars_asc.or.
  29346      $         itype(ii).eq.i_acars_des) then
  29347 c
  29348           nrep_Ac = nrep_Ac + 1
  29349           n_minute(2,i_min) = n_minute(2,i_min) + 1
  29350           if(xiv_s(ii).ne.amiss) then
  29351             xiv_minute(2,i_min) = xiv_minute(2,i_min) + abs(xiv_s(ii))

Page 659         Source Listing                  SPIKE_QC
2017-04-18 11:07                                 acftobs_qc.f

  29352           endif
  29353 c
  29354         elseif(itype(ii).eq.i_amdar.or. 
  29355      $         itype(ii).eq.i_amdar_lvl.or.
  29356      $         itype(ii).eq.i_amdar_asc.or.
  29357      $         itype(ii).eq.i_amdar_des) then
  29358 c
  29359           nrep_Am = nrep_Am + 1
  29360           n_minute(3,i_min) = n_minute(3,i_min) + 1
  29361           if(xiv_s(ii).ne.amiss) then
  29362             xiv_minute(3,i_min) = xiv_minute(3,i_min) + abs(xiv_s(ii))
  29363           endif
  29364 c
  29365         elseif(itype(ii).eq.i_airep.or.
  29366      $         itype(ii).eq.i_airep_lvl.or.
  29367      $         itype(ii).eq.i_airep_asc.or.
  29368      $         itype(ii).eq.i_airep_des) then
  29369 c
  29370           nrep_Ar = nrep_Ar + 1
  29371           n_minute(4,i_min) = n_minute(4,i_min) + 1
  29372           if(xiv_s(ii).ne.amiss) then
  29373             xiv_minute(4,i_min) = xiv_minute(4,i_min) + abs(xiv_s(ii))
  29374           endif
  29375 c
  29376         elseif(itype(ii).eq.i_man_Yairep) then
  29377 c
  29378           nrep_Ma = nrep_Ma + 1
  29379           n_minute(5,i_min) = n_minute(5,i_min) + 1
  29380           if(xiv_s(ii).ne.amiss) then
  29381             xiv_minute(5,i_min) = xiv_minute(5,i_min) + abs(xiv_s(ii))
  29382           endif
  29383 c
  29384         elseif(itype(ii).eq.i_man_airep) then
  29385 c
  29386           nrep_Ma = nrep_Ma + 1
  29387           n_minute(6,i_min) = n_minute(6,i_min) + 1
  29388           if(xiv_s(ii).ne.amiss) then
  29389             xiv_minute(6,i_min) = xiv_minute(6,i_min) + abs(xiv_s(ii))
  29390           endif
  29391         endif
  29392       enddo
  29393 c
  29394       l_print = .true.
  29395 c
  29396       if(l_print) then
  29397         write(io8,*)
  29398         write(io8,*) 'Distribution of reports by type and minute'
  29399         write(io8,*) '------------------------------------------'
  29400         write(io8,*) 
  29401 ccccdak     $    'min   MDCRS  ACARS  AMDAR  AIREP   YRXX  voice    innov'
  29402      $    'min   MDCRS  TAMDAR AMDAR  AIREP   YRXX  voice    innov'
  29403         write(io8,*) 
  29404      $    '---- ------ ------ ------ ------ ------ ------ --------'
  29405       endif
  29406 c
  29407       do i_min=1,max_min
  29408         if(n_minute(6,i_min).ne.0) then

Page 660         Source Listing                  SPIKE_QC
2017-04-18 11:07                                 acftobs_qc.f

  29409           xiv_minute(6,i_min) = xiv_minute(6,i_min)
  29410      $                        / float(n_minute(6,i_min))
  29411         else
  29412           xiv_minute(6,i_min) = amiss
  29413         endif
  29414         if(l_print) write(io8,'(i4,6(1x,i6),1x,f8.2)') 
  29415      $       i_min,(n_minute(kk,i_min),kk=1,6),xiv_minute(6,i_min)
  29416 c
  29417         do kk=1,6
  29418           if(n_minute(kk,i_min).gt.0) then
  29419             n_min_avg(kk) = n_min_avg(kk) + n_minute(kk,i_min)
  29420             n_min_knt(kk) = n_min_knt(kk) + 1
  29421           endif
  29422         enddo
  29423       enddo
  29424 c
  29425       do kk=1,6
  29426         if(n_min_knt(kk).gt.0) then
  29427           n_min_avg(kk) = n_min_avg(kk) / n_min_knt(kk)
  29428         else
  29429           n_min_avg(kk) = imiss
  29430         endif
  29431       enddo
  29432 c
  29433       if(l_print) then
  29434         write(io8,*) 
  29435      $    '--- ------ ------ ------ ------ ------ ------ --------'
  29436         write(io8,'(''avg'',6(1x,i6))') (n_min_avg(kk),kk=1,6)
  29437         write(io8,*) 
  29438      $    '--- ------ ------ ------ ------ ------ ------ --------'
  29439       endif
  29440 c
  29441       if(.not.l_operational) then
  29442         write(io31,*)
  29443         write(io31,*) 'Spike reports'
  29444         write(io31,*) '-------------'
  29445         write(io31,3001)
  29446  3001   format(' index  type    tail num   flight     time       lat'
  29447      x,        '        lon       pres  height '
  29448      x,        't-prcn   temp     innov  ichk'
  29449      x,        ' spec hum    innov  ichk'
  29450      x,        '   ob_dir    innov  ichk'
  29451      x,        '   ob_spd    innov  ichk'
  29452      x,        '   qc flag')
  29453       endif
  29454 c
  29455 c Go back and look for spikes (>3x average number per minute)
  29456 c -----------------------------------------------------------
  29457       l_print = .true.
  29458 c
  29459       l_all_types = .false.
  29460       if(l_all_types) then
  29461         kkbeg = 1
  29462       else
  29463         kkbeg = 6
  29464       endif
  29465 c

Page 661         Source Listing                  SPIKE_QC
2017-04-18 11:07                                 acftobs_qc.f

  29466       write(io8,*)
  29467       write(io8,*) '---------------------------------------------'
  29468       write(io8,*) 'Perform spike check on all types--',l_all_types
  29469       write(io8,*) '(If not, just spike check voice AIREP data)'
  29470       write(io8,*) '---------------------------------------------'
  29471 c
  29472       do kk=kkbeg,6
  29473 c
  29474         ibeg = 1
  29475 c
  29476         if(n_min_avg(kk).le.3) then
  29477           n_thresh = 9
  29478         else
  29479           n_thresh = n_min_avg(kk) * 3
  29480         endif
  29481 c
  29482         if(kk.eq.4) n_thresh = ifix(float(n_thresh) * 1.5)
  29483 c
  29484 c       Look for spikes
  29485 c       ---------------
  29486         do i_min=1,max_min
  29487 c
  29488           if(i_min.eq.1) then
  29489             idiff_before = n_minute(kk,i_min)-n_minute(kk,i_min+1)
  29490             idiff_after  = idiff_before
  29491           elseif(i_min.eq.max_min) then
  29492             idiff_before = n_minute(kk,i_min)-n_minute(kk,i_min-1)  !!!!!
  29493             idiff_after  = idiff_before
  29494           else
  29495             idiff_before = n_minute(kk,i_min)-n_minute(kk,i_min-1)  !!!!!
  29496             idiff_after  = n_minute(kk,i_min)-n_minute(kk,i_min+1)
  29497           endif
  29498 c
  29499           if(n_minute(kk,i_min).ge.n_thresh.and.
  29500      $       idiff_before.gt.n_thresh/2.and.
  29501      $       idiff_after.gt.n_thresh/2) then
  29502 c
  29503             if(kk.eq.1) then
  29504               if(l_print) then
  29505                 write(io8,*)
  29506                 write(io8,*) 'Spike in MDCRS data at min = ',i_min
  29507                 write(io8,*) '----------------------------------'
  29508               endif
  29509             elseif(kk.eq.2) then
  29510               if(l_print) then
  29511                 write(io8,*)
  29512 ccccdak                write(io8,*) 'Spike in ACARS data at min = ',i_min
  29513                 write(io8,*) 'Spike in TAMDAR data at min = ',i_min
  29514                 write(io8,*) '----------------------------------'
  29515               endif
  29516             elseif(kk.eq.3) then
  29517               if(l_print) then
  29518                 write(io8,*)
  29519                 write(io8,*) 'Spike in AMDAR data at min = ',i_min
  29520                 write(io8,*) '----------------------------------'
  29521               endif
  29522             elseif(kk.eq.4) then

Page 662         Source Listing                  SPIKE_QC
2017-04-18 11:07                                 acftobs_qc.f

  29523               if(l_print) then
  29524                 write(io8,*)
  29525                 write(io8,*) 'Spike in autoAIREP data at min = ',i_min
  29526                 write(io8,*) '----------------------------------'
  29527               endif
  29528             elseif(kk.eq.5) then
  29529               if(l_print) then
  29530                 write(io8,*)
  29531                 write(io8,*) 'Spike in YRXX86 data at min = ',i_min
  29532                 write(io8,*) '----------------------------------'
  29533               endif
  29534             elseif(kk.eq.6) then
  29535               if(l_print) then
  29536                 write(io8,*)
  29537                 write(io8,*) 'Spike in voice data at min = ',i_min
  29538                 write(io8,*) '----------------------------------'
  29539               endif
  29540             endif
  29541 c
  29542 c           Loop over obs to reject data in spike
  29543 c           -------------------------------------
  29544             iob = ibeg
  29545             do while(iob.le.numreps)
  29546               ii = indx(iob)
  29547 c
  29548               ii_min = idt(ii)/60 + min_offset
  29549 c
  29550               if(ii_min.lt.1.or.
  29551      $           ii_min.gt.max_min) then
  29552                 write(io8,*)
  29553                 write(io8,*) 'ii_min out of bounds'
  29554                 write(io8,*) '  ii_min = ',i_min
  29555                 write(io8,*) '  idt = ',idt(ii)
  29556                 ii_min = max_min
  29557               endif
  29558 c
  29559               if(ii_min.eq.i_min) then
  29560                 if(kk.eq.1.and.
  29561      $             (itype(ii).eq.i_mdcrs.or.
  29562      $              itype(ii).eq.i_mdcrs_lvl.or.
  29563      $              itype(ii).eq.i_mdcrs_asc.or.
  29564      $              itype(ii).eq.i_mdcrs_des)) then
  29565 c
  29566                   csort(ii)(1:5) = 'badob'
  29567                   nbad_Md = nbad_Md + 1
  29568 c
  29569                 elseif(kk.eq.2.and.
  29570      $                 (itype(ii).eq.i_acars.or.
  29571      $                  itype(ii).eq.i_acars_lvl.or.
  29572      $                  itype(ii).eq.i_acars_asc.or.
  29573      $                  itype(ii).eq.i_acars_des)) then
  29574 c
  29575                   csort(ii)(1:5) = 'badob'
  29576                   nbad_Ac = nbad_Ac + 1
  29577 c
  29578                 elseif(kk.eq.3.and.
  29579      $                 (itype(ii).eq.i_amdar.or. 

Page 663         Source Listing                  SPIKE_QC
2017-04-18 11:07                                 acftobs_qc.f

  29580      $                  itype(ii).eq.i_amdar_lvl.or.
  29581      $                  itype(ii).eq.i_amdar_asc.or.
  29582      $                  itype(ii).eq.i_amdar_des)) then
  29583 c
  29584                   csort(ii)(1:5) = 'badob'
  29585                   nbad_Am = nbad_Am + 1
  29586 c
  29587                 elseif(kk.eq.4.and.
  29588      $                 (itype(ii).eq.i_airep.or.
  29589      $                  itype(ii).eq.i_airep_lvl.or.
  29590      $                  itype(ii).eq.i_airep_asc.or.
  29591      $                  itype(ii).eq.i_airep_des)) then
  29592 c
  29593                   csort(ii)(1:5) = 'badob'
  29594                   nbad_Ar = nbad_Ar + 1
  29595 c
  29596                 elseif(kk.eq.5.and.
  29597      $                 (itype(ii).eq.i_man_Yairep)) then
  29598 c
  29599                   csort(ii)(1:5) = 'badob'
  29600                   nbad_Ma = nbad_Ma + 1
  29601 c
  29602                 elseif(kk.eq.6.and.
  29603      $                 (itype(ii).eq.i_man_airep)) then
  29604 c
  29605                   csort(ii)(1:5) = 'badob'
  29606                   nbad_Ma = nbad_Ma + 1
  29607                 endif
  29608 c
  29609                 if(csort(ii)(1:5).eq.'badob') then
  29610 c
  29611                   kbad(kk) = kbad(kk) + 1
  29612                   c_qc(ii)(2:2) = 'B'
  29613 c
  29614                   if(l_print) then
  29615                     write(io8,3002) ii,c_insty_ob(itype(ii))
  29616      x,               c_acftreg(ii),c_acftid(ii)
  29617      x,               idt(ii),alat(ii),alon(ii)
  29618      x,               pres(ii),ht_ft(ii)
  29619      x,               t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
  29620      x,               ob_q(ii),xiv_q(ii),ichk_q(ii)
  29621      x,               ob_dir(ii),xiv_d(ii),ichk_d(ii)
  29622      x,               ob_spd(ii),xiv_s(ii),ichk_s(ii)
  29623      x,               c_qc(ii)
  29624                   endif
  29625 c
  29626                   if(.not.l_operational) then
  29627                     write(io31,3002) ii,c_insty_ob(itype(ii))
  29628      x,               c_acftreg(ii),c_acftid(ii)
  29629      x,               idt(ii),alat(ii),alon(ii)
  29630      x,               pres(ii),ht_ft(ii)
  29631      x,               t_prcn(ii),ob_t(ii),xiv_t(ii),ichk_t(ii)
  29632      x,               ob_q(ii),xiv_q(ii),ichk_q(ii)
  29633      x,               ob_dir(ii),xiv_d(ii),ichk_d(ii)
  29634      x,               ob_spd(ii),xiv_s(ii),ichk_s(ii)
  29635      x,               c_qc(ii)
  29636  3002               format(i6,1x,a8,1x,a8,1x,a9,1x,i7,1x,2f11.5,1x

Page 664         Source Listing                  SPIKE_QC
2017-04-18 11:07                                 acftobs_qc.f

  29637      x,               f8.1,1x,f7.0,1x,f5.2,4(2(1x,f8.2),1x,i5),1x
  29638      x,               '!',a11,'!')
  29639                   endif
  29640                 endif
  29641 c
  29642               elseif(ii_min.gt.i_min) then
  29643                 ibeg = iob
  29644                 iob = numreps + 1
  29645               endif
  29646               iob = iob + 1
  29647             enddo
  29648           endif
  29649         enddo
  29650       enddo
  29651 c
  29652       kbad(5) = kbad(5) + kbad(6)
  29653 c
  29654 c     Output statistics
  29655 c     -----------------
  29656       if(.not.l_operational) then
  29657         write(io31,*)
  29658         write(io31,*)'  Number of spike MDCRS    reps rejected = '
  29659 cc smb     $,                   kbad(1)
  29660      $,                   nbad_Md 
  29661 ccccdak        write(io31,*)'  Number of spike ACARS    reps rejected = '
  29662         write(io31,*)'  Number of spike TAMDAR   reps rejected = '
  29663 cc smb     $,                   kbad(2)
  29664      $,                   nbad_Ac
  29665         write(io31,*)'  Number of spike AMDAR    reps rejected = '
  29666 cc smb    $,                   kbad(3)
  29667      $,                   nbad_Am
  29668         write(io31,*)'  Number of spike AIREP    reps rejected = '
  29669 cc smb     $,                   kbad(4)
  29670      $,                   nbad_Ar
  29671         write(io31,*)'  Number of spike manAIREP reps rejected = '
  29672 cc smb     $,                   kbad(5)
  29673      $,                   nbad_Ma
  29674       endif
  29675 c
  29676       write(io8,*)
  29677       write(io8,*) '  Spike reports--rejected'
  29678       write(io8,*) '  -----------------------'
  29679       write(io8,*)'  Number of spike MDCRS    reps rejected = '
  29680 cc smb     $,                   kbad(1)
  29681      $,                   nbad_Md
  29682 ccccdak      write(io8,*)'  Number of spike ACARS    reps rejected = '
  29683       write(io8,*)'  Number of spike TAMDAR   reps rejected = '
  29684 cc smb     $,                   kbad(2)
  29685      $,                   nbad_Ac
  29686       write(io8,*)'  Number of spike AMDAR    reps rejected = '
  29687 cc smb    $,                   kbad(3)
  29688      $,                   nbad_Am
  29689       write(io8,*)'  Number of spike AIREP    reps rejected = '
  29690 cc smb     $,                   kbad(4)
  29691      $,                   nbad_Ar
  29692       write(io8,*)'  Number of spike manAIREP reps rejected = '
  29693 cc smb     $,                   kbad(5)

Page 665         Source Listing                  SPIKE_QC
2017-04-18 11:07                                 acftobs_qc.f

  29694      $,                   nbad_Ma
  29695 c
  29696 c     Output detailed stats
  29697 c     ---------------------
  29698       write(*,*)
  29699       write(*,*) 'Spike check data counts--',cdtg_an
  29700       write(*,*) '-----------------------------------'
  29701       write(*,'(1x,a55)')
  29702 ccccdak     $ 'Type of check     MDCRS   ACARS   AMDAR   AIREP     man'
  29703      $ 'Type of check     MDCRS  TAMDAR   AMDAR   AIREP     man'
  29704       write(*,'(1x,a55)')
  29705      $ '--------------- ------- ------- ------- ------- -------'
  29706       write(*,'('' Num considered '',5(1x,i7))')
  29707      $            nrep_Md,nrep_Ac,nrep_Am,nrep_Ar,nrep_Ma
  29708       write(*,'('' Total rejected '',5(1x,i7))')
  29709      $            nbad_Md,nbad_Ac,nbad_Am,nbad_Ar,nbad_Ma
  29710       write(*,'(1x,a55)')
  29711      $ '--------------- ------- ------- ------- ------- -------'
  29712 c
  29713       write(io8,*)
  29714       write(io8,*) 'Spike check data counts'
  29715       write(io8,*) '-----------------------'
  29716       write(io8,'(1x,a55)')
  29717 ccccdak     $ 'Type of check     MDCRS   ACARS   AMDAR   AIREP     man'
  29718      $ 'Type of check     MDCRS  TAMDAR   AMDAR   AIREP     man'
  29719       write(io8,'(1x,a55)')
  29720      $ '--------------- ------- ------- ------- ------- -------'
  29721       write(io8,'(''Num considered '',5(1x,i7))')
  29722      $            nrep_Md,nrep_Ac,nrep_Am,nrep_Ar,nrep_Ma
  29723       write(io8,'(''Total rejected '',5(1x,i7))')
  29724      $            nbad_Md,nbad_Ac,nbad_Am,nbad_Ar,nbad_Ma
  29725       write(io8,'(1x,a55)')
  29726      $ '--------------- ------- ------- ------- ------- -------'
  29727 c
  29728 cc smb      kbadtot = kbad(1) + kbad(2) + kbad(3)
  29729 cc smb     $        + kbad(4) + kbad(5) 
  29730 
  29731       kbadtot = nbad_Md + nbad_Ac + nbad_Am + nbad_Ar + nbad_Ma
  29732 
  29733 c
  29734       write(io8,*)
  29735       write(io8,*) numreps,' good reports processed'
  29736       write(io8,*) kbadtot,' reports failed qc in spike check'
  29737 c
  29738       return
  29739       end

Page 666         Source Listing                  SPIKE_QC
2017-04-18 11:07 Entry Points                    acftobs_qc.f



ENTRY POINTS

  Name                 
                       
 spike_qc_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 3001                       Label  29446                                                          29445                             
 3002                       Label  29636                                                          29615,29627                       
 ABS                        Func   29340                                scalar                    29340,29351,29362,29373,29381,2938
                                                                                                  9                                 
 ALAT                       Dummy  29130    R(8)            8     1     0        ARG,INOUT        29617,29629                       
 ALON                       Dummy  29130    R(8)            8     1     0        ARG,INOUT        29617,29629                       
 AMISS                      Dummy  29132    R(4)            4           scalar   ARG,INOUT        29339,29350,29361,29372,29380,2938
                                                                                                  8,29412                           
 CDTG_AN                    Dummy  29133    CHAR            10          scalar   ARG,INOUT        29699                             
 CSORT                      Dummy  29132    CHAR            25    1     0        ARG,INOUT        29566,29575,29584,29593,29599,2960
                                                                                                  5,29609                           
 C_ACFTID                   Dummy  29129    CHAR            9     1     0        ARG,INOUT        29324,29616,29628                 
 C_ACFTREG                  Dummy  29129    CHAR            8     1     0        ARG,INOUT        29324,29616,29628                 
 C_INSTY_OB                 Func   29184    CHAR            16          scalar                    29615,29627                       
 C_QC                       Dummy  29129    CHAR            11    1     0        ARG,INOUT        29612,29623,29635                 
 FLOAT                      Func   29410                                scalar                    29410,29482                       
 HT_FT                      Dummy  29130    R(4)            4     1     0        ARG,INOUT        29618,29630                       
 IBEG                       Local  29209    I(4)            4           scalar                    29474,29544,29643                 
 ICHK_D                     Dummy  29132    I(4)            4     1     0        ARG,INOUT        29621,29633                       
 ICHK_Q                     Dummy  29131    I(4)            4     1     0        ARG,INOUT        29620,29632                       
 ICHK_S                     Dummy  29132    I(4)            4     1     0        ARG,INOUT        29622,29634                       
 ICHK_T                     Dummy  29131    I(4)            4     1     0        ARG,INOUT        29619,29631                       
 IDIFF_AFTER                Local  29205    I(4)            4           scalar                    29490,29493,29496,29501           
 IDIFF_BEFORE               Local  29204    I(4)            4           scalar                    29489,29490,29492,29493,29495,2950
                                                                                                  0                                 
 IDT                        Dummy  29131    I(4)            4     1     0        ARG,INOUT        29314,29315,29326,29548,29555,2961
                                                                                                  7,29629                           
 IFIX                       Func   29482                                scalar                    29482                             
 II                         Local  29210    I(4)            4           scalar                    29310,29314,29315,29323,29324,2932
                                                                                                  6,29332,29333,29334,29335,29339,29
                                                                                                  340,29343,29344,29345,29346,29350,
                                                                                                  29351,29354,29355,29356,29357,2936
                                                                                                  1,29362,29365,29366,29367,29368,29
                                                                                                  372,29373,29376,29380,29381,29384,
                                                                                                  29388,29389,29546,29548,29555,2956
                                                                                                  1,29562,29563,29564,29566,29570,29
                                                                                                  571,29572,29573,29575,29579,29580,
                                                                                                  29581,29582,29584,29588,29589,2959
                                                                                                  0,29591,29593,29597,29599,29603,29
                                                                                                  605,29609,29612,29615,29616,29617,
                                                                                                  29618,29619,29620,29621,29622,2962
                                                                                                  3,29627,29628,29629,29630,29631,29
                                                                                                  632,29633,29634,29635             
 II_MIN                     Local  29202    I(4)            4           scalar                    29548,29550,29551,29556,29559,2964

Page 667         Source Listing                  SPIKE_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  2                                 
 IMISS                      Dummy  29132    I(4)            4           scalar   ARG,INOUT        29314,29429                       
 INDX                       Dummy  29132    I(4)            4     1     0        ARG,INOUT        29310,29546                       
 INSTY_OB_FUN               Func   29187    I(4)            4           scalar                    29263,29264,29265,29266,29267,2926
                                                                                                  8,29269,29270,29271,29272,29273,29
                                                                                                  274,29275,29276,29277,29278,29279,
                                                                                                  29280                             
 IO31                       Dummy  29133    I(4)            4           scalar   ARG,INOUT        29442,29443,29444,29445,29627,2965
                                                                                                  7,29658,29662,29665,29668,29671   
 IO8                        Dummy  29132    I(4)            4           scalar   ARG,INOUT        29322,29323,29325,29326,29397,2939
                                                                                                  8,29399,29400,29403,29414,29434,29
                                                                                                  436,29437,29466,29467,29468,29469,
                                                                                                  29470,29505,29506,29507,29511,2951
                                                                                                  3,29514,29518,29519,29520,29524,29
                                                                                                  525,29526,29530,29531,29532,29536,
                                                                                                  29537,29538,29552,29553,29554,2955
                                                                                                  5,29615,29676,29677,29678,29679,29
                                                                                                  683,29686,29689,29692,29713,29714,
                                                                                                  29715,29716,29719,29721,29723,2972
                                                                                                  5,29734,29735,29736               
 IOB                        Local  29208    I(4)            4           scalar                    29308,29310,29323,29544,29545,2954
                                                                                                  6,29643,29644,29646               
 ITYPE                      Dummy  29131    I(4)            4     1     0        ARG,INOUT        29332,29333,29334,29335,29343,2934
                                                                                                  4,29345,29346,29354,29355,29356,29
                                                                                                  357,29365,29366,29367,29368,29376,
                                                                                                  29384,29561,29562,29563,29564,2957
                                                                                                  0,29571,29572,29573,29579,29580,29
                                                                                                  581,29582,29588,29589,29590,29591,
                                                                                                  29597,29603,29615,29627           
 I_ACARS                    Local  29217    I(4)            4           scalar                    29263,29343,29570                 
 I_ACARS_ASC                Local  29221    I(4)            4           scalar                    29265,29345,29572                 
 I_ACARS_DES                Local  29223    I(4)            4           scalar                    29266,29346,29573                 
 I_ACARS_LVL                Local  29219    I(4)            4           scalar                    29264,29344,29571                 
 I_AIREP                    Local  29230    I(4)            4           scalar                    29273,29365,29588                 
 I_AIREP_ASC                Local  29232    I(4)            4           scalar                    29275,29367,29590                 
 I_AIREP_DES                Local  29233    I(4)            4           scalar                    29276,29368,29591                 
 I_AIREP_LVL                Local  29231    I(4)            4           scalar                    29274,29366,29589                 
 I_AMDAR                    Local  29234    I(4)            4           scalar                    29277,29354,29579                 
 I_AMDAR_ASC                Local  29236    I(4)            4           scalar                    29279,29356,29581                 
 I_AMDAR_DES                Local  29237    I(4)            4           scalar                    29280,29357,29582                 
 I_AMDAR_LVL                Local  29235    I(4)            4           scalar                    29278,29355,29580                 
 I_MAN_AIREP                Local  29228    I(4)            4           scalar                    29271,29384,29603                 
 I_MAN_YAIREP               Local  29229    I(4)            4           scalar                    29272,29376,29597                 
 I_MDCRS                    Local  29224    I(4)            4           scalar                    29267,29332,29561                 
 I_MDCRS_ASC                Local  29226    I(4)            4           scalar                    29269,29334,29563                 
 I_MDCRS_DES                Local  29227    I(4)            4           scalar                    29270,29335,29564                 
 I_MDCRS_LVL                Local  29225    I(4)            4           scalar                    29268,29333,29562                 
 I_MIN                      Local  29201    I(4)            4           scalar                    29315,29317,29320,29321,29325,2932
                                                                                                  7,29338,29340,29349,29351,29360,29
                                                                                                  362,29371,29373,29379,29381,29387,
                                                                                                  29389,29407,29408,29409,29410,2941
                                                                                                  2,29415,29418,29419,29486,29488,29
                                                                                                  489,29491,29492,29495,29496,29499,
                                                                                                  29506,29513,29519,29525,29531,2953
                                                                                                  7,29554,29559,29642               

Page 668         Source Listing                  SPIKE_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 KBAD                       Local  29213    I(4)            4     1     6                         29286,29611,29652                 
 KBADTOT                    Dummy  29132    I(4)            4           scalar   ARG,INOUT        29731,29736                       
 KK                         Local  29211    I(4)            4           scalar                    29415,29417,29418,29419,29420,2942
                                                                                                  5,29426,29427,29429,29436,29472,29
                                                                                                  476,29479,29482,29489,29492,29495,
                                                                                                  29496,29499,29503,29509,29516,2952
                                                                                                  2,29528,29534,29560,29569,29578,29
                                                                                                  587,29596,29602,29611             
 KKBEG                      Local  29212    I(4)            4           scalar                    29461,29463,29472                 
 L_ALL_TYPES                Local  29257    L(4)            4           scalar                    29459,29460,29468                 
 L_INIT                     Dummy  29133    L(4)            4           scalar   ARG,INOUT        29293                             
 L_OPERATIONAL              Dummy  29133    L(4)            4           scalar   ARG,INOUT        29441,29626,29656                 
 L_PRINT                    Local  29254    L(4)            4           scalar                    29394,29396,29414,29433,29457,2950
                                                                                                  4,29510,29517,29523,29529,29535,29
                                                                                                  614                               
 MAX_MIN                    Param  29142    I(4)            4           scalar                    29198,29206,29317,29321,29327,2940
                                                                                                  7,29486,29491,29551,29556         
 MAX_REPS                   Dummy  29129    I(4)            4           scalar   ARG,INOUT        29154,29155,29156,29157,29158,2915
                                                                                                  9,29160,29161,29162,29163,29164,29
                                                                                                  165,29166,29167,29168,29169,29170,
                                                                                                  29171,29172,29173,29174,29175,2917
                                                                                                  6,29180                           
 MIN_OFFSET                 Param  29145    I(4)            4           scalar                    29315,29548                       
 NBAD_AC                    Local  29246    I(4)            4           scalar                    29299,29576,29664,29685,29709,2972
                                                                                                  4,29731                           
 NBAD_AM                    Local  29250    I(4)            4           scalar                    29303,29585,29667,29688,29709,2972
                                                                                                  4,29731                           
 NBAD_AR                    Local  29249    I(4)            4           scalar                    29302,29594,29670,29691,29709,2972
                                                                                                  4,29731                           
 NBAD_MA                    Local  29248    I(4)            4           scalar                    29301,29600,29606,29673,29694,2970
                                                                                                  9,29724,29731                     
 NBAD_MD                    Local  29247    I(4)            4           scalar                    29300,29567,29660,29681,29709,2972
                                                                                                  4,29731                           
 NREP_AC                    Local  29240    I(4)            4           scalar                    29294,29348,29707,29722           
 NREP_AM                    Local  29244    I(4)            4           scalar                    29298,29359,29707,29722           
 NREP_AR                    Local  29243    I(4)            4           scalar                    29297,29370,29707,29722           
 NREP_MA                    Local  29242    I(4)            4           scalar                    29296,29378,29386,29707,29722     
 NREP_MD                    Local  29241    I(4)            4           scalar                    29295,29337,29707,29722           
 NUMREPS                    Dummy  29129    I(4)            4           scalar   ARG,INOUT        29308,29545,29644,29735           
 N_MINUTE                   Local  29198    I(4)            4     2     4326                      29288,29338,29349,29360,29371,2937
                                                                                                  9,29387,29408,29410,29415,29418,29
                                                                                                  419,29489,29492,29495,29496,29499 
 N_MIN_AVG                  Local  29199    I(4)            4     1     6                         29284,29419,29427,29429,29436,2947
                                                                                                  6,29479                           
 N_MIN_KNT                  Local  29200    I(4)            4     1     6                         29285,29420,29426,29427           
 N_THRESH                   Local  29203    I(4)            4           scalar                    29477,29479,29482,29499,29500,2950
                                                                                                  1                                 
 OB_DIR                     Dummy  29130    R(4)            4     1     0        ARG,INOUT        29621,29633                       
 OB_Q                       Dummy  29130    R(4)            4     1     0        ARG,INOUT        29620,29632                       
 OB_SPD                     Dummy  29130    R(4)            4     1     0        ARG,INOUT        29622,29634                       
 OB_T                       Dummy  29130    R(4)            4     1     0        ARG,INOUT        29619,29631                       
 PRES                       Dummy  29130    R(4)            4     1     0        ARG,INOUT        29618,29630                       
 SPIKE_QC                   Subr   29129                                                                                            
 T_PRCN                     Dummy  29130    R(4)            4     1     0        ARG,INOUT        29619,29631                       
 XIV_D                      Dummy  29131    R(4)            4     1     0        ARG,INOUT        29621,29633                       

Page 669         Source Listing                  SPIKE_QC
2017-04-18 11:07 Symbol Table                    acftobs_qc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 XIV_MINUTE                 Local  29206    R(4)            4     2     4326                      29289,29340,29351,29362,29373,2938
                                                                                                  1,29389,29409,29412,29415         
 XIV_Q                      Dummy  29131    R(4)            4     1     0        ARG,INOUT        29620,29632                       
 XIV_S                      Dummy  29131    R(4)            4     1     0        ARG,INOUT        29339,29340,29350,29351,29361,2936
                                                                                                  2,29372,29373,29380,29381,29388,29
                                                                                                  389,29622,29634                   
 XIV_T                      Dummy  29131    R(4)            4     1     0        ARG,INOUT        29619,29631                       

Page 670         Source Listing                  SPIKE_QC
2017-04-18 11:07                                 acftobs_qc.f

  29740 
  29741 c ###################################################################
  29742 c                            function c_insty_ob
  29743 c ###################################################################
  29744 c
  29745       character*16 function c_insty_ob(num)
  29746 c
  29747 c Return character instrument type for number code
  29748 c
  29749       parameter (mx_nm=42)
  29750 c
  29751       integer nc(mx_nm)
  29752       character*16 c_label(mx_nm),c_rec(mx_nm)
  29753 c
  29754       data(nc(n),c_rec(n),     c_label(n),n=1,mx_nm)
  29755      x /   1,   'SMX',        'sfc land'       ! Land observations (coastal, manual, automated)
  29756      x ,  10,   'SHX',        'sfc ship'       ! Surface obs from ships, fixed and mobile, drifting buoys
  29757      x ,  25,   'XRX',        'man-airep'      ! Manual AIREP (header XRXX)
  29758      x ,  26,   'XRX',        'man-Yairep'     ! Manual AIREP (header YRXX)
  29759      x ,  30,   'S0A',        'airep'          ! Aircraft data (aireps)
  29760      x , 131,   'S0A',        'airep_asc'      !      AIREP ascending profile
  29761      x , 132,   'S0A',        'airep_des'      !      AIREP descending profile
  29762      x ,  33,   'S0A',        'airep_lvl'      !      AIREP level flight
  29763      x ,  34,   'AIR',        'airep_msg'      ! Aircraft data (AIREP)--missing category
  29764      x ,  35,   'AMD',        'amdar'          ! Automated aircraft data (AMDAR)
  29765      x , 136,   'AMD',        'amdar_asc'      !      AMDAR ascending profile
  29766      x , 137,   'AMD',        'amdar_des'      !      AMDAR descending profile
  29767      x ,  38,   'AMD',        'amdar_lvl'      !      AMDAR level flight
  29768 ccccdak     x ,  40,   'ACR',        'acars'          ! Automated aircraft (ACARS) prior to acars_qc
  29769      x ,  40,   'ACR',        'acars'          ! Automated aircraft (TAMDAR) prior to acars_qc
  29770 ccccdak     x , 141,   'ACR',        'acars_asc'      !      ACARS ascending profile
  29771      x , 141,   'ACR',        'acars_asc'      !      TAMDAR ascending profile
  29772 ccccdak     x , 142,   'ACR',        'acars_des'      !      ACARS descending profile
  29773      x , 142,   'ACR',        'acars_des'      !      TAMDAR descending profile
  29774 ccccdak     x ,  43,   'ACR',        'acars_lvl'      !      ACARS level flight
  29775      x ,  43,   'ACR',        'acars_lvl'      !      TAMDAR level flight
  29776      x ,  45,   'MCR',        'mdcrs'          ! Automated aircraft (MDCRS) prior to acars_qc
  29777      x , 146,   'MCR',        'mdcrs_asc'      !      MDCRS ascending profile
  29778      x , 147,   'MCR',        'mdcrs_des'      !      MDCRS descending profile
  29779      x ,  48,   'MCR',        'mdcrs_lvl'      !      MDCRS level flight
  29780      x ,  50,   'TSX',        'cld wnds1'      ! Satellite-derived wind observations
  29781      x ,  51,   'TWX',        'cld wnds2'      ! Satellite-derived wind observations
  29782      x ,  54,   'GMT1',       'METEO-7'        ! SSEC Satellite-derived wind observations
  29783      x ,  55,   'GOSW',       'GOES-10'        ! SSEC Satellite-derived wind observations
  29784      x ,  56,   'GOSE',       'GOES-8'         ! SSEC Satellite-derived wind observations
  29785      x ,  57,   'GMSN',       'GMS_NH'         ! SSEC Satellite-derived wind observations
  29786      x ,  58,   'GMSS',       'GMS_SH'         ! SSEC Satellite-derived wind observations
  29787      x ,  60,   'ssmi_',      'ssmi ff1'       ! SSM/I wind speed, air-sea EDR
  29788      x ,  61,   'SS5',        'ssmi ff2'       ! SSM/I wind speed, air-sea EDR
  29789      x ,  70,   'scat_',      'scat winds'     ! scatterometer ocean surface winds
  29790      x ,  90,   'PAB' ,       'Aus synth'      ! Australian sea-level pres synthetic
  29791      x , 101,   'S0X',        'raob'           ! Rawinsondes (land,ship,drop,mobil)
  29792      x , 110,   'PIB',        'pibal'          ! Pilot balloons (land,ship,mobil)
  29793      x , 120,   'analytic' ,  'analytic'       ! synthetic obs derived from analytic conditions
  29794      x , 140,   'S0F',        'tovs T'         ! tovs retrieved by nesdis
  29795      x , 190,   'GTO' ,       'TC synth'       ! tropical cyclone synthetic observations
  29796      x , 210,   'atovs_',     'atovs bT'       ! ATOVS brightness temp

Page 671         Source Listing                  C_INSTY_OB
2017-04-18 11:07                                 acftobs_qc.f

  29797      x , 220,   'rtovs_',     'rtovs bT'       ! RTOVS brightness temp
  29798      x , 230,   'ssmt_',      'ssmt1 bT'       ! SSM/T1 brightness temp
  29799      x , 240,   'ssmt2_',     'ssmt2 bT'       ! SSM/T2 brightness temp
  29800      x , 250,   'ssmi_',      'ssmi TPPW'  /   ! ssm/i total precipitable water
  29801 c
  29802       do n=1,mx_nm
  29803         if(num.eq.nc(n))then
  29804           c_insty_ob = c_label(n)
  29805           return
  29806          endif
  29807       end do
  29808 c
  29809 c     not found
  29810 c
  29811       c_insty_ob = 'typ not found'
  29812 c
  29813       return
  29814       end


ENTRY POINTS

  Name                   
                         
 c_insty_ob_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 C_INSTY_OB                 Func   29745    CHAR            16          scalar                    29804,29811                       
 C_INSTY_OB@0               Local  29745    CHAR            16          scalar                                                      
 C_LABEL                    Local  29752    CHAR            16    1     42                        29754,29804                       
 C_REC                      Local  29752    CHAR            16    1     42                        29754                             
 MX_NM                      Param  29749    I(4)            4           scalar                    29751,29752,29754,29802           
 N                          Local  29802    I(4)            4           scalar                    29802,29803,29804                 
 NC                         Local  29751    I(4)            4     1     42                        29754,29803                       
 NUM                        Dummy  29745    I(4)            4           scalar   ARG,INOUT        29803                             

Page 672         Source Listing                  C_INSTY_OB
2017-04-18 11:07                                 acftobs_qc.f

  29815 
  29816 c ###################################################################
  29817 c                            function insty_ob_fun
  29818 c ###################################################################
  29819 c
  29820       integer function insty_ob_fun(c_record)
  29821 c
  29822 c Return number code for character instrument type
  29823 c
  29824       parameter (mx_nm=42)
  29825 c
  29826       character*(*) c_record
  29827       integer nc(mx_nm)
  29828       character*16 c_label(mx_nm),c_rec(mx_nm)
  29829 c
  29830       data(nc(n),c_rec(n),     c_label(n),n=1,mx_nm)
  29831      x /   1,   'SMX',        'sfc land'       ! Land observations (coastal, manual, automated)
  29832      x ,  10,   'SHX',        'sfc ship'       ! Surface obs from ships, fixed and mobile, drifting buoys
  29833      x ,  25,   'XRX',        'man-airep'      ! Manual AIREP (header XRXX)
  29834      x ,  26,   'XRX',        'man-Yairep'     ! Manual AIREP (header YRXX)
  29835      x ,  30,   'S0A',        'airep'          ! Aircraft data (aireps) 
  29836      x , 131,   'S0A',        'airep_asc'      !      AIREP ascending profile
  29837      x , 132,   'S0A',        'airep_des'      !      AIREP descending profile
  29838      x ,  33,   'S0A',        'airep_lvl'      !      AIREP level flight
  29839      x ,  34,   'AIR',        'airep_msg'      ! Aircraft data (AIREP)--missing category
  29840      x ,  35,   'AMD',        'amdar'          ! Automated aircraft data (AMDAR)
  29841      x , 136,   'AMD',        'amdar_asc'      !      AMDAR ascending profile
  29842      x , 137,   'AMD',        'amdar_des'      !      AMDAR descending profile
  29843      x ,  38,   'AMD',        'amdar_lvl'      !      AMDAR level flight
  29844 ccccdak     x ,  40,   'ACR',        'acars'          ! Automated aircraft (ACARS) prior to acars_qc
  29845      x ,  40,   'ACR',        'acars'          ! Automated aircraft (TAMDAR) prior to acars_qc
  29846 ccccdak     x , 141,   'ACR',        'acars_asc'      !      ACARS ascending profile
  29847      x , 141,   'ACR',        'acars_asc'      !      TAMDAR ascending profile
  29848 ccccdak     x , 142,   'ACR',        'acars_des'      !      ACARS descending profile
  29849      x , 142,   'ACR',        'acars_des'      !      TAMDAR descending profile
  29850 ccccdak     x ,  43,   'ACR',        'acars_lvl'      !      ACARS level flight
  29851      x ,  43,   'ACR',        'acars_lvl'      !      TAMDAR level flight
  29852      x ,  45,   'MCR',        'mdcrs'          ! Automated aircraft (MDCRS) prior to acars_qc
  29853      x , 146,   'MCR',        'mdcrs_asc'      !      MDCRS ascending profile
  29854      x , 147,   'MCR',        'mdcrs_des'      !      MDCRS descending profile
  29855      x ,  48,   'MCR',        'mdcrs_lvl'      !      MDCRS level flight
  29856      x ,  50,   'TSX',        'cld wnds1'      ! Satellite-derived wind observations
  29857      x ,  51,   'TWX',        'cld wnds2'      ! Satellite-derived wind observations
  29858      x ,  54,   'GMT1',       'METEO-7'        ! SSEC Satellite-derived wind observations
  29859      x ,  55,   'GOSW',       'GOES-10'        ! SSEC Satellite-derived wind observations
  29860      x ,  56,   'GOSE',       'GOES-8'         ! SSEC Satellite-derived wind observations
  29861      x ,  57,   'GMSN',       'GMS_NH'         ! SSEC Satellite-derived wind observations
  29862      x ,  58,   'GMSS',       'GMS_SH'         ! SSEC Satellite-derived wind observations
  29863      x ,  60,   'ssmi_',      'ssmi ff1'       ! SSM/I wind speed, air-sea EDR
  29864      x ,  61,   'SS5',        'ssmi ff2'       ! SSM/I wind speed, air-sea EDR
  29865      x ,  70,   'scat_',      'scat winds'     ! scatterometer ocean surface winds
  29866      x ,  90,   'PAB' ,       'Aus synth'      ! Australian sea-level pres synthetic
  29867      x , 101,   'S0X',        'raob'           ! Rawinsondes (land,ship,drop,mobil)
  29868      x , 110,   'PIB',        'pibal'          ! Pilot balloons (land,ship,mobil)
  29869      x , 120,   'analytic' ,  'analytic'       ! synthetic obs derived from analytic conditions
  29870      x , 140,   'S0F',        'tovs T'         ! tovs retrieved by nesdis
  29871      x , 190,   'GTO' ,       'TC synth'       ! tropical cyclone synthetic observations

Page 673         Source Listing                  INSTY_OB_FUN
2017-04-18 11:07                                 acftobs_qc.f

  29872      x , 210,   'atovs_',     'atovs bT'       ! ATOVS brightness temp
  29873      x , 220,   'rtovs_',     'rtovs bT'       ! RTOVS brightness temp
  29874      x , 230,   'ssmt_',      'ssmt1 bT'       ! SSM/T1 brightness temp
  29875      x , 240,   'ssmt2_',     'ssmt2 bT'       ! SSM/T2 brightness temp
  29876      x , 250,   'ssmi_',      'ssmi TPPW'  /   ! ssm/i total precipitable water
  29877 C
  29878       do n=1,mx_nm
  29879         if(c_record.eq.c_label(n))then
  29880           insty_ob_fun=nc(n)
  29881           return
  29882         endif
  29883       end do
  29884 c
  29885 c     not found
  29886 c
  29887       insty_ob_fun=0
  29888       write(*,*)
  29889       write(*,*) ' *****VVVVV*****'
  29890       write(*,*) ' WARNING: insty_ob_fun could not find c_record=',
  29891      +           c_record
  29892       write(*,*) ' *****^^^^^*****'
  29893       write(*,*)
  29894 c
  29895       return
  29896       end


ENTRY POINTS

  Name                     
                           
 insty_ob_fun_             

Page 674         Source Listing                  INSTY_OB_FUN
2017-04-18 11:07 Symbol Table                    acftobs_qc.f



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 C_LABEL                    Local  29828    CHAR            16    1     42                        29830,29879                       
 C_REC                      Local  29828    CHAR            16    1     42                        29830                             
 C_RECORD                   Dummy  29820    CHAR                        scalar   ARG,INOUT        29879,29891                       
 INSTY_OB_FUN               Func   29820    I(4)            4           scalar                    29880,29887                       
 INSTY_OB_FUN@0             Local  29820    I(4)            4           scalar                                                      
 MX_NM                      Param  29824    I(4)            4           scalar                    29827,29828,29830,29878           
 N                          Local  29878    I(4)            4           scalar                    29878,29879,29880                 
 NC                         Local  29827    I(4)            4     1     42                        29830,29880                       

Page 675         Source Listing                  INSTY_OB_FUN
2017-04-18 11:07                                 acftobs_qc.f

  29897 c
  29898 c ###################################################################
  29899 c                            subroutine slen
  29900 c ###################################################################
  29901 c
  29902       subroutine slen (cstr,lenc)
  29903 c
  29904 c#include <slen.prol>
  29905 c rcs keywords: $RCSfile: slen.F,v $ 
  29906 c               $Revision: 1.1.1.1 $ $Date: 1996/10/01 18:10:37 $
  29907 c
  29908       implicit none
  29909 c
  29910       integer      maxlen              ! dimension of string cstr
  29911      $,            lenc                ! output length of contents of cstr 
  29912      $,            i                   ! index
  29913 c
  29914       character*(*) cstr               ! input string
  29915       character*1  tab                 ! contains tab character
  29916      $,            carriage_return     ! contains carriage return character
  29917      $,            linefeed            ! contains linefeed character
  29918 c
  29919 c # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  29920 c
  29921       tab = char(9)
  29922       linefeed = char(10)
  29923       carriage_return = char(13)
  29924 c
  29925 c Get the size of character string
  29926 c --------------------------------
  29927       maxlen = len(cstr)
  29928 c
  29929       lenc = 0
  29930       do 10 i=1,maxlen
  29931         if ( (cstr(i:i).eq.' ') .or. (cstr(i:i).eq.tab) .or.
  29932      &  (cstr(i:i).eq.carriage_return) .or. (cstr(i:i).eq.linefeed) ) 
  29933      &     return
  29934 c 
  29935         lenc = i
  29936 c 
  29937  10   continue
  29938 c      
  29939       return
  29940       end

Page 676         Source Listing                  SLEN
2017-04-18 11:07 Entry Points                    acftobs_qc.f



ENTRY POINTS

  Name             
                   
 slen_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 10                         Label  29937                                                          29930                             
 CARRIAGE_RETURN            Local  29916    CHAR            1           scalar                    29923,29932                       
 CHAR                       Func   29921                                scalar                    29921,29922,29923                 
 CSTR                       Dummy  29902    CHAR                        scalar   ARG,INOUT        29927,29931,29932                 
 I                          Local  29912    I(4)            4           scalar                    29930,29931,29932,29935           
 LEN                        Func   29927                                scalar                    29927                             
 LENC                       Dummy  29902    I(4)            4           scalar   ARG,INOUT        29929,29935                       
 LINEFEED                   Local  29917    CHAR            1           scalar                    29922,29932                       
 MAXLEN                     Local  29910    I(4)            4           scalar                    29927,29930                       
 SLEN                       Subr   29902                                                                                            
 TAB                        Local  29915    CHAR            1           scalar                    29921,29931                       

Page 677         Source Listing                  SLEN
2017-04-18 11:07                                 acftobs_qc.f

  29941 c

Page 678         Source Listing                  SLEN
2017-04-18 11:07 Subprograms/Common Blocks       acftobs_qc.f



SUBPROGRAMS/COMMON BLOCKS

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ACFTOBS_QC                 Subr   75                                                                                               
 BENFORD_QC                 Subr   10160                                                                                            
 C_INSTY_OB                 Func   29745    CHAR            16          scalar                    29804,29811                       
 DO_FLT                     Subr   9211                                                                                             
 DO_REG                     Subr   9644                                                                                             
 DUPCHEK_QC                 Subr   3613                                                                                             
 GCIRC_QC                   Func   29038    R(4)            4           scalar                    29066,29072,29079                 
 GRCHEK_QC                  Subr   14686                                                                                            
 HT2FL_QC                   Subr   29009                                                                                            
 INDEXC                     Subr   3542                                                                                             
 INNOV_QC                   Subr   9950                                                                                             
 INSTY_OB_FUN               Func   29820    I(4)            4           scalar                    29880,29887                       
 INVALID_QC                 Subr   10800                                                                                            
 ORDCHEK_QC                 Subr   18363                                                                                            
 ORDDUP_QC                  Subr   17703                                                                                            
 P2HT_QC                    Subr   28948                                                                                            
 POSCHEK_QC                 Subr   16098                                                                                            
 PR_WORKDATA                Subr   3395                                                                                             
 P_DDTG                     Subr   29089                                                                                            
 REJLIST_QC                 Subr   28365                                                                                            
 REORDER                    Subr   8558                                                                                             
 SLEN                       Subr   29902                                                                                            
 SPIKE_QC                   Subr   29129                                                                                            
 STK_VAL_QC                 Subr   12325                                                                                            
 SUSPECT_QC                 Subr   27583                                                                                            

COMPILER OPTIONS BEING USED

       -align noall                          -align nonone
       -align nocommons                      -align nodcommons
       -align noqcommons                     -align nozcommons
       -align records                        -align nosequence
       -align norec1byte                     -align norec2byte
       -align norec4byte                     -align norec8byte
       -align norec16byte                    -align norec32byte
       -align norec64byte                    -align noarray8byte
       -align noarray16byte                  -align noarray32byte
       -align noarray64byte                  -align noarray128byte
       -align noarray256byte                 -altparam
       -assume accuracy_sensitive            -assume nobscc
       -assume nobuffered_io                 -assume nobuffered_stdout
       -assume nobyterecl                    -assume nocc_omp
       -assume nocstring                     -assume nodummy_aliases
       -assume nofpe_summary                 -assume noieee_fpe_flags
       -assume nominus0                      -assume noold_boz
       -assume old_complex_align             -assume old_unit_star
       -assume noold_ldout_format            -assume noold_logical_ldio
       -assume old_maxminloc                 -assume old_xor
       -assume noprotect_allocates           -assume protect_constants
       -assume noprotect_parens              -assume split_common
       -assume source_include                -assume nostd_intent_in

Page 679         Source Listing                  SLEN
2017-04-18 11:07                                 acftobs_qc.f

       -assume std_minus0_rounding           -assume nostd_mod_proc_name
       -assume std_value                     -assume norealloc_lhs
       -assume underscore                    -assume no2underscores
  no   -auto                                 -auto_scalar
  no   -bintext                              -ccdefault default
       -check noargs                         -check noarg_temp_created
       -check noassume                       -check nobounds
       -check noformat                       -check nooutput_conversion
       -check nooverflow                     -check nopointers
       -check power                          -check noshape
       -check nostack                        -check nounderflow
       -check nouninitialized                -coarray-num-procs 0
  no   -coarray-config-file                  -convert big_endian
       -cross_reference                      -D __INTEL_COMPILER=1600
       -D __INTEL_COMPILER_UPDATE=3          -D __unix__
       -D __unix                             -D __linux__
       -D __linux                            -D __gnu_linux__
       -D unix                               -D linux
       -D __ELF__                            -D __x86_64
       -D __x86_64__                         -D __amd64
       -D __amd64__                          -D __INTEL_COMPILER_BUILD_DATE=20160415
       -D __INTEL_OFFLOAD                    -D __i686
       -D __i686__                           -D __pentiumpro
       -D __pentiumpro__                     -D __pentium4
       -D __pentium4__                       -D __tune_pentium4__
       -D __SSE2__                           -D __SSE2_MATH__
       -D __SSE__                            -D __SSE_MATH__
       -D __MMX__                            -double_size 64
  no   -d_lines                         no   -Qdyncom
       -error_limit 30                  no   -f66
  no   -f77rtl                          no   -fast
       -fpscomp nofilesfromcmd               -fpscomp nogeneral
       -fpscomp noioformat                   -fpscomp noldio_spacing
       -fpscomp nologicals                   -fixed
  no   -fpconstant                           -fpe3
       -fprm nearest                    no   -ftz
       -fp_model noprecise                   -fp_model fast
       -fp_model nostrict                    -fp_model nosource
       -fp_model nodouble                    -fp_model noextended
       -fp_model novery_fast                 -fp_model noexcept
       -fp_model nono_except                 -heap_arrays 0
  no   -threadprivate_compat                 -g2
       -iface nomixed_str_len_arg            -iface nono_mixed_str_len_arg
       -init noarrays                        -init noinf
       -init nonan                           -init nosnan
       -init nozero                     no   -intconstant
       -integer_size 32                 no   -mixed_str_len_arg
  no   -module                               -names lowercase
  no   -noinclude                            -offload-build=host
       -O2                              no   -pad_source
       -real_size 32                    no   -recursive
       -reentrancy none                 no   -sharable_localsaves
       -vec=simd                             -show noinclude
       -show map                             -show options
  no   -syntax_only                     no   -threadcom
  no   -U                               no   -vms
       -w noall                              -w nonone

Page 680         Source Listing                  SLEN
2017-04-18 11:07                                 acftobs_qc.f

       -w alignments                         -w noargument_checking
       -w nodeclarations                     -w general
       -w noignore_bounds                    -w noignore_loc
       -w nointerfaces                       -w notruncated_source
       -w uncalled                           -w uninitialized
       -w nounused                           -w usage
  no   -wrap-margins

       -includepath : /usrx/local/intel/2016SP3/daal/include/,/usr/include/,.FOR,./.FOR,/usrx/local/intel/2016SP3/ipp/include/.FOR,
           /usrx/local/intel/2016SP3/mkl/include/.FOR,/usrx/local/intel/2016SP3/tbb/include/.FOR,/usrx/local/intel/2016SP3/daal/include/.FOR,
           /gpfs/tp1/usrx/local/intel/2016SP3/compilers_and_libraries_2016.3.210/linux/compiler/include/intel64/.FOR,
           /gpfs/tp1/usrx/local/intel/2016SP3/compilers_and_libraries_2016.3.210/linux/compiler/include/.FOR,/usr/local/include/.FOR,
           /usr/lib/gcc/x86_64-redhat-linux/4.4.7/include/.FOR,/usr/include/.FOR,/usr/include/.FOR,/usr/include/.FOR
       -list filename : acftobs_qc.lst
       -o    filename : none

COMPILER: Intel(R) Fortran 16.0-1633
