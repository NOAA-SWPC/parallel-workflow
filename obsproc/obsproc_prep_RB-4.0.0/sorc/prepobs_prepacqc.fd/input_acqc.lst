Page 1           Source Listing                  INPUT_ACQC
2017-04-18 11:09                                 input_acqc.f

      1 c$$$  Subprogram Documentation Block
      2 c   BEST VIEWED WITH 94-CHARACTER WIDTH WINDOW
      3 c
      4 c Subprogram: input_acqc
      5 c   Programmer: D. Keyser       Org: NP22       Date: 2016-12-09
      6 c
      7 c Abstract: Reads aircraft reports (mass and wind pieces) out of the input PREPBUFR file (in
      8 c   message types 'AIRCAR' and 'AIRCFT') and stores merged (mass and wind) data into memory
      9 c   (e.g., alat, alon, ht_ft, idt, ob_*, xiv_* and ichk_* arrays) for later use by the NRL QC
     10 c   kernel (acftobs_qc).  Some NCEP data values are translated to NRL standards (e.g., u/v to
     11 c   dir/spd, quality information, and report type).  Also stores merged input "event"
     12 c   information into memory (e.g., nevents, *ob_ev, *qm_ev, *pc_ev, *rc_ev, *pg and *pp
     13 c   arrays) for use when later constructing merged (mass and wind) profile reports in
     14 c   PREPBUFR-like file (if requested, i.e., l_doprofiles=T).
     15 c
     16 c Program History Log:
     17 c 2010-11-15  S. Bender  -- Original Author
     18 c 2012-05-08  D. Keyser  -- Prepared for operational implementation
     19 c 2012-11-20  J. Woollen -- Initial port to WCOSS
     20 c 2013-02-07  D. Keyser  -- Will now store pressure and pressure-altitude only from the first
     21 c                           (mass) piece of a mass/wind piece pair rather than re-store it
     22 c                           again from the second (wind) piece - even though they "should" be
     23 c                           the same in both pieces (see % below for exception), there can be
     24 c                           rare cases when at least pressure-altitude is missing in the wind
     25 c                           piece (due to a bug in PREPDATA where unreasonably-high winds are
     26 c                           set to missing and an "empty" wind piece is still encoded into
     27 c                           PREPBUFR, this can lead to floating point exception errors in the
     28 c                           construction of profiles {note that pressure & pressure-altitude
     29 c                           from reports with only a wind piece will be read since it is the
     30 c                           first (only) piece of the report}: % - there can be cases where
     31 c                           the pressure qualty mark (PQM) is different in the mass piece vs.
     32 c                           the wind piece (e.g., when it is set to 10 for reports near
     33 c                           tropical systems by SYNDATA), so it is better to pick up PQM from
     34 c                           the mass report for use in the merged mass/wind profiles, an added
     35 c                           benefit of this chg; if the total number of merged (mass + wind
     36 c                           piece) aircraft-type reports read in from PREPBUFR file is at
     37 c                           least 90% of maximum allowed, print diagnostic warning message
     38 c                           to production joblog file prior to returning from this subroutine
     39 c 2013-02-07  D. Keyser  -- Final changes to run on WCOSS: use formatted print statements
     40 c                           where previously unformatted print was > 80 characters
     41 c 2014-09-03  D. Keyser  -- If no aircraft reports of any type are read from input PREPBUFR
     42 c                           file, no further processing is performed other than the usual
     43 c                           stdout print summary at the end.
     44 c 2016-12-09  D. Keyser  --
     45 c                 - Nomenclature change: replaced "MDCRS/ACARS" with just "MDCRS".
     46 c                 - New LATAM AMDARs contain an encrypted flight number (in addition to a tail
     47 c                   number, all other AMDARs have only a tail number which is copied into
     48 c                   flight number). Read this in and use in QC processing.
     49 c                   BENEFIT: Improves track-checking and other QC for LATAM AMDARs.
     50 c                 - Latitude/longitdue arrays "alat" and "alon" passed out of this subroutine
     51 c                   now double precision. XOB and YOB in PREPBUFR file now scaled to 10**5
     52 c                   (was 10**2) to handle new v7 AMDAR and MDCRS reports which have this
     53 c                   higher precision.
     54 c                   BENEFIT: Retains exact precison here. Improves QC processing.
     55 c                      - Note: QC here can be improved further by changing logic to account
     56 c                              for the increased precision. This needs to be investigated.
     57 c                              For now, location in code where this seems possible is noted by

Page 2           Source Listing                  INPUT_ACQC
2017-04-18 11:09                                 input_acqc.f

     58 c                              the spanning comments:
     59 c                      ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
     60 c                      ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
     61 c
     62 c Usage: call input_acqc(inlun,max_reps,mxnmev,bmiss,imiss,amiss,
     63 c                        m2ft,mxlv,nrpts4QC,cdtg_an,alat,alon,ht_ft,
     64 c                        idt,c_dtg,itype,phase,t_prcn,c_acftreg,
     65 c                        c_acftid,pres,ob_t,ob_q,ob_dir,ob_spd,
     66 c                        ichk_t,ichk_q,ichk_d,ichk_s,
     67 c                        nchk_t,nchk_q,nchk_d,nchk_s,
     68 c                        xiv_t,xiv_q,xiv_d,xiv_s,
     69 c                        l_minus9C,nevents,hdr,acid,rct,drinfo,
     70 c                        acft_seq,turb1seq,turb2seq,turb3seq,
     71 c                        prewxseq,cloudseq,afic_seq,mstq,cat,rolf,
     72 c                        nnestreps,sqn,procn,
     73 c                        pob_ev,pqm_ev,ppc_ev,prc_ev,pbg,ppp,
     74 c                        zob_ev,zqm_ev,zpc_ev,zrc_ev,zbg,zpp,
     75 c                        tob_ev,tqm_ev,tpc_ev,trc_ev,tbg,tpp,
     76 c                        qob_ev,qqm_ev,qpc_ev,qrc_ev,qbg,qpp,
     77 c                        uob_ev,vob_ev,wqm_ev,wpc_ev,wrc_ev,wbg,wpp,
     78 c                        ddo_ev,ffo_ev,dfq_ev,dfp_ev,dfr_ev,
     79 c                        l_allev_pf)
     80 c
     81 c   Input argument list:
     82 c     inlun        - Unit number for the input pre-PREPACQC PREPBUFR file containing all data
     83 c                    (separate mass/wind pieces)
     84 c     max_reps     - Maximum number of reports accepted by acftobs_qc
     85 c     mxnmev       - Maximum number of events allowed, per variable type
     86 c     bmiss        - BUFRLIB missing value (set in main program)
     87 c     imiss        - NRL integer missing value flag (99999)
     88 c     amiss        - NRL real missing value flag (-9999.)
     89 c     m2ft         - NRL conversion factor to convert meters to feet
     90 c     mxlv         - Maximum number of levels allowed in a report profile
     91 c     l_allev_pf   - Logical whether to process latest (likely NRLACQC) event plus all prior
     92 c                    events (TRUE) or only latest event (FALSE) into profiles PREPBUFR-like
     93 c                    file (if TRUE means read in these pre-existing events here)
     94 c
     95 c   Output argument list:
     96 c     nrpts4QC     - Total number of input merged (mass + wind piece) aircraft-type reports
     97 c                    read in from PREPBUFR file
     98 c     cdtg_an      - Date/analysis time (YYYYMMDDCC)
     99 c     alat         - Array of latitudes for the "merged" reports
    100 c     alon         - Array of longitudes for the "merged" reports
    101 c     ht_ft        - Array of altitudes for the "merged" reports
    102 c     idt          - Array of ob-cycle times for the "merged" reports (in seconds)
    103 c     itype        - Array of aircraft type for the "merged" reports
    104 c     phase        - Array of phase of flight for aircraft for the "merged" reports
    105 c     t_prcn       - Array of temperature precision for the "merged" reports
    106 c     c_acftreg    - Array of aircraft tail numbers for the "merged" reports to later be used
    107 c                    in NRL QC processing
    108 c     c_acftid     - Array of aircraft flight numbers for the "merged" reports to later be
    109 c                    used in NRL QC processing
    110 c     pres         - Array of pressure for the "merged" reports
    111 c     ob_t         - Array of aircraft temperature for the "merged" reports
    112 c     ob_q         - Array of aircraft moisture (specific humidity) for the "merged" reports
    113 c     ob_dir       - Array of aircraft wind direction for the "merged" reports
    114 c     ob_spd       - Array of aircraft wind speed for the "merged" reports

Page 3           Source Listing                  INPUT_ACQC
2017-04-18 11:09                                 input_acqc.f

    115 c     ichk_t       - NRL QC flag for temperature ob
    116 c     ichk_q       - NRL QC flag for moisture ob
    117 c     ichk_d       - NRL QC flag for wind direction ob
    118 c     ichk_s       - NRL QC flag for wind speed ob
    119 c     nchk_t       - NCEP PREPBUFR QC flag for temperature ob
    120 c     nchk_q       - NCEP PREPBUFR QC flag for moisture ob
    121 c     nchk_d       - NCEP PREPBUFR QC flag for wind direction ob
    122 c     nchk_s       - NCEP PREPBUFR QC flag for wind speed ob
    123 c     xiv_t        - Array of aircraft temperature innovations (ob-bg) for "merged" reports
    124 c     xiv_q        - Array of aircraft moisture innovations (ob-bg) for "merged" reports
    125 c     xiv_d        - Array of aircraft wind direction innovations (ob-bg) for "merged" reports
    126 c     xiv_s        - Array of aircraft wind speed innovations (ob-bg) for "merged" reports
    127 c     l_minus9C    - Array of logicals denoting aircraft with -9C temperature for "merged"
    128 c                    reports
    129 c     nevents      - Array tracking number of events for all variables (p, q, t, z, u/v,
    130 c                    dir/spd) for "merged" reports
    131 c     hdr          - Array of aircraft report headers info for "merged" reports
    132 c     acid         - Array of aircraft report flight numbers for "merged" MDCRS and AMDAR
    133 c                    (LATAM only) reports (read in from 'ACID' in input PREPBUFR file)
    134 c     rct          - Array of aircraft report receipt times for "merged" reports
    135 c     drinfo       - Array of aircraft "drift" info (just XOB, YOB, DHR right now) for
    136 c                    "merged" reports
    137 c     acft_seq     - Array of temperature precision and phase of flight for aircraft for the
    138 c                    "merged" reports
    139 c     turb1seq     - Array of type 1 aircraft turbulence for the "merged" reports
    140 c     turb2seq     - Array of type 2 aircraft turbulence for the "merged" reports
    141 c     turb3seq     - Array of type 3 aircraft turbulence for the "merged" reports
    142 c     prewxseq     - Array of present weather info for the "merged" reports
    143 c     cloudseq     - Array of cloud info for the "merged" reports
    144 c     afic_seq     - Array of aircraft icing info for the "merged" reports
    145 c     mstq         - Array of aircraft moisture flags for the "merged" reports
    146 c     cat          - Array of PREPBUFR level category values ("CAT") for the "merged" reports
    147 c     rolf         - Aircraft of aircraft roll angle flags for the "merged" reports
    148 c     nnestreps    - Array containing the Number of "nested replications" for turbulence,
    149 c                    present weather, cloud and icing for the "merged" reports
    150 c     sqn          - Array containing the original PREPBUFR mass and wind piece sequence
    151 c                    numbers ("SQN") for the "merged" reports
    152 c     procn        - Array containing the original PREPBUFR mass and wind piece poe process
    153 c                    numbers ("PROCN") for the "merged" reports
    154 c     pob_ev       - Array of pressure event obs for "merged" reports
    155 c     pqm_ev       - Array of pressure event quality marks for "merged" reports
    156 c     ppc_ev       - Array of pressure event program codes for "merged" reports
    157 c     prc_ev       - Array of pressure event reason codes for "merged" reports
    158 c     pbg          - Array of pressure background data for "merged" reports
    159 c     ppp          - Array of pressure post-processing info for "merged" reports
    160 c     zob_ev       - Array of altitude event obs for "merged" reports
    161 c     zqm_ev       - Array of altitude event quality marks for "merged" reports
    162 c     zpc_ev       - Array of altitude event program codes for "merged" reports
    163 c     zrc_ev       - Array of altitude event reason codes for "merged" reports
    164 c     zbg          - Array of altitude background data for "merged" reports
    165 c     zpp          - Array of altitude post-processing info for "merged" reports
    166 c     tob_ev       - Array of temperature event obs for "merged" reports
    167 c     tqm_ev       - Array of temperature event quality marks for "merged" reports
    168 c     tpc_ev       - Array of temperature event program codes for "merged" reports
    169 c     trc_ev       - Array of temperature event reason codes for "merged" reports
    170 c     tbg          - Array of temperature background data "merged" reports
    171 c     tpp          - Array of temperature post-processing info for "merged" reports

Page 4           Source Listing                  INPUT_ACQC
2017-04-18 11:09                                 input_acqc.f

    172 c     qob_ev       - Array of moisture event obs for "merged" reports
    173 c     qqm_ev       - Array of moisture event quality marks for "merged" reports
    174 c     qpc_ev       - Array of moisture event program codes for "merged" reports
    175 c     qrc_ev       - Array of moisture event reason codes for "merged" reports
    176 c     qbg          - Array of moisture background data for "merged" reports
    177 c     qpp          - Array of moisture post-processing info for "merged" reports
    178 c     uob_ev       - Array of wind/u-comp event obs for "merged" reports
    179 c     vob_ev       - Array of wind/v-comp event obs for "merged" reports
    180 c     wqm_ev       - Array of wind event quality marks for "merged" reports
    181 c     wpc_ev       - Array of wind event program codes for "merged" reports
    182 c     wrc_ev       - Array of wind event reason codes for "merged" reports
    183 c     wbg          - Array of wind background data for "merged" reports
    184 c     wpp          - Array of wind post-processing info for "merged" reports
    185 c     ddo_ev       - Array of wind direction event obs for "merged" reports
    186 c     ffo_ev       - Array of wind speed event obs for "merged" reports
    187 c     dfq_ev       - Array of wind direction/speed quality marks  for "merged" reports
    188 c     dfp_ev       - Array of wind direction/speed program codes for "merged" reports
    189 c     dfr_ev       - Array of wind direction/speed reason codes for "merged" reports
    190 c
    191 c   Input files:
    192 c     Unit inlun   - PREPBUFR file containing all obs, prior to any processing by this program
    193 c
    194 c   Output files:
    195 c     Unit 06      - Standard output print
    196 c
    197 c   Subprograms called:
    198 c     Unique:    none
    199 c     Library:
    200 c       SYSTEM:  SYSTEM
    201 c       W3NCO:   ERREXIT    W3TAGE     W3MOVDAT
    202 c       W3EMC:   W3FC05
    203 c       BUFRLIB: IREADMG    IREADSB    UFBINT     UFBSEQ     UFBEVN     READNS     IBFMS
    204 c
    205 c   Exit States:
    206 c     Cond =  0 - successful run
    207 c            23 - unexpected return code from readns; problems reading BUFR file
    208 c
    209 c Remarks: Called by main program.
    210 c
    211 c Attributes:
    212 c   Language: FORTRAN 90
    213 c   Machine:  NCEP WCOSS
    214 c
    215 c$$$
    216       subroutine input_acqc(inlun,max_reps,mxnmev,bmiss,imiss,amiss,
    217      +                      m2ft,mxlv,nrpts4QC,cdtg_an,alat,alon,ht_ft,
    218      +                      idt,c_dtg,itype,phase,t_prcn,c_acftreg,
    219      +                      c_acftid,pres,ob_t,ob_q,ob_dir,ob_spd,
    220      +                      ichk_t,ichk_q,ichk_d,ichk_s,
    221      +                      nchk_t,nchk_q,nchk_d,nchk_s,
    222      +                      xiv_t,xiv_q,xiv_d,xiv_s,
    223      +                      l_minus9C,nevents,hdr,acid,rct,drinfo,
    224      +                      acft_seq,turb1seq,turb2seq,turb3seq,
    225      +                      prewxseq,cloudseq,afic_seq,mstq,cat,rolf,
    226      +                      nnestreps,sqn,procn,
    227      +                      pob_ev,pqm_ev,ppc_ev,prc_ev,pbg,ppp,
    228      +                      zob_ev,zqm_ev,zpc_ev,zrc_ev,zbg,zpp,

Page 5           Source Listing                  INPUT_ACQC
2017-04-18 11:09                                 input_acqc.f

    229      +                      tob_ev,tqm_ev,tpc_ev,trc_ev,tbg,tpp,
    230      +                      qob_ev,qqm_ev,qpc_ev,qrc_ev,qbg,qpp,
    231      +                      uob_ev,vob_ev,wqm_ev,wpc_ev,wrc_ev,wbg,wpp,
    232      +                      ddo_ev,ffo_ev,dfq_ev,dfp_ev,dfr_ev,
    233      +                      l_allev_pf)
    234 
    235       implicit none
    236 
    237 c ------------------------------
    238 c Parameter statements/constants
    239 c ------------------------------
    240       integer inlun             ! input unit number (for pre-prepacqc PREPBUFR file
    241                                 !  containing all obs)
    242       integer max_reps	        ! maximum number of input merged (mass + wind piece)
    243                                 !  aircraft-type reports allowed
    244 cvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
    245 c replace above with this in event of future switch to dynamic memory allocation
    246 
    247 calloc  integer max_reps           ! original number of input merged (mass + wind piece)
    248 calloc                             !  aircraft-type reports (obtained from first pass through
    249 calloc                             !  input PREPBUFR file to get total for array
    250 calloc                             !  allocation should = nrpts4QC)
    251 c^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    252       character*6  cmax_reps    ! character form of max_reps
    253       integer      imiss        ! NRL integer missing value flag
    254       real         amiss        ! NRL real missing value flag
    255       real*8       bmiss        ! BUFRLIB missing value (set in main program)
    256       real         m2ft         ! NRL conversion factor to convert m to ft
    257       integer      mxlv         ! maximum number of report levels allowed in aircraft
    258                                 !  profiles
    259 
    260 c ----------------------
    261 c Declaration statements
    262 c ----------------------
    263 
    264 c Variables for BUFRLIB interface
    265 c -------------------------------
    266       character*8  mesgtype     ! BUFR message type (e.g., 'AIRCFT  ')
    267       integer      mesgdate     ! date time from BUFR message (YYYYMMDDHH)
    268 
    269 c Logicals controlling processing (read in from namelist in main program)
    270 c -----------------------------------------------------------------------
    271       logical l_allev_pf        ! T=process latest (likely NRLACQC) events plus all prior
    272                                 !   events into profiles PREPBUFR-like file (here means must
    273                                 !   read in these pre-existing events)
    274                                 !   **CAUTION: More complete option, but will make code take
    275                                 !              longer to run!!!
    276                                 ! F=process ONLY latest (likely NRLACQC) events into profiles
    277                                 !   PREPBUFR-like file (here means read in only latest events
    278                                 !   which will likely be written over later by NRLACQC events)
    279                                 !
    280                                 ! Note 1: Hardwired to F if l_doprofiles=F
    281                                 ! Note 2: All pre-existing events plus latest (likely NRLACQC)
    282                                 !         events are always encoded into full PREPBUFR file)
    283 
    284 c Indices/counters 
    285 c ----------------

Page 6           Source Listing                  INPUT_ACQC
2017-04-18 11:09                                 input_acqc.f

    286       integer      i,j          ! loop indeces
    287      +,            invi         ! "inverse" of the i counter
    288 
    289 c for BUFR messages:
    290       integer      nACmsg_tot   ! number of acft-type BUFR messages in input PREPBUFR file
    291 
    292 c for BUFR subsets/reports:
    293       integer      nrptsaircar         ! number of AIRCAR BUFR subsets read from PREPBUFR file
    294                                        !  (should = nmswd(2,1) + nmswd(2,2))
    295      +,	           nrptsaircft         ! number of AIRCFT BUFR subsets read from PREPBUFR file
    296                                        !  (should = nmswd(1,1) + nmswd(1,2))
    297      +,	           nmswd(2,2)          ! number of ((AIRCFT,AIRCAR),(mass,wind)) BUFR subsets
    298                                        !  read from PREPBUFR file
    299      +,	           nrpts_rd            ! total number of aircraft-type BUFR subsets read from
    300                                        !  PREPBUFR file (should =
    301                                        !  nmswd(1,1) + nmswd(1,2) + nmswd(2,1) + nmswd(2,2))
    302      +,	           nrpts4QC            ! total number of input merged (mass + wind piece)
    303                                        !  aircraft-type reports read in from PREPBUFR file
    304                                        !  (should = numpairs + numorph)
    305 
    306       integer      numpairs  	       ! number of input merged (mass + wind piece) aircraft-
    307                                        !  type reports read in from PREPBUFR file where there
    308                                        !  is BOTH mass and wind data
    309                                        !  (should = numAIRCFTpairs + numAIRCARpairs)
    310      +,            numorph             ! number of input merged (mass + wind piece) aircraft-
    311                                        !  type reports read in from PREPBUFR file where there
    312                                        !  is either ONLY mass data or only wind data (deemed
    313                                        !  "orphans", of course in reality there is no merging
    314                                        !  here) (should = numAIRCFTorph + numAIRCARorph)
    315      +,            numAIRCFTpairs      ! number of input merged (mass + wind piece) reports
    316                                        !  read in from AIRCFT BUFR messages in PREPBUFR file
    317                                        !  where there is BOTH mass and wind data
    318      +,            numAIRCARpairs      ! number of input merged (mass + wind piece) reports
    319                                        !  read in from AIRCAR BUFR messages in PREPBUFR file
    320                                        !  where there is BOTH mass and wind data
    321      +,            numAIRCFTorph       ! number of input merged (mass + wind piece) reports
    322                                        !  read in from AIRCFT BUFR messages in PREPBUFR file
    323                                        !  where there is either ONLY mass data or only wind
    324                                        !  data (deemed "orphans", of course in reality there
    325                                        !  is no merging here)
    326      +,	           numAIRCARorph       ! number of input merged (mass + wind piece) reports
    327                                        !  read in from AIRCAR BUFR messages in PREPBUFR file
    328                                        !  where there is either ONLY mass data or only wind
    329                                        !  data (deemed "orphans", of course in reality there
    330                                        !  is no merging here)
    331 
    332       integer      nPIREP 	       ! number of input merged (mass + wind piece) reports
    333                                        !  read in from AIRCFT BUFR messages in PREPBUFR file
    334                                        !  that are deemed to be "PIREP" reports
    335      +,	           nAUTOAIREP          ! number of input merged (mass + wind piece) reports
    336                                        !  read in from AIRCFT BUFR messages in PREPBUFR file
    337                                        !  that are deemed to be automated AIREP reports
    338      +,	           nMANAIREP           ! number of input merged (mass + wind piece) reports
    339                                        !  read in from AIRCFT BUFR messages in PREPBUFR file
    340                                        !  that are deemed to be Manual AIREP (all "voice")
    341                                        !  reports
    342      +,	           nAMDAR              ! number of input merged (mass + wind piece) reports

Page 7           Source Listing                  INPUT_ACQC
2017-04-18 11:09                                 input_acqc.f

    343                                        !  read in from AIRCFT BUFR messages in PREPBUFR file
    344                                        !  that are deemed to be AMDAR reports (excluding
    345                                        !  Canadian AMDAR)
    346      +,	           nAMDARcan           ! number of input merged (mass + wind piece) reports
    347                                        !  read in from AIRCFT BUFR messages in PREPBUFR file
    348                                        !  that are deemed to be Canadian AMDAR reports
    349      +,	           nMDCRS              ! number of input merged (mass + wind piece) reports
    350                                        !  read in from AIRCAR BUFR messages in PREPBUFR file
    351                                        !  (all are MDCRS reports)
    352      +,            nTAMDAR             ! number of input merged (mass + wind piece) reports
    353                                        !  read in from AIRCFT BUFR messages in PREPBUFR file
    354                                        !  that are deemed to be TAMDAR reports
    355 
    356 c Functions
    357 c ---------
    358       integer      ireadmg             ! BUFRLIB - for reading messages 
    359      +,            ireadsb             ! BUFRLIB - for reading subsets
    360      +,            ibfms               ! BUFRLIB - for testing for missing
    361 
    362 c Observation arrays
    363 c ------------------
    364       character*10   cdtg_an             ! date-time group for analysis (YYYYMMDDCC)
    365       character*14   c_dtg(max_reps)     ! full date-time group (yyyymmddhhmmss)
    366       character*8    c_acftreg(max_reps) ! aircraft registration (tail) number (used in NRL
    367                                          !  QC processing)
    368       character*9    c_acftid(max_reps)  ! aircraft flight number (used in NRL QC processing)
    369       real*8         alat(max_reps)    ! latitude
    370      +,              alon(max_reps)    ! longitude
    371       real           pres(max_reps)    ! pressure
    372      +,              ht_ft(max_reps)   ! altitude in feet
    373      +,              t_prcn(max_reps)  ! temperature precision
    374      +,              ob_t(max_reps)    ! temperature
    375      +,              ob_q(max_reps)    ! moisture (specific humidity)
    376      +,              ob_dir(max_reps)  ! wind direction
    377      +,              ob_spd(max_reps)  ! wind speed
    378      +,              xiv_t(max_reps)   ! temperature innovation/increment (ob-bg)
    379      +,              xiv_q(max_reps)   ! specific humidity innovation/increment (ob-bg)
    380      +,              xiv_d(max_reps)   ! wind direction innovation/increment (ob-bg)
    381      +,              xiv_s(max_reps)   ! wind speed innovation/increment (ob-bg)
    382       integer        itype(max_reps)   ! instrument (aircraft) type 
    383      +,              idt(max_reps)     ! time in seconds to anal. time (- before, + after)
    384      +,              ichk_t(max_reps)  ! NRL QC flag for temperature ob
    385      +,              ichk_q(max_reps)  ! NRL QC flag for specific humidity ob
    386      +,              ichk_d(max_reps)  ! NRL QC flag for wind direction ob
    387      +,              ichk_s(max_reps)  ! NRL QC flag for wind speed ob
    388      +,              nchk_t(max_reps)  ! NCEP QC flag for temperature ob
    389      +,              nchk_q(max_reps)  ! NCEP QC flag for specific humidity ob
    390      +,              nchk_d(max_reps)  ! NCEP QC flag for wind direction ob
    391      +,              nchk_s(max_reps)  ! NCEP QC flag for wind speed ob
    392      +,              phase(max_reps)   ! phase of flight for aircraft
    393 
    394       logical        l_minus9c(max_reps) ! true for MDCRS -9C temperatures
    395 
    396 c Variables for reading numeric data out of BUFR files via BUFRLIB
    397 c ----------------------------------------------------------------
    398       real*8         arr_8(15,10)      ! array holding BUFR subset values from BUFRLIB call to
    399                                        !  input PREPBUFR file

Page 8           Source Listing                  INPUT_ACQC
2017-04-18 11:09                                 input_acqc.f

    400       integer        nlev              ! number of report levels returned from BUFRLIB call
    401      +,              iret              ! return code for call to BUFRLIB routine readns
    402 
    403 c Variables for reading character data out of BUFR files w/ BUFRLIB
    404 c -----------------------------------------------------------------
    405       real*8         c_arr_8           ! real*8 PREPBUFR report id ("SID")
    406       character*8    charstr           ! character*8 equivalent of c_arr_8
    407 
    408       equivalence(charstr,c_arr_8)
    409 
    410 c Variables for reading event values out of BUFR files w/ BUFRLIB
    411 c --------------------------------------- -----------------------
    412       integer mxevdt                   ! maximum number of events allowed for each ob type
    413       parameter (mxevdt = 10)
    414 
    415       integer mxnmev                   ! maximum number of events allowed in stack
    416      +,       mxvt                     ! maximum number of variable types (P, Q, T, Z, U, V)
    417       parameter (mxvt = 6)
    418 
    419       integer      qms(4)              ! pointers to ichk_[t,q,d,s]
    420       character*1  QM_types(4)         ! characters for QM variable types
    421      +                         /'T','Q','D','S'/
    422 
    423       real*8  pqtzuvEV(mxevdt,mxlv,mxnmev,mxvt) ! holds values read from PREPBUFR file
    424                                                 !  (according to type,level,event,variable)
    425 
    426       character*80    EVstr(mxvt)                ! mnemonic string for populating pqtzuvEV
    427      +                 /'POB PQM PPC PRC PFC PAN CAT', ! pressure
    428      +                  'QOB QQM QPC QRC QFC QAN CAT', ! moisture
    429      +                  'TOB TQM TPC TRC TFC TAN CAT', ! temperature
    430      +                  'ZOB ZQM ZPC ZRC ZFC ZAN CAT', ! altitude
    431      +                  'UOB WQM WPC WRC UFC UAN CAT', ! u-wind
    432      +                  'VOB WQM WPC WRC VFC VAN CAT'/ ! v-wind
    433 
    434       real    uob                      ! u-component wind for a single report
    435      +,       vob                      ! v-component wind for a single report
    436      +,       ufc                      ! u-component background wind for a single report
    437      +,       vfc                      ! v-component background wind for a single report
    438      +,       dir_fc                   ! wind direction background for a single report
    439      +,       spd_fc                   ! wind speed background for a single report
    440 
    441       integer evknt                    ! counter used when determining number of events per
    442                                        !  variable type
    443 
    444       real*8  df_arr(5,mxlv,mxnmev)    ! array used to read out wind (dir/spd) events
    445 
    446 c Variables for determining whether consecutive reports are mass and wind pieces that belong
    447 c  together
    448 c ------------------------------------------------------------------------------------------
    449       logical l_massrpt                ! TRUE if report read in from PREPBUFR is a mass piece
    450      +,       l_windrpt                ! TRUE if report read in from PREPBUFR is a wind piece
    451      +,       l_match                  ! TRUE if mass and wind reports currently being
    452                                        !  processed match (they are part of the same total
    453                                        !  aircraft report)
    454 
    455       real    sqn_current              ! PREPBUFR sequence number ("SQN") of current report
    456      +,       sqn_next                 ! PREPBUFR sequence number ("SQN") of previous report

Page 9           Source Listing                  INPUT_ACQC
2017-04-18 11:09                                 input_acqc.f

    457      +,       procn_current            ! PREPBUFR poes process number ("PROC") of current
    458                                        !  report
    459 
    460 c Variables for converting idt to YYYYMMDDHHMMSS format (stored in array c_dtg)
    461 c -----------------------------------------------------------------------------
    462       integer year                     ! year of analysis time
    463      +,       month                    ! month of analysis time
    464      +,       day                      ! day of analysis time
    465      +,       hour                     ! hour of analysis time
    466      +,       idat(8)                  ! input array for call to w3movdat
    467      +,       jdat(8)                  ! output array for call to w3movdat
    468       real    rinc(5)                  ! array containing time increment for w3movdat
    469 
    470 
    471 c Variables used to hold original aircraft data read from the input PREPBUFR file - necessary
    472 c  for carrying data through program so that it can be written to output profiles PREPBUFR-
    473 c  like file from memory instead of going back to input PREPBUFR file and re-reading that
    474 c  file before adding any QC events resulting from a decision made by the NRL QC routine (not
    475 c  applicable for case of single-level QC'd reports written back to full PREPBUFR file)
    476 c --------------------------------------------------------------------------------------------
    477       integer nevents(max_reps,6)      ! array tracking number of events for variables for
    478                                        !  each report:
    479                                        !   1 - number of pressure events
    480                                        !   2 - number of specific humidity events
    481                                        !   3 - number of temperature events
    482                                        !   4 - number of altitude events
    483                                        !   5 - number of wind (u/v) events
    484                                        !   6 - number of wind (direction/speed) events
    485 
    486       integer nnestreps(4,max_reps)    ! number of "nested replications" for TURB3SEQ,
    487                                        !  PREWXSEQ, CLOUDSEQ, AFIC_SEQ
    488 
    489       integer nrep                     ! number of "nested replications" for TURB3SEQ
    490                                        !  PREWXSEQ, CLOUDSEQ, AFIC_SEQ prior to setting to
    491                                        !  nnestreps
    492 
    493       real*8  pob_ev(max_reps,mxnmev)  ! POB values for each report, including all events
    494      +,       pqm_ev(max_reps,mxnmev)  ! PQM values for each report, including all events
    495      +,       ppc_ev(max_reps,mxnmev)  ! PPC values for each report, including all events
    496      +,       prc_ev(max_reps,mxnmev)  ! PRC values for each report, including all events
    497      +,       zob_ev(max_reps,mxnmev)  ! ZOB values for each report, including all events
    498      +,       zqm_ev(max_reps,mxnmev)  ! ZQM values for each report, including all events
    499      +,       zpc_ev(max_reps,mxnmev)  ! ZPC values for each report, including all events
    500      +,       zrc_ev(max_reps,mxnmev)  ! ZRC values for each report, including all events
    501      +,       tob_ev(max_reps,mxnmev)  ! TOB values for each report, including all events
    502      +,       tqm_ev(max_reps,mxnmev)  ! TQM values for each report, including all events
    503      +,       tpc_ev(max_reps,mxnmev)  ! TPC values for each report, including all events
    504      +,       trc_ev(max_reps,mxnmev)  ! TRC values for each report, including all events
    505      +,       qob_ev(max_reps,mxnmev)  ! QOB values for each report, including all events
    506      +,       qqm_ev(max_reps,mxnmev)  ! QQM values for each report, including all events
    507      +,       qpc_ev(max_reps,mxnmev)  ! QPC values for each report, including all events
    508      +,       qrc_ev(max_reps,mxnmev)  ! QRC values for each report, including all events
    509      +,       uob_ev(max_reps,mxnmev)  ! UOB values for each report, including all events
    510      +,       vob_ev(max_reps,mxnmev)  ! VOB values for each report, including all events
    511      +,       wqm_ev(max_reps,mxnmev)  ! WQM values for each report, including all events
    512      +,       wpc_ev(max_reps,mxnmev)  ! WPC values for each report, including all events
    513      +,       wrc_ev(max_reps,mxnmev)  ! WRC values for each report, including all events

Page 10          Source Listing                  INPUT_ACQC
2017-04-18 11:09                                 input_acqc.f

    514      +,       ddo_ev(max_reps,mxnmev)  ! DDO values for each report, including all events
    515      +,       ffo_ev(max_reps,mxnmev)  ! FFO values for each report, including all events
    516      +,       dfq_ev(max_reps,mxnmev)  ! DFQ values for each report, including all events
    517      +,       dfp_ev(max_reps,mxnmev)  ! DFP values for each report, including all events
    518      +,       dfr_ev(max_reps,mxnmev)  ! DFR values for each report, including all events
    519 
    520      +,       hdr(max_reps,15)         ! SID XOB YOB DHR ELV TYP T29 TSB ITP SQN PROCN RPT
    521                                        !  TCOR RSRD EXRSRD
    522      +,       acid(max_reps)           ! ACID
    523      +,       rct(max_reps)            ! RCT
    524 
    525      +,       pbg(max_reps,3)          ! POE PFC PFCMOD
    526      +,       zbg(max_reps,3)          ! ZOE ZFC ZFCMOD
    527      +,       tbg(max_reps,3)          ! TOE TFC TFCMOD
    528      +,       qbg(max_reps,3)          ! QOE QFC QFCMOD
    529      +,       wbg(max_reps,5)          ! WOE UFC VFC UFCMOD VFCMOD
    530 
    531      +,       ppp(max_reps,3)          ! PAN PCL PCS
    532      +,       zpp(max_reps,3)          ! ZAN ZCL ZCS
    533      +,       tpp(max_reps,3)          ! TAN TCL TCS
    534      +,       qpp(max_reps,3)          ! QAN QCL QCS
    535      +,       wpp(max_reps,6)          ! UAN VAN UCL VCL UCS VCS
    536 
    537      +,       drinfo(max_reps,3)       ! XOB YOB DHR
    538      +,       acft_seq(max_reps,2)     ! PCAT POAF
    539 
    540      +,       turb1seq(max_reps)       ! TRBX
    541      +,       turb2seq(max_reps,4)     ! TRBX10 TRBX21 TRBX32 TRBX43
    542      +,       turb3seq(3,max_reps,5)   ! DGOT HBOT HTOT
    543      +,       prewxseq(1,max_reps,5)   ! PRWE
    544      +,       cloudseq(5,max_reps,5)   ! VSSO CLAM CLTP HOCB HOCT
    545      +,       afic_seq(3,max_reps,5)   ! AFIC HBOI HTOI 
    546      +,       mstq(max_reps)           ! MSTQ
    547      +,       cat(max_reps)            ! CAT
    548      +,       rolf(max_reps)           ! ROLF
    549 
    550      +,       sqn(max_reps,2)          ! SQN (1=SQN for mass, 2=SQN for wind)
    551      +,       procn(max_reps,2)        ! PROCN (1=PROCN for mass, 2=PROCN for wind)
    552 
    553 c *******************************************************************
    554 
    555 c Start subroutine
    556 c ----------------
    557       write(*,*)
    558       write(*,*) '**********************'
    559       write(*,*) 'Welcome to input_acqc.'
    560       call system('date')
    561       write(*,*) '**********************'
    562       write(*,*)
    563 
    564 c Input PREPBUFR file is open and ready for reading by BUFRLIB
    565 c ------------------------------------------------------------
    566 
    567       print *, 'Initializing...'
    568 
    569 c Initialize observation arrays
    570 c -----------------------------

Page 11          Source Listing                  INPUT_ACQC
2017-04-18 11:09                                 input_acqc.f

    571       ob_t   = amiss
    572       ob_q   = amiss
    573       ob_dir = amiss
    574       ob_spd = amiss
    575       xiv_t  = amiss
    576       xiv_q  = amiss
    577       xiv_d  = amiss
    578       xiv_s  = amiss
    579 
    580       nchk_t = -9
    581       nchk_q = -9
    582       nchk_d = -9
    583       nchk_s = -9
    584 
    585 ! vvvv DAK-future change perhaps to account for incr. lat/lon precision
    586       alat   = amiss
    587       alon   = amiss
    588 ! ^^^^ DAK-future change perhaps to account for incr. lat/lon precision
    589       pres   = amiss
    590       ht_ft  = amiss
    591       itype  = imiss
    592       idt    = imiss
    593 
    594       c_acftreg = '        '
    595       c_acftid  = '         '
    596       c_dtg     = '              '
    597 
    598       nevents = 0
    599 
    600       pob_ev = bmiss
    601       pqm_ev = bmiss
    602       ppc_ev = bmiss
    603       prc_ev = bmiss
    604 
    605       zob_ev = bmiss
    606       zqm_ev = bmiss
    607       zpc_ev = bmiss
    608       zrc_ev = bmiss
    609 
    610       tob_ev = bmiss
    611       tqm_ev = bmiss
    612       tpc_ev = bmiss
    613       trc_ev = bmiss
    614 
    615       qob_ev = bmiss
    616       qqm_ev = bmiss
    617       qpc_ev = bmiss
    618       qrc_ev = bmiss
    619 
    620       uob_ev = bmiss
    621       vob_ev = bmiss
    622       wqm_ev = bmiss
    623       wpc_ev = bmiss
    624       wrc_ev = bmiss
    625 
    626       ddo_ev = bmiss
    627       ffo_ev = bmiss

Page 12          Source Listing                  INPUT_ACQC
2017-04-18 11:09                                 input_acqc.f

    628       dfq_ev = bmiss
    629       dfp_ev = bmiss
    630       dfr_ev = bmiss
    631 
    632       hdr  = bmiss
    633       rct  = bmiss
    634       acid = bmiss
    635 
    636       pbg = bmiss
    637       zbg = bmiss
    638       qbg = bmiss
    639       tbg = bmiss
    640       wbg = bmiss
    641 
    642       ppp = bmiss
    643       zpp = bmiss
    644       qpp = bmiss
    645       tpp = bmiss
    646       wpp = bmiss
    647 
    648       drinfo   = bmiss
    649       turb1seq = bmiss
    650       turb2seq = bmiss
    651       turb3seq = bmiss
    652       prewxseq = bmiss
    653       cloudseq = bmiss
    654       afic_seq = bmiss
    655       mstq     = bmiss
    656       cat      = bmiss
    657       rolf     = bmiss
    658 
    659       sqn   = 999999
    660       procn = 999999
    661 
    662       nnestreps = 0
    663 
    664       l_minus9C = .false.
    665 
    666       print *, 'Done initializing arrays...'
    667 
    668 c Initialize counters
    669 c -------------------
    670       nACmsg_tot = 0
    671       numpairs   = 0
    672       numorph    = 0
    673 
    674       nrptsaircar = 0
    675       nrptsaircft = 0
    676 
    677       nrpts_rd = 0
    678       nrpts4QC = 0
    679 
    680       numAIRCFTpairs = 0
    681       numAIRCARpairs = 0
    682       numAIRCFTorph  = 0
    683       numAIRCARorph  = 0
    684 

Page 13          Source Listing                  INPUT_ACQC
2017-04-18 11:09                                 input_acqc.f

    685       nPIREP     = 0
    686       nAUTOAIREP = 0
    687       nMANAIREP  = 0
    688       nAMDAR     = 0
    689       nAMDARcan  = 0
    690       nMDCRS     = 0
    691       nTAMDAR    = 0
    692 
    693       print *, 'Done initializing counters...'
    694 	
    695 c Initialize logicals
    696 c -------------------
    697       l_massrpt = .false.
    698       l_windrpt = .false.
    699 
    700       l_match   = .false.
    701 
    702       print *, 'Done initializing logicals...'
    703 
    704 c Read data from pre-QC PREPBUFR file
    705 c -----------------------------------
    706       write(*,*) 'Beginning data read!'
    707 
    708 c Start reading messages
    709 c ----------------------
    710       loop2: do while(ireadmg(inlun,mesgtype,mesgdate).eq.0)
    711 
    712 c Only consider reports from messages with type 'AIRCFT' or 'AIRCAR'
    713 c ------------------------------------------------------------------
    714         if(mesgtype.eq.'AIRCFT'.or.mesgtype.eq.'AIRCAR') then
    715 
    716 c Update counters of messages read in and considered
    717 c --------------------------------------------------
    718           nACmsg_tot = nACmsg_tot + 1
    719 
    720 c The date in all NCEP PREPBUFR messages is the date/cycle time - use this for the variable
    721 c  cdtg_an - no need to read in the cycle time from std input
    722 c -----------------------------------------------------------------------------------------
    723           if(nACmsg_tot.eq.1) then ! obtain date/cycle from the first PREPBUFR message read
    724             write(cdtg_an,'(i10)') mesgdate ! Convert mesgdate to character
    725             write(*,*) 'Cycle date/time in PREPBUFR messages: ',cdtg_an
    726           endif
    727 
    728 c Using the function ireadsb, read the PREPBUFR subsets/reports, which are separated into
    729 c  mass and wind pieces (NCEP convention) - we will need to pull out values and populate the
    730 c  following arrays, which will be used by the NRL aircraft QC routine:
    731 c    itype, alat, alon, pres, ht_ft,idt, c_dtg, c_acftreg, c_acftid, t_prcn, ob_t, ob_q,
    732 c    ob_dir, ob_spd, ichk_t, ichk_q, ichk_d, ichk_s, l_minus9C
    733 c ------------------------------------------------------------------------------------------
    734           do while(ireadsb(inlun).eq.0)
    735 
    736  4001  	    continue
    737             l_match = .false. ! Reset match indicator. second halves of matches are read
    738                               !  starting at statement 6001
    739 
    740             if(mesgtype.eq.'AIRCAR') then
    741               nrptsaircar = nrptsaircar + 1

Page 14          Source Listing                  INPUT_ACQC
2017-04-18 11:09                                 input_acqc.f

    742             elseif (mesgtype.eq.'AIRCFT') then
    743               nrptsaircft = nrptsaircft + 1
    744             else ! not an aircraft-type message, cycle back to message reading loop & see if
    745                  !  there are more in file
    746               print *, '---> MESGTYPE NOT AIRCRAFT TYPE!!!',' "', 
    747      +                 mesgtype,'"'
    748               print *, '---> keep looping through messages in case any',
    749      +                 ' more are in file'
    750               cycle loop2
    751             endif
    752             nrpts_rd = nrpts_rd + 1 ! number of aircraft-type BUFR subsets read from
    753                                     !  PREPBUFR file 
    754 
    755  5001  	    continue ! will come here if we've just stored the second of a pair or an orphan;
    756                      !  need to increment index for the report-oriented arrays
    757             if(nrpts4QC+1.gt.max_reps) then
    758 c.......................................................................
    759 c There are more reports in input file than "max_reps" -- do not process any more reports
    760 c ---------------------------------------------------------------------------------------
    761               print 53, max_reps,max_reps
    762    53 format(/' #####> WARNING: THERE ARE MORE THAN ',I6,' AIRCRAFT ',
    763      + 'REPORTS IN INPUT FILE -- MUST INCREASE SIZE OF PARAMETER NAME',
    764      + ' "MAX_REPS" - WILL CONTINUE ON PROCESSING ONLY ',I6,' REPORTS'/)
    765               write(cmax_reps,'(i6)') max_reps
    766               call system('[ -n "$jlogfile" ] && $DATA/postmsg'//
    767      +         ' "$jlogfile" "***WARNING:'//cmax_reps//' AIRCRAFT '//
    768      +         'REPORT LIMIT EXCEEDED IN PREPOBS_PREPACQC, ONLY '//
    769      +         cmax_reps//' RPTS PROCESSED"')
    770               exit loop2
    771 c.......................................................................
    772             endif
    773             nrpts4QC = nrpts4QC + 1 ! number of input merged (mass + wind piece) aircraft-
    774                                     !  type reports read in from PREPBUFR file (for QC code/
    775                                     !  index for arrays that will be used by acftobs_qc)
    776  6001       continue ! will come here if we need to check subset n+1 and see if it matches
    777                      !  the one just stored (treat subset n+1 as a new subset n)
    778 
    779 c Pull out the "header" info for subset n, which will either be a mass or wind piece - header
    780 c  mnemonics are: YOB XOB ELV DHR POAF TYP  PCAT, along w/ SID
    781 c -------------------------------------------------------------------------------------------
    782             arr_8 = bmiss
    783 
    784             call ufbint(inlun,arr_8,15,10,nlev,
    785      +'YOB XOB ELV DHR TYP T29 TSB ITP SQN PROCN RPT TCOR RSRD EXPRSRD')
    786 
    787 cccccc      hdr(nrpts4QC,1) = SID - stored later in code
    788             hdr(nrpts4QC,2) = arr_8(2,1) ! XOB
    789             hdr(nrpts4QC,3) = arr_8(1,1) ! YOB
    790             hdr(nrpts4QC,4) = arr_8(4,1) ! DHR 
    791             hdr(nrpts4QC,5) = arr_8(3,1) ! ELV 
    792             hdr(nrpts4QC,6:15) = arr_8(5:14,1) ! TYP T29 TSB ITP SQN PROCN RPT TCOR RSRD
    793                                                !  EXRSRD
    794 
    795 c Drift information
    796 c -----------------
    797             drinfo(nrpts4QC,1) = arr_8(2,1) ! XOB/XDR
    798             drinfo(nrpts4QC,2) = arr_8(1,1) ! YOB/YDR

Page 15          Source Listing                  INPUT_ACQC
2017-04-18 11:09                                 input_acqc.f

    799             drinfo(nrpts4QC,3) = arr_8(4,1) ! DHR/HRDR
    800 
    801 c Arrays used in NRL QC routine itself
    802 c ------------------------------------
    803             alat(nrpts4QC) = arr_8(1,1) ! YOB
    804             alon(nrpts4QC) = arr_8(2,1) ! XOB
    805             ht_ft(nrpts4QC) = nint(arr_8(3,1)*m2ft) ! ELV in PREPBUFR is in meters NRL QC
    806                                                     !  wants feet
    807             idt(nrpts4QC) = nint(arr_8(4,1)*3600.)  ! NRL QC expects idt in sec
    808 
    809 c Determine whether this is a temperature or a wind report
    810 c --------------------------------------------------------
    811             if(int(arr_8(5,1))/100.eq.1) then
    812               l_massrpt = .true.
    813               l_windrpt = .false.
    814 
    815               if(mesgtype.eq.'AIRCFT') then
    816                 nmswd(1,1) = nmswd(1,1) + 1
    817               elseif(mesgtype.eq.'AIRCAR') then
    818                 nmswd(2,1) = nmswd(2,1) + 1
    819               endif
    820 
    821             elseif(int(arr_8(5,1))/100.eq.2) then
    822               l_massrpt = .false.
    823               l_windrpt = .true.
    824 
    825               if(mesgtype.eq.'AIRCFT') then
    826                 nmswd(1,2) = nmswd(1,2) + 1
    827               elseif(mesgtype.eq.'AIRCAR') then
    828                 nmswd(2,2) = nmswd(2,2) + 1
    829               endif
    830 
    831             endif
    832 
    833             itype(nrpts4QC) = mod(int(hdr(nrpts4QC,6)),100) 
    834                              ! 30 = NCEP: AIREP (NRL Manual AIREP/voice)
    835                              ! 30 = NCEP: PIREP (NRL Manual AIREP/voice)
    836                              ! 31 = NCEP: AMDAR (all types except Canadian) (NRL: AMDAR)
    837                              ! 32 = NCEP; RECCOs, but these are in ADPUPA msgs
    838                              ! 33 = NCEP: MDCRS (NRL: MDCRS)
    839                              ! 34 = NCEP: TAMDAR (NRL: ACARS)
    840                              ! 35 = NCEP: Canadian AMDAR (NRL: AMDAR)
    841 
    842 c Process SQN/PROCN - they will be used to construct full reports from mass and wind pieces
    843 c -----------------------------------------------------------------------------------------
    844             sqn_current = hdr(nrpts4QC,10)
    845             procn_current = hdr(nrpts4QC,11)
    846 
    847 c Get turbulence values, present weather (PRWE), cloud data, etc. (these are all nested-
    848 c  replicated)
    849 c
    850 c Note: These values, while there may be multiple replications of them, should be present
    851 c       only on a single level upon input (aircraft data is organized as single-level data
    852 c       upon input to this program - prior step is PREPDATA)
    853 c ----------------------------------------------------------------------------------------
    854 
    855 c turb3seq values: DGOT HBOT HTOT                

Page 16          Source Listing                  INPUT_ACQC
2017-04-18 11:09                                 input_acqc.f

    856 c  -- since this is not encoded to PREPBUFR-like (profiles) right now, no need to read in
    857 ccccc       arr_8 = bmiss
    858 ccccc
    859 ccccc       call ufbseq(inlun,arr_8,15,10,nrep,'TURB3SEQ')
    860 ccccc
    861 ccccc       nnestreps(1,nrpts4QC) = nrep
    862 ccccc
    863 ccccc       if(nrep.ne.0) then ! There is turb3seq data to store
    864 ccccc         do i = 1,nrep
    865 ccccc
    866 ccccc           if(nrep.le.5) then
    867 ccccc             turb3seq(:,nrpts4QC,nnestreps(1,nrpts4QC)-nrep+i)
    868 ccccc+             = arr_8(1:3,i)
    869 ccccc           else ! there are more than 5 replications of TURB3SEQ 
    870 ccccc             print *,'there are more than 5 reps of TURB3SEQ'
    871 ccccc             print *,'report #', nrpts4QC
    872 ccccc           endif ! if(nrep.le.5)
    873 ccccc
    874 ccccc         enddo ! do i = 1,nrep
    875 ccccc       endif ! if(nrep.ne.0)
    876 
    877 c prewxseq values: PRWE
    878 c  -- since this is not encoded to PREPBUFR-like (profiles) right now, no need to read in
    879 ccccc       arr_8 = bmiss
    880 ccccc
    881 ccccc       call ufbseq(inlun,arr_8,15,10,nrep,'PREWXSEQ')
    882 ccccc
    883 ccccc       nnestreps(2,nrpts4QC) = nrep
    884 ccccc
    885 ccccc       if(nrep.gt.0) then
    886 ccccc         do i = 1,nrep
    887 ccccc
    888 ccccc           if(nrep.le.5) then
    889 ccccc             prewxseq(1,nrpts4QC,nnestreps(2,nrpts4QC)-nrep+i) 
    890 ccccc+             = arr_8(1,i)
    891 ccccc           else ! there are more than 5 replications of PREWXSEQ
    892 ccccc             print *,'there are more than 5 reps of PREWXSEQ'
    893 ccccc             print *,'report #', nrpts4QC
    894 ccccc           endif ! if(nrep.le.5)
    895 ccccc
    896 ccccc         enddo ! do i = 1,nrep
    897 ccccc       endif ! if(nrep.gt.0)
    898  
    899 c cloudseq values: VSSO CLAM CLTP HOCB HOCT 
    900 c  -- since this is not encoded to PREPBUFR-like (profiles) right now, no need to read in
    901 ccccc       arr_8 = bmiss
    902 ccccc
    903 ccccc       call ufbseq(inlun,arr_8,15,10,nrep,'CLOUDSEQ')
    904 ccccc
    905 ccccc       nnestreps(3,nrpts4QC) = nrep
    906 ccccc
    907 ccccc       if(nrep.gt.0) then
    908 ccccc         do i = 1,nrep
    909 ccccc
    910 ccccc           if(nrep.le.5) then
    911 ccccc             cloudseq(:,nrpts4QC,nnestreps(3,nrpts4QC)-nrep+i) 
    912 ccccc+             = arr_8(1:5,i) 

Page 17          Source Listing                  INPUT_ACQC
2017-04-18 11:09                                 input_acqc.f

    913 ccccc         else ! there are more than 5 replications of the cloud data
    914 ccccc             print *,'there are more than 5 reps of CLOUDSEQ'
    915 ccccc             print *,'report #', nrpts4QC
    916 ccccc           endif ! if(nrep.le.5)
    917 ccccc        
    918 ccccc         enddo ! do i = 1,nrep
    919 ccccc       endif ! if(nrep.gt.0)
    920 
    921 c afic_seq values: AFIC HBOI HTOI
    922 c  -- since this is not encoded to PREPBUFR-like (profiles) right now, no need to read in
    923 ccccc       arr_8 = bmiss
    924 ccccc
    925 ccccc       call ufbseq(inlun,arr_8,15,10,nrep,'AFIC_SEQ')
    926 ccccc         
    927 ccccc       nnestreps(4,nrpts4QC) = nrep
    928 ccccc        
    929 ccccc       if(nrep.gt.0) then
    930 ccccc         do i = 1,nrep
    931 ccccc
    932 ccccc           if(nrep.le.5) then
    933 ccccc             afic_seq(:,nrpts4QC,nnestreps(4,nrpts4QC)-nrep+i) 
    934 ccccc+              = arr_8(1:3,i)
    935 ccccc           else ! there are more than 5 replications of the aircraft icing data
    936 ccccc             print *,'there are more than 5 reps of AFIC_SEQ'
    937 ccccc             print *,'report #', nrpts4QC
    938 ccccc           endif ! if(nrep.le.5)
    939 ccccc
    940 ccccc         enddo ! do i = 1,nrep		
    941 ccccc       endif ! if(nrep.gt.0)
    942 
    943 c Start pulling out non-nested-replicated values
    944 c ----------------------------------------------
    945 
    946 c acft_seq values: PCAT POAF
    947             arr_8 = bmiss
    948 
    949             call ufbint(inlun,arr_8,15,10,nlev,'PCAT POAF')
    950 
    951             acft_seq(nrpts4QC,:) = arr_8(1:2,1)
    952 
    953             if(ibfms(arr_8(2,1)).ne.0 .or. arr_8(2,1).eq.7.) then
    954               phase(nrpts4QC) = 9                   ! NRL sets a missing value of
    955             else                                    !  phase of flight = 9
    956               phase(nrpts4QC) = int(arr_8(2,1))
    957             endif
    958 
    959             t_prcn(nrpts4QC) = arr_8(1,1)
    960 
    961 c turb[1,2]seq values: TRBX TRBX10 TRBX21 TRBX32 TRBX43
    962             arr_8 = bmiss
    963 
    964             call ufbint(inlun,arr_8,15,10,nlev,
    965      +                 'TRBX TRBX10 TRBX21 TRBX32 TRBX43')
    966 
    967             turb1seq(nrpts4QC) = arr_8(1,1)
    968             turb2seq(nrpts4QC,:) = arr_8(2:5,1)
    969 

Page 18          Source Listing                  INPUT_ACQC
2017-04-18 11:09                                 input_acqc.f

    970 c Other misc. values: RCT, ROLF, MSTQ, CAT
    971             arr_8 = bmiss
    972 
    973             call ufbint(inlun,arr_8,15,10,nlev,'RCT ROLF MSTQ CAT')
    974 
    975             rct(nrpts4QC) = arr_8(1,1)
    976             mstq(nrpts4QC) = arr_8(3,1)
    977             cat(nrpts4QC) = arr_8(4,1)
    978             rolf(nrpts4QC) = arr_8(2,1)
    979 
    980 c ----------------------------------------------------------------------------------------
    981 c ----------------------------------------------------------------------------------------
    982 c Populate flight number and tail number arrays (c_acftid and c_acftreg, resp.)
    983 c ----------------------------------------------------------------------------------------
    984             call ufbint(inlun,c_arr_8,1,1,nlev,'SID')
    985 
    986             hdr(nrpts4QC,1) = c_arr_8
    987 
    988             if(mesgtype.eq.'AIRCFT') then
    989               if(itype(nrpts4QC).eq.31 .or.
    990      +           itype(nrpts4QC).eq.35) then
    991 
    992 c All AMDAR types currently store tail number in 'SID', while flight number is missing or all
    993 c  blanks for all types except for LATAM (Chile) - if flight number is missing or all blanks,
    994 c  copy 'SID' into BOTH tail number and flight number locations in NRL arrays; if flight
    995 c  number is present and nnot all blanks (LATAM), copy flight number (from 'ACID') into flight
    996 c  number location in NRL array
    997 c  (Note: European AMDARs may have a valid flight number but it is not yet available in
    998 c         PREPBUFR, when it is it will be in mnemonic 'ACID' - DAK)
    999 c ------------------------------------------------------------------------------------------
   1000                 c_acftreg(nrpts4QC) = charstr   ! tail number
   1001                 c_acftid(nrpts4QC)  = charstr   ! flight number (default is tail number)
   1002                 call ufbint(inlun,c_arr_8,1,1,nlev,'ACID')
   1003                 if(ibfms(c_arr_8).eq.0) then
   1004                    if(charstr.ne.'        ') then
   1005                       c_acftid(nrpts4QC) = charstr    ! flight number ('ACID' if present, always)
   1006                       acid(nrpts4QC) = c_arr_8        !  the case for LATAM AMDAR
   1007                    endif
   1008                 endif
   1009 
   1010               elseif(itype(nrpts4QC).eq.30 .or.
   1011      +               itype(nrpts4QC).eq.34) then
   1012 
   1013 c AIREP currently stores flight number in 'SID', while PIREP and TAMDAR currently store a
   1014 c  manufactured ID in 'SID' - copy this into ONLY flight number location in NRL array
   1015 c  (tail number location will store an all blank tail number - missing)
   1016 c ---------------------------------------------------------------------------------------
   1017                 c_acftid(nrpts4QC)  = charstr   ! flight number
   1018                 c_acftreg(nrpts4QC) = '        '! tail number
   1019 
   1020                 if(itype(nrpts4QC).eq.34)       ! TAMDARs replace '000' in characters 1-3
   1021      +           c_acftid(nrpts4QC)(1:3) = 'TAM'!  of flight # with 'TAM' so they will pass
   1022                                                 !  "invalid data" check in acftobs_qc
   1023               endif
   1024             
   1025             elseif(mesgtype.eq.'AIRCAR') then
   1026 

Page 19          Source Listing                  INPUT_ACQC
2017-04-18 11:09                                 input_acqc.f

   1027 c MDCRS from ARINC currently store tail number in 'SID' and flight number in 'ACID' - copy
   1028 c  these into  tail number and flight number locations in NRL arrays
   1029 c  (Note: MDCRS from AFWA was a rarely used backup to those from ARINC until it was
   1030 c         discontinued on 10/30/2009 - it apparently stored flight number in 'SID' and
   1031 c         in 'ACID' - store flight number in 'SID' as tail number and flight number in
   1032 c         'ACID' (if present) as flight number (even those would be the same here)
   1033 c ---------------------------------------------------------------------------------------
   1034               c_acftreg(nrpts4QC) = charstr     ! tail number
   1035               call ufbint(inlun,c_arr_8,1,1,nlev,'ACID')
   1036               if(ibfms(c_arr_8).eq.0) then
   1037                 c_acftid(nrpts4QC) = charstr    ! flight number ('ACID' if present, always)
   1038                 acid(nrpts4QC) = c_arr_8        !  the case for MDCRS from ARINC)
   1039               else
   1040                 c_acftid(nrpts4QC) = '         '! store flight number as missing (all blanks)
   1041                                                 !  if not present (may be the case for MDCRS
   1042                                                 !  from AWFA)
   1043               endif
   1044             endif
   1045 c ----------------------------------------------------------------------------------------
   1046 c ----------------------------------------------------------------------------------------
   1047 
   1048 c Pull out obs and events for subset n
   1049 c ------------------------------------
   1050 
   1051 c ********************************
   1052 c PRES, OB_T, OB_Q, OB_DIR, OB_SPD
   1053 c ********************************
   1054 
   1055 c If l_allev_pf is TRUE, use ufbevn to get at data values & events - all pre-existing events
   1056 c  will be encoded into output PREPBUFR-like (profiles) file, (if l_doprofiles=T) along with
   1057 c  any new NRLQCQC events on top of them (Note: All pre-existing events are always encoded
   1058 c  into full PREPBUFR file)
   1059 c
   1060 c          |---------> data types (1=ob, 2=qm, 3=pc, 4=rc, 5=fc, 6=an, 7=cat)
   1061 c          | |-------> number of levels in the rpt (aircraft data is single level data;
   1062 c          | |         set j=1)
   1063 c          | | |-----> number of events (will store all events, but only use latest event in
   1064 c          | | |        in the top of the stack (k=1) is used by the core NRL QC code)
   1065 c          | | | |---> variable types (1=p,2=q,3=t,4=z,5=u,6=v)
   1066 c pqtzuvEV(i,j,k,l)
   1067 c
   1068 c example: pqtzuvEV(2,1,1,5) = QM for U in latest (top-of-stack) event on the 1st level
   1069 
   1070 c OTHERWISE:
   1071 c If l_allev_pf is FALSE, use ufbint to get at data values for only latest (top-of-stack)
   1072 c  event - only latest event will be encoded into output PREPBUFR-like (profiles) file, (if
   1073 c  l_doprofiles=T) along with any new NRLQCQC events on top of it (runs faster but pre-
   1074 c  existing events are not recorded in output PREPBUFR-like file) (Note: All pre-existing
   1075 c  events are always encoded into full PREPBUFR file)
   1076 c
   1077 c          |---------> data types (1=ob, 2=qm, 3=pc, 4=rc, 5=fc, 6=an, 7=cat)
   1078 c          | |-------> number of levels in the rpt (aircraft data is single level data;
   1079 c          | |         set j=1)
   1080 c          | | |-----> always 1 since only one (the latest top-of-stack) event is returned
   1081 c          | | |       here
   1082 c          | | | |---> variable types (1=p,2=q,3=t,4=z,5=u,6=v)
   1083 c pqtzuvEV(i,j,1,l)

Page 20          Source Listing                  INPUT_ACQC
2017-04-18 11:09                                 input_acqc.f

   1084 c
   1085 c example: pqtzuvEV(2,1,1,5) = QM for U in latest (top-of-stack) event on the 1st level
   1086 c ------------------------------------------------------------------------------------------
   1087             if(.not.l_allev_pf) then
   1088               do i = 1,mxvt
   1089                 call ufbint(inlun,pqtzuvEV(1,1,1,i),mxevdt,mxlv,nlev,
   1090      +                      EVstr(i))
   1091               enddo
   1092             else
   1093               do i = 1,mxvt
   1094                 call ufbevn(inlun,pqtzuvEV(1,1,1,i),mxevdt,mxlv,mxnmev,
   1095      +                      nlev,EVstr(i))
   1096               enddo
   1097             endif
   1098 
   1099             if(.not.l_match) then
   1100 
   1101 c pressure and pressure/altitude will only be read in and stored from the first (mass) piece
   1102 c  of a mass/wind piece report pair or from the first (only) piece of a wind-only report
   1103 c  rather than being re-read and re-stored again from the second (wind) piece (if a second
   1104 c  piece exists) - this not only avoids wasted processing time (since the pressure and
   1105 c  pressure-altitude should be the same in both pieces), it also prevents this code from
   1106 c  reading a missing pressure-altitude in the second piece for those rare cases when
   1107 c  unreasonably-high winds can be set to missing in PREPDATA resulting in an "empty" wind
   1108 c  piece being encoded into PREPBUFR (and leading to problems in later profile generation in
   1109 c  this code) (this is a bug in PREPDATA which will eventually be corrected)
   1110 
   1111 c Count the number of pressure/altitude events in this report
   1112 c -----------------------------------------------------------
   1113 c pressure (1)
   1114 c ------------
   1115               if(l_allev_pf) then
   1116                 evknt = 0
   1117                 do j = 1,mxnmev
   1118 c                                         |---> pressure
   1119                   if(ibfms(pqtzuvEV(1,1,j,1)).ne.0) then
   1120                     nevents(nrpts4QC,1) = evknt
   1121                     exit ! exit j do loop
   1122                   else
   1123                     evknt = evknt + 1
   1124                   endif
   1125                 enddo
   1126               else
   1127                 nevents(nrpts4QC,1) = 1
   1128               endif
   1129 
   1130 c altitude (4)
   1131 c ------------
   1132               if(l_allev_pf) then
   1133                 evknt = 0
   1134                 do j = 1,mxnmev
   1135 c                                         |---> altitude
   1136                   if(ibfms(pqtzuvEV(1,1,j,4)).ne.0) then
   1137                     nevents(nrpts4QC,4) = evknt
   1138                     exit ! exit j do loop
   1139                   else
   1140                     evknt = evknt + 1

Page 21          Source Listing                  INPUT_ACQC
2017-04-18 11:09                                 input_acqc.f

   1141                   endif
   1142                 enddo
   1143               else
   1144                 nevents(nrpts4QC,4) = 1
   1145               endif
   1146 
   1147 c Store pressure in array needed by subroutine acftobs_qc
   1148 c -------------------------------------------------------
   1149               if(ibfms(pqtzuvEV(1,1,1,1)).eq.0) then
   1150                 pres(nrpts4QC) = pqtzuvEV(1,1,1,1) ! POB at top of stack = pressure fed to
   1151                                                    !  NRL QC
   1152               endif
   1153 
   1154 c Store pressure events in "corral" arrays to carry through this code
   1155 c -------------------------------------------------------------------
   1156               if(nevents(nrpts4QC,1).gt.0) then
   1157                 do i = 1,nevents(nrpts4QC,1)
   1158                   invi = nevents(nrpts4QC,1)-i+1
   1159 
   1160 c                                                 |---> acft data upon input = "single level"/
   1161 c                                                 |      1 replication of PRSLVLA
   1162 c                                                 |      |---> pressure
   1163                   pob_ev(nrpts4QC,i) = pqtzuvEV(1,1,invi,1)
   1164                   pqm_ev(nrpts4QC,i) = pqtzuvEV(2,1,invi,1)
   1165                   ppc_ev(nrpts4QC,i) = pqtzuvEV(3,1,invi,1)
   1166                   prc_ev(nrpts4QC,i) = pqtzuvEV(4,1,invi,1)
   1167                 enddo
   1168               endif
   1169 
   1170 c Store pressure background info in "corral" arrays to carry through this code
   1171 c ----------------------------------------------------------------------------
   1172               call ufbint(inlun,arr_8,15,10,nlev,'POE PFC PFCMOD') ! only one occurence of bg
   1173                                                                    !  info per report/level
   1174               pbg(nrpts4QC,:) = arr_8(1:3,1)
   1175 
   1176               call ufbint(inlun,arr_8,15,10,nlev,'PAN PCL PCS') ! only one occurence of post-p
   1177                                                                 !  info per report/level
   1178               ppp(nrpts4QC,:) = arr_8(1:3,1)
   1179 
   1180 c Store altitude events in "corral" arrays to carry through this code - the actual value of
   1181 c  altitude is pulled from ELV and stored in the ht_ft array (needed by acftobs_qc) when the
   1182 c  rest of the report header information is pulled
   1183 c ------------------------------------------------------------------------------------------
   1184               if(nevents(nrpts4QC,4).gt.0) then
   1185                 do i = 1,nevents(nrpts4QC,4)
   1186                   invi = nevents(nrpts4QC,4)-i+1
   1187 
   1188 c                                                        |---> altitude
   1189                   zob_ev(nrpts4QC,i) = pqtzuvEV(1,1,invi,4)
   1190                   zqm_ev(nrpts4QC,i) = pqtzuvEV(2,1,invi,4)
   1191                   zpc_ev(nrpts4QC,i) = pqtzuvEV(3,1,invi,4)
   1192                   zrc_ev(nrpts4QC,i) = pqtzuvEV(4,1,invi,4)
   1193                 enddo
   1194               endif
   1195 
   1196 c Store altitude background info in "corral" arrays to carry through this code
   1197 c ----------------------------------------------------------------------------

Page 22          Source Listing                  INPUT_ACQC
2017-04-18 11:09                                 input_acqc.f

   1198               call ufbint(inlun,arr_8,15,10,nlev,'ZOE ZFC ZFCMOD') ! only one occurence of bg
   1199                                                                    !  info per report/level
   1200               zbg(nrpts4QC,:) = arr_8(1:3,1)
   1201 
   1202               call ufbint(inlun,arr_8,15,10,nlev,'ZAN ZCL ZCS') ! only one occurence of post-p
   1203                                                                 !  info per report/level
   1204               zpp(nrpts4QC,:) = arr_8(1:3,1)
   1205 
   1206             endif
   1207 
   1208 c Get temperature & moisture obs, increments, quality marks
   1209 c ---------------------------------------------------------
   1210             if(l_massrpt) then ! pull mass data
   1211 
   1212               sqn(nrpts4QC,1) = sqn_current     ! SQN (sequence number) for mass piece
   1213               procn(nrpts4QC,1) = procn_current ! PROCN (process number) for mass piece
   1214 
   1215 c Count the number of moisture events in this report
   1216 c --------------------------------------------------
   1217 c moisture (2)
   1218 c ------------
   1219               if(l_allev_pf) then
   1220                 evknt = 0
   1221                 do j = 1,mxnmev
   1222 c                                         |---> moisture
   1223                   if(ibfms(pqtzuvEV(1,1,j,2)).ne.0) then
   1224                     nevents(nrpts4QC,2) = evknt
   1225                     exit ! exit j do loop
   1226                   else
   1227                     evknt = evknt + 1
   1228                   endif
   1229                 enddo
   1230               else
   1231                 nevents(nrpts4QC,2) = 1
   1232               endif
   1233 
   1234 c Moisture (specific humidity) - use QOB from the top of event stack (pqtzuvEV(1,1,1,2)
   1235 c -------------------------------------------------------------------------------------
   1236               if(ibfms(pqtzuvEV(1,1,1,2)).eq.0) then
   1237                 ob_q(nrpts4QC) = pqtzuvEV(1,1,1,2)*0.001 ! NRL code requires g/kg; QOB in
   1238                                                          !  PREPBUFR file is in mg/kg
   1239                 xiv_q(nrpts4QC) = (pqtzuvEV(1,1,1,2) -
   1240      +                pqtzuvEV(5,1,1,2))*0.001 ! use QOB at top of stack; also, there is only
   1241                                                !  one QFC per report
   1242 
   1243                 nchk_q(nrpts4QC) = int(pqtzuvEV(2,1,1,2)) ! QQM from top of event stack
   1244               endif
   1245 
   1246 c Store moisture events in "corral" arrays to carry through this code
   1247 c -------------------------------------------------------------------
   1248               if(nevents(nrpts4QC,2).gt.0) then
   1249                 do i = 1,nevents(nrpts4QC,2)
   1250                   invi = nevents(nrpts4QC,2)-i+1
   1251 
   1252 c                                                        |---> moisture
   1253                   qob_ev(nrpts4QC,i) = pqtzuvEV(1,1,invi,2)
   1254                   qqm_ev(nrpts4QC,i) = pqtzuvEV(2,1,invi,2)

Page 23          Source Listing                  INPUT_ACQC
2017-04-18 11:09                                 input_acqc.f

   1255                   qpc_ev(nrpts4QC,i) = pqtzuvEV(3,1,invi,2)
   1256                   qrc_ev(nrpts4QC,i) = pqtzuvEV(4,1,invi,2)
   1257                 enddo
   1258               endif
   1259 
   1260 c Store moisture background info in "corral" arrays to carry through this code
   1261 c ----------------------------------------------------------------------------
   1262               call ufbint(inlun,arr_8,15,10,nlev,'QOE QFC QFCMOD') ! only one occurence of bg
   1263                                                                    !  info per report/level
   1264               qbg(nrpts4QC,:) = arr_8(1:3,1)
   1265 
   1266               call ufbint(inlun,arr_8,15,10,nlev,'QAN QCL QCS') ! only one occurence of post-
   1267                                                                 !  p info per report/level
   1268               qpp(nrpts4QC,:) = arr_8(1:3,1)
   1269 
   1270 c Count the number of temperature events in this report
   1271 c -----------------------------------------------------
   1272 c temperature (3)
   1273 c ---------------
   1274               if(l_allev_pf) then
   1275                 evknt = 0
   1276                 do j = 1,mxnmev
   1277 c                                         |---> temperature
   1278                   if(ibfms(pqtzuvEV(1,1,j,3)).ne.0) then
   1279                     nevents(nrpts4QC,3) = evknt
   1280                     exit ! exit j do loop
   1281                   else
   1282                     evknt = evknt + 1
   1283                   endif
   1284                 enddo
   1285               else
   1286                 nevents(nrpts4QC,3) = 1
   1287               endif
   1288 
   1289 c Temperature - use TOB from the top of event stack (pqtzuvEV(1,1,1,3)
   1290 c --------------------------------------------------------------------
   1291               if(ibfms(pqtzuvEV(1,1,1,3)).eq.0) then
   1292                 ob_t(nrpts4QC) = pqtzuvEV(1,1,1,3) + 273.16 ! convert to K
   1293                 xiv_t(nrpts4QC) = pqtzuvEV(1,1,1,3) - pqtzuvEV(5,1,1,3) ! use TOB at top of
   1294                                                                         !  stack; also, there
   1295                                                                         !  is only one TFC
   1296                                                                         !  per report
   1297                 nchk_t(nrpts4QC) = int(pqtzuvEV(2,1,1,3)) ! TQM from top of event stack
   1298 
   1299 c Check for -9C temperature (MDCRS only)
   1300 c --------------------------------------
   1301                 l_minus9C(nrpts4QC) = .false.
   1302 
   1303                 if(itype(nrpts4QC).eq.33) then
   1304                   if(abs(ob_t(nrpts4QC)-264.16).lt.0.05) then
   1305                     l_minus9c(nrpts4QC) = .true.
   1306                   endif
   1307                 endif ! check for -9C temp in type = 33
   1308               endif ! check for missing
   1309 
   1310 c Store temperature events in "corral" arrays to carry through this code
   1311 c ----------------------------------------------------------------------

Page 24          Source Listing                  INPUT_ACQC
2017-04-18 11:09                                 input_acqc.f

   1312               if(nevents(nrpts4QC,3).gt.0) then
   1313                 do i = 1,nevents(nrpts4QC,3)
   1314                   invi = nevents(nrpts4QC,3)-i+1
   1315 
   1316 c                                                        |---> temperature
   1317                   tob_ev(nrpts4QC,i) = pqtzuvEV(1,1,invi,3)
   1318                   tqm_ev(nrpts4QC,i) = pqtzuvEV(2,1,invi,3)
   1319                   tpc_ev(nrpts4QC,i) = pqtzuvEV(3,1,invi,3)
   1320                   trc_ev(nrpts4QC,i) = pqtzuvEV(4,1,invi,3)
   1321                 enddo
   1322               endif
   1323 
   1324 c Store temperature background info in "corral" arrays to carry through this code
   1325 c -------------------------------------------------------------------------------
   1326               call ufbint(inlun,arr_8,15,10,nlev,'TOE TFC TFCMOD') ! only one occurence of bg
   1327                                                                    !  info per report/level
   1328                 
   1329               tbg(nrpts4QC,:) = arr_8(1:3,1)
   1330 
   1331               call ufbint(inlun,arr_8,15,10,nlev,'TAN TCL TCS') ! only one occurence of post-
   1332                                                                 !  p info per report/level
   1333               tpp(nrpts4QC,:) = arr_8(1:3,1)
   1334 
   1335 c Get u & v obs, increments, quality marks - convert u & v to direction & speed
   1336 c -----------------------------------------------------------------------------
   1337             elseif(l_windrpt) then ! pull u, v, convert to direction & speed
   1338 
   1339               sqn(nrpts4QC,2) = sqn_current     ! SQN (sequence number) for wind piece
   1340               procn(nrpts4QC,2) = procn_current ! PROCN (process number) for wind piece
   1341 
   1342 c Count the number of wind events in this report
   1343 c ----------------------------------------------
   1344 c Wind (5/6) - use U/VOB from the top of event stack (pqtzuvEV(1,1,1,5) and
   1345 c  (pqtzuvEV(1,1,1,6)
   1346 c -------------------------------------------------------------------------
   1347               if(l_allev_pf) then
   1348                 evknt = 0
   1349                 do j = 1,mxnmev
   1350 c                                         |---> 5=u-comp, 6=v-comp
   1351                   if(ibfms(pqtzuvEV(1,1,j,5)).ne.0 .or.
   1352      +               ibfms(pqtzuvEV(1,1,j,6)).ne.0) then
   1353                     nevents(nrpts4QC,5) = evknt
   1354                     exit ! exit j do loop
   1355                   else
   1356                     evknt = evknt + 1
   1357                   endif
   1358                 enddo
   1359               else
   1360                 nevents(nrpts4QC,5) = 1
   1361               endif
   1362 
   1363               uob = pqtzuvEV(1,1,1,5)
   1364               vob = pqtzuvEV(1,1,1,6)
   1365 
   1366               ufc = pqtzuvEV(5,1,1,5) ! only one UFC per report
   1367               vfc = pqtzuvEV(5,1,1,6) ! only one VFC per report
   1368 

Page 25          Source Listing                  INPUT_ACQC
2017-04-18 11:09                                 input_acqc.f

   1369               if(ibfms(pqtzuvEV(1,1,1,5)).eq.0 .and.
   1370      +           ibfms(pqtzuvEV(1,1,1,6)).eq.0 ) then
   1371 
   1372 c Calculate speed & direction from U & V components (for both obs and forecast values)
   1373 c
   1374 c Per Dennis Keyser on 8/29/05, w3fc05 returns a wind direction of true meteorological nature
   1375 c  (e.g., a wind w/ dir =270 is a wind from the west)
   1376 c
   1377 c ALSO NOTE: w3fc05 adds 0.001 to the direction - in order to get around this (without
   1378 c            immediately changing this routine in W3EMC), set any wind directions between
   1379 c            360.000 and 360.002 back to 360.00 - might be a good idea to remove the addition
   1380 c            of 0.001 to the wind direction in the W3EMC routine w3fc05 some day
   1381 c -------------------------------------------------------------------------------------------
   1382                 call w3fc05(uob,vob,ob_dir(nrpts4QC),ob_spd(nrpts4QC))
   1383 
   1384 c If-statement below is used to negate effect of 0.001 being added to the wind direction in
   1385 c  the W3EMC routine w3fc05
   1386 c -----------------------------------------------------------------------------------------
   1387 
   1388                 if(ob_dir(nrpts4QC).gt.360.000 .and.
   1389      +             ob_dir(nrpts4QC).lt.360.002) then
   1390 
   1391                   ob_dir(nrpts4QC) = 360.00
   1392 
   1393                 endif
   1394 
   1395                 call w3fc05(ufc,vfc,dir_fc,spd_fc) ! similar to cqcbufr/incrw
   1396 c increments
   1397 c ---------
   1398                 xiv_s(nrpts4QC) = ob_spd(nrpts4QC) - spd_fc
   1399                 xiv_d(nrpts4QC) = ob_dir(nrpts4QC) - dir_fc
   1400 c quality marks
   1401 c -------------
   1402                 nchk_s(nrpts4QC)=
   1403      +                int(pqtzuvEV(2,1,1,5)) ! use u-component QM
   1404                 nchk_d(nrpts4QC)=
   1405      +                int(pqtzuvEV(2,1,1,5)) ! use u-component QM
   1406 
   1407               endif ! Check for missings
   1408 
   1409 c Store wind events in "corral" arrays to carry through this code
   1410 c ---------------------------------------------------------------
   1411               if(nevents(nrpts4QC,5).gt.0) then
   1412                 do i = 1,nevents(nrpts4QC,5)
   1413                   invi = nevents(nrpts4QC,5)-i+1
   1414 
   1415 c                                                        |---> wind
   1416                   uob_ev(nrpts4QC,i) = pqtzuvEV(1,1,invi,5)
   1417                   vob_ev(nrpts4QC,i) = pqtzuvEV(1,1,invi,6)
   1418                   wqm_ev(nrpts4QC,i) = pqtzuvEV(2,1,invi,5)
   1419                   wpc_ev(nrpts4QC,i) = pqtzuvEV(3,1,invi,5)
   1420                   wrc_ev(nrpts4QC,i) = pqtzuvEV(4,1,invi,5)
   1421                 enddo
   1422               endif
   1423 
   1424 c Store wind background info in "corral" arrays to carry through this code
   1425 c ------------------------------------------------------------------------

Page 26          Source Listing                  INPUT_ACQC
2017-04-18 11:09                                 input_acqc.f

   1426               call ufbint(inlun,arr_8,15,10,nlev,
   1427      +                   'WOE UFC VFC UFCMOD VFCMOD') ! only one occurence of bg info per
   1428                                                       !  report/level
   1429               wbg(nrpts4QC,:) = arr_8(1:5,1)
   1430 
   1431               call ufbint(inlun,arr_8,15,10,nlev,
   1432      +                    'UAN VAN UCL VCL UCS VCS')  ! only one occurence of post-p info per
   1433                                                       !  report/level
   1434               wpp(nrpts4QC,:) = arr_8(1:6,1)
   1435 
   1436 c Pull wind (direction/speed) events
   1437 c ----------------------------------
   1438               if(.not.l_allev_pf) then
   1439                 call ufbint(inlun,df_arr,5,mxlv,nlev,
   1440      +                      'DDO FFO DFQ DFP DFR')
   1441               else
   1442                 call ufbevn(inlun,df_arr,5,mxlv,mxnmev,nlev,
   1443      +                      'DDO FFO DFQ DFP DFR')
   1444               endif
   1445 
   1446 c Count the number of wind events (dir/speed) events in this report
   1447 c -----------------------------------------------------------------
   1448               if(l_allev_pf) then
   1449                 ddo_ev(nrpts4QC,:) = df_arr(1,1,:)
   1450                 ffo_ev(nrpts4QC,:) = df_arr(2,1,:)
   1451                 dfq_ev(nrpts4QC,:) = df_arr(3,1,:)
   1452                 dfp_ev(nrpts4QC,:) = df_arr(4,1,:)
   1453                 dfr_ev(nrpts4QC,:) = df_arr(5,1,:)
   1454                 evknt = 0
   1455                 do j = 1,mxnmev
   1456                   if(ibfms(df_arr(1,1,j)).ne.0 .or.
   1457      +               ibfms(df_arr(2,1,j)).ne.0) then
   1458                     nevents(nrpts4QC,6) = evknt
   1459                     exit ! exit j do loop
   1460                   else
   1461                     evknt = evknt + 1
   1462                   endif
   1463                 enddo
   1464               else
   1465                 ddo_ev(nrpts4QC,1) = df_arr(1,1,1)
   1466                 ffo_ev(nrpts4QC,1) = df_arr(2,1,1)
   1467                 dfq_ev(nrpts4QC,1) = df_arr(3,1,1)
   1468                 dfp_ev(nrpts4QC,1) = df_arr(4,1,1)
   1469                 dfr_ev(nrpts4QC,1) = df_arr(5,1,1)
   1470                 nevents(nrpts4QC,6) = 1
   1471               endif
   1472 
   1473             endif ! Check for mass or wind report
   1474 
   1475             if(l_match) then ! report just stored was the second half
   1476               call readns(inlun,mesgtype,mesgdate,iret) ! Advance pointer to next subset
   1477               if(iret.eq.-1) then    ! there are no more subsets to read in the PREPBUFR file
   1478                 print *, 'READNS: NO MORE SUBSETS TO READ IN THE BUFR'//
   1479      +                   ' FILE'
   1480                 exit
   1481               elseif(iret.eq.0) then ! there are still subsets to read; pull the next one
   1482                 go to 4001

Page 27          Source Listing                  INPUT_ACQC
2017-04-18 11:09                                 input_acqc.f

   1483               else
   1484                 print *, 'Unexpected return code(iret=',iret,') from ',
   1485      +                   'readns!'
   1486                 call w3tage('PREPOBS_PREPACQC')
   1487                 call errexit(23) ! Problems reading BUFR file
   1488               endif
   1489             endif
   1490 
   1491 c At this point, we are done reading in subset n - call readns to get subset n+1 - see if it
   1492 c  is the wind part for subset n - store in same report in local arrays if so - if subset n+1
   1493 c  is not the second piece of subset n, pull its header along with the data values and
   1494 c  events, and store it in its own report
   1495 c -------------------------------------------------------------------------------------------
   1496             call readns(inlun,mesgtype,mesgdate,iret)
   1497             if(iret.eq.-1) then    ! there are no more subsets to read in the PREPBUFR file
   1498               print *, 'READNS: NO MORE SUBSETS TO READ IN THE BUFR '//
   1499      +                 'FILE'
   1500               exit
   1501             elseif(iret.eq.0) then ! there are still subsets to read; pull the next one
   1502 
   1503 c Update counters
   1504 c ---------------
   1505               if(mesgtype.eq.'AIRCFT') then
   1506                 nrptsaircft = nrptsaircft + 1
   1507               elseif(mesgtype.eq.'AIRCAR') then
   1508                 nrptsaircar = nrptsaircar + 1
   1509               else ! We're done reading the aircraft-type messages out of this file
   1510                 print *, '---> MESGTYPE NOT AIRCRAFT TYPE!!!',' "',
   1511      +                   mesgtype,'"'
   1512                 print *, '---> keep looping through messages in case',
   1513      +                   ' any more are in file'
   1514                 cycle loop2
   1515               endif
   1516       	      nrpts_rd = nrpts_rd + 1
   1517 
   1518 c Pull out the value of SQN for subset n+1, which will wither be a mass piece or a wind piece
   1519 c  (most likely a wind piece for subset n).
   1520 c -------------------------------------------------------------------------------------------
   1521               call ufbint(inlun,arr_8,15,10,nlev,'SQN')
   1522               sqn_next = arr_8(1,1)
   1523 
   1524 c Check and see if the report pulled by readns (subset n+1) is the second part for the report
   1525 c  pulled by an iteration of do ireadsb (subset n)
   1526 c -------------------------------------------------------------------------------------------
   1527               if(sqn_next.eq.sqn_current) then  ! subset n+1 is the second part of subset n.
   1528                                                 !  alat,alon,ht_ft,c_acftid (or c_acftreg) 
   1529                                                 !  and idt have already been populated; no
   1530                                                 !  need to pull these twice 
   1531                 numpairs = numpairs + 1
   1532 
   1533                 if(mesgtype.eq.'AIRCFT') then
   1534                   numAIRCFTpairs = numAIRCFTpairs + 1
   1535                 elseif(mesgtype.eq.'AIRCAR') then
   1536                   numAIRCARpairs = numAIRCARpairs + 1
   1537                 endif
   1538 
   1539                 l_match = .true.

Page 28          Source Listing                  INPUT_ACQC
2017-04-18 11:09                                 input_acqc.f

   1540 
   1541                 go to 6001 ! SQN will be read again but nrpts4QC won't be incremented -
   1542                            !  we've just found the 2nd half of the report previously read
   1543               else ! subset n+1 is NOT the second part of subset n (n is an orphan)
   1544 
   1545 c If we get here, we know that subsets n and n+1 are not parts of a pair - subset n is an
   1546 c  "orphan" and has already been stored - at this point, we don't yet know whether subset
   1547 c  n+1 is another orphan or whether it is the second half of a match - whether subset n+1 is
   1548 c  an orphan or part of a pair will be determined on the next iteration of this loop
   1549 c
   1550 c However, we do know that subset n+1 doesn't belong with subset n because their values of
   1551 c  SQN are different - so, we need to increment nrpts4QC before storing subset n+1 in the
   1552 c  report-oriented arrays (do so by sending the program to statement 5001)
   1553 c
   1554 c Send subset n+1 back through the program, treating subset n+1 as the new n
   1555 c ------------------------------------------------------------------------------------------
   1556                 numorph = numorph + 1
   1557 
   1558                 if(mesgtype.eq.'AIRCFT') then
   1559                   numAIRCFTorph = numAIRCFTorph + 1
   1560                 elseif(mesgtype.eq.'AIRCAR') then
   1561                   numAIRCARorph = numAIRCARorph + 1
   1562                 endif
   1563 
   1564                 l_match = .false.
   1565 
   1566 c Leave BUFRLIB pointers where they are and treat subset n+1 as a new n
   1567 c ---------------------------------------------------------------------  
   1568                 go to 5001
   1569 
   1570               endif ! check to see if subset n+1 is the second part of subset n
   1571             else 
   1572               print *, 'Unexpected return code(iret=',iret,') from ',
   1573      +                 'readns!'
   1574               call w3tage('PREPOBS_PREPACQC')
   1575               call errexit(23) ! Problems reading BUFR file 
   1576             endif ! if(iret.eq.-1) then
   1577 
   1578           enddo ! do loop for reading BUFR subsets/reports (ireadsb)
   1579         endif ! check for message type
   1580       enddo loop2 ! do loop for reading messages
   1581       print *, '---> DONE READING FROM THIS FILE!!!'
   1582       print *, '---> nrpts_rd = ', nrpts_rd
   1583 
   1584       if(nrpts_rd.gt.0) then
   1585 
   1586 c Determine ITYPE, C_DTG, etc.
   1587 c ----------------------------
   1588       do i=1,nrpts4QC
   1589 
   1590 c nevents can never be zero, otherwise array out-of-bounds issues will occur downstream -
   1591 c  make sure nevents is always at least 1 for all variables and all reports
   1592 c ---------------------------------------------------------------------------------------
   1593         nevents(i,:) = max(nevents(i,:),1)
   1594 
   1595 c ********************************************
   1596 c ITYPE --> REMAP FROM NCEP VALUE TO NRL VALUE

Page 29          Source Listing                  INPUT_ACQC
2017-04-18 11:09                                 input_acqc.f

   1597 c ********************************************
   1598 
   1599 c Determine type of aircraft report (itype)
   1600 c
   1601 c Need to check phase of flight and PREPBUFR report type
   1602 c PREPBUFR report types (mnemonic = TYP) where x is either: 1=mass, 2=wind part:
   1603 c       x30 = NCEP: AIREP (NRL Manual AIREP/voice)
   1604 c       x30 = NCEP: PIREP (NRL Manual AIREP/voice)
   1605 c       x31 = NCEP: AMDAR (all types except Canadian) (NRL: AMDAR)
   1606 c       x33 = NCEP: MDCRS (NRL: MDCRS)
   1607 c       x34 = NCEP: TAMDAR (NRL: ACARS)
   1608 c       x35 = NCEP: Canadian AMDAR (NRL: AMDAR)
   1609 c
   1610 c NCEP BUFR MNEMONIC POAF (phase of flight)/BUFR desc. 0-08-004:
   1611 c       0-1 = reserved
   1612 c       2 = Unsteady
   1613 c       3 = Level flight, routine observation
   1614 c       4 = Level flight, highest wind encountered
   1615 c       5 = Ascending
   1616 c       6 = Descending
   1617 c       7 = missing (set to 9 prior to this to match NRL's missing value)
   1618 c   bmiss = missing (set to 9 prior to this to match NRL's missing value)
   1619 c
   1620 c ##############################################################
   1621 c NRL settings for itype (see function insty_ob_fun):
   1622 c   --> Use value of POAF to determine whether ob was taken while the aircraft was ascending,
   1623 c       descending, etc.
   1624 c
   1625 c   Below * means used by NCEP
   1626 c
   1627 c --------------------------------------------------------------
   1628 c ---> NRL AIREPs
   1629 c     * 25/'man-airep'  = Manual AIREP (header XRXX)/"typical voice AIREP"
   1630 c               -- NOTE: Assign PIREPs (used at NCEP but not at NRL) to this "typical voice
   1631 c                        AIREP" category
   1632 c               -- NOTE: Assign all AIREPs (for now) to this "typical voice AIREP" category
   1633 c       26/'man-Yairep' = Manual AIREP (header YRXX)/keypad AIREP
   1634 c               -- NOTE: NCEP does not assign anything to this at the current time
   1635 c       30/'airep'      = automated "AIREPs" (AMDAR or UAL MDCRS re-encoded as AIREPs by AFWA)
   1636 c               -- NOTE: NCEP does not assign anything to this at the current time
   1637 c                        AFWA stopped re-encoding AMDAR and MDCRS into AIREP in Oct 2009
   1638 c      131/'airep_asc'  = AIREP ascending profile
   1639 c               -- NOTE: NCEP does not assign anything to this at the current time
   1640 c      132/'airep_des'  = AIREP descending profile
   1641 c               -- NOTE: NCEP does not assign anything to this at the current time
   1642 c       33/'airep_lvl'  = AIREP level flight
   1643 c               -- NOTE: NCEP does not assign anything to this at the current time
   1644 C       34/'airep_msg'  = AIREP w/ missing category (if rpt is not 25, 26, or 30)
   1645 c               -- NOTE: NCEP does not assign anything to this at the current time
   1646 c --------------------------------------------------------------
   1647 c ---> NRL AMDARs
   1648 c     * 35/'amdar'      = Automated aircraft data (AMDAR) (POAF cannot be determined)
   1649 c     *136/'amdar_asc'  = AMDAR ascending profile
   1650 c     *137/'amdar_des'  = AMDAR descending profile
   1651 c     * 38/'amdar_lvl'  = AMDAR level flight
   1652 c --------------------------------------------------------------
   1653 c ---> NRL ACARS {NOTE: Originally deemed "ACARS" by NRL, but this is currently not used by

Page 30          Source Listing                  INPUT_ACQC
2017-04-18 11:09                                 input_acqc.f

   1654 c                       NRL (per email from Pat Pauley 1/12/05); NCEP will use them to provide
   1655 c                       a separate category for TAMDARs and rename them as TAMDAR in all
   1656 c                       printouts from acftobs_qc.f}
   1657 c       40/'acars'      = Automated aircraft (TAMDAR) (POAF cannot be determined)
   1658 c      141/'acars_asc'  = TAMDAR ascending profile
   1659 c      142/'acars_des'  = TAMDAR descending profile
   1660 c       43/'acars_lvl'  = TAMDAR level flight
   1661 c --------------------------------------------------------------
   1662 c ---> NRL MDCRS
   1663 c     * 45/'mdcrs' = Automated aircraft (MDCRS) (POAF cannot be determined)
   1664 c     *146/'mdcrs_asc'  = MDCRS ascending profile
   1665 c     *147/'mdcrs_des'  = MDCRS descending profile
   1666 c     * 48/'mdcrs_lvl'  = MDCRS level flight
   1667 c ##############################################################
   1668 
   1669         if(itype(i).eq.30) then         ! NCEP: AIREP (NRL Manual AIREP/voice) or
   1670                                         ! NCEP: PIREP (NRL Manual AIREP/voice)
   1671           phase(i) = 9                  !  NRL leaves phase of flight as missing for all
   1672                                         !  AIREP/PIREP types (fine since NCEP does not have
   1673                                         !  phase of flight info for AIREPs or PIREPs)
   1674 
   1675           if(c_acftid(i)(1:1).eq.'P'.and.c_acftid(i)(6:6).eq.'P') then ! NCEP PIREPs (BUFR
   1676                                                                        ! tank b004/xx002)
   1677 
   1678 c SMB: Data type label changed from 34 -> 25 on 5/5/05.  PIREPs are probably more along the
   1679 c      lines of "typical voice reports" than AIREPs with a "missing" category
   1680 c DAK: Agreed, if we are still going to use PIREPs lump them into Manual AIREP/voice category
   1681             itype(i) = 25
   1682             nPIREP = nPIREP + 1 
   1683 
   1684           else ! NCEP AIREPs (BUFR tank b004/xx001)
   1685 c SMB: Originally set these to 30 (reformatted something else's/"automated AIREPs")
   1686 c DAK: Changed these to 25 on 3/23/12 (30 is reserved for AFWA re-encoded AIREPS, orig. AMDAR
   1687 c      or MDCRS - there are none of these after Oct. 2009 per Eric Wise/AFWA)
   1688 c      We may want to try to isolate ADS's in N. Atlantic as type 30 (NRL does this) but not
   1689 c      at this point (right now ADS's go into NCO's airep decoder and come out in b004/xx001
   1690 c      tank)
   1691 ccccccccc   itype(i) = 30
   1692 ccccccccc   nAUTOAIREP = nAUTOAIREP + 1	
   1693             itype(i) = 25
   1694             nMANAIREP = nMANAIREP + 1	
   1695           endif 
   1696 
   1697         elseif(itype(i).eq.31) then     ! NCEP: AMDAR (all types except Canadian) (NRL: AMDAR)
   1698                                  ! (BUFR tanks b004/xx003, b004/xx006, b004/xx011, b004/xx103)
   1699           nAMDAR = nAMDAR + 1	
   1700           if(phase(i).eq.3 .or. phase(i).eq.4) then
   1701             itype(i) = 38               ! level flight
   1702           elseif(phase(i).eq.5) then
   1703             itype(i) = 136              ! ascending flight
   1704           elseif(phase(i).eq.6) then
   1705             itype(i) = 137              ! descending flight
   1706           else
   1707             itype(i) = 35               ! unknown phase of flight
   1708           endif
   1709 
   1710         elseif(itype(i).eq.33) then     ! NCEP: MDCRS (NRL: MDCRS) (BUFR tank b004/xx004)

Page 31          Source Listing                  INPUT_ACQC
2017-04-18 11:09                                 input_acqc.f

   1711           nMDCRS = nMDCRS + 1	
   1712           if(phase(i).eq.3 .or. phase(i).eq.4) then
   1713             itype(i) = 48               ! level flight
   1714           elseif(phase(i).eq.5) then
   1715             itype(i) = 146              ! ascending flight
   1716           elseif(phase(i).eq.6) then
   1717             itype(i) = 147              ! descending flight
   1718           else
   1719             itype(i) = 45               ! unknown phase of flight
   1720           endif
   1721 
   1722         elseif(itype(i).eq.34) then     ! NCEP: TAMDAR (NRL: ACARS)
   1723                                  ! (BUFR tanks b004/xx008, b004/xx010, b004/xx012, b004/xx013)
   1724 c DAK: Changed these from NRL AMDAR to NRL ACARS at suggestion of P. Pauley (3/2012), (to hold
   1725 c      NCEP TAMDARs) - allows them to be treated in a separate category for stratifying
   1726 c      statistics - also seems to flag more AMDARs as bad which is a good thing since there
   1727 c      are so many anyway
   1728           nTAMDAR = nTAMDAR + 1	
   1729                   ! NOTE: MADIS-feed TAMDARs currently have missing phase of flight and will
   1730                   !       get set to unknown value initially (may later change)
   1731                   !       AirDAT/Panasonic BUFR-feed TAMDARs do contain phase of flight)
   1732           if(phase(i).eq.3 .or. phase(i).eq.4) then
   1733 ccccccccccc itype(i) = 38               ! level flight
   1734             itype(i) = 43               ! level flight
   1735           elseif(phase(i).eq.5) then
   1736 ccccccccccc itype(i) = 136              ! ascending flight
   1737             itype(i) = 141              ! ascending flight
   1738           elseif(phase(i).eq.6) then
   1739 ccccccccccc itype(i) = 137              ! descending flight
   1740             itype(i) = 142              ! descending flight
   1741           else
   1742 ccccccccccc itype(i) = 35               ! unknown phase of flight
   1743             itype(i) = 40               ! unknown phase of flight
   1744           endif
   1745 
   1746         elseif(itype(i).eq.35) then     ! Canadian AMDAR (NRL: AMDAR) (BUFR tank b004/xx009)
   1747           nAMDARcan = nAMDARcan + 1	
   1748           if(phase(i).eq.3 .or. phase(i).eq.4) then
   1749             itype(i) = 38               ! level flight
   1750           elseif(phase(i).eq.5) then
   1751             itype(i) = 136              ! ascending flight
   1752           elseif(phase(i).eq.6) then
   1753             itype(i) = 137              ! descending flight
   1754           else
   1755             itype(i) = 35               ! unknown phase of flight
   1756           endif
   1757 
   1758         else
   1759           print'(" Unexpected value for PREPBUFR report type! (itype=",
   1760      +           I0," & should be 30, 31, 33, 34, or 35)")', itype(i)
   1761           print *, 'i=',i
   1762 
   1763         endif
   1764 
   1765 c *****
   1766 c C_DTG
   1767 c *****

Page 32          Source Listing                  INPUT_ACQC
2017-04-18 11:09                                 input_acqc.f

   1768 
   1769 c Convert idt to YYYYMMDDHHMMSS format
   1770 c ------------------------------------
   1771         read(cdtg_an(1:4),'(i4.4)') year
   1772         read(cdtg_an(5:6),'(i2.2)') month
   1773         read(cdtg_an(7:8),'(i2.2)') day
   1774         read(cdtg_an(9:10),'(i2.2)') hour
   1775 
   1776 c Time increment (offset from cycle time)
   1777 c ---------------------------------------
   1778         rinc(1) = 0. ! days
   1779         rinc(2) = 0. ! hours
   1780         rinc(3) = 0. ! mins
   1781         rinc(4) = idt(i) ! seconds
   1782         rinc(5) = 0. ! milliseconds
   1783 
   1784 c Date/time for cycle time
   1785 c ------------------------
   1786         idat(1) = year
   1787         idat(2) = month
   1788         idat(3) = day
   1789         idat(4) = 0 ! time zone
   1790         idat(5) = hour
   1791         idat(6) = 0 ! mins
   1792         idat(7) = 0 ! secs
   1793         idat(8) = 0 ! millisecs
   1794 
   1795 c Use W3NCO routine w3movdat to get date/time of actual observation
   1796 c -----------------------------------------------------------------
   1797         call w3movdat(rinc,idat,jdat)
   1798 
   1799 c Convert jdat values to date/time string in yyyymmddhhmmss format
   1800 c -----------------------------------------------------------------
   1801         write(c_dtg(i)(1:4),'(i4.4)') jdat(1)
   1802         write(c_dtg(i)(5:6),'(i2.2)') jdat(2)
   1803         write(c_dtg(i)(7:8),'(i2.2)') jdat(3)
   1804         write(c_dtg(i)(9:10),'(i2.2)') jdat(5)
   1805         write(c_dtg(i)(11:12),'(i2.2)') jdat(6)
   1806         write(c_dtg(i)(13:14),'(i2.2)') jdat(7)
   1807 
   1808 c ****************************************
   1809 c TRANSLATE NCEP QC FLAGS TO NRL STANDARDS
   1810 c (Store in arrays ichk_[t,q,d,s])
   1811 c ****************************************
   1812 
   1813 c QM type:                NCEP values:    NRL values:
   1814 c                          nchk_*         ichk_*h
   1815 c Not checked/neutral     2                0
   1816 c Good                    1               -1
   1817 c Suspect                 3               -2
   1818 c Bad                     4-15            -3
   1819 c Initial/missing value  -9               -9
   1820 c ---------------------------------------------------
   1821         qms(1) = nchk_t(i)
   1822         qms(2) = nchk_q(i)
   1823         qms(3) = nchk_d(i)
   1824         qms(4) = nchk_s(i)

Page 33          Source Listing                  INPUT_ACQC
2017-04-18 11:09                                 input_acqc.f

   1825 
   1826 c DAK: this could be coded up more efficiently!
   1827         do J=1,4
   1828           if(qms(j).eq.2) then 
   1829             qms(j) = 0
   1830           elseif(qms(j).eq.1) then
   1831             qms(j) = -1
   1832           elseif(qms(j).eq.3) then
   1833             qms(j) = -2
   1834           elseif(qms(j).ge.4 .and. qms(j).le.15) then
   1835             qms(j) = -3
   1836 
   1837 cc smb 8/19/05
   1838 c For now, let qms(j)/ichk_q = 0 for non-missing q - this is to bypass ichk_q checks in
   1839 c  grchek_qc 
   1840 c -------------------------------------------------------------------------------------
   1841             if(ob_q(i).ne.amiss) then
   1842               qms(j) = 0
   1843             endif
   1844 
   1845           elseif(qms(j).eq.-9) then ! leave it as is
   1846             qms(j) = -9
   1847           else ! Store QM = NRL's missing value
   1848             qms(j) = -9
   1849             print'(" Unexpected value of NCEP j=",I0,"/",A," QM  (",I0,
   1850      +             ") for report number",I0,"!")',j,QM_types(j),qms(j),i
   1851           endif
   1852 
   1853 c If ob is missing, then store NRL quality mark as -9
   1854 c ---------------------------------------------------
   1855 c DAK: this could be coded up more efficiently!
   1856           if(j.eq.1 .and. ob_t(i).eq.amiss) then
   1857             qms(j) = -9
   1858           elseif(j.eq.2 .and. ob_q(i).eq.amiss) then
   1859             qms(j) = -9
   1860           elseif(j.eq.3 .and. ob_dir(i).eq.amiss) then
   1861             qms(j) = -9
   1862           elseif(j.eq.4 .and. ob_spd(i).eq.amiss) then
   1863             qms(j) = -9
   1864           endif
   1865 
   1866 c Store altered quality marks into NRL QM arrays
   1867 c ----------------------------------------------
   1868 c DAK: this could be coded up more efficiently!
   1869           if(j.eq.1) then
   1870             ichk_t(i) = qms(j)
   1871           elseif(j.eq.2) then
   1872             ichk_q(i) = qms(j)
   1873           elseif(j.eq.3) then
   1874             ichk_d(i) = qms(j)
   1875           elseif(j.eq.4) then
   1876             ichk_s(i) = qms(j)
   1877           endif
   1878 
   1879         enddo ! over j
   1880       enddo ! over i
   1881       endif ! nrpts_rd.gt.0

Page 34          Source Listing                  INPUT_ACQC
2017-04-18 11:09                                 input_acqc.f

   1882 
   1883 c Output counts
   1884 c -------------
   1885       write(*,*) 'NUMBER OF "AIRCFT" RPTS: ',nrptsaircft
   1886       write(*,*) '    --> MASS: ', nmswd(1,1)
   1887       write(*,*) '    --> WIND: ', nmswd(1,2)
   1888       write(*,*) 'NUMBER OF "AIRCAR" RPTS: ',nrptsaircar
   1889       write(*,*) '    --> MASS: ', nmswd(2,1)
   1890       write(*,*) '    --> WIND: ', nmswd(2,2)
   1891       write(*,*) 'TOTAL NUMBER OF MASS AND WIND REPORTS READ: ',
   1892      +             nrpts_rd
   1893       write(*,*) 'TOTAL NUMBER OF PAIRS (merged mass+wind): ',numpairs
   1894       write(*,*) 'TOTAL NUMBER OF ORPHANS (only mass or only wind ',
   1895      +             'present): ', numorph
   1896       write(*,*) 'NUMBER OF "AIRCFT" PAIRS/ORPHANS: ', numAIRCFTpairs,
   1897      +             '/', numAIRCFTorph
   1898       write(*,*) 'NUMBER OF "AIRCAR" PAIRS/ORPHANS: ', numAIRCARpairs,
   1899      +             '/', numAIRCARorph
   1900 
   1901 
   1902       write(*,*)
   1903       write(*,*) 'TOTAL NUMBER OF REPORTS FOR QC CODE: ', nrpts4QC
   1904   
   1905       write(*,*)
   1906       write(*,*) 'NUMBER OF PIREPS (MANUAL AIREP/voice): ',nPIREP
   1907       write(*,*) 'NUMBER OF AUTO AIREPS: ',nAUTOAIREP
   1908       write(*,*) 'NUMBER OF AIREPS (MANUAL AIREPS/voice): ',nMANAIREP
   1909       write(*,*) 'NUMBER OF AMDAR (excl. Canadian): ',nAMDAR
   1910       write(*,*) 'NUMBER OF CANADIAN AMDAR: ',nAMDARcan
   1911       write(*,*) 'NUMBER OF MDCRS: ',nMDCRS
   1912       write(*,*) 'NUMBER OF TAMDAR: ',nTAMDAR
   1913 
   1914 c End program
   1915 c -----------
   1916 
   1917       if(nrpts4QC/.90.gt.max_reps .and. nrpts4QC.lt.max_reps ) then
   1918 
   1919 c If the total number of merged (mass + wind piece) aircraft-type reports read in from
   1920 c  PREPBUFR file is at least 90% of the maximum allowed ("max_reps"), print diagnostic
   1921 c  warning message to production joblog file
   1922 c ------------------------------------------------------------------------------------
   1923 
   1924         print 153, nrpts4QC,max_reps
   1925   153   format(/' #####> WARNING: THE ',I6,' AIRCRAFT RPTS IN INPUT ',
   1926      +   'FILE ARE > 90% OF UPPER LIMIT OF ',I6,' -- INCREASE SIZE OF ',
   1927      +   '"MAX_REPS" SOON!'/)
   1928         write(cmax_reps,'(i6)') max_reps
   1929         call system('[ -n "$jlogfile" ] && $DATA/postmsg "$jlogfile" '//
   1930      +   '"***WARNING: HIT 90% OF '//cmax_reps//' AIRCRAFT REPORT '//
   1931      +   'LIMIT IN PREPOBS_PREPACQC, INCREASE SIZE OF PARM MAX_REPS"')
   1932       endif
   1933 
   1934       write(*,*)
   1935       write(*,*) '********************'
   1936       write(*,*) 'input_acqc has ended'
   1937       call system('date')
   1938       write(*,*) '--> # reports = ',nrpts4QC

Page 35          Source Listing                  INPUT_ACQC
2017-04-18 11:09                                 input_acqc.f

   1939       write(*,*) '********************'
   1940       write(*,*)
   1941 
   1942       return 
   1943 
   1944       end


ENTRY POINTS

  Name                   
                         
 input_acqc_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 153                        Label  1925                                                           1924                              
 4001                       Label  736                                                            1482                              
 5001                       Label  755                                                            1568                              
 53                         Label  762                                                            761                               
 6001                       Label  776                                                            1541                              
 ABS                        Func   1304                                 scalar                    1304                              
 ACFT_SEQ                   Dummy  224      R(8)            8     2     0        ARG,INOUT        951                               
 ACID                       Dummy  223      R(8)            8     1     0        ARG,INOUT        634,1006,1038                     
 AFIC_SEQ                   Dummy  225      R(8)            8     3     0        ARG,INOUT        654                               
 ALAT                       Dummy  217      R(8)            8     1     0        ARG,INOUT        586,803                           
 ALON                       Dummy  217      R(8)            8     1     0        ARG,INOUT        587,804                           
 AMISS                      Dummy  216      R(4)            4           scalar   ARG,INOUT        571,572,573,574,575,576,577,578,58
                                                                                                  6,587,589,590,1841,1856,1858,1860,
                                                                                                  1862                              
 ARR_8                      Local  398      R(8)            8     2     150                       782,784,788,789,790,791,792,797,79
                                                                                                  8,799,803,804,805,807,811,821,947,
                                                                                                  949,951,953,956,959,962,964,967,96
                                                                                                  8,971,973,975,976,977,978,1172,117
                                                                                                  4,1176,1178,1198,1200,1202,1204,12
                                                                                                  62,1264,1266,1268,1326,1329,1331,1
                                                                                                  333,1426,1429,1431,1434,1521,1522 
 BMISS                      Dummy  216      R(8)            8           scalar   ARG,INOUT        600,601,602,603,605,606,607,608,61
                                                                                                  0,611,612,613,615,616,617,618,620,
                                                                                                  621,622,623,624,626,627,628,629,63
                                                                                                  0,632,633,634,636,637,638,639,640,
                                                                                                  642,643,644,645,646,648,649,650,65
                                                                                                  1,652,653,654,655,656,657,782,947,
                                                                                                  962,971                           
 CAT                        Dummy  225      R(8)            8     1     0        ARG,INOUT        656,977                           
 CDTG_AN                    Dummy  217      CHAR            10          scalar   ARG,INOUT        724,725,1771,1772,1773,1774       
 CHARSTR                    Local  406      CHAR            8           scalar                    1000,1001,1004,1005,1017,1034,1037
 CLOUDSEQ                   Dummy  225      R(8)            8     3     0        ARG,INOUT        653                               
 CMAX_REPS                  Local  252      CHAR            6           scalar                    765,767,769,1928,1930             
 C_ACFTID                   Dummy  219      CHAR            9     1     0        ARG,INOUT        595,1001,1005,1017,1021,1037,1040,
                                                                                                  1675                              
 C_ACFTREG                  Dummy  218      CHAR            8     1     0        ARG,INOUT        594,1000,1018,1034                
 C_ARR_8                    Local  405      R(8)            8           scalar                    984,986,1002,1003,1006,1035,1036,1
                                                                                                  038                               

Page 36          Source Listing                  INPUT_ACQC
2017-04-18 11:09 Symbol Table                    input_acqc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 C_DTG                      Dummy  218      CHAR            14    1     0        ARG,INOUT        596,1801,1802,1803,1804,1805,1806 
 DAY                        Local  464      I(4)            4           scalar                    1773,1788                         
 DDO_EV                     Dummy  232      R(8)            8     2     0        ARG,INOUT        626,1449,1465                     
 DFP_EV                     Dummy  232      R(8)            8     2     0        ARG,INOUT        629,1452,1468                     
 DFQ_EV                     Dummy  232      R(8)            8     2     0        ARG,INOUT        628,1451,1467                     
 DFR_EV                     Dummy  232      R(8)            8     2     0        ARG,INOUT        630,1453,1469                     
 DF_ARR                     Local  444      R(8)            8     3     0                         1439,1442,1449,1450,1451,1452,1453
                                                                                                  ,1456,1457,1465,1466,1467,1468,146
                                                                                                  9                                 
 DIR_FC                     Local  438      R(4)            4           scalar                    1395,1399                         
 DRINFO                     Dummy  223      R(8)            8     2     0        ARG,INOUT        648,797,798,799                   
 ERREXIT                    Subr   1487                                                           1487,1575                         
 EVKNT                      Local  441      I(4)            4           scalar                    1116,1120,1123,1133,1137,1140,1220
                                                                                                  ,1224,1227,1275,1279,1282,1348,135
                                                                                                  3,1356,1454,1458,1461             
 EVSTR                      Local  426      CHAR            80    1     6                         426,1090,1095                     
 FFO_EV                     Dummy  232      R(8)            8     2     0        ARG,INOUT        627,1450,1466                     
 HDR                        Dummy  223      R(8)            8     2     0        ARG,INOUT        632,788,789,790,791,792,833,844,84
                                                                                                  5,986                             
 HOUR                       Local  465      I(4)            4           scalar                    1774,1790                         
 HT_FT                      Dummy  217      R(4)            4     1     0        ARG,INOUT        590,805                           
 I                          Local  286      I(4)            4           scalar                    1088,1089,1090,1093,1094,1095,1157
                                                                                                  ,1158,1163,1164,1165,1166,1185,118
                                                                                                  6,1189,1190,1191,1192,1249,1250,12
                                                                                                  53,1254,1255,1256,1313,1314,1317,1
                                                                                                  318,1319,1320,1412,1413,1416,1417,
                                                                                                  1418,1419,1420,1588,1593,1669,1671
                                                                                                  ,1675,1681,1693,1697,1700,1701,170
                                                                                                  2,1703,1704,1705,1707,1710,1712,17
                                                                                                  13,1714,1715,1716,1717,1719,1722,1
                                                                                                  732,1734,1735,1737,1738,1740,1743,
                                                                                                  1746,1748,1749,1750,1751,1752,1753
                                                                                                  ,1755,1760,1761,1781,1801,1802,180
                                                                                                  3,1804,1805,1806,1821,1822,1823,18
                                                                                                  24,1841,1850,1856,1858,1860,1862,1
                                                                                                  870,1872,1874,1876                
 IBFMS                      Func   360      I(4)            4           scalar                    953,1003,1036,1119,1136,1149,1223,
                                                                                                  1236,1278,1291,1351,1352,1369,1370
                                                                                                  ,1456,1457                        
 ICHK_D                     Dummy  220      I(4)            4     1     0        ARG,INOUT        1874                              
 ICHK_Q                     Dummy  220      I(4)            4     1     0        ARG,INOUT        1872                              
 ICHK_S                     Dummy  220      I(4)            4     1     0        ARG,INOUT        1876                              
 ICHK_T                     Dummy  220      I(4)            4     1     0        ARG,INOUT        1870                              
 IDAT                       Local  466      I(4)            4     1     8                         1786,1787,1788,1789,1790,1791,1792
                                                                                                  ,1793,1797                        
 IDT                        Dummy  218      I(4)            4     1     0        ARG,INOUT        592,807,1781                      
 IMISS                      Dummy  216      I(4)            4           scalar   ARG,INOUT        591,592                           
 INLUN                      Dummy  216      I(4)            4           scalar   ARG,INOUT        710,734,784,949,964,973,984,1002,1
                                                                                                  035,1089,1094,1172,1176,1198,1202,
                                                                                                  1262,1266,1326,1331,1426,1431,1439
                                                                                                  ,1442,1476,1496,1521              
 INPUT_ACQC                 Subr   216                                                                                              
 INT                        Func   811                                  scalar                    811,821,833,956,1243,1297,1403,140
                                                                                                  5                                 
 INVI                       Local  287      I(4)            4           scalar                    1158,1163,1164,1165,1166,1186,1189

Page 37          Source Listing                  INPUT_ACQC
2017-04-18 11:09 Symbol Table                    input_acqc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  ,1190,1191,1192,1250,1253,1254,125
                                                                                                  5,1256,1314,1317,1318,1319,1320,14
                                                                                                  13,1416,1417,1418,1419,1420       
 IREADMG                    Func   358      I(4)            4           scalar                    710                               
 IREADSB                    Func   359      I(4)            4           scalar                    734                               
 IRET                       Local  401      I(4)            4           scalar                    1476,1477,1481,1484,1496,1497,1501
                                                                                                  ,1572                             
 ITYPE                      Dummy  218      I(4)            4     1     0        ARG,INOUT        591,833,989,990,1010,1011,1020,130
                                                                                                  3,1669,1681,1693,1697,1701,1703,17
                                                                                                  05,1707,1710,1713,1715,1717,1719,1
                                                                                                  722,1734,1737,1740,1743,1746,1749,
                                                                                                  1751,1753,1755,1760               
 J                          Local  286      I(4)            4           scalar                    1117,1119,1134,1136,1221,1223,1276
                                                                                                  ,1278,1349,1351,1352,1455,1456,145
                                                                                                  7,1827,1828,1829,1830,1831,1832,18
                                                                                                  33,1834,1835,1842,1845,1846,1848,1
                                                                                                  850,1856,1857,1858,1859,1860,1861,
                                                                                                  1862,1863,1869,1870,1871,1872,1873
                                                                                                  ,1874,1875,1876                   
 JDAT                       Local  467      I(4)            4     1     8                         1797,1801,1802,1803,1804,1805,1806
 LOOP2                      Label  710                                  scalar                    750,770,1514,1580                 
 L_ALLEV_PF                 Dummy  233      L(4)            4           scalar   ARG,INOUT        1087,1115,1132,1219,1274,1347,1438
                                                                                                  ,1448                             
 L_MASSRPT                  Local  449      L(4)            4           scalar                    697,812,822,1210                  
 L_MATCH                    Local  451      L(4)            4           scalar                    700,737,1099,1475,1539,1564       
 L_MINUS9C                  Dummy  223      L(4)            4     1     0        ARG,INOUT        664,1301,1305                     
 L_WINDRPT                  Local  450      L(4)            4           scalar                    698,813,823,1337                  
 M2FT                       Dummy  217      R(4)            4           scalar   ARG,INOUT        805                               
 MAX                        Func   1593                                 scalar                    1593                              
 MAX_REPS                   Dummy  216      I(4)            4           scalar   ARG,INOUT        365,366,368,369,370,371,372,373,37
                                                                                                  4,375,376,377,378,379,380,381,382,
                                                                                                  383,384,385,386,387,388,389,390,39
                                                                                                  1,392,394,477,486,493,494,495,496,
                                                                                                  497,498,499,500,501,502,503,504,50
                                                                                                  5,506,507,508,509,510,511,512,513,
                                                                                                  514,515,516,517,518,520,522,523,52
                                                                                                  5,526,527,528,529,531,532,533,534,
                                                                                                  535,537,538,540,541,542,543,544,54
                                                                                                  5,546,547,548,550,551,757,761,765,
                                                                                                  1917,1924,1928                    
 MESGDATE                   Local  267      I(4)            4           scalar                    710,724,1476,1496                 
 MESGTYPE                   Local  266      CHAR            8           scalar                    710,714,740,742,747,815,817,825,82
                                                                                                  7,988,1025,1476,1496,1505,1507,151
                                                                                                  1,1533,1535,1558,1560             
 MOD                        Func   833                                  scalar                    833                               
 MONTH                      Local  463      I(4)            4           scalar                    1772,1787                         
 MSTQ                       Dummy  225      R(8)            8     1     0        ARG,INOUT        655,976                           
 MXEVDT                     Param  412      I(4)            4           scalar                    423,1089,1094                     
 MXLV                       Dummy  217      I(4)            4           scalar   ARG,INOUT        423,444,1089,1094,1439,1442       
 MXNMEV                     Dummy  216      I(4)            4           scalar   ARG,INOUT        423,444,493,494,495,496,497,498,49
                                                                                                  9,500,501,502,503,504,505,506,507,
                                                                                                  508,509,510,511,512,513,514,515,51
                                                                                                  6,517,518,1094,1117,1134,1221,1276
                                                                                                  ,1349,1442,1455                   
 MXVT                       Param  416      I(4)            4           scalar                    423,426,1088,1093                 

Page 38          Source Listing                  INPUT_ACQC
2017-04-18 11:09 Symbol Table                    input_acqc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 NACMSG_TOT                 Local  290      I(4)            4           scalar                    670,718,723                       
 NAMDAR                     Local  342      I(4)            4           scalar                    688,1699,1909                     
 NAMDARCAN                  Local  346      I(4)            4           scalar                    689,1747,1910                     
 NAUTOAIREP                 Local  335      I(4)            4           scalar                    686,1907                          
 NCHK_D                     Dummy  221      I(4)            4     1     0        ARG,INOUT        582,1404,1823                     
 NCHK_Q                     Dummy  221      I(4)            4     1     0        ARG,INOUT        581,1243,1822                     
 NCHK_S                     Dummy  221      I(4)            4     1     0        ARG,INOUT        583,1402,1824                     
 NCHK_T                     Dummy  221      I(4)            4     1     0        ARG,INOUT        580,1297,1821                     
 NEVENTS                    Dummy  223      I(4)            4     2     0        ARG,INOUT        598,1120,1127,1137,1144,1156,1157,
                                                                                                  1158,1184,1185,1186,1224,1231,1248
                                                                                                  ,1249,1250,1279,1286,1312,1313,131
                                                                                                  4,1353,1360,1411,1412,1413,1458,14
                                                                                                  70,1593                           
 NINT                       Func   805                                  scalar                    805,807                           
 NLEV                       Local  400      I(4)            4           scalar                    784,949,964,973,984,1002,1035,1089
                                                                                                  ,1095,1172,1176,1198,1202,1262,126
                                                                                                  6,1326,1331,1426,1431,1439,1442,15
                                                                                                  21                                
 NMANAIREP                  Local  338      I(4)            4           scalar                    687,1694,1908                     
 NMDCRS                     Local  349      I(4)            4           scalar                    690,1711,1911                     
 NMSWD                      Local  297      I(4)            4     2     4                         816,818,826,828,1886,1887,1889,189
                                                                                                  0                                 
 NNESTREPS                  Dummy  226      I(4)            4     2     0        ARG,INOUT        662                               
 NPIREP                     Local  332      I(4)            4           scalar                    685,1682,1906                     
 NREP                       Local  489      I(4)            4           scalar                                                      
 NRPTS4QC                   Dummy  217      I(4)            4           scalar   ARG,INOUT        678,757,773,788,789,790,791,792,79
                                                                                                  7,798,799,803,804,805,807,833,844,
                                                                                                  845,951,954,956,959,967,968,975,97
                                                                                                  6,977,978,986,989,990,1000,1001,10
                                                                                                  05,1006,1010,1011,1017,1018,1020,1
                                                                                                  021,1034,1037,1038,1040,1120,1127,
                                                                                                  1137,1144,1150,1156,1157,1158,1163
                                                                                                  ,1164,1165,1166,1174,1178,1184,118
                                                                                                  5,1186,1189,1190,1191,1192,1200,12
                                                                                                  04,1212,1213,1224,1231,1237,1239,1
                                                                                                  243,1248,1249,1250,1253,1254,1255,
                                                                                                  1256,1264,1268,1279,1286,1292,1293
                                                                                                  ,1297,1301,1303,1304,1305,1312,131
                                                                                                  3,1314,1317,1318,1319,1320,1329,13
                                                                                                  33,1339,1340,1353,1360,1382,1388,1
                                                                                                  389,1391,1398,1399,1402,1404,1411,
                                                                                                  1412,1413,1416,1417,1418,1419,1420
                                                                                                  ,1429,1434,1449,1450,1451,1452,145
                                                                                                  3,1458,1465,1466,1467,1468,1469,14
                                                                                                  70,1588,1903,1917,1924,1938       
 NRPTSAIRCAR                Local  293      I(4)            4           scalar                    674,741,1508,1888                 
 NRPTSAIRCFT                Local  295      I(4)            4           scalar                    675,743,1506,1885                 
 NRPTS_RD                   Local  299      I(4)            4           scalar                    677,752,1516,1582,1584,1892       
 NTAMDAR                    Local  352      I(4)            4           scalar                    691,1728,1912                     
 NUMAIRCARORPH              Local  326      I(4)            4           scalar                    683,1561,1899                     
 NUMAIRCARPAIRS             Local  318      I(4)            4           scalar                    681,1536,1898                     
 NUMAIRCFTORPH              Local  321      I(4)            4           scalar                    682,1559,1897                     
 NUMAIRCFTPAIRS             Local  315      I(4)            4           scalar                    680,1534,1896                     
 NUMORPH                    Local  310      I(4)            4           scalar                    672,1556,1895                     
 NUMPAIRS                   Local  306      I(4)            4           scalar                    671,1531,1893                     

Page 39          Source Listing                  INPUT_ACQC
2017-04-18 11:09 Symbol Table                    input_acqc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 OB_DIR                     Dummy  219      R(4)            4     1     0        ARG,INOUT        573,1382,1388,1389,1391,1399,1860 
 OB_Q                       Dummy  219      R(4)            4     1     0        ARG,INOUT        572,1237,1841,1858                
 OB_SPD                     Dummy  219      R(4)            4     1     0        ARG,INOUT        574,1382,1398,1862                
 OB_T                       Dummy  219      R(4)            4     1     0        ARG,INOUT        571,1292,1304,1856                
 PBG                        Dummy  227      R(8)            8     2     0        ARG,INOUT        636,1174                          
 PHASE                      Dummy  218      I(4)            4     1     0        ARG,INOUT        954,956,1671,1700,1702,1704,1712,1
                                                                                                  714,1716,1732,1735,1738,1748,1750,
                                                                                                  1752                              
 POB_EV                     Dummy  227      R(8)            8     2     0        ARG,INOUT        600,1163                          
 PPC_EV                     Dummy  227      R(8)            8     2     0        ARG,INOUT        602,1165                          
 PPP                        Dummy  227      R(8)            8     2     0        ARG,INOUT        642,1178                          
 PQM_EV                     Dummy  227      R(8)            8     2     0        ARG,INOUT        601,1164                          
 PQTZUVEV                   Local  423      R(8)            8     4     0                         1089,1094,1119,1136,1149,1150,1163
                                                                                                  ,1164,1165,1166,1189,1190,1191,119
                                                                                                  2,1223,1236,1237,1239,1240,1243,12
                                                                                                  53,1254,1255,1256,1278,1291,1292,1
                                                                                                  293,1297,1317,1318,1319,1320,1351,
                                                                                                  1352,1363,1364,1366,1367,1369,1370
                                                                                                  ,1403,1405,1416,1417,1418,1419,142
                                                                                                  0                                 
 PRC_EV                     Dummy  227      R(8)            8     2     0        ARG,INOUT        603,1166                          
 PRES                       Dummy  219      R(4)            4     1     0        ARG,INOUT        589,1150                          
 PREWXSEQ                   Dummy  225      R(8)            8     3     0        ARG,INOUT        652                               
 PROCN                      Dummy  226      R(8)            8     2     0        ARG,INOUT        660,1213,1340                     
 PROCN_CURRENT              Local  457      R(4)            4           scalar                    845,1213,1340                     
 QBG                        Dummy  230      R(8)            8     2     0        ARG,INOUT        638,1264                          
 QMS                        Local  419      I(4)            4     1     4                         1821,1822,1823,1824,1828,1829,1830
                                                                                                  ,1831,1832,1833,1834,1835,1842,184
                                                                                                  5,1846,1848,1850,1857,1859,1861,18
                                                                                                  63,1870,1872,1874,1876            
 QM_TYPES                   Local  420      CHAR            1     1     4                         420,1850                          
 QOB_EV                     Dummy  230      R(8)            8     2     0        ARG,INOUT        615,1253                          
 QPC_EV                     Dummy  230      R(8)            8     2     0        ARG,INOUT        617,1255                          
 QPP                        Dummy  230      R(8)            8     2     0        ARG,INOUT        644,1268                          
 QQM_EV                     Dummy  230      R(8)            8     2     0        ARG,INOUT        616,1254                          
 QRC_EV                     Dummy  230      R(8)            8     2     0        ARG,INOUT        618,1256                          
 RCT                        Dummy  223      R(8)            8     1     0        ARG,INOUT        633,975                           
 READNS                     Subr   1476                                                           1476,1496                         
 RINC                       Local  468      R(4)            4     1     5                         1778,1779,1780,1781,1782,1797     
 ROLF                       Dummy  225      R(8)            8     1     0        ARG,INOUT        657,978                           
 SPD_FC                     Local  439      R(4)            4           scalar                    1395,1398                         
 SQN                        Dummy  226      R(8)            8     2     0        ARG,INOUT        659,1212,1339                     
 SQN_CURRENT                Local  455      R(4)            4           scalar                    844,1212,1339,1527                
 SQN_NEXT                   Local  456      R(4)            4           scalar                    1522,1527                         
 SYSTEM                     Subr   560                                                            560,766,1929,1937                 
 TBG                        Dummy  229      R(8)            8     2     0        ARG,INOUT        639,1329                          
 TOB_EV                     Dummy  229      R(8)            8     2     0        ARG,INOUT        610,1317                          
 TPC_EV                     Dummy  229      R(8)            8     2     0        ARG,INOUT        612,1319                          
 TPP                        Dummy  229      R(8)            8     2     0        ARG,INOUT        645,1333                          
 TQM_EV                     Dummy  229      R(8)            8     2     0        ARG,INOUT        611,1318                          
 TRC_EV                     Dummy  229      R(8)            8     2     0        ARG,INOUT        613,1320                          
 TURB1SEQ                   Dummy  224      R(8)            8     1     0        ARG,INOUT        649,967                           
 TURB2SEQ                   Dummy  224      R(8)            8     2     0        ARG,INOUT        650,968                           
 TURB3SEQ                   Dummy  224      R(8)            8     3     0        ARG,INOUT        651                               
 T_PRCN                     Dummy  218      R(4)            4     1     0        ARG,INOUT        959                               

Page 40          Source Listing                  INPUT_ACQC
2017-04-18 11:09 Symbol Table                    input_acqc.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 UFBEVN                     Subr   1094                                                           1094,1442                         
 UFBINT                     Subr   784                                                            784,949,964,973,984,1002,1035,1089
                                                                                                  ,1172,1176,1198,1202,1262,1266,132
                                                                                                  6,1331,1426,1431,1439,1521        
 UFC                        Local  436      R(4)            4           scalar                    1366,1395                         
 UOB                        Local  434      R(4)            4           scalar                    1363,1382                         
 UOB_EV                     Dummy  231      R(8)            8     2     0        ARG,INOUT        620,1416                          
 VFC                        Local  437      R(4)            4           scalar                    1367,1395                         
 VOB                        Local  435      R(4)            4           scalar                    1364,1382                         
 VOB_EV                     Dummy  231      R(8)            8     2     0        ARG,INOUT        621,1417                          
 W3FC05                     Subr   1382                                                           1382,1395                         
 W3MOVDAT                   Subr   1797                                                           1797                              
 W3TAGE                     Subr   1486                                                           1486,1574                         
 WBG                        Dummy  231      R(8)            8     2     0        ARG,INOUT        640,1429                          
 WPC_EV                     Dummy  231      R(8)            8     2     0        ARG,INOUT        623,1419                          
 WPP                        Dummy  231      R(8)            8     2     0        ARG,INOUT        646,1434                          
 WQM_EV                     Dummy  231      R(8)            8     2     0        ARG,INOUT        622,1418                          
 WRC_EV                     Dummy  231      R(8)            8     2     0        ARG,INOUT        624,1420                          
 XIV_D                      Dummy  222      R(4)            4     1     0        ARG,INOUT        577,1399                          
 XIV_Q                      Dummy  222      R(4)            4     1     0        ARG,INOUT        576,1239                          
 XIV_S                      Dummy  222      R(4)            4     1     0        ARG,INOUT        578,1398                          
 XIV_T                      Dummy  222      R(4)            4     1     0        ARG,INOUT        575,1293                          
 YEAR                       Local  462      I(4)            4           scalar                    1771,1786                         
 ZBG                        Dummy  228      R(8)            8     2     0        ARG,INOUT        637,1200                          
 ZOB_EV                     Dummy  228      R(8)            8     2     0        ARG,INOUT        605,1189                          
 ZPC_EV                     Dummy  228      R(8)            8     2     0        ARG,INOUT        607,1191                          
 ZPP                        Dummy  228      R(8)            8     2     0        ARG,INOUT        643,1204                          
 ZQM_EV                     Dummy  228      R(8)            8     2     0        ARG,INOUT        606,1190                          
 ZRC_EV                     Dummy  228      R(8)            8     2     0        ARG,INOUT        608,1192                          

Page 41          Source Listing                  INPUT_ACQC
2017-04-18 11:09                                 input_acqc.f

   1945 

Page 42          Source Listing                  INPUT_ACQC
2017-04-18 11:09 Subprograms/Common Blocks       input_acqc.f



SUBPROGRAMS/COMMON BLOCKS

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 INPUT_ACQC                 Subr   216                                                                                              

COMPILER OPTIONS BEING USED

       -align noall                          -align nonone
       -align nocommons                      -align nodcommons
       -align noqcommons                     -align nozcommons
       -align records                        -align nosequence
       -align norec1byte                     -align norec2byte
       -align norec4byte                     -align norec8byte
       -align norec16byte                    -align norec32byte
       -align norec64byte                    -align noarray8byte
       -align noarray16byte                  -align noarray32byte
       -align noarray64byte                  -align noarray128byte
       -align noarray256byte                 -altparam
       -assume accuracy_sensitive            -assume nobscc
       -assume nobuffered_io                 -assume nobuffered_stdout
       -assume nobyterecl                    -assume nocc_omp
       -assume nocstring                     -assume nodummy_aliases
       -assume nofpe_summary                 -assume noieee_fpe_flags
       -assume nominus0                      -assume noold_boz
       -assume old_complex_align             -assume old_unit_star
       -assume noold_ldout_format            -assume noold_logical_ldio
       -assume old_maxminloc                 -assume old_xor
       -assume noprotect_allocates           -assume protect_constants
       -assume noprotect_parens              -assume split_common
       -assume source_include                -assume nostd_intent_in
       -assume std_minus0_rounding           -assume nostd_mod_proc_name
       -assume std_value                     -assume norealloc_lhs
       -assume underscore                    -assume no2underscores
  no   -auto                                 -auto_scalar
  no   -bintext                              -ccdefault default
       -check noargs                         -check noarg_temp_created
       -check noassume                       -check nobounds
       -check noformat                       -check nooutput_conversion
       -check nooverflow                     -check nopointers
       -check power                          -check noshape
       -check nostack                        -check nounderflow
       -check nouninitialized                -coarray-num-procs 0
  no   -coarray-config-file                  -convert big_endian
       -cross_reference                      -D __INTEL_COMPILER=1600
       -D __INTEL_COMPILER_UPDATE=3          -D __unix__
       -D __unix                             -D __linux__
       -D __linux                            -D __gnu_linux__
       -D unix                               -D linux
       -D __ELF__                            -D __x86_64
       -D __x86_64__                         -D __amd64
       -D __amd64__                          -D __INTEL_COMPILER_BUILD_DATE=20160415
       -D __INTEL_OFFLOAD                    -D __i686
       -D __i686__                           -D __pentiumpro
       -D __pentiumpro__                     -D __pentium4

Page 43          Source Listing                  INPUT_ACQC
2017-04-18 11:09                                 input_acqc.f

       -D __pentium4__                       -D __tune_pentium4__
       -D __SSE2__                           -D __SSE2_MATH__
       -D __SSE__                            -D __SSE_MATH__
       -D __MMX__                            -double_size 64
  no   -d_lines                         no   -Qdyncom
       -error_limit 30                  no   -f66
  no   -f77rtl                          no   -fast
       -fpscomp nofilesfromcmd               -fpscomp nogeneral
       -fpscomp noioformat                   -fpscomp noldio_spacing
       -fpscomp nologicals                   -fixed
  no   -fpconstant                           -fpe3
       -fprm nearest                    no   -ftz
       -fp_model noprecise                   -fp_model fast
       -fp_model nostrict                    -fp_model nosource
       -fp_model nodouble                    -fp_model noextended
       -fp_model novery_fast                 -fp_model noexcept
       -fp_model nono_except                 -heap_arrays 0
  no   -threadprivate_compat                 -g2
       -iface nomixed_str_len_arg            -iface nono_mixed_str_len_arg
       -init noarrays                        -init noinf
       -init nonan                           -init nosnan
       -init nozero                     no   -intconstant
       -integer_size 32                 no   -mixed_str_len_arg
  no   -module                               -names lowercase
  no   -noinclude                            -offload-build=host
       -O2                              no   -pad_source
       -real_size 32                    no   -recursive
       -reentrancy none                 no   -sharable_localsaves
       -vec=simd                             -show noinclude
       -show map                             -show options
  no   -syntax_only                     no   -threadcom
  no   -U                               no   -vms
       -w noall                              -w nonone
       -w alignments                         -w noargument_checking
       -w nodeclarations                     -w general
       -w noignore_bounds                    -w noignore_loc
       -w nointerfaces                       -w notruncated_source
       -w uncalled                           -w uninitialized
       -w nounused                           -w usage
  no   -wrap-margins

       -includepath : /usrx/local/intel/2016SP3/daal/include/,/usr/include/,.FOR,./.FOR,/usrx/local/intel/2016SP3/ipp/include/.FOR,
           /usrx/local/intel/2016SP3/mkl/include/.FOR,/usrx/local/intel/2016SP3/tbb/include/.FOR,/usrx/local/intel/2016SP3/daal/include/.FOR,
           /gpfs/tp1/usrx/local/intel/2016SP3/compilers_and_libraries_2016.3.210/linux/compiler/include/intel64/.FOR,
           /gpfs/tp1/usrx/local/intel/2016SP3/compilers_and_libraries_2016.3.210/linux/compiler/include/.FOR,/usr/local/include/.FOR,
           /usr/lib/gcc/x86_64-redhat-linux/4.4.7/include/.FOR,/usr/include/.FOR,/usr/include/.FOR,/usr/include/.FOR
       -list filename : input_acqc.lst
       -o    filename : none

COMPILER: Intel(R) Fortran 16.0-1633
