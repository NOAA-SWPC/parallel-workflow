Page 1           Source Listing                  EXPM
2017-04-18 11:09                                 pspl.f90

      1 !
      2 !                                 ******************************************
      3 !                                 *             MODULE pspl                *
      4 !                                 *  R. J. Purser, NOAA/NCEP/EMC, May 2014 * 
      5 !                                 *  jim.purser@noaa.gov                   *
      6 !                                 *                                        *
      7 !                                 ******************************************
      8 !
      9 ! A collection of handy spline routines
     10 !
     11 ! Last modified:
     12 !  Keyser (2014-12-12) - print written to unit 41 rather than stdout (for use in
     13 !                        prepobs_prepacqc program - limits amount of stdout)
     14 ! 
     15 ! DIRECT DEPENDENCIES:
     16 ! Modules:   pietc, pkind, pmat2
     17 ! Libraries: pmat
     18 !
     19 !
     20 !=============================================================================
     21 module pspl
     22 !=============================================================================
     23 use pkind, only: dp 
     24 use pietc, only: T,F,u0,o2,u1 ! True, False, 0., .5,  1.
     25 implicit none
     26 private
     27 public:: expm,expmm,coshm,sinhm,coshmm,xcms,enbase_t,      bnewton, &
     28      fit_tspline,eval_tspline,int_tspline,eval_itspline,             &
     29      fit_uspline,eval_uspline,int_uspline,eval_iuspline,             &
     30      best_slalom,count_gates,set_gates,set_posts,                    &
     31      count_routes,list_routes,next_route,                            &
     32      slalom_tspline,slalom_uspline,convertd,convertd_back
     33 
     34 integer, parameter:: ihu=1025      ! "Huge" integer parameter
     35 real(dp),parameter:: hu=huge(hu)/2 ! "Huge" real parameter
     36 real(dp),parameter:: eps=epsilon(eps),heps=.01 ! Small parameters
     37 
     38 interface expm;          module procedure expm;                  end interface
     39 interface expmm;         module procedure expmm;                 end interface
     40 interface coshm;         module procedure coshm;                 end interface
     41 interface sinhm;         module procedure sinhm;                 end interface
     42 interface coshmm;        module procedure coshmm;                end interface
     43 interface xcms;          module procedure xcms;                  end interface
     44 interface enbase_t;      module procedure enbase_t;              end interface
     45 interface bnewton;       module procedure tbnewton,ubnewton;     end interface
     46 interface fit_tspline;   module procedure fit_gtspline,fit_tspline
     47                                                                  end interface
     48 interface eval_tspline
     49    module procedure eval_tspline,eval_tsplined,eval_tsplinedd,eval_tsplineddd
     50                                                                  end interface
     51 interface int_tspline;   module procedure int_tspline;           end interface
     52 interface eval_itspline; module procedure eval_itspline;         end interface
     53 interface fit_uspline;   module procedure fit_guspline,fit_uspline
     54                                                                  end interface
     55 interface eval_uspline
     56    module procedure eval_uspline,eval_usplined,eval_usplinedd,eval_usplineddd
     57                                                                  end interface

Page 2           Source Listing                  EXPM
2017-04-18 11:09                                 pspl.f90

     58 interface int_uspline;   module procedure int_uspline;           end interface
     59 interface eval_iuspline; module procedure eval_iuspline;         end interface
     60 interface best_slalom;   module procedure best_tslalom,best_uslalom
     61                                                                  end interface
     62 interface count_gates;   module procedure count_gates;           end interface
     63 interface set_gates;     module procedure set_gates;             end interface
     64 interface set_posts;     module procedure set_posts;             end interface
     65 interface count_routes;  module procedure count_routes;          end interface
     66 interface list_routes;   module procedure list_routes;           end interface
     67 interface next_route;    module procedure next_route;            end interface
     68 interface slalom_tspline;module procedure slalom_tspline;        end interface
     69 interface slalom_uspline;module procedure slalom_uspline;        end interface
     70 interface convertd;      module procedure convertd;              end interface
     71 interface convertd_back; module procedure convertd_back;         end interface
     72 
     73 contains
     74 
     75 !=============================================================================
     76 function expm(x) result(e)!                                             [expm]
     77 !=============================================================================
     78 ! exp(x)-1 (approximately x for small x)
     79 ! = I^(1)exp(x), where I^(p) is the integral iterated p times
     80 real(dp),intent(in ):: x
     81 real(dp)            :: e
     82 !-----------------------------------------------------------------------------
     83 real(dp):: p
     84 integer :: i
     85 !=============================================================================
     86 if(abs(x)>o2)then
     87    e=exp(x)-u1
     88 else
     89    p=x; e=p
     90    do i=2,19; p=p*x/i; e=e+p; if(abs(p)<=abs(e*eps))return; enddo
     91 endif
     92 end function expm

Page 3           Source Listing                  EXPM
2017-04-18 11:09 Entry Points                    pspl.f90



ENTRY POINTS

  Name                     
                           
 pspl_mp_expm_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ABS                        Func   86                                   scalar                    86,90                             
 DP                         Param  80       I(4)            4           scalar                    23,35,36,80,81,83,99,100,102,118,1
                                                                                                  19,129,130,132,148,149,151,160,161
                                                                                                  ,163,187,188,217,219,221,222,226,2
                                                                                                  27,271,273,275,276,280,281,330,332
                                                                                                  ,333,336,413,414,415,419,420,421,5
                                                                                                  03,504,506,550,552,553,556,600,601
                                                                                                  ,602,606,607,608,681,682,684,685,7
                                                                                                  25,726,727,730,761,762,763,766,803
                                                                                                  ,804,805,808,848,849,850,853,894,8
                                                                                                  95,896,898,941,942,943,946,978,979
                                                                                                  ,980,983,1015,1016,1017,1020,1053,
                                                                                                  1054,1055,1058,1092,1093,1094,1096
                                                                                                  ,1097,1135,1136,1138,1139,1140,114
                                                                                                  1,1147,1148,1149,1215,1216,1218,12
                                                                                                  19,1220,1221,1227,1228,1229,1369,1
                                                                                                  371,1375,1471,1473,1476,1704,1706,
                                                                                                  1707,1708,1709,1715,1716,1839,1841
                                                                                                  ,1842,1843,1844,1850,1851,1973,197
                                                                                                  8,1984,2058,2060,2066             
 E                          Local  81       R(8)            8           scalar                    87,89,90                          
 EPS                        Param  90       R(8)            8           scalar   PRIV             36,90,109,139,172                 
 EXP                        Func   87                                   scalar                    87                                
 EXPM                       Func   76       R(8)            8           scalar                                                      
 I                          Local  84       I(4)            4           scalar                    90                                
 O2                         Param  86       R(8)            8           scalar                    24,86,105,108,121,135,153,167,192,
                                                                                                  447,474,483,515,516,522,523,524,52
                                                                                                  5,634,656,663,684,694,698,699,700,
                                                                                                  701,739,741,743,780,782,784,824,82
                                                                                                  6,828,869,871,873,908,913,914,915,
                                                                                                  916,955,957,959,964,965,992,994,99
                                                                                                  6,1001,1002,1029,1031,1033,1038,10
                                                                                                  39,1067,1069,1071,1076,1077,1096,1
                                                                                                  107,1111,1112,1113,1114           
 P                          Local  83       R(8)            8           scalar                    89,90                             
 U1                         Param  87       R(8)            8           scalar                    24,87,106,191,639,962,963,999,1000
                                                                                                  ,1036,1037,1074,1075,1785,1921    
 X                          Dummy  76       R(8)            8           scalar   ARG,IN           86,87,89,90                       

Page 4           Source Listing                  EXPM
2017-04-18 11:09                                 pspl.f90

     93 
     94 !=============================================================================
     95 function expmm(x) result(e)!                                           [expmm]
     96 !=============================================================================
     97 ! exp(x)-1-x (approximately x^2/2 for small x)
     98 ! = I^(2)exp(x), where I^(p) is the integral iterated p times
     99 real(dp),intent(in ):: x
    100 real(dp)            :: e
    101 !-----------------------------------------------------------------------------
    102 real(dp):: p
    103 integer :: i
    104 !=============================================================================
    105 if(abs(x)>o2)then
    106    e=exp(x)-u1-x
    107 else
    108    p=x*x*o2; e=p
    109    do i=3,25; p=p*x/i; e=e+p; if(abs(p)<=abs(e*eps))return; enddo
    110 endif
    111 end function expmm


ENTRY POINTS

  Name                      
                            
 pspl_mp_expmm_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ABS                        Func   105                                  scalar                    105,109                           
 E                          Local  100      R(8)            8           scalar                    106,108,109                       
 EXP                        Func   106                                  scalar                    106                               
 EXPMM                      Func   95       R(8)            8           scalar                                                      
 I                          Local  103      I(4)            4           scalar                    109                               
 P                          Local  102      R(8)            8           scalar                    108,109                           
 X                          Dummy  95       R(8)            8           scalar   ARG,IN           105,106,108,109                   

Page 5           Source Listing                  EXPMM
2017-04-18 11:09                                 pspl.f90

    112 
    113 !=============================================================================
    114 function coshm(x) result(c)!                                           [coshm]
    115 !=============================================================================
    116 ! cosh(x)-1  (approximately x**2/2 for small x)
    117 ! =I^(2)cosh(x), where I^(p) is the integral iterated p times
    118 real(dp),intent(in ):: x
    119 real(dp)            :: c
    120 !-----------------------------------------------------------------------------
    121 c=2*sinh(x*o2)**2
    122 end function coshm


ENTRY POINTS

  Name                      
                            
 pspl_mp_coshm_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 C                          Local  119      R(8)            8           scalar                    121                               
 COSHM                      Func   114      R(8)            8           scalar                                                      
 SINH                       Func   121                                  scalar                    121                               
 X                          Dummy  114      R(8)            8           scalar   ARG,IN           121                               

Page 6           Source Listing                  COSHM
2017-04-18 11:09                                 pspl.f90

    123 
    124 !=============================================================================
    125 function sinhm(x) result(s)!                                           [sinhm]
    126 !=============================================================================
    127 ! sinh(x)-x (approximately x**3/6 for small x)
    128 ! =I^(3)cosh(x), where I^(p) is the integral iterated p times
    129 real(dp),intent(in ):: x
    130 real(dp)            :: s
    131 !-----------------------------------------------------------------------------
    132 real(dp):: p,xx
    133 integer :: i
    134 !=============================================================================
    135 if(abs(x)>o2)then
    136    s=sinh(x)-x
    137 else
    138    p=x**3/6;  s=p;  xx=x*x
    139    do i=5,19,2; p=p*xx/(i*(i-1)); s=s+p; if(abs(p)<=abs(s*eps))return; enddo
    140 endif
    141 end function sinhm


ENTRY POINTS

  Name                      
                            
 pspl_mp_sinhm_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ABS                        Func   135                                  scalar                    135,139                           
 I                          Local  133      I(4)            4           scalar                    139                               
 P                          Local  132      R(8)            8           scalar                    138,139                           
 S                          Local  130      R(8)            8           scalar                    136,138,139                       
 SINH                       Func   136                                  scalar                    136                               
 SINHM                      Func   125      R(8)            8           scalar                                                      
 X                          Dummy  125      R(8)            8           scalar   ARG,IN           135,136,138                       
 XX                         Local  132      R(8)            8           scalar                    138,139                           

Page 7           Source Listing                  SINHM
2017-04-18 11:09                                 pspl.f90

    142 
    143 !=============================================================================
    144 function coshmm(x) result(c)!                                         [coshmm]
    145 !=============================================================================
    146 ! cosh(x)-1-x^2/2  (approximately x**4/24 for small x)
    147 ! =I^(4)cosh(x), where I^(p) is the integral iterated p times
    148 real(dp),intent(in ):: x
    149 real(dp)            :: c
    150 !-----------------------------------------------------------------------------
    151 real(dp)            :: xh
    152 !=============================================================================
    153 xh=x*o2
    154 c=sinhm(xh)*(2*sinh(xh)+x)
    155 end function coshmm


ENTRY POINTS

  Name                       
                             
 pspl_mp_coshmm_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 C                          Local  149      R(8)            8           scalar                    154                               
 COSHMM                     Func   144      R(8)            8           scalar                                                      
 SINH                       Func   154                                  scalar                    154                               
 SINHM                      Func   154      R(8)            8           scalar                    27,154,168,519,748,749,789,790,833
                                                                                                  ,834,878,879,924                  
 X                          Dummy  144      R(8)            8           scalar   ARG,IN           153,154                           
 XH                         Local  151      R(8)            8           scalar                    153,154                           

Page 8           Source Listing                  COSHMM
2017-04-18 11:09                                 pspl.f90

    156 
    157 !=============================================================================
    158 function xcms(x) result(e)!                                             [xcms]
    159 !=============================================================================
    160 real(dp),intent(in ):: x
    161 real(dp)            :: e
    162 !-----------------------------------------------------------------------------
    163 real(dp):: p,xx
    164 integer :: i,i2
    165 !=============================================================================
    166 ! x*coshm(x)-sinhm(x) (approximately x**3/3 for small x)
    167 if(abs(x)>o2)then
    168    e=x*coshm(x)-sinhm(x)
    169 else
    170    p=x**3/3;  e=p;  xx=x*x
    171    do i=2,15
    172       i2=i*2; p=p*xx/(i2*(i2+1)); e=e+i*p; if(abs(p)<=abs(e*eps))return
    173    enddo
    174 endif
    175 end function xcms


ENTRY POINTS

  Name                     
                           
 pspl_mp_xcms_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ABS                        Func   167                                  scalar                    167,172                           
 COSHM                      Func   168      R(8)            8           scalar                    27,168,518,748,749,789,790,833,834
                                                                                                  ,878,879,910                      
 E                          Local  161      R(8)            8           scalar                    168,170,172                       
 I                          Local  164      I(4)            4           scalar                    171,172                           
 I2                         Local  164      I(4)            4           scalar                    172                               
 P                          Local  163      R(8)            8           scalar                    170,172                           
 X                          Dummy  158      R(8)            8           scalar   ARG,IN           167,168,170                       
 XCMS                       Func   158      R(8)            8           scalar                                                      
 XX                         Local  163      R(8)            8           scalar                    170,172                           

Page 9           Source Listing                  XCMS
2017-04-18 11:09                                 pspl.f90

    176 
    177 !==============================================================================
    178 function enbase_t(tspan,hspan)result(r)!                             [enbase_t]
    179 !==============================================================================
    180 ! For a nondimensional time span, tspan, but a dimensional height
    181 ! span, hspan, return the baseline minimum possible tensioned spline
    182 ! energy integrated over the central span plus the two wings.
    183 ! If the hspan vanishes, return a nominal unit energy.
    184 ! The energy is quadratic in hspan, which can therefore be of either sign,
    185 ! but tspan must be strictly positive for a meaningful positive energy.
    186 !==============================================================================
    187 real(dp),intent(in ):: tspan,hspan
    188 real(dp)            :: r
    189 !=============================================================================
    190 if(tspan<u0)stop 'In enbase_t; thspan must be positive'
    191 if(hspan==u0)then; r=u1; return; endif
    192 r=hspan**2/expmm(-tspan)*o2
    193 end function enbase_t


ENTRY POINTS

  Name                         
                               
 pspl_mp_enbase_t_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ENBASE_T                   Func   178      R(8)            8           scalar                                                      
 EXPMM                      Func   192      R(8)            8           scalar                    27,192,901,902                    
 HSPAN                      Dummy  178      R(8)            8           scalar   ARG,IN           191,192                           
 R                          Local  188      R(8)            8           scalar                    191,192                           
 TSPAN                      Dummy  178      R(8)            8           scalar   ARG,IN           190,192                           
 U0                         Param  190      R(8)            8           scalar                    24,190,191,241,295,511,690,2032,20
                                                                                                  48                                

Page 10          Source Listing                  ENBASE_T
2017-04-18 11:09                                 pspl.f90

    194 
    195 !=============================================================================
    196 subroutine tbnewton(nh,m,bigT,halfgate,hgts,hs,hgtp,p,q, te,dhdt,FF)! [bnewton]
    197 !=============================================================================
    198 ! Perform a "bounded Newton" iteration to estimate the vertical velocity,
    199 ! dh/dt, as the trajectory passes through the nh "gates", each at height
    200 ! hs(i) and centered at time hgts(i)*halfgate with the halfwidth of the gate 
    201 ! equal to halfgate. The characteristic timescale of the fitted spline is bigT.
    202 ! the time-nodes rescaled by this bigT are at the m points tp, and the 
    203 ! corresponding "p" and "q" coefficients of the tensioned spline are p and q
    204 ! respectively. 
    205 ! The output is an array of n estimates, dh/dt, at each gate's hs. This
    206 ! involves estimating the time t of passage through each gate, and is done
    207 ! generically by Newton's method, except that the newton increments are
    208 ! bounded to be within a range "gate" = 2*halfgate, so that we eliminate
    209 ! wild excursions when dh/dt is actually very small (or vanishes). When such
    210 ! an excursion is detected, the returned value of dh/dt is simply that
    211 ! evaluated at ts(i), and no further attempt at Newton refinement is made
    212 ! at this i. (The vertical motion in such cases is essentially negligible
    213 ! in any case, and very likely is multivalued as the trajectory wavers about
    214 ! this gate's value of hs(i).)
    215 !=============================================================================
    216 integer,               intent(in ):: nh,m
    217 real(dp),              intent(in ):: bigT,halfgate
    218 integer ,dimension(nh),intent(in ):: hgts
    219 real(dp),dimension(nh),intent(in ):: hs
    220 integer, dimension(m), intent(in ):: hgtp
    221 real(dp),dimension(m) ,intent(in ):: p,q
    222 real(dp),dimension(nh),intent(out):: dhdt, te
    223 logical,               intent(out):: FF
    224 !-----------------------------------------------------------------------------
    225 integer,parameter    :: nit=12
    226 real(dp),dimension(m):: tr
    227 real(dp)             :: gate,tee,he,hac,dhadt,dh,dt
    228 integer              :: i,it
    229 !=============================================================================
    230 gate=2*halfgate/bigT
    231 tr=hgtp*halfgate/bigT
    232 do i=1,nh
    233    tee=hgts(i)*halfgate/bigT
    234    he=hs(i)
    235 !  Use Newton iterations to estimate the rescaled time, tee, at which the 
    236 !  height is he
    237    it = 1
    238    do while (it <= nit)
    239       call eval_tspline(m,tr,p,q, tee,hac,dhadt)
    240       if(it==1)dhdt(i)=dhadt/bigT
    241       if(dhadt==u0)exit
    242       dh=hac-he
    243       dt=-dh/dhadt
    244       if(abs(dt)>gate)then
    245          write(41,*) 'WARNING! In tbnewton; i,it,dt/gate = ',i,it,dt/gate
    246          exit
    247       endif
    248       if(abs(dh)<heps)then
    249          dhdt(i)=dhadt/bigT
    250          exit

Page 11          Source Listing                  TBNEWTON
2017-04-18 11:09                                 pspl.f90

    251       endif
    252       tee=tee+dt
    253       it = it + 1
    254    enddo
    255    FF=(it>nit)
    256    if(FF)then
    257       write(41,'("In tbnewton; Newton iterations seem not to be")')
    258       write(41,'("converging at i=",i3)'),i
    259       write(41,'("tee,he,hac,heps,dhadt:",5(1x,e11.4))'),tee,he,hac,heps,dhadt
    260    endif
    261    te(i) = tee
    262 enddo
    263 end subroutine tbnewton


ENTRY POINTS

  Name                         
                               
 pspl_mp_tbnewton_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ABS                        Func   244                                  scalar                    244,248                           
 BIGT                       Dummy  196      R(8)            8           scalar   ARG,IN           230,231,233,240,249               
 DH                         Local  227      R(8)            8           scalar                    242,243,248                       
 DHADT                      Local  227      R(8)            8           scalar                    239,240,241,243,249,259           
 DHDT                       Dummy  196      R(8)            8     1     0        ARG,OUT          240,249                           
 DT                         Local  227      R(8)            8           scalar                    243,244,245,252                   
 EVAL_TSPLINE               Subr   239                                                            28,239                            
 FF                         Dummy  196      L(4)            4           scalar   ARG,OUT          255,256                           
 GATE                       Local  227      R(8)            8           scalar                    230,244,245                       
 HAC                        Local  227      R(8)            8           scalar                    239,242,259                       
 HALFGATE                   Dummy  196      R(8)            8           scalar   ARG,IN           230,231,233                       
 HE                         Local  227      R(8)            8           scalar                    234,242,259                       
 HEPS                       Param  248      R(8)            8           scalar   PRIV             248,259,302,313                   
 HGTP                       Dummy  196      I(4)            4     1     0        ARG,IN           231                               
 HGTS                       Dummy  196      I(4)            4     1     0        ARG,IN           233                               
 HS                         Dummy  196      R(8)            8     1     0        ARG,IN           234                               
 I                          Local  228      I(4)            4           scalar                    232,233,234,240,245,249,258,261   
 IT                         Local  228      I(4)            4           scalar                    237,238,240,245,253,255           
 M                          Dummy  196      I(4)            4           scalar   ARG,IN           220,221,226,239                   
 NH                         Dummy  196      I(4)            4           scalar   ARG,IN           218,219,222,232                   
 NIT                        Param  225      I(4)            4           scalar                    238,255                           
 P                          Dummy  196      R(8)            8     1     0        ARG,IN           239                               
 Q                          Dummy  196      R(8)            8     1     0        ARG,IN           239                               
 TBNEWTON                   Subr   196                                           PRIV                                               
 TE                         Dummy  196      R(8)            8     1     0        ARG,OUT          261                               
 TEE                        Local  227      R(8)            8           scalar                    233,239,252,259,261               
 TR                         Local  226      R(8)            8     1     0                         231,239                           

Page 12          Source Listing                  TBNEWTON
2017-04-18 11:09                                 pspl.f90

    264 
    265 !=============================================================================
    266 subroutine ubnewton(nh,m,halfgate,hgts,hs,hgtp,p,q, te,dhdt,FF)!     [bnewton]
    267 !=============================================================================
    268 ! Like tbnewton, but for the case of untensioned (i.e., cubic) splines
    269 !=============================================================================
    270 integer,               intent(in ):: nh,m
    271 real(dp),              intent(in ):: halfgate
    272 integer, dimension(nh),intent(in ):: hgts
    273 real(dp),dimension(nh),intent(in ):: hs
    274 integer, dimension(m), intent(in ):: hgtp
    275 real(dp),dimension(m) ,intent(in ):: p,q
    276 real(dp),dimension(nh),intent(out):: dhdt, te
    277 logical,               intent(out):: FF
    278 !-----------------------------------------------------------------------------
    279 integer,parameter    :: nit=12
    280 real(dp),dimension(m):: tr
    281 real(dp)             :: gate,tee,he,hac,dhadt,dh,dt
    282 integer              :: i,it
    283 !=============================================================================
    284 gate=2*halfgate
    285 tr=hgtp*halfgate
    286 do i=1,nh
    287    tee=hgts(i)*halfgate
    288    he=hs(i)
    289 !  Use Newton iterations to estimate the rescaled time, tee, at which the 
    290 !  height is he
    291    it = 1
    292    do while (it <= nit)
    293       call eval_uspline(m,tr,p,q, tee,hac,dhadt)
    294       if(it==1)dhdt(i)=dhadt
    295       if(dhadt==u0)exit
    296       dh=hac-he
    297       dt=-dh/dhadt
    298       if(abs(dt)>gate)then
    299          write(41,*) 'WARNING! In ubnewton; i,it,dt/gate = ',i,it,dt/gate
    300          exit
    301       endif
    302       if(abs(dh)<heps)then
    303          dhdt(i)=dhadt
    304          exit
    305       endif
    306       tee=tee+dt
    307       it = it + 1
    308    enddo
    309    FF=(it>nit)
    310    if(FF)then
    311       write(41,'("In ubnewton; Newton iterations seem not to be")')
    312       write(41,'("converging at i=",i3)'),i
    313       write(41,'("tee,he,hac,heps,dhadt:",5(1x,e11.4))'),tee,he,hac,heps,dhadt
    314    endif
    315    te(i) = tee
    316 enddo
    317 end subroutine ubnewton

Page 13          Source Listing                  UBNEWTON
2017-04-18 11:09 Entry Points                    pspl.f90



ENTRY POINTS

  Name                         
                               
 pspl_mp_ubnewton_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ABS                        Func   298                                  scalar                    298,302                           
 DH                         Local  281      R(8)            8           scalar                    296,297,302                       
 DHADT                      Local  281      R(8)            8           scalar                    293,294,295,297,303,313           
 DHDT                       Dummy  266      R(8)            8     1     0        ARG,OUT          294,303                           
 DT                         Local  281      R(8)            8           scalar                    297,298,299,306                   
 EVAL_USPLINE               Subr   293                                                            29,293                            
 FF                         Dummy  266      L(4)            4           scalar   ARG,OUT          309,310                           
 GATE                       Local  281      R(8)            8           scalar                    284,298,299                       
 HAC                        Local  281      R(8)            8           scalar                    293,296,313                       
 HALFGATE                   Dummy  266      R(8)            8           scalar   ARG,IN           284,285,287                       
 HE                         Local  281      R(8)            8           scalar                    288,296,313                       
 HGTP                       Dummy  266      I(4)            4     1     0        ARG,IN           285                               
 HGTS                       Dummy  266      I(4)            4     1     0        ARG,IN           287                               
 HS                         Dummy  266      R(8)            8     1     0        ARG,IN           288                               
 I                          Local  282      I(4)            4           scalar                    286,287,288,294,299,303,312,315   
 IT                         Local  282      I(4)            4           scalar                    291,292,294,299,307,309           
 M                          Dummy  266      I(4)            4           scalar   ARG,IN           274,275,280,293                   
 NH                         Dummy  266      I(4)            4           scalar   ARG,IN           272,273,276,286                   
 NIT                        Param  279      I(4)            4           scalar                    292,309                           
 P                          Dummy  266      R(8)            8     1     0        ARG,IN           293                               
 Q                          Dummy  266      R(8)            8     1     0        ARG,IN           293                               
 TE                         Dummy  266      R(8)            8     1     0        ARG,OUT          315                               
 TEE                        Local  281      R(8)            8           scalar                    287,293,306,313,315               
 TR                         Local  280      R(8)            8     1     0                         285,293                           
 UBNEWTON                   Subr   266                                           PRIV                                               

Page 14          Source Listing                  UBNEWTON
2017-04-18 11:09                                 pspl.f90

    318 
    319 !============================================================================
    320 subroutine fit_gtspline(n,xs,ys,on,q,j,yac,en,FF)!              [fit_tspline]
    321 !============================================================================
    322 ! Fit the gappy tensioned spline, where only those nodes flagged "on"
    323 ! are effective in the fitting procedure. Owing to the fact that, where
    324 ! constraints are not "on" the spline will generally depart from ys, the
    325 ! actual y (yac) is returned for all nodes, regardless of the partial
    326 ! duplication with the given ys. In other respects, this is just
    327 ! like fit_tspline.
    328 !============================================================================
    329 integer,              intent(in ):: n
    330 real(dp),dimension(n),intent(in ):: xs,ys
    331 logical, dimension(n),intent(in ):: on
    332 real(dp),dimension(n),intent(out):: q,j,yac
    333 real(dp),             intent(out):: en
    334 logical,              intent(out):: FF
    335 !----------------------------------------------------------------------------
    336 real(dp),dimension(n):: xa,ya,qa,ja
    337 integer              :: i,k,m
    338 !============================================================================
    339 m=0
    340 do i=1,n
    341    if(on(i))then; m=m+1; xa(m)=xs(i); ya(m)=ys(i); endif
    342 enddo
    343 call fit_tspline(m,xa(1:m),ya(1:m),qa(1:m),ja(1:m),en,FF)
    344 if(FF)then
    345    write(41,*) 'In fit_gtspline; failure flag raised at call to fit_tspline'
    346    return
    347 endif
    348 k=0
    349 do i=1,n
    350    if(on(i))then
    351       k=k+1
    352       q(i)=qa(k)
    353       j(i)=ja(k)
    354       yac(i)=ys(i)
    355    else
    356       call eval_tsplined(m,xa(1:m),ya(1:m),qa(1:m),xs(i), yac(i),q(i))
    357       j(i)=0
    358    endif
    359 enddo
    360 end subroutine fit_gtspline

Page 15          Source Listing                  FIT_GTSPLINE
2017-04-18 11:09 Entry Points                    pspl.f90



ENTRY POINTS

  Name                             
                                   
 pspl_mp_fit_gtspline_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 EN                         Dummy  320      R(8)            8           scalar   ARG,OUT          343                               
 FF                         Dummy  320      L(4)            4           scalar   ARG,OUT          343,344                           
 FIT_GTSPLINE               Subr   320                                           PRIV             1734,1769                         
 FIT_TSPLINE                Subr   343                                                            28,343                            
 I                          Local  337      I(4)            4           scalar                    340,341,349,350,352,353,354,356,35
                                                                                                  7                                 
 J                          Dummy  320      R(8)            8     1     0        ARG,OUT          353,357                           
 JA                         Local  336      R(8)            8     1     0                         343,353                           
 K                          Local  337      I(4)            4           scalar                    348,351,352,353                   
 M                          Local  337      I(4)            4           scalar                    339,341,343,356                   
 N                          Dummy  320      I(4)            4           scalar   ARG,IN           330,331,332,336,340,349           
 ON                         Dummy  320      L(4)            4     1     0        ARG,IN           341,350                           
 Q                          Dummy  320      R(8)            8     1     0        ARG,OUT          352,356                           
 QA                         Local  336      R(8)            8     1     0                         343,352,356                       
 XA                         Local  336      R(8)            8     1     0                         341,343,356                       
 XS                         Dummy  320      R(8)            8     1     0        ARG,IN           341,356                           
 YA                         Local  336      R(8)            8     1     0                         341,343,356                       
 YAC                        Dummy  320      R(8)            8     1     0        ARG,OUT          354,356                           
 YS                         Dummy  320      R(8)            8     1     0        ARG,IN           341,354                           

Page 16          Source Listing                  FIT_GTSPLINE
2017-04-18 11:09                                 pspl.f90

    361 
    362 !============================================================================
    363 subroutine fit_tspline(n,xs,p,q,j,en,FF)!                       [fit_tspline]
    364 !============================================================================
    365 ! Solve for the coefficients, the 3rd-derivative jumps, and the energy,
    366 ! of the standardized tensioned spline passing through the n nodes at (xs,p).
    367 !
    368 ! The value and successive derivatives on the immediate positive side of
    369 ! each node, xs(i), are to be found as p(i), q(i), r(i), s(i), with j(i)
    370 ! being the discontinuity of 3rd-derivative s between the negative and positive
    371 ! side of the node (value itself, and other derivatives, remaining continuous).
    372 ! In addition, p(0), q(0), r(0) and s(0) are the value and derivatives on the 
    373 ! immediate negative side of xs(1). The spline solution minimizes elastic
    374 ! and tensional energy, en, defined as the integral dx of half the sum of the
    375 ! squared first and second derivatives over the whole line. Euler-Lagrange
    376 ! implies the solution is expressible in each segment between or beyond nodes:
    377 !       y(x') = p + q*x' + r*coshm(x') + s*sinhm(x')
    378 ! where x' = x-xs(i) is the local coordinate relative to the relevant node
    379 ! (the node at the left of the segent except that, implicitly, we take
    380 ! xs(0)===xs(1), and the two functions, coshm and sinhm, are defined:
    381 ! coshm(x) = cosh(x)-1
    382 ! sinhm(x) = sinh(x)-x.
    383 ! The solution in segment 0, i.e., x< xs(1), must exponentially decay towards
    384 ! a constant as x--> -infinity, while that for segment n must likewise decay
    385 ! as x--> +infinity, in order that energy remains finite. Thus, q(0)=r(0)=s(0)
    386 ! and q(n)=-r(n)=s(n) always. Solutions in these infinite end segments are
    387 ! therefore expressible in terms only of p(0),q(0) for segment 0 and in terms
    388 ! only of p(n), q(n) for segment n and is linear in these coefficients.
    389 ! Between consecutive nodes (segments 0<i<n) the solution y(x') is expressible
    390 ! in terms only of p(i),q(i),p(i+1),q(i+1) and is linear in these coefficients.
    391 ! Being a quadratic functional, the total energy is therefore expressible
    392 ! in vector-matrix quadratic form:
    393 ! En = (1/2)*p^T*PP*p + q^T*QP*p + (1/2)*q^T^QQ*q
    394 ! where p and q are here taken as the column vectors of all their discrete
    395 ! values, i=0,..n, and PP, QP and QQ are certain tri-diagonal matrices. 
    396 ! The spline solution is found as the energy-minimizing solution to:
    397 ! QP*p + QQ*q = 0
    398 ! where the p are known (the y(i)) and q is the vector of unknowns. Having 
    399 ! solved for q, we can immediately deduce the r and s, and hence the jump, j.
    400 ! Finally, we can also return the value of the energy as well.
    401 ! The use of a tri-diagonal solver, though seemingly more complicated than
    402 ! naive "shooting" alternatives, is very much better conditioned numerically,
    403 ! and will succeed in very long data series where the naive methods invariably
    404 ! fail.
    405 ! In practice, owing to the formal symmetries of the energy in each interval,
    406 ! we need only consider the change, p(i+1)-p(i), in each interval, and
    407 ! this "odd-symmetry" part of vector, p, only couples with the corresponding
    408 ! symmetry in the q (which is the part, (q(i)+q(i+1))), so two of the
    409 ! tridiagonals actually reduce to diagonals, simplifying the algebra.
    410 !=============================================================================
    411 use pmat2, only: ldltb, ltdlbv
    412 integer,                intent(in ):: n
    413 real(dp),dimension(  n),intent(in ):: xs,p
    414 real(dp),dimension(  n),intent(out):: q,j
    415 real(dp),               intent(out):: en
    416 logical,                intent(out):: FF
    417 !----------------------------------------------------------------------------

Page 17          Source Listing                  FIT_TSPLINE
2017-04-18 11:09                                 pspl.f90

    418 integer                   :: i,ip
    419 real(dp)                  :: x,ch,sh,sa,sb,sap,ccc,xcmsx2,egg,ehh
    420 real(dp),dimension(n-1)   :: difp,sumq,cpp,cqp
    421 real(dp),dimension(n,-1:0):: qq ! <- Tridiagonal, stored as rows of nonupper
    422 !=============================================================================
    423 FF=F
    424 if(n<1)stop 'In fit_tspline; size of data array must be positive'
    425 if(n==1)then; q=0; j=0; en=0; return; endif
    426 ! apply a strict monotonicity check on the xs:
    427 do i=2,n
    428    if(xs(i-1)>=xs(i)) then
    429       FF=T
    430       write(41,*) 'In fit_tspline; xs data must increase strictly monotonically'
    431       return
    432    end if
    433 enddo
    434 ! Initialize tri-diagonal kernels for the energy definition:
    435 qq=0 ! <- initialize symmetric tridiagonal, kernel for q^T*QQ*q
    436      ! where "q" are the dp/dx at each node.
    437 ! The coefficients in the quadratic form defining the spline energy also
    438 ! include terms involving factors (p(ip)-p(i))*(q(i)+q(ip)) and
    439 ! (p(ip)-p(i))*(p(ip)-p(i)), but these can be dealt with using, respectively,
    440 ! the  matrices cqp and cpp which are simply diagonal. It is the symmetries
    441 ! in the defiition of energy that allow this simplification.
    442 
    443 ! Loop over the intervals bounded by consecutive nodes:
    444 do i=1,n-1
    445    ip=i+1
    446    difp(i)=p(ip)-p(i)
    447    x=(xs(ip)-xs(i))*o2 ! Halfwidth of interval
    448    ch=cosh(x);  sh=sinh(x)
    449    xcmsx2=xcms(x)*2
    450 ! egg relates to the odd-g-basis function's energy integral coefficient
    451 ! ehh relates to the even-g-basis function's energy integral coefficient
    452    egg=x*sh/xcmsx2; ehh=ch/(2*sh)
    453 ! ccc is the coefficient of energy integral coupling g(i)*g(i) and g(ip)*g(ip)
    454    ccc=egg+ehh
    455    cpp(i)=ch/xcmsx2          ! Energy coefficient for difp(i)*difp(i)...
    456    cqp(i)=-difp(i)*sh/xcmsx2 ! ..and for difp(i)*sumq(i)
    457    qq(i,0)=qq(i,0)+ccc; qq(ip,-1)=qq(ip,-1)+egg-ehh; qq(ip,0)=qq(ip,0)+ccc
    458 enddo
    459 ! Add the exterior energy contributions to qq at both ends:
    460 qq(1,0)=qq(1,0)+1
    461 qq(n,0)=qq(n,0)+1
    462 
    463 ! Temporarily, q is made the vector of forcings in the tridiagonal linear
    464 ! system from which the final spline coefficients, q, are solved in place.
    465 q(1:n-1)=-cqp; q(n)=0
    466 q(2:n)=q(2:n)-cqp
    467 
    468 ! The following 2 lines solve the tridiagonal system for q:
    469 call ldltb(n,1,qq)    ! <- Decompose qq into factors, L*(1/D)*L^T, L=lower
    470 call ltdlbv(n,1,qq,q) ! <- Back-substitute, thus solving for q
    471 sumq=q(1:n-1)+q(2:n)   ! <-pairwise sums of derivatives, q:
    472 
    473 ! The minimizing energy can now be evaluated as a sum of only 2 terms:
    474 en=o2*(dot_product(difp**2,cpp)+dot_product(sumq,cqp))

Page 18          Source Listing                  FIT_TSPLINE
2017-04-18 11:09                                 pspl.f90

    475 
    476 ! Finally, evaluate the 3rd-derivative "jumps", j, at each node:
    477 ! Here, sb is the 3rd-derivative at the right end, sa that at the left end,
    478 ! of whichever interval is under consideration, but for interior intervals,
    479 ! sa = sap+q(i) and sb=sap+q(i+1).
    480 sb=q(1)
    481 do i=1,n-1
    482    ip=i+1
    483    x=o2*(xs(ip)-xs(i))
    484    xcmsx2=xcms(x)*2
    485    ch=cosh(x);  sh=sinh(x)
    486    sap=(sh*sumq(i)-ch*difp(i))/xcmsx2
    487    sa=sap+q(i)
    488    j(i)=sa-sb
    489    sb  =sap+q(ip)
    490 enddo
    491 j(n)=q(n)-sb ! Final "sa" is just q(n) for the right exterior
    492 end subroutine fit_tspline


ENTRY POINTS

  Name                            
                                  
 pspl_mp_fit_tspline_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CCC                        Local  419      R(8)            8           scalar                    454,457                           
 CH                         Local  419      R(8)            8           scalar                    448,452,455,485,486               
 COSH                       Func   448                                  scalar                    448,485                           
 CPP                        Local  420      R(8)            8     1     0                         455,474                           
 CQP                        Local  420      R(8)            8     1     0                         456,465,466,474                   
 DIFP                       Local  420      R(8)            8     1     0                         446,456,474,486                   
 DLDLTB                     Subr   469                                           PRIV             469                               
 DLTDLBV                    Subr   470                                           PRIV             470                               
 DOT_PRODUCT                Func   474                                  scalar                    474                               
 EGG                        Local  419      R(8)            8           scalar                    452,454,457                       
 EHH                        Local  419      R(8)            8           scalar                    452,454,457                       
 EN                         Dummy  363      R(8)            8           scalar   ARG,OUT          425,474                           
 F                          Param  423      L(4)            4           scalar                    24,423,610,1161,1187,1254,1378,147
                                                                                                  9,1529,1555,1601,1720,1730,1758,18
                                                                                                  58,1863,1894,1986,2015            
 FF                         Dummy  363      L(4)            4           scalar   ARG,OUT          423,429                           
 FIT_TSPLINE                Subr   363                                                                                              
 I                          Local  418      I(4)            4           scalar                    427,428,444,445,446,447,455,456,45
                                                                                                  7,481,482,483,486,487,488         
 IP                         Local  418      I(4)            4           scalar                    445,446,447,457,482,483,489       
 J                          Dummy  363      R(8)            8     1     0        ARG,OUT          425,488,491                       
 LDLTB                      Subr   411                                                            411,469                           
 LTDLBV                     Subr   411                                                            411,470                           
 N                          Dummy  363      I(4)            4           scalar   ARG,IN           413,414,421,424,425,427,444,461,46
                                                                                                  5,466,469,470,471,481,491         
 P                          Dummy  363      R(8)            8     1     0        ARG,IN           446                               

Page 19          Source Listing                  FIT_TSPLINE
2017-04-18 11:09 Symbol Table                    pspl.f90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 PMAT2                      Module 411                                                            411                               
 Q                          Dummy  363      R(8)            8     1     0        ARG,OUT          425,465,466,470,471,480,487,489,49
                                                                                                  1                                 
 QQ                         Local  421      R(8)            8     2     0                         435,457,460,461,469,470           
 SA                         Local  419      R(8)            8           scalar                    487,488                           
 SAP                        Local  419      R(8)            8           scalar                    486,487,489                       
 SB                         Local  419      R(8)            8           scalar                    480,488,489,491                   
 SH                         Local  419      R(8)            8           scalar                    448,452,456,485,486               
 SINH                       Func   448                                  scalar                    448,485                           
 SUMQ                       Local  420      R(8)            8     1     0                         471,474,486                       
 T                          Param  429      L(4)            4           scalar                    24,429,616,1160,1184,1251,1394,149
                                                                                                  1,1494,1496,1500,1502,1530,1551,16
                                                                                                  26,1764,1804,1808,1821,1900,1940,1
                                                                                                  944,1957,2017,2043                
 X                          Local  419      R(8)            8           scalar                    447,448,449,452,483,484,485       
 XCMS                       Func   449      R(8)            8           scalar                    27,449,484,521,750,791,835,880,911
 XCMSX2                     Local  419      R(8)            8           scalar                    449,452,455,456,484,486           
 XS                         Dummy  363      R(8)            8     1     0        ARG,IN           428,447,483                       

Page 20          Source Listing                  FIT_TSPLINE
2017-04-18 11:09                                 pspl.f90

    493   
    494 !=============================================================================
    495 subroutine int_tspline(n,xs,p,q, m)!                             [int_tspline]
    496 !=============================================================================
    497 ! Take the sets of n parameters p and q of the tensioned spline
    498 ! and return the values of its integral at the n-1 interval midpoints, and
    499 ! the value at the last node, assuming that the integral at the first node
    500 ! is set to zero.
    501 !=============================================================================
    502 integer,              intent(in ):: n
    503 real(dp),dimension(n),intent(in ):: xs,p,q
    504 real(dp),dimension(n),intent(out):: m
    505 !-----------------------------------------------------------------------------
    506 real(dp):: a,b,c,d,e,t2,x,pa,pd,qa,qd,shx,chmx,shmx,chmmx,xcmsx
    507 integer :: i,ip
    508 !=============================================================================
    509 ! e is the running integral as we loop over successive nodes, so it starts out
    510 ! zero at the first node:
    511 e=u0
    512 ! Loop over intervals:
    513 do i=1,n-1
    514    ip=i+1
    515    x=(xs(ip)-xs(i))*o2 !<- interval half-width
    516    t2=x*x*o2
    517    shx  =sinh  (x)
    518    chmx =coshm (x)
    519    shmx =sinhm (x)
    520    chmmx=coshmm(x)
    521    xcmsx=xcms  (x)
    522    pa=(p(ip)+p(i))*o2
    523    pd=(p(ip)-p(i))*o2/x
    524    qa=(q(ip)+q(i))*o2
    525    qd=(q(ip)-q(i))*o2/shx
    526 ! a,b,c,d are analogous to the Taylor coefficients of a cubic about the 
    527 ! interval midpoint, but more precisely, c and d relate to basis functions
    528 ! coshm and sinhm (instead of x**2/2 and x**3/6 for the perfect cubic).
    529    c=qd
    530    a=pa-c*chmx
    531    d=(qa-pd)*x/xcmsx
    532    b=qa-d*chmx
    533    m(i)=e+a*x -b*t2 +c*shmx -d*chmmx
    534    e=e+2*(a*x+c*shmx)
    535 enddo
    536 m(n)=e
    537 end subroutine int_tspline

Page 21          Source Listing                  INT_TSPLINE
2017-04-18 11:09 Entry Points                    pspl.f90



ENTRY POINTS

  Name                            
                                  
 pspl_mp_int_tspline_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Local  506      R(8)            8           scalar                    530,533,534                       
 B                          Local  506      R(8)            8           scalar                    532,533                           
 C                          Local  506      R(8)            8           scalar                    529,530,533,534                   
 CHMMX                      Local  506      R(8)            8           scalar                    520,533                           
 CHMX                       Local  506      R(8)            8           scalar                    518,530,532                       
 COSHMM                     Func   520      R(8)            8           scalar                    27,520,925                        
 D                          Local  506      R(8)            8           scalar                    531,532,533                       
 E                          Local  506      R(8)            8           scalar                    511,533,534,536                   
 I                          Local  507      I(4)            4           scalar                    513,514,515,522,523,524,525,533   
 INT_TSPLINE                Subr   495                                                                                              
 IP                         Local  507      I(4)            4           scalar                    514,515,522,523,524,525           
 M                          Dummy  495      R(8)            8     1     0        ARG,OUT          533,536                           
 N                          Dummy  495      I(4)            4           scalar   ARG,IN           503,504,513,536                   
 P                          Dummy  495      R(8)            8     1     0        ARG,IN           522,523                           
 PA                         Local  506      R(8)            8           scalar                    522,530                           
 PD                         Local  506      R(8)            8           scalar                    523,531                           
 Q                          Dummy  495      R(8)            8     1     0        ARG,IN           524,525                           
 QA                         Local  506      R(8)            8           scalar                    524,531,532                       
 QD                         Local  506      R(8)            8           scalar                    525,529                           
 SHMX                       Local  506      R(8)            8           scalar                    519,533,534                       
 SHX                        Local  506      R(8)            8           scalar                    517,525                           
 SINH                       Func   517                                  scalar                    517                               
 T2                         Local  506      R(8)            8           scalar                    516,533                           
 X                          Local  506      R(8)            8           scalar                    515,516,517,518,519,520,521,523,53
                                                                                                  1,533,534                         
 XCMSX                      Local  506      R(8)            8           scalar                    521,531                           
 XS                         Dummy  495      R(8)            8     1     0        ARG,IN           515                               

Page 22          Source Listing                  INT_TSPLINE
2017-04-18 11:09                                 pspl.f90

    538 
    539 !============================================================================
    540 subroutine fit_guspline(n,xs,ys,on,q,j,yac,en,FF)!              [fit_uspline]
    541 !============================================================================
    542 ! Fit the gappy untensioned spline, where only those nodes flagged "on"
    543 ! are effective in the fitting procedure. Owing to the fact that, where
    544 ! constraints are not "on" the spline will generally depart from ys, the
    545 ! actual y (yac) is returned for all nodes, regardless of the partial
    546 ! duplication with the given ys. In other respects, this is just
    547 ! like fit_tspline.
    548 !============================================================================
    549 integer,              intent(in ):: n
    550 real(dp),dimension(n),intent(in ):: xs,ys
    551 logical, dimension(n),intent(in ):: on
    552 real(dp),dimension(n),intent(out):: q,j,yac
    553 real(dp),             intent(out):: en
    554 logical,              intent(out):: FF
    555 !----------------------------------------------------------------------------
    556 real(dp),dimension(n):: xa,ya,qa,ja
    557 integer              :: i,k,m
    558 !============================================================================
    559 m=0
    560 do i=1,n
    561    if(on(i))then; m=m+1; xa(m)=xs(i); ya(m)=ys(i); endif
    562 enddo
    563 call fit_uspline(m,xa(1:m),ya(1:m),qa(1:m),ja(1:m),en,FF)
    564 if(FF)then
    565    write(41,*) 'In fit_guspline; failure flag raised at call to fit_uspline'
    566    return
    567 endif
    568 k=0
    569 do i=1,n
    570    if(on(i))then
    571       k=k+1
    572       q(i)=qa(k)
    573       j(i)=ja(k)
    574       yac(i)=ys(i)
    575    else
    576       call eval_usplined(m,xa(1:m),ya(1:m),qa(1:m),xs(i), yac(i),q(i))
    577       j(i)=0
    578    endif
    579 enddo
    580 end subroutine fit_guspline

Page 23          Source Listing                  FIT_GUSPLINE
2017-04-18 11:09 Entry Points                    pspl.f90



ENTRY POINTS

  Name                             
                                   
 pspl_mp_fit_guspline_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 EN                         Dummy  540      R(8)            8           scalar   ARG,OUT          563                               
 FF                         Dummy  540      L(4)            4           scalar   ARG,OUT          563,564                           
 FIT_GUSPLINE               Subr   540                                           PRIV             1870,1905                         
 FIT_USPLINE                Subr   563                                                            29,563                            
 I                          Local  557      I(4)            4           scalar                    560,561,569,570,572,573,574,576,57
                                                                                                  7                                 
 J                          Dummy  540      R(8)            8     1     0        ARG,OUT          573,577                           
 JA                         Local  556      R(8)            8     1     0                         563,573                           
 K                          Local  557      I(4)            4           scalar                    568,571,572,573                   
 M                          Local  557      I(4)            4           scalar                    559,561,563,576                   
 N                          Dummy  540      I(4)            4           scalar   ARG,IN           550,551,552,556,560,569           
 ON                         Dummy  540      L(4)            4     1     0        ARG,IN           561,570                           
 Q                          Dummy  540      R(8)            8     1     0        ARG,OUT          572,576                           
 QA                         Local  556      R(8)            8     1     0                         563,572,576                       
 XA                         Local  556      R(8)            8     1     0                         561,563,576                       
 XS                         Dummy  540      R(8)            8     1     0        ARG,IN           561,576                           
 YA                         Local  556      R(8)            8     1     0                         561,563,576                       
 YAC                        Dummy  540      R(8)            8     1     0        ARG,OUT          574,576                           
 YS                         Dummy  540      R(8)            8     1     0        ARG,IN           561,574                           

Page 24          Source Listing                  FIT_GUSPLINE
2017-04-18 11:09                                 pspl.f90

    581 
    582 !=============================================================================
    583 subroutine fit_uspline(n,xs,p,q,j,en,FF)!                        [fit_uspline]
    584 !=============================================================================
    585 ! Solve for the coefficients, the 3rd-derivative jumps, and the energy,
    586 ! of the untensioned (cubic) spline passing through the n nodes at (xs,p).
    587 !
    588 ! The algorithm follows the pattern given in fit_tspline, except that the
    589 ! hyperbolic functions are all replaced by their asymptotic (x--> 0) limiting
    590 ! forms. These limiting forms are as follows:
    591 ! cosh(x) --> 1
    592 ! sinh(x) --> x
    593 ! coshm(x) --> x**2/2
    594 ! sinhm(x) --> x**3/6
    595 ! xcms(x)  --> x**3/3
    596 !=============================================================================
    597 use pietc, only: o3
    598 use pmat2, only: ldltb, ltdlbv
    599 integer,                intent(in ):: n
    600 real(dp),dimension(  n),intent(in ):: xs,p
    601 real(dp),dimension(  n),intent(out):: q,j
    602 real(dp),               intent(out):: en
    603 logical,                intent(out):: FF
    604 !----------------------------------------------------------------------------
    605 integer                   :: i,ip
    606 real(dp)                  :: x,x2,sa,sb,ccc,xcmsx2
    607 real(dp),dimension(n-1)   :: difp,sumq,cpp,cqp
    608 real(dp),dimension(n,-1:0):: qq ! <- Tridiagonal, stored as rows of nonupper
    609 !=============================================================================
    610 FF=F
    611 if(n<1)stop 'In fit_uspline; size of data array must be positive'
    612 if(n==1)then; q=0; j=0; en=0; return; endif
    613 ! apply a strict monotonicity check on the xs:
    614 do i=2,n
    615    if(xs(i-1)>=xs(i)) then
    616       FF=T
    617       write(41,*) 'In fit_uspline; xs data must increase strictly monotonically'
    618       return
    619    end if
    620 enddo
    621 ! Initialize tri-diagonal kernels for the energy definition:
    622 qq=0 ! <- initialize symmetric tridiagonal, kernel for q^T*QQ*q
    623      ! where "q" are the dp/dx at each node.
    624 ! The coefficients in the quadratic form defining the spline energy also
    625 ! include terms involving factors (p(ip)-p(i))*(q(i)+q(ip)) and
    626 ! (p(ip)-p(i))*(p(ip)-p(i)), but these can be dealt with using, respectively,
    627 ! the  matrices cqp and cpp which are simply diagonal. It is the symmetries
    628 ! in the defiition of energy that allow this simplification.
    629 
    630 ! Loop over the intervals bounded by consecutive nodes:
    631 do i=1,n-1
    632    ip=i+1
    633    difp(i)=p(ip)-p(i)
    634    x2=xs(ip)-xs(i); x=o2*x2! Width, and halfwidth of interval
    635    xcmsx2=o3*x**3*2
    636 
    637 ! ccc is the coefficient of energy integral coupling g(i)*g(i) and g(ip)*g(ip)

Page 25          Source Listing                  FIT_USPLINE
2017-04-18 11:09                                 pspl.f90

    638    ccc=2/x
    639    cpp(i)=u1/xcmsx2         ! Energy coefficient for difp(i)*difp(i)...
    640    cqp(i)=-difp(i)*x/xcmsx2 ! ..and for difp(i)*sumq(i)
    641    qq(i,0)=qq(i,0)+ccc; qq(ip,-1)=qq(ip,-1)+1/x; qq(ip,0)=qq(ip,0)+ccc
    642 enddo
    643 ! There is NO exterior energy contributions to qq at both ends:
    644 
    645 ! Temporarily, q is made the vector of forcings in the tridiagonal linear
    646 ! system from which the final spline coefficients, q, are solved in place.
    647 q(1:n-1)=-cqp; q(n)=0
    648 q(2:n)=q(2:n)-cqp
    649 
    650 ! The following 2 lines solve the tridiagonal system for q:
    651 call ldltb(n,1,qq)    ! <- Decompose qq into factors, L*(1/D)*L^T, L=lower
    652 call ltdlbv(n,1,qq,q) ! <- Back-substitute, thus solving for q
    653 sumq=q(1:n-1)+q(2:n)  ! <-pairwise sums of derivatives, q:
    654 
    655 ! The minimizing energy can now be evaluated as a sum of only 2 terms:
    656 en=o2*(dot_product(difp**2,cpp)+dot_product(sumq,cqp))
    657 
    658 ! Finally, evaluate the 3rd-derivative "jumps", j, at each node:
    659 ! Here, sb and sa are the 3rd-derivatives in consecutive intervals
    660 sb=0
    661 do i=1,n-1
    662    ip=i+1
    663    x=o2*(xs(ip)-xs(i))
    664    xcmsx2=o3*x**3*2
    665    sa=(x*sumq(i)-difp(i))/xcmsx2
    666    j(i)=sa-sb
    667    sb  =sa
    668 enddo
    669 j(n)=-sb ! Final "sa" is just 0 for the right exterior
    670 end subroutine fit_uspline

Page 26          Source Listing                  FIT_USPLINE
2017-04-18 11:09 Entry Points                    pspl.f90



ENTRY POINTS

  Name                            
                                  
 pspl_mp_fit_uspline_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CCC                        Local  606      R(8)            8           scalar                    638,641                           
 CPP                        Local  607      R(8)            8     1     0                         639,656                           
 CQP                        Local  607      R(8)            8     1     0                         640,647,648,656                   
 DIFP                       Local  607      R(8)            8     1     0                         633,640,656,665                   
 DLDLTB                     Subr   651                                           PRIV             651                               
 DLTDLBV                    Subr   652                                           PRIV             652                               
 DOT_PRODUCT                Func   656                                  scalar                    656                               
 EN                         Dummy  583      R(8)            8           scalar   ARG,OUT          612,656                           
 FF                         Dummy  583      L(4)            4           scalar   ARG,OUT          610,616                           
 FIT_USPLINE                Subr   583                                                                                              
 I                          Local  605      I(4)            4           scalar                    614,615,631,632,633,634,639,640,64
                                                                                                  1,661,662,663,665,666             
 IP                         Local  605      I(4)            4           scalar                    632,633,634,641,662,663           
 J                          Dummy  583      R(8)            8     1     0        ARG,OUT          612,666,669                       
 LDLTB                      Subr   598                                                            598,651                           
 LTDLBV                     Subr   598                                                            598,652                           
 N                          Dummy  583      I(4)            4           scalar   ARG,IN           600,601,608,611,612,614,631,647,64
                                                                                                  8,651,652,653,661,669             
 O3                         Param  597      R(8)            8           scalar                    597,635,664                       
 P                          Dummy  583      R(8)            8     1     0        ARG,IN           633                               
 PIETC                      Module 597                                                            597                               
 PMAT2                      Module 598                                                            598                               
 Q                          Dummy  583      R(8)            8     1     0        ARG,OUT          612,647,648,652,653               
 QQ                         Local  608      R(8)            8     2     0                         622,641,651,652                   
 SA                         Local  606      R(8)            8           scalar                    665,666,667                       
 SB                         Local  606      R(8)            8           scalar                    660,666,667,669                   
 SUMQ                       Local  607      R(8)            8     1     0                         653,656,665                       
 X                          Local  606      R(8)            8           scalar                    634,635,638,640,641,663,664,665   
 X2                         Local  606      R(8)            8           scalar                    634                               
 XCMSX2                     Local  606      R(8)            8           scalar                    635,639,640,664,665               
 XS                         Dummy  583      R(8)            8     1     0        ARG,IN           615,634,663                       

Page 27          Source Listing                  FIT_USPLINE
2017-04-18 11:09                                 pspl.f90

    671   
    672 !=============================================================================
    673 subroutine int_uspline(n,xs,p,q, m)!                             [int_uspline]
    674 !=============================================================================
    675 ! Take the sets of n parameters p and q of the untensioned cubic spline
    676 ! and return the values of its integral at the n-1 interval midpoints, and
    677 ! the value at the last node, assuming that the integral at the first node
    678 ! is set to zero.
    679 !=============================================================================
    680 integer,              intent(in ):: n
    681 real(dp),dimension(n),intent(in ):: xs,p,q
    682 real(dp),dimension(n),intent(out):: m
    683 !-----------------------------------------------------------------------------
    684 real(dp),parameter:: u3o2=3*o2
    685 real(dp):: a,b,c,d,e,t2,t3,t4,x,pa,pd,qa,qd
    686 integer :: i,ip
    687 !=============================================================================
    688 ! e is the running integral as we loop over successive nodes, so it starts out
    689 ! zero at the first node:
    690 e=u0
    691 ! Loop over intervals:
    692 do i=1,n-1
    693    ip=i+1
    694    x=(xs(ip)-xs(i))*o2 !<- interval half-width
    695    t2=x*x/2
    696    t3=t2*x/3
    697    t4=t3*x/4
    698    pa=(p(ip)+p(i))*o2
    699    pd=(p(ip)-p(i))*o2/x
    700    qa=(q(ip)+q(i))*o2
    701    qd=(q(ip)-q(i))*o2/x
    702 ! a,b,c,d are the Taylor coefficients of the cubic about the interval midpoint:
    703    c=qd
    704    a=pa-c*t2
    705    d=(qa-pd)*u3o2/t2
    706    b=qa-d*t2
    707    m(i)=e+a*x-b*t2+c*t3-d*t4
    708    e=e+2*(a*x+c*t3)
    709 enddo
    710 m(n)=e
    711 end subroutine int_uspline

Page 28          Source Listing                  INT_USPLINE
2017-04-18 11:09 Entry Points                    pspl.f90



ENTRY POINTS

  Name                            
                                  
 pspl_mp_int_uspline_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Local  685      R(8)            8           scalar                    704,707,708                       
 B                          Local  685      R(8)            8           scalar                    706,707                           
 C                          Local  685      R(8)            8           scalar                    703,704,707,708                   
 D                          Local  685      R(8)            8           scalar                    705,706,707                       
 E                          Local  685      R(8)            8           scalar                    690,707,708,710                   
 I                          Local  686      I(4)            4           scalar                    692,693,694,698,699,700,701,707   
 INT_USPLINE                Subr   673                                                                                              
 IP                         Local  686      I(4)            4           scalar                    693,694,698,699,700,701           
 M                          Dummy  673      R(8)            8     1     0        ARG,OUT          707,710                           
 N                          Dummy  673      I(4)            4           scalar   ARG,IN           681,682,692,710                   
 P                          Dummy  673      R(8)            8     1     0        ARG,IN           698,699                           
 PA                         Local  685      R(8)            8           scalar                    698,704                           
 PD                         Local  685      R(8)            8           scalar                    699,705                           
 Q                          Dummy  673      R(8)            8     1     0        ARG,IN           700,701                           
 QA                         Local  685      R(8)            8           scalar                    700,705,706                       
 QD                         Local  685      R(8)            8           scalar                    701,703                           
 T2                         Local  685      R(8)            8           scalar                    695,696,704,705,706,707           
 T3                         Local  685      R(8)            8           scalar                    696,697,707,708                   
 T4                         Local  685      R(8)            8           scalar                    697,707                           
 U3O2                       Param  684      R(8)            8           scalar                    705                               
 X                          Local  685      R(8)            8           scalar                    694,695,696,697,699,701,707,708   
 XS                         Dummy  673      R(8)            8     1     0        ARG,IN           694                               

Page 29          Source Listing                  INT_USPLINE
2017-04-18 11:09                                 pspl.f90

    712 
    713 !=============================================================================
    714 subroutine eval_tspline(n,xs,p,q, x,y)!                         [eval_tspline]
    715 !=============================================================================
    716 ! Assuming the 1st derivatives, q, are correctly given at the n nodes, xs,
    717 ! of the standardized tensioned spline, where p are the nodal values, 
    718 ! evaluate the spline function y at the location x.
    719 ! First find the nonvanishing interval in which x resides, then expand
    720 ! y using basis functions implied by the interval-end values of p and q
    721 ! using the interval midpoint as local origin when x is interior, or the
    722 ! single interval endpoint when it is exterior.
    723 !=============================================================================
    724 integer,              intent(in ):: n
    725 real(dp),dimension(n),intent(in ):: xs,p,q
    726 real(dp),             intent(in ):: x
    727 real(dp),             intent(out):: y
    728 !----------------------------------------------------------------------------
    729 integer :: ia,ib
    730 real(dp):: xr,xh,pm,qm,qah,qbh,qxh,qdh,shh,chh,sh,ch,xcmsh,shm,chm,shhm,chhm
    731 !============================================================================
    732 if(x<=xs(1))then; xr=x-xs(1); y=p(1)+q(1)*expm( xr); return; endif
    733 if(x>=xs(n))then; xr=x-xs(n); y=p(n)-q(n)*expm(-xr); return; endif
    734 do ib=2,n
    735    if(xs(ib)<=xs(ib-1))cycle ! <- only consider intervals of positive width
    736    if(xs(ib)>=x)exit ! <- exit once finite interval straddling x is found
    737 enddo
    738 ia=ib-1
    739 xh=(xs(ib)-xs(ia))*o2   ! <- halfwidth of interval
    740 xr=x-xs(ia)-xh          ! <- x relative to interval midpoint
    741 pm=(p(ia)+p(ib))*o2     ! average of end values
    742 qm=(p(ib)-p(ia))/(xh*2) ! average gradient
    743 qah=q(ia)*o2; qbh=q(ib)*o2
    744 qxh=qah+qbh-qm ! Half the total excess q at interval ends
    745 qdh=qbh-qah    ! Half the difference of q at interval ends
    746 shh=sinh(xh);   chh=cosh(xh)
    747 sh =sinh(xr);    ch=cosh(xr)
    748 shm=sinhm(xr);  chm=coshm(xr)
    749 shhm=sinhm(xh); chhm=coshm(xh)
    750 xcmsh=xcms(xh)
    751 qdh=qdh/shh; qxh=qxh/xcmsh ! <- rescale qdh, qxh
    752 y=pm+xr*qm +qdh*(chm-chhm) +  qxh*(xh*shm-xr*shhm)
    753 end subroutine eval_tspline

Page 30          Source Listing                  EVAL_TSPLINE
2017-04-18 11:09 Entry Points                    pspl.f90



ENTRY POINTS

  Name                             
                                   
 pspl_mp_eval_tspline_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CH                         Local  730      R(8)            8           scalar                    747                               
 CHH                        Local  730      R(8)            8           scalar                    746                               
 CHHM                       Local  730      R(8)            8           scalar                    749,752                           
 CHM                        Local  730      R(8)            8           scalar                    748,752                           
 COSH                       Func   746                                  scalar                    746,747                           
 EVAL_TSPLINE               Subr   714                                                                                              
 EXPM                       Func   732      R(8)            8           scalar                    27,732,733,770,773,812,816,857,861
 IA                         Local  729      I(4)            4           scalar                    738,739,740,741,742,743           
 IB                         Local  729      I(4)            4           scalar                    734,735,736,738,739,741,742,743   
 N                          Dummy  714      I(4)            4           scalar   ARG,IN           725,733,734                       
 P                          Dummy  714      R(8)            8     1     0        ARG,IN           732,733,741,742                   
 PM                         Local  730      R(8)            8           scalar                    741,752                           
 Q                          Dummy  714      R(8)            8     1     0        ARG,IN           732,733,743                       
 QAH                        Local  730      R(8)            8           scalar                    743,744,745                       
 QBH                        Local  730      R(8)            8           scalar                    743,744,745                       
 QDH                        Local  730      R(8)            8           scalar                    745,751,752                       
 QM                         Local  730      R(8)            8           scalar                    742,744,752                       
 QXH                        Local  730      R(8)            8           scalar                    744,751,752                       
 SH                         Local  730      R(8)            8           scalar                    747                               
 SHH                        Local  730      R(8)            8           scalar                    746,751                           
 SHHM                       Local  730      R(8)            8           scalar                    749,752                           
 SHM                        Local  730      R(8)            8           scalar                    748,752                           
 SINH                       Func   746                                  scalar                    746,747                           
 X                          Dummy  714      R(8)            8           scalar   ARG,IN           732,733,736,740                   
 XCMSH                      Local  730      R(8)            8           scalar                    750,751                           
 XH                         Local  730      R(8)            8           scalar                    739,740,742,746,749,750,752       
 XR                         Local  730      R(8)            8           scalar                    732,733,740,747,748,752           
 XS                         Dummy  714      R(8)            8     1     0        ARG,IN           732,733,735,736,739,740           
 Y                          Dummy  714      R(8)            8           scalar   ARG,OUT          732,733,752                       

Page 31          Source Listing                  EVAL_TSPLINE
2017-04-18 11:09                                 pspl.f90

    754    
    755 !=============================================================================
    756 subroutine eval_tsplined(n,xs,p,q, x,y,dydx)!                   [eval_tspline]
    757 !=============================================================================
    758 ! Like eval_tspline, but also return the derivative dy/dx
    759 !=============================================================================
    760 integer,              intent(in ):: n
    761 real(dp),dimension(n),intent(in ):: xs,p,q
    762 real(dp),             intent(in ):: x
    763 real(dp),             intent(out):: y,dydx
    764 !----------------------------------------------------------------------------
    765 integer :: ia,ib
    766 real(dp):: xr,xh,pm,qm,qah,qbh,qxh,qdh,shh,chh,sh,ch,xcmsh,shm,chm,shhm,chhm,&
    767            qemxr
    768 !============================================================================
    769 if(x<=xs(1))then
    770    xr=x-xs(1); qemxr=q(1)*expm( xr); y=p(1)+qemxr; dydx=qemxr+q(1); return
    771 endif
    772 if(x>=xs(n))then
    773    xr=x-xs(n); qemxr=q(n)*expm(-xr); y=p(n)-qemxr; dydx=qemxr+q(n); return
    774 endif
    775 do ib=2,n
    776    if(xs(ib)<=xs(ib-1))cycle ! <- only consider intervals of positive width
    777    if(xs(ib)>=x)exit    ! <- exit once finite interval straddling x is found
    778 enddo
    779 ia=ib-1
    780 xh=(xs(ib)-xs(ia))*o2 ! <- halfwidth of interval
    781 xr=x-xs(ia)-xh          ! <- x relative to interval midpoint
    782 pm=(p(ia)+p(ib))*o2   ! average of end values
    783 qm=(p(ib)-p(ia))/(xh*2) ! average gradient
    784 qah=q(ia)*o2;  qbh=q(ib)*o2
    785 qxh=qah+qbh-qm ! Half the total excess q at interval ends
    786 qdh=qbh-qah    ! Half the difference of q at interval ends
    787 shh=sinh(xh);   chh=cosh(xh)
    788 sh =sinh(xr);   ch=cosh(xr)
    789 shm=sinhm(xr);  chm=coshm(xr)
    790 shhm=sinhm(xh); chhm=coshm(xh)
    791 xcmsh=xcms(xh)
    792 qdh=qdh/shh; qxh=qxh/xcmsh ! <- rescale qdh, qxh
    793 y=pm+xr*qm +qdh*(chm-chhm)  +  qxh*(xh*shm-xr*shhm)
    794 dydx=qm+qdh*sh +qxh*(xh*chm-shhm)
    795 end subroutine eval_tsplined

Page 32          Source Listing                  EVAL_TSPLINED
2017-04-18 11:09 Entry Points                    pspl.f90



ENTRY POINTS

  Name                              
                                    
 pspl_mp_eval_tsplined_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CH                         Local  766      R(8)            8           scalar                    788                               
 CHH                        Local  766      R(8)            8           scalar                    787                               
 CHHM                       Local  766      R(8)            8           scalar                    790,793                           
 CHM                        Local  766      R(8)            8           scalar                    789,793,794                       
 COSH                       Func   787                                  scalar                    787,788                           
 DYDX                       Dummy  756      R(8)            8           scalar   ARG,OUT          770,773,794                       
 EVAL_TSPLINED              Subr   756                                           PRIV             239,356                           
 IA                         Local  765      I(4)            4           scalar                    779,780,781,782,783,784           
 IB                         Local  765      I(4)            4           scalar                    775,776,777,779,780,782,783,784   
 N                          Dummy  756      I(4)            4           scalar   ARG,IN           761,772,773,775                   
 P                          Dummy  756      R(8)            8     1     0        ARG,IN           770,773,782,783                   
 PM                         Local  766      R(8)            8           scalar                    782,793                           
 Q                          Dummy  756      R(8)            8     1     0        ARG,IN           770,773,784                       
 QAH                        Local  766      R(8)            8           scalar                    784,785,786                       
 QBH                        Local  766      R(8)            8           scalar                    784,785,786                       
 QDH                        Local  766      R(8)            8           scalar                    786,792,793,794                   
 QEMXR                      Local  767      R(8)            8           scalar                    770,773                           
 QM                         Local  766      R(8)            8           scalar                    783,785,793,794                   
 QXH                        Local  766      R(8)            8           scalar                    785,792,793,794                   
 SH                         Local  766      R(8)            8           scalar                    788,794                           
 SHH                        Local  766      R(8)            8           scalar                    787,792                           
 SHHM                       Local  766      R(8)            8           scalar                    790,793,794                       
 SHM                        Local  766      R(8)            8           scalar                    789,793                           
 SINH                       Func   787                                  scalar                    787,788                           
 X                          Dummy  756      R(8)            8           scalar   ARG,IN           769,770,772,773,777,781           
 XCMSH                      Local  766      R(8)            8           scalar                    791,792                           
 XH                         Local  766      R(8)            8           scalar                    780,781,783,787,790,791,793,794   
 XR                         Local  766      R(8)            8           scalar                    770,773,781,788,789,793           
 XS                         Dummy  756      R(8)            8     1     0        ARG,IN           769,770,772,773,776,777,780,781   
 Y                          Dummy  756      R(8)            8           scalar   ARG,OUT          770,773,793                       

Page 33          Source Listing                  EVAL_TSPLINED
2017-04-18 11:09                                 pspl.f90

    796 
    797 !=============================================================================
    798 subroutine eval_tsplinedd(n,xs,p,q, x,y,dydx,ddydxx)!           [eval_tspline]
    799 !=============================================================================
    800 ! Like eval_tspline, but also return the derivative dy/dx
    801 !=============================================================================
    802 integer,              intent(in ):: n
    803 real(dp),dimension(n),intent(in ):: xs,p,q
    804 real(dp),             intent(in ):: x
    805 real(dp),             intent(out):: y,dydx,ddydxx
    806 !----------------------------------------------------------------------------
    807 integer :: ia,ib
    808 real(dp):: xr,xh,pm,qm,qah,qbh,qxh,qdh,shh,chh,sh,ch,xcmsh,shm,chm,shhm,chhm,&
    809            qemxr
    810 !============================================================================
    811 if(x<=xs(1))then
    812    xr=x-xs(1); qemxr=q(1)*expm( xr); y=p(1)+qemxr; dydx=qemxr+q(1)
    813    ddydxx=dydx; return
    814 endif
    815 if(x>=xs(n))then
    816    xr=x-xs(n); qemxr=q(n)*expm(-xr); y=p(n)-qemxr; dydx=qemxr+q(n)
    817    ddydxx=-dydx; return
    818 endif
    819 do ib=2,n
    820    if(xs(ib)<=xs(ib-1))cycle ! <- only consider intervals of positive width
    821    if(xs(ib)>=x)exit    ! <- exit once finite interval straddling x is found
    822 enddo
    823 ia=ib-1
    824 xh=(xs(ib)-xs(ia))*o2 ! <- halfwidth of interval
    825 xr=x-xs(ia)-xh          ! <- x relative to interval midpoint
    826 pm=(p(ia)+p(ib))*o2   ! average of end values
    827 qm=(p(ib)-p(ia))/(xh*2) ! average gradient
    828 qah=q(ia)*o2;  qbh=q(ib)*o2
    829 qxh=qah+qbh-qm ! Half the total excess q at interval ends
    830 qdh=qbh-qah    ! Half the difference of q at interval ends
    831 shh=sinh(xh);   chh=cosh(xh)
    832 sh =sinh(xr);   ch=cosh(xr)
    833 shm=sinhm(xr);  chm=coshm(xr)
    834 shhm=sinhm(xh); chhm=coshm(xh)
    835 xcmsh=xcms(xh)
    836 qdh=qdh/shh; qxh=qxh/xcmsh ! <- rescale qdh, qxh
    837 y=pm+xr*qm +qdh*(chm-chhm)  +  qxh*(xh*shm-xr*shhm)
    838 dydx=qm+qdh*sh +qxh*(xh*chm-shhm)
    839 ddydxx=qdh*ch +qxh*xh*sh
    840 end subroutine eval_tsplinedd

Page 34          Source Listing                  EVAL_TSPLINEDD
2017-04-18 11:09 Entry Points                    pspl.f90



ENTRY POINTS

  Name                               
                                     
 pspl_mp_eval_tsplinedd_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CH                         Local  808      R(8)            8           scalar                    832,839                           
 CHH                        Local  808      R(8)            8           scalar                    831                               
 CHHM                       Local  808      R(8)            8           scalar                    834,837                           
 CHM                        Local  808      R(8)            8           scalar                    833,837,838                       
 COSH                       Func   831                                  scalar                    831,832                           
 DDYDXX                     Dummy  798      R(8)            8           scalar   ARG,OUT          813,817,839                       
 DYDX                       Dummy  798      R(8)            8           scalar   ARG,OUT          812,813,816,817,838               
 EVAL_TSPLINEDD             Subr   798                                           PRIV                                               
 IA                         Local  807      I(4)            4           scalar                    823,824,825,826,827,828           
 IB                         Local  807      I(4)            4           scalar                    819,820,821,823,824,826,827,828   
 N                          Dummy  798      I(4)            4           scalar   ARG,IN           803,815,816,819                   
 P                          Dummy  798      R(8)            8     1     0        ARG,IN           812,816,826,827                   
 PM                         Local  808      R(8)            8           scalar                    826,837                           
 Q                          Dummy  798      R(8)            8     1     0        ARG,IN           812,816,828                       
 QAH                        Local  808      R(8)            8           scalar                    828,829,830                       
 QBH                        Local  808      R(8)            8           scalar                    828,829,830                       
 QDH                        Local  808      R(8)            8           scalar                    830,836,837,838,839               
 QEMXR                      Local  809      R(8)            8           scalar                    812,816                           
 QM                         Local  808      R(8)            8           scalar                    827,829,837,838                   
 QXH                        Local  808      R(8)            8           scalar                    829,836,837,838,839               
 SH                         Local  808      R(8)            8           scalar                    832,838,839                       
 SHH                        Local  808      R(8)            8           scalar                    831,836                           
 SHHM                       Local  808      R(8)            8           scalar                    834,837,838                       
 SHM                        Local  808      R(8)            8           scalar                    833,837                           
 SINH                       Func   831                                  scalar                    831,832                           
 X                          Dummy  798      R(8)            8           scalar   ARG,IN           811,812,815,816,821,825           
 XCMSH                      Local  808      R(8)            8           scalar                    835,836                           
 XH                         Local  808      R(8)            8           scalar                    824,825,827,831,834,835,837,838,83
                                                                                                  9                                 
 XR                         Local  808      R(8)            8           scalar                    812,816,825,832,833,837           
 XS                         Dummy  798      R(8)            8     1     0        ARG,IN           811,812,815,816,820,821,824,825   
 Y                          Dummy  798      R(8)            8           scalar   ARG,OUT          812,816,837                       

Page 35          Source Listing                  EVAL_TSPLINEDD
2017-04-18 11:09                                 pspl.f90

    841 
    842 !=============================================================================
    843 subroutine eval_tsplineddd(n,xs,p,q, x,y,dydx,ddydxx,dddydxxx)! [eval_tspline]
    844 !=============================================================================
    845 ! Like eval_tspline, but also return the derivative dy/dx
    846 !=============================================================================
    847 integer,              intent(in ):: n
    848 real(dp),dimension(n),intent(in ):: xs,p,q
    849 real(dp),             intent(in ):: x
    850 real(dp),             intent(out):: y,dydx,ddydxx,dddydxxx
    851 !----------------------------------------------------------------------------
    852 integer :: ia,ib
    853 real(dp):: xr,xh,pm,qm,qah,qbh,qxh,qdh,shh,chh,sh,ch,xcmsh,shm,chm,shhm,chhm,&
    854            qemxr
    855 !============================================================================
    856 if(x<=xs(1))then
    857    xr=x-xs(1); qemxr=q(1)*expm( xr); y=p(1)+qemxr; dydx=qemxr+q(1)
    858    ddydxx=dydx; dddydxxx=dydx; return
    859 endif
    860 if(x>=xs(n))then
    861    xr=x-xs(n); qemxr=q(n)*expm(-xr); y=p(n)-qemxr; dydx=qemxr+q(n)
    862    ddydxx=-dydx; dddydxxx=dydx; return
    863 endif
    864 do ib=2,n
    865    if(xs(ib)<=xs(ib-1))cycle ! <- only consider intervals of positive width
    866    if(xs(ib)>=x)exit    ! <- exit once finite interval straddling x is found
    867 enddo
    868 ia=ib-1
    869 xh=(xs(ib)-xs(ia))*o2 ! <- halfwidth of interval
    870 xr=x-xs(ia)-xh          ! <- x relative to interval midpoint
    871 pm=(p(ia)+p(ib))*o2   ! average of end values
    872 qm=(p(ib)-p(ia))/(xh*2) ! average gradient
    873 qah=q(ia)*o2;  qbh=q(ib)*o2
    874 qxh=qah+qbh-qm ! Half the total excess q at interval ends
    875 qdh=qbh-qah    ! Half the difference of q at interval ends
    876 shh=sinh(xh);   chh=cosh(xh)
    877 sh =sinh(xr);   ch=cosh(xr)
    878 shm=sinhm(xr);  chm=coshm(xr)
    879 shhm=sinhm(xh); chhm=coshm(xh)
    880 xcmsh=xcms(xh)
    881 qdh=qdh/shh; qxh=qxh/xcmsh ! <- rescale qdh, qxh
    882 y       =pm+xr*qm +qdh*(chm-chhm)  +  qxh*(xh*shm-xr*shhm)
    883 dydx    =      qm +qdh*sh          +  qxh*(xh*chm-   shhm)
    884 ddydxx  =          qdh*ch          +  qxh* xh*sh
    885 dddydxxx=          qdh*sh          +  qxh* xh*ch
    886 end subroutine eval_tsplineddd

Page 36          Source Listing                  EVAL_TSPLINEDDD
2017-04-18 11:09 Entry Points                    pspl.f90



ENTRY POINTS

  Name                                
                                      
 pspl_mp_eval_tsplineddd_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CH                         Local  853      R(8)            8           scalar                    877,884,885                       
 CHH                        Local  853      R(8)            8           scalar                    876                               
 CHHM                       Local  853      R(8)            8           scalar                    879,882                           
 CHM                        Local  853      R(8)            8           scalar                    878,882,883                       
 COSH                       Func   876                                  scalar                    876,877                           
 DDDYDXXX                   Dummy  843      R(8)            8           scalar   ARG,OUT          858,862,885                       
 DDYDXX                     Dummy  843      R(8)            8           scalar   ARG,OUT          858,862,884                       
 DYDX                       Dummy  843      R(8)            8           scalar   ARG,OUT          857,858,861,862,883               
 EVAL_TSPLINEDDD            Subr   843                                           PRIV                                               
 IA                         Local  852      I(4)            4           scalar                    868,869,870,871,872,873           
 IB                         Local  852      I(4)            4           scalar                    864,865,866,868,869,871,872,873   
 N                          Dummy  843      I(4)            4           scalar   ARG,IN           848,860,861,864                   
 P                          Dummy  843      R(8)            8     1     0        ARG,IN           857,861,871,872                   
 PM                         Local  853      R(8)            8           scalar                    871,882                           
 Q                          Dummy  843      R(8)            8     1     0        ARG,IN           857,861,873                       
 QAH                        Local  853      R(8)            8           scalar                    873,874,875                       
 QBH                        Local  853      R(8)            8           scalar                    873,874,875                       
 QDH                        Local  853      R(8)            8           scalar                    875,881,882,883,884,885           
 QEMXR                      Local  854      R(8)            8           scalar                    857,861                           
 QM                         Local  853      R(8)            8           scalar                    872,874,882,883                   
 QXH                        Local  853      R(8)            8           scalar                    874,881,882,883,884,885           
 SH                         Local  853      R(8)            8           scalar                    877,883,884,885                   
 SHH                        Local  853      R(8)            8           scalar                    876,881                           
 SHHM                       Local  853      R(8)            8           scalar                    879,882,883                       
 SHM                        Local  853      R(8)            8           scalar                    878,882                           
 SINH                       Func   876                                  scalar                    876,877                           
 X                          Dummy  843      R(8)            8           scalar   ARG,IN           856,857,860,861,866,870           
 XCMSH                      Local  853      R(8)            8           scalar                    880,881                           
 XH                         Local  853      R(8)            8           scalar                    869,870,872,876,879,880,882,883,88
                                                                                                  4,885                             
 XR                         Local  853      R(8)            8           scalar                    857,861,870,877,878,882           
 XS                         Dummy  843      R(8)            8     1     0        ARG,IN           856,857,860,861,865,866,869,870   
 Y                          Dummy  843      R(8)            8           scalar   ARG,OUT          857,861,882                       

Page 37          Source Listing                  EVAL_TSPLINEDDD
2017-04-18 11:09                                 pspl.f90

    887 
    888 !=============================================================================
    889 subroutine eval_itspline(n,xs, p,q,m,  x,y)!                   [eval_itspline]
    890 !=============================================================================
    891 ! Evaluate the integrated tension spline at x, returning the value, y.
    892 !=============================================================================
    893 integer,              intent(in ):: n
    894 real(dp),dimension(n),intent(in ):: xs,p,q,m
    895 real(dp),             intent(in ):: x
    896 real(dp),             intent(out):: y
    897 !-----------------------------------------------------------------------------
    898 real(dp):: a,b,c,d,t2,xh,shx,chmx,shmx,chmmx,xcmsx,xr,pa,pd,qa,qd
    899 integer :: ia,ib
    900 !=============================================================================
    901 if(x<=xs(1))then; xr=x-xs(1); y=     p(1)*xr+q(1)*expmm( xr); return; endif
    902 if(x>=xs(n))then; xr=x-xs(n); y=m(n)+p(n)*xr+q(n)*expmm(-xr); return; endif
    903 do ib=2,n
    904    if(xs(ib)<=xs(ib-1))cycle ! <- only consider intervals of positive width
    905    if(xs(ib)>=x)exit ! <- exit once finite interval straddling x is found
    906 enddo
    907 ia=ib-1
    908 xh=(xs(ib)-xs(ia))*o2   ! <- halfwidth of interval
    909 shx =sinh (xh)
    910 chmx=coshm(xh)
    911 xcmsx=xcms(xh)
    912 xr=x-xs(ia)-xh          ! <- x relative to interval midpoint
    913 pa=(p(ib)+p(ia))*o2
    914 pd=(p(ib)-p(ia))*o2/xh
    915 qa=(q(ib)+q(ia))*o2
    916 qd=(q(ib)-q(ia))*o2/shx
    917 ! a,b,c,d are analogous to the Taylor coefficients about the interval midpoint
    918 c=qd
    919 a=pa-c*chmx
    920 d=(qa-pd)*xh/xcmsx
    921 b=qa-d*chmx
    922 
    923 t2=xr**2/2
    924 shmx =sinhm (xr)
    925 chmmx=coshmm(xr)
    926 y=m(ia)+a*xr+b*t2+c*shmx+d*chmmx
    927 end subroutine eval_itspline

Page 38          Source Listing                  EVAL_ITSPLINE
2017-04-18 11:09 Entry Points                    pspl.f90



ENTRY POINTS

  Name                              
                                    
 pspl_mp_eval_itspline_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Local  898      R(8)            8           scalar                    919,926                           
 B                          Local  898      R(8)            8           scalar                    921,926                           
 C                          Local  898      R(8)            8           scalar                    918,919,926                       
 CHMMX                      Local  898      R(8)            8           scalar                    925,926                           
 CHMX                       Local  898      R(8)            8           scalar                    910,919,921                       
 D                          Local  898      R(8)            8           scalar                    920,921,926                       
 EVAL_ITSPLINE              Subr   889                                                                                              
 IA                         Local  899      I(4)            4           scalar                    907,908,912,913,914,915,916,926   
 IB                         Local  899      I(4)            4           scalar                    903,904,905,907,908,913,914,915,91
                                                                                                  6                                 
 M                          Dummy  889      R(8)            8     1     0        ARG,IN           902,926                           
 N                          Dummy  889      I(4)            4           scalar   ARG,IN           894,902,903                       
 P                          Dummy  889      R(8)            8     1     0        ARG,IN           901,902,913,914                   
 PA                         Local  898      R(8)            8           scalar                    913,919                           
 PD                         Local  898      R(8)            8           scalar                    914,920                           
 Q                          Dummy  889      R(8)            8     1     0        ARG,IN           901,902,915,916                   
 QA                         Local  898      R(8)            8           scalar                    915,920,921                       
 QD                         Local  898      R(8)            8           scalar                    916,918                           
 SHMX                       Local  898      R(8)            8           scalar                    924,926                           
 SHX                        Local  898      R(8)            8           scalar                    909,916                           
 SINH                       Func   909                                  scalar                    909                               
 T2                         Local  898      R(8)            8           scalar                    923,926                           
 X                          Dummy  889      R(8)            8           scalar   ARG,IN           901,902,905,912                   
 XCMSX                      Local  898      R(8)            8           scalar                    911,920                           
 XH                         Local  898      R(8)            8           scalar                    908,909,910,911,912,914,920       
 XR                         Local  898      R(8)            8           scalar                    901,902,912,923,924,925,926       
 XS                         Dummy  889      R(8)            8     1     0        ARG,IN           901,902,904,905,908,912           
 Y                          Dummy  889      R(8)            8           scalar   ARG,OUT          901,902,926                       

Page 39          Source Listing                  EVAL_ITSPLINE
2017-04-18 11:09                                 pspl.f90

    928 
    929 !=============================================================================
    930 subroutine eval_uspline(n,xs,p,q, x,y)!                         [eval_uspline]
    931 !=============================================================================
    932 ! Assuming the 1st derivatives, q, are correctly given at the n nodes, xs,
    933 ! of the standardized untensioned spline, where p are the nodal values, 
    934 ! evaluate the (UNtensioned) spline function y at the location x.
    935 ! First find the nonvanishing interval in which x resides, then expand
    936 ! y using basis functions implied by the interval-end values of p and q
    937 ! using the interval midpoint as local origin when x is interior, or the
    938 ! single interval endpoint when it is exterior.
    939 !=============================================================================
    940 integer,              intent(in ):: n
    941 real(dp),dimension(n),intent(in ):: xs,p,q
    942 real(dp),             intent(in ):: x
    943 real(dp),             intent(out):: y
    944 !----------------------------------------------------------------------------
    945 integer :: ia,ib
    946 real(dp):: xr,xh,pm,qm,qah,qbh,qxh,qdh,shh,chh,sh,ch,xcmsh,shm,chm,shhm,chhm
    947 !============================================================================
    948 if(x<=xs(1))then; xr=x-xs(1); y=p(1)+q(1)*xr; return; endif
    949 if(x>=xs(n))then; xr=x-xs(n); y=p(n)+q(n)*xr; return; endif
    950 do ib=2,n
    951    if(xs(ib)<=xs(ib-1))cycle ! <- only consider intervals of positive width
    952    if(xs(ib)>=x)exit ! <- exit once finite interval straddling x is found
    953 enddo
    954 ia=ib-1
    955 xh=(xs(ib)-xs(ia))*o2   ! <- halfwidth of interval
    956 xr=x-xs(ia)-xh          ! <- x relative to interval midpoint
    957 pm=(p(ia)+p(ib))*o2     ! average of end values
    958 qm=(p(ib)-p(ia))/(xh*2) ! average gradient
    959 qah=q(ia)*o2;  qbh=q(ib)*o2
    960 qxh=qah+qbh-qm ! Half the total excess q at interval ends
    961 qdh=qbh-qah    ! Half the difference of q at interval ends
    962 shh=xh;        chh=u1
    963 sh =xr;        ch =u1
    964 shm =xr**3/6;  chm =xr**2*o2
    965 shhm=xh**3/6;  chhm=xh**2*o2
    966 xcmsh=xh**3/3
    967 qdh=qdh/shh; qxh=qxh/xcmsh ! <- rescale qdh, qxh
    968 y=pm+xr*qm +qdh*(chm-chhm) +  qxh*(xh*shm-xr*shhm)
    969 
    970 end subroutine eval_uspline

Page 40          Source Listing                  EVAL_USPLINE
2017-04-18 11:09 Entry Points                    pspl.f90



ENTRY POINTS

  Name                             
                                   
 pspl_mp_eval_uspline_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CH                         Local  946      R(8)            8           scalar                    963                               
 CHH                        Local  946      R(8)            8           scalar                    962                               
 CHHM                       Local  946      R(8)            8           scalar                    965,968                           
 CHM                        Local  946      R(8)            8           scalar                    964,968                           
 EVAL_USPLINE               Subr   930                                                                                              
 IA                         Local  945      I(4)            4           scalar                    954,955,956,957,958,959           
 IB                         Local  945      I(4)            4           scalar                    950,951,952,954,955,957,958,959   
 N                          Dummy  930      I(4)            4           scalar   ARG,IN           941,949,950                       
 P                          Dummy  930      R(8)            8     1     0        ARG,IN           948,949,957,958                   
 PM                         Local  946      R(8)            8           scalar                    957,968                           
 Q                          Dummy  930      R(8)            8     1     0        ARG,IN           948,949,959                       
 QAH                        Local  946      R(8)            8           scalar                    959,960,961                       
 QBH                        Local  946      R(8)            8           scalar                    959,960,961                       
 QDH                        Local  946      R(8)            8           scalar                    961,967,968                       
 QM                         Local  946      R(8)            8           scalar                    958,960,968                       
 QXH                        Local  946      R(8)            8           scalar                    960,967,968                       
 SH                         Local  946      R(8)            8           scalar                    963                               
 SHH                        Local  946      R(8)            8           scalar                    962,967                           
 SHHM                       Local  946      R(8)            8           scalar                    965,968                           
 SHM                        Local  946      R(8)            8           scalar                    964,968                           
 X                          Dummy  930      R(8)            8           scalar   ARG,IN           948,949,952,956                   
 XCMSH                      Local  946      R(8)            8           scalar                    966,967                           
 XH                         Local  946      R(8)            8           scalar                    955,956,958,962,965,966,968       
 XR                         Local  946      R(8)            8           scalar                    948,949,956,963,964,968           
 XS                         Dummy  930      R(8)            8     1     0        ARG,IN           948,949,951,952,955,956           
 Y                          Dummy  930      R(8)            8           scalar   ARG,OUT          948,949,968                       

Page 41          Source Listing                  EVAL_USPLINE
2017-04-18 11:09                                 pspl.f90

    971    
    972 !=============================================================================
    973 subroutine eval_usplined(n,xs,p,q, x,y,dydx)!                   [eval_uspline]
    974 !=============================================================================
    975 ! Like eval_uspline, but also return the derivative dy/dx
    976 !=============================================================================
    977 integer,              intent(in ):: n
    978 real(dp),dimension(n),intent(in ):: xs,p,q
    979 real(dp),             intent(in ):: x
    980 real(dp),             intent(out):: y,dydx
    981 !----------------------------------------------------------------------------
    982 integer :: ia,ib
    983 real(dp):: xr,xh,pm,qm,qah,qbh,qxh,qdh,shh,chh,sh,ch,xcmsh,shm,chm,shhm,chhm
    984 !============================================================================
    985 if(x<=xs(1))then; xr=x-xs(1); y=p(1)+q(1)*xr; dydx=q(1); return; endif
    986 if(x>=xs(n))then; xr=x-xs(n); y=p(n)+q(n)*xr; dydx=q(n); return; endif
    987 do ib=2,n
    988    if(xs(ib)<=xs(ib-1))cycle ! <- only consider intervals of positive width
    989    if(xs(ib)>=x)exit ! <- exit once finite interval straddling x is found
    990 enddo
    991 ia=ib-1
    992 xh=(xs(ib)-xs(ia))*o2    ! <- halfwidth of interval
    993 xr=x-xs(ia)-xh           ! <- x relative to interval midpoint
    994 pm=(p(ia)+p(ib))*o2      ! average of end values
    995 qm=(p(ib)-p(ia))/(xh*2) ! average gradient
    996 qah=q(ia)*o2;  qbh=q(ib)*o2
    997 qxh=qah+qbh-qm ! Half the total excess q at interval ends
    998 qdh=qbh-qah    ! Half the difference of q at interval ends
    999 shh=xh;        chh=u1
   1000 sh =xr;        ch =u1
   1001 shm =xr**3/6;  chm =xr**2*o2
   1002 shhm=xh**3/6;  chhm=xh**2*o2
   1003 xcmsh=xh**3/3
   1004 qdh=qdh/shh; qxh=qxh/xcmsh ! <- rescale qdh, qxh
   1005 y=pm+xr*qm +qdh*(chm-chhm)  +  qxh*(xh*shm-xr*shhm)
   1006 dydx=qm+qdh*sh +qxh*(xh*chm-shhm)
   1007 end subroutine eval_usplined

Page 42          Source Listing                  EVAL_USPLINED
2017-04-18 11:09 Entry Points                    pspl.f90



ENTRY POINTS

  Name                              
                                    
 pspl_mp_eval_usplined_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CH                         Local  983      R(8)            8           scalar                    1000                              
 CHH                        Local  983      R(8)            8           scalar                    999                               
 CHHM                       Local  983      R(8)            8           scalar                    1002,1005                         
 CHM                        Local  983      R(8)            8           scalar                    1001,1005,1006                    
 DYDX                       Dummy  973      R(8)            8           scalar   ARG,OUT          985,986,1006                      
 EVAL_USPLINED              Subr   973                                           PRIV             293,576                           
 IA                         Local  982      I(4)            4           scalar                    991,992,993,994,995,996           
 IB                         Local  982      I(4)            4           scalar                    987,988,989,991,992,994,995,996   
 N                          Dummy  973      I(4)            4           scalar   ARG,IN           978,986,987                       
 P                          Dummy  973      R(8)            8     1     0        ARG,IN           985,986,994,995                   
 PM                         Local  983      R(8)            8           scalar                    994,1005                          
 Q                          Dummy  973      R(8)            8     1     0        ARG,IN           985,986,996                       
 QAH                        Local  983      R(8)            8           scalar                    996,997,998                       
 QBH                        Local  983      R(8)            8           scalar                    996,997,998                       
 QDH                        Local  983      R(8)            8           scalar                    998,1004,1005,1006                
 QM                         Local  983      R(8)            8           scalar                    995,997,1005,1006                 
 QXH                        Local  983      R(8)            8           scalar                    997,1004,1005,1006                
 SH                         Local  983      R(8)            8           scalar                    1000,1006                         
 SHH                        Local  983      R(8)            8           scalar                    999,1004                          
 SHHM                       Local  983      R(8)            8           scalar                    1002,1005,1006                    
 SHM                        Local  983      R(8)            8           scalar                    1001,1005                         
 X                          Dummy  973      R(8)            8           scalar   ARG,IN           985,986,989,993                   
 XCMSH                      Local  983      R(8)            8           scalar                    1003,1004                         
 XH                         Local  983      R(8)            8           scalar                    992,993,995,999,1002,1003,1005,100
                                                                                                  6                                 
 XR                         Local  983      R(8)            8           scalar                    985,986,993,1000,1001,1005        
 XS                         Dummy  973      R(8)            8     1     0        ARG,IN           985,986,988,989,992,993           
 Y                          Dummy  973      R(8)            8           scalar   ARG,OUT          985,986,1005                      

Page 43          Source Listing                  EVAL_USPLINED
2017-04-18 11:09                                 pspl.f90

   1008 
   1009 !=============================================================================
   1010 subroutine eval_usplinedd(n,xs,p,q, x,y,dydx,ddydxx)!           [eval_uspline]
   1011 !=============================================================================
   1012 ! Like eval_uspline, but also return the derivative dy/dx
   1013 !=============================================================================
   1014 integer,              intent(in ):: n
   1015 real(dp),dimension(n),intent(in ):: xs,p,q
   1016 real(dp),             intent(in ):: x
   1017 real(dp),             intent(out):: y,dydx,ddydxx
   1018 !----------------------------------------------------------------------------
   1019 integer :: ia,ib
   1020 real(dp):: xr,xh,pm,qm,qah,qbh,qxh,qdh,shh,chh,sh,ch,xcmsh,shm,chm,shhm,chhm
   1021 !============================================================================
   1022 if(x<=xs(1))then; xr=x-xs(1); y=p(1)+q(1)*xr; dydx=q(1); return; endif
   1023 if(x>=xs(n))then; xr=x-xs(n); y=p(n)+q(n)*xr; dydx=q(n); return; endif
   1024 do ib=2,n
   1025    if(xs(ib)<=xs(ib-1))cycle ! <- only consider intervals of positive width
   1026    if(xs(ib)>=x)exit ! <- exit once finite interval straddling x is found
   1027 enddo
   1028 ia=ib-1
   1029 xh=(xs(ib)-xs(ia))*o2    ! <- halfwidth of interval
   1030 xr=x-xs(ia)-xh           ! <- x relative to interval midpoint
   1031 pm=(p(ia)+p(ib))*o2      ! average of end values
   1032 qm=(p(ib)-p(ia))/(xh*2)  ! average gradient
   1033 qah=q(ia)*o2;  qbh=q(ib)*o2
   1034 qxh=qah+qbh-qm ! Half the total excess q at interval ends
   1035 qdh=qbh-qah    ! Half the difference of q at interval ends
   1036 shh=xh;        chh=u1
   1037 sh =xr;        ch =u1
   1038 shm =xr**3/6;  chm =xr**2*o2
   1039 shhm=xh**3/6;  chhm=xh**2*o2
   1040 xcmsh=xh**3/3
   1041 qdh=qdh/shh; qxh=qxh/xcmsh ! <- rescale qdh, qxh
   1042 y=pm+xr*qm +qdh*(chm-chhm)  +  qxh*(xh*shm-xr*shhm)
   1043 dydx=qm+qdh*sh +qxh*(xh*chm-shhm)
   1044 ddydxx=qdh +qxh*xh*sh
   1045 end subroutine eval_usplinedd

Page 44          Source Listing                  EVAL_USPLINEDD
2017-04-18 11:09 Entry Points                    pspl.f90



ENTRY POINTS

  Name                               
                                     
 pspl_mp_eval_usplinedd_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CH                         Local  1020     R(8)            8           scalar                    1037                              
 CHH                        Local  1020     R(8)            8           scalar                    1036                              
 CHHM                       Local  1020     R(8)            8           scalar                    1039,1042                         
 CHM                        Local  1020     R(8)            8           scalar                    1038,1042,1043                    
 DDYDXX                     Dummy  1010     R(8)            8           scalar   ARG,OUT          1044                              
 DYDX                       Dummy  1010     R(8)            8           scalar   ARG,OUT          1022,1023,1043                    
 EVAL_USPLINEDD             Subr   1010                                          PRIV                                               
 IA                         Local  1019     I(4)            4           scalar                    1028,1029,1030,1031,1032,1033     
 IB                         Local  1019     I(4)            4           scalar                    1024,1025,1026,1028,1029,1031,1032
                                                                                                  ,1033                             
 N                          Dummy  1010     I(4)            4           scalar   ARG,IN           1015,1023,1024                    
 P                          Dummy  1010     R(8)            8     1     0        ARG,IN           1022,1023,1031,1032               
 PM                         Local  1020     R(8)            8           scalar                    1031,1042                         
 Q                          Dummy  1010     R(8)            8     1     0        ARG,IN           1022,1023,1033                    
 QAH                        Local  1020     R(8)            8           scalar                    1033,1034,1035                    
 QBH                        Local  1020     R(8)            8           scalar                    1033,1034,1035                    
 QDH                        Local  1020     R(8)            8           scalar                    1035,1041,1042,1043,1044          
 QM                         Local  1020     R(8)            8           scalar                    1032,1034,1042,1043               
 QXH                        Local  1020     R(8)            8           scalar                    1034,1041,1042,1043,1044          
 SH                         Local  1020     R(8)            8           scalar                    1037,1043,1044                    
 SHH                        Local  1020     R(8)            8           scalar                    1036,1041                         
 SHHM                       Local  1020     R(8)            8           scalar                    1039,1042,1043                    
 SHM                        Local  1020     R(8)            8           scalar                    1038,1042                         
 X                          Dummy  1010     R(8)            8           scalar   ARG,IN           1022,1023,1026,1030               
 XCMSH                      Local  1020     R(8)            8           scalar                    1040,1041                         
 XH                         Local  1020     R(8)            8           scalar                    1029,1030,1032,1036,1039,1040,1042
                                                                                                  ,1043,1044                        
 XR                         Local  1020     R(8)            8           scalar                    1022,1023,1030,1037,1038,1042     
 XS                         Dummy  1010     R(8)            8     1     0        ARG,IN           1022,1023,1025,1026,1029,1030     
 Y                          Dummy  1010     R(8)            8           scalar   ARG,OUT          1022,1023,1042                    

Page 45          Source Listing                  EVAL_USPLINEDD
2017-04-18 11:09                                 pspl.f90

   1046 
   1047 !=============================================================================
   1048 subroutine eval_usplineddd(n,xs,p,q, x,y,dydx,ddydxx,dddydxxx)! [eval_uspline]
   1049 !=============================================================================
   1050 ! Like eval_uspline, but also return the derivative dy/dx
   1051 !=============================================================================
   1052 integer,              intent(in ):: n
   1053 real(dp),dimension(n),intent(in ):: xs,p,q
   1054 real(dp),             intent(in ):: x
   1055 real(dp),             intent(out):: y,dydx,ddydxx,dddydxxx
   1056 !----------------------------------------------------------------------------
   1057 integer :: ia,ib
   1058 real(dp):: xr,xh,pm,qm,qah,qbh,qxh,qdh,shh,chh,sh,ch,xcmsh,shm,chm,shhm,chhm
   1059 !============================================================================
   1060 if(x<=xs(1))then; xr=x-xs(1); y=p(1)+q(1)*xr; dydx=q(1); return; endif
   1061 if(x>=xs(n))then; xr=x-xs(n); y=p(n)+q(n)*xr; dydx=q(n); return; endif
   1062 do ib=2,n
   1063    if(xs(ib)<=xs(ib-1))cycle ! <- only consider intervals of positive width
   1064    if(xs(ib)>=x)exit ! <- exit once finite interval straddling x is found
   1065 enddo
   1066 ia=ib-1
   1067 xh=(xs(ib)-xs(ia))*o2    ! <- halfwidth of interval
   1068 xr=x-xs(ia)-xh           ! <- x relative to interval midpoint
   1069 pm=(p(ia)+p(ib))*o2      ! average of end values
   1070 qm=(p(ib)-p(ia))/(xh*2)  ! average gradient
   1071 qah=q(ia)*o2;  qbh=q(ib)*o2
   1072 qxh=qah+qbh-qm ! Half the total excess q at interval ends
   1073 qdh=qbh-qah    ! Half the difference of q at interval ends
   1074 shh=xh;        chh=u1
   1075 sh =xr;        ch =u1
   1076 shm =xr**3/6;  chm =xr**2*o2
   1077 shhm=xh**3/6;  chhm=xh**2*o2
   1078 xcmsh=xh**3/3
   1079 qdh=qdh/shh; qxh=qxh/xcmsh ! <- rescale qdh, qxh
   1080 y=pm+xr*qm +qdh*(chm-chhm)  +  qxh*(xh*shm-xr*shhm)
   1081 dydx=qm+qdh*sh +qxh*(xh*chm-shhm)
   1082 ddydxx=qdh +qxh*xh*sh
   1083 dddydxxx=qxh*xh
   1084 end subroutine eval_usplineddd

Page 46          Source Listing                  EVAL_USPLINEDDD
2017-04-18 11:09 Entry Points                    pspl.f90



ENTRY POINTS

  Name                                
                                      
 pspl_mp_eval_usplineddd_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CH                         Local  1058     R(8)            8           scalar                    1075                              
 CHH                        Local  1058     R(8)            8           scalar                    1074                              
 CHHM                       Local  1058     R(8)            8           scalar                    1077,1080                         
 CHM                        Local  1058     R(8)            8           scalar                    1076,1080,1081                    
 DDDYDXXX                   Dummy  1048     R(8)            8           scalar   ARG,OUT          1083                              
 DDYDXX                     Dummy  1048     R(8)            8           scalar   ARG,OUT          1082                              
 DYDX                       Dummy  1048     R(8)            8           scalar   ARG,OUT          1060,1061,1081                    
 EVAL_USPLINEDDD            Subr   1048                                          PRIV                                               
 IA                         Local  1057     I(4)            4           scalar                    1066,1067,1068,1069,1070,1071     
 IB                         Local  1057     I(4)            4           scalar                    1062,1063,1064,1066,1067,1069,1070
                                                                                                  ,1071                             
 N                          Dummy  1048     I(4)            4           scalar   ARG,IN           1053,1061,1062                    
 P                          Dummy  1048     R(8)            8     1     0        ARG,IN           1060,1061,1069,1070               
 PM                         Local  1058     R(8)            8           scalar                    1069,1080                         
 Q                          Dummy  1048     R(8)            8     1     0        ARG,IN           1060,1061,1071                    
 QAH                        Local  1058     R(8)            8           scalar                    1071,1072,1073                    
 QBH                        Local  1058     R(8)            8           scalar                    1071,1072,1073                    
 QDH                        Local  1058     R(8)            8           scalar                    1073,1079,1080,1081,1082          
 QM                         Local  1058     R(8)            8           scalar                    1070,1072,1080,1081               
 QXH                        Local  1058     R(8)            8           scalar                    1072,1079,1080,1081,1082,1083     
 SH                         Local  1058     R(8)            8           scalar                    1075,1081,1082                    
 SHH                        Local  1058     R(8)            8           scalar                    1074,1079                         
 SHHM                       Local  1058     R(8)            8           scalar                    1077,1080,1081                    
 SHM                        Local  1058     R(8)            8           scalar                    1076,1080                         
 X                          Dummy  1048     R(8)            8           scalar   ARG,IN           1060,1061,1064,1068               
 XCMSH                      Local  1058     R(8)            8           scalar                    1078,1079                         
 XH                         Local  1058     R(8)            8           scalar                    1067,1068,1070,1074,1077,1078,1080
                                                                                                  ,1081,1082,1083                   
 XR                         Local  1058     R(8)            8           scalar                    1060,1061,1068,1075,1076,1080     
 XS                         Dummy  1048     R(8)            8     1     0        ARG,IN           1060,1061,1063,1064,1067,1068     
 Y                          Dummy  1048     R(8)            8           scalar   ARG,OUT          1060,1061,1080                    

Page 47          Source Listing                  EVAL_USPLINEDDD
2017-04-18 11:09                                 pspl.f90

   1085 
   1086 !=============================================================================
   1087 subroutine eval_iuspline(n,xs, p,q,m,  x,y)!                   [eval_iuspline]
   1088 !=============================================================================
   1089 ! Evaluate the integrated untensioned spline at x, returning the value, y.
   1090 !=============================================================================
   1091 integer,              intent(in ):: n
   1092 real(dp),dimension(n),intent(in ):: xs,p,q,m
   1093 real(dp),             intent(in ):: x
   1094 real(dp),             intent(out):: y
   1095 !-----------------------------------------------------------------------------
   1096 real(dp),parameter:: u3o2=3*o2
   1097 real(dp):: a,b,c,d,t2,t3,t4,xh,xr,pa,pd,qa,qd
   1098 integer :: ia,ib
   1099 !=============================================================================
   1100 if(x<=xs(1))then; xr=x-xs(1); y=p(1)*xr+q(1)*xr**2/2; return; endif
   1101 if(x>=xs(n))then; xr=x-xs(n); y=m(n)+p(n)*xr+q(n)*xr**2/2; return; endif
   1102 do ib=2,n
   1103    if(xs(ib)<=xs(ib-1))cycle ! <- only consider intervals of positive width
   1104    if(xs(ib)>=x)exit ! <- exit once finite interval straddling x is found
   1105 enddo
   1106 ia=ib-1
   1107 xh=(xs(ib)-xs(ia))*o2   ! <- halfwidth of interval
   1108 xr=x-xs(ia)-xh          ! <- x relative to interval midpoint
   1109 t2=xh**2/2
   1110 t3=t2*xh/3
   1111 pa=(p(ib)+p(ia))*o2
   1112 pd=(p(ib)-p(ia))*o2/xh
   1113 qa=(q(ib)+q(ia))*o2
   1114 qd=(q(ib)-q(ia))*o2/xh
   1115 ! a,b,c,d are the Taylor coefficients of the cubic about the interval midpoint:
   1116 c=qd
   1117 a=pa-c*t2
   1118 d=(qa-pd)*u3o2/t2
   1119 b=qa-d*t2
   1120 t2=xr**2/2
   1121 t3=t2*xr/3
   1122 t4=t3*xr/4
   1123 y=m(ia)+a*xr+b*t2+c*t3+d*t4
   1124 end subroutine eval_iuspline

Page 48          Source Listing                  EVAL_IUSPLINE
2017-04-18 11:09 Entry Points                    pspl.f90



ENTRY POINTS

  Name                              
                                    
 pspl_mp_eval_iuspline_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Local  1097     R(8)            8           scalar                    1117,1123                         
 B                          Local  1097     R(8)            8           scalar                    1119,1123                         
 C                          Local  1097     R(8)            8           scalar                    1116,1117,1123                    
 D                          Local  1097     R(8)            8           scalar                    1118,1119,1123                    
 EVAL_IUSPLINE              Subr   1087                                                                                             
 IA                         Local  1098     I(4)            4           scalar                    1106,1107,1108,1111,1112,1113,1114
                                                                                                  ,1123                             
 IB                         Local  1098     I(4)            4           scalar                    1102,1103,1104,1106,1107,1111,1112
                                                                                                  ,1113,1114                        
 M                          Dummy  1087     R(8)            8     1     0        ARG,IN           1101,1123                         
 N                          Dummy  1087     I(4)            4           scalar   ARG,IN           1092,1101,1102                    
 P                          Dummy  1087     R(8)            8     1     0        ARG,IN           1100,1101,1111,1112               
 PA                         Local  1097     R(8)            8           scalar                    1111,1117                         
 PD                         Local  1097     R(8)            8           scalar                    1112,1118                         
 Q                          Dummy  1087     R(8)            8     1     0        ARG,IN           1100,1101,1113,1114               
 QA                         Local  1097     R(8)            8           scalar                    1113,1118,1119                    
 QD                         Local  1097     R(8)            8           scalar                    1114,1116                         
 T2                         Local  1097     R(8)            8           scalar                    1109,1110,1117,1118,1119,1120,1121
                                                                                                  ,1123                             
 T3                         Local  1097     R(8)            8           scalar                    1110,1121,1122,1123               
 T4                         Local  1097     R(8)            8           scalar                    1122,1123                         
 U3O2                       Param  1096     R(8)            8           scalar                    1118                              
 X                          Dummy  1087     R(8)            8           scalar   ARG,IN           1100,1101,1104,1108               
 XH                         Local  1097     R(8)            8           scalar                    1107,1108,1109,1110,1112,1114     
 XR                         Local  1097     R(8)            8           scalar                    1100,1101,1108,1120,1121,1122,1123
 XS                         Dummy  1087     R(8)            8     1     0        ARG,IN           1100,1101,1103,1104,1107,1108     
 Y                          Dummy  1087     R(8)            8           scalar   ARG,OUT          1100,1101,1123                    

Page 49          Source Listing                  EVAL_IUSPLINE
2017-04-18 11:09                                 pspl.f90

   1125 
   1126 !==============================================================================
   1127 subroutine best_tslalom(nh,mh,doru,hgts,hs,halfgate,bigT, & !     [best_slalom]
   1128    hgtp,hp,qbest,yabest,enbest,modebest,maxita,maxitb,maxit,maxrts,FF)
   1129 !==============================================================================
   1130 ! Run through the different allowed routes between the slalom gates and
   1131 ! select as the final solution the one whose spline has the smallest "energy".
   1132 !==============================================================================
   1133 integer,                 intent(in   ):: nh,mh,doru
   1134 integer, dimension(nh),  intent(in   ):: hgts
   1135 real(dp),dimension(nh),  intent(in   ):: hs
   1136 real(dp),                intent(in   ):: halfgate,bigT
   1137 integer, dimension(mh*2),intent(  out):: hgtp
   1138 real(dp),dimension(mh*2),intent(  out):: hp
   1139 real(dp),dimension(mh*2),intent(  out):: qbest
   1140 real(dp),dimension(mh*2),intent(  out):: yabest
   1141 real(dp),                intent(  out):: enbest
   1142 integer,dimension(mh),   intent(  out):: modebest
   1143 integer,                 intent(inout):: maxita,maxitb,maxit,maxrts
   1144 logical,                 intent(  out):: FF
   1145 !-----------------------------------------------------------------------------
   1146 integer, dimension(2,mh)  :: hgtn
   1147 real(dp),dimension(mh*2)  :: q,ya
   1148 real(dp),dimension(2,2,mh):: hn
   1149 real(dp)                  :: en,tspan,hspan,enbase,hgbigT
   1150 integer, dimension(mh)    :: code,mode
   1151 integer, dimension(mh*2)  :: bend
   1152 integer                   :: i,k,m,route_count,ita,ittot
   1153 logical, dimension(mh*2)  :: off
   1154 logical                   :: flag,descending
   1155 !==============================================================================
   1156 m=mh*2
   1157 call set_gates(nh,mh,doru,hgts,hs, hgtn,hn,code,FF)
   1158 ! Examine gate posts of first and last slalom gate to determine whether
   1159 ! profile is predominantly descending or ascending:
   1160 if    (hn(1,2,1)>hn(1,1,mh))then; descending=T ! definitely descending
   1161 elseif(hn(2,2,1)<hn(2,1,mh))then; descending=F ! definitely ascending
   1162 else ! Ambiguous profile -- decide by invoking the tie-breaker, doru:
   1163    descending=(doru==1)
   1164 endif
   1165 hgbigT=bigT/halfgate ! bigT in nondimensional halfgate units
   1166 tspan=(hgtn(2,mh)-hgtn(1,1))/hgbigT
   1167 if(descending)then; hspan=(hn(1,1,1)-hn(1,2,mh))! Descending case:
   1168 else              ; hspan=(hn(2,2,mh)-hn(2,1,1))! Ascending case:
   1169 endif
   1170 enbase=enbase_t(tspan,hspan) ! Baseline energy by which en is rescaled
   1171 if(FF)then
   1172    write(41,*) 'In best_tslalom; failure flag was raised in call to set_gates'
   1173    return
   1174 endif
   1175 call count_routes(mh,code,route_count,FF)
   1176 maxrts=max(maxrts,route_count)
   1177 if(FF)then
   1178    write(41,*)&
   1179         'In best_tslalom; failure flag was raised in call to count_routes'
   1180    return
   1181 endif

Page 50          Source Listing                  BEST_TSLALOM
2017-04-18 11:09                                 pspl.f90

   1182 if(route_count>4)call list_routes(mh,code) ! Only bother to list them when >4
   1183 enbest=hu
   1184 flag=T
   1185 do k=1,ihu
   1186    call next_route(mh,code,mode,flag)
   1187    if(flag)then; flag=F; exit; endif
   1188    call set_posts(mh,mode,hgtn,hn,bend,hgtp,hp,off)
   1189    call slalom_tspline(m,bend,hgtp,hp,off,hgbigT, &
   1190         q,ya,en,ita,maxitb,ittot,FF); en=en/enbase
   1191    maxita=max(maxita,ita)
   1192    maxit =max(maxit,ittot)
   1193    if(FF)then
   1194       write(41,*) &
   1195            'In best_tslalom; failure flag was raised in call to slalom_tspline'
   1196       return
   1197    endif
   1198    if(en<enbest)then
   1199       modebest=mode
   1200       enbest  =en
   1201       qbest   =q
   1202       yabest  =ya
   1203    endif
   1204 enddo
   1205 end subroutine best_tslalom


ENTRY POINTS

  Name                             
                                   
 pspl_mp_best_tslalom_             

Page 51          Source Listing                  BEST_TSLALOM
2017-04-18 11:09 Symbol Table                    pspl.f90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BEND                       Local  1151     I(4)            4     1     0                         1188,1189                         
 BEST_TSLALOM               Subr   1127                                          PRIV                                               
 BIGT                       Dummy  1127     R(8)            8           scalar   ARG,IN           1165                              
 CODE                       Local  1150     I(4)            4     1     0                         1157,1175,1182,1186               
 COUNT_ROUTES               Subr   1175                                                           31,1175,1242                      
 DESCENDING                 Local  1154     L(4)            4           scalar                    1160,1161,1163,1167               
 DORU                       Dummy  1127     I(4)            4           scalar   ARG,IN           1157,1163                         
 EN                         Local  1149     R(8)            8           scalar                    1190,1198,1200                    
 ENBASE                     Local  1149     R(8)            8           scalar                    1170,1190                         
 ENBASE_T                   Func   1170     R(8)            8           scalar                    27,1170                           
 ENBEST                     Dummy  1128     R(8)            8           scalar   ARG,OUT          1183,1198,1200                    
 FF                         Dummy  1128     L(4)            4           scalar   ARG,OUT          1157,1171,1175,1177,1190,1193     
 FLAG                       Local  1154     L(4)            4           scalar                    1184,1186,1187                    
 HALFGATE                   Dummy  1127     R(8)            8           scalar   ARG,IN           1165                              
 HGBIGT                     Local  1149     R(8)            8           scalar                    1165,1166,1189                    
 HGTN                       Local  1146     I(4)            4     2     0                         1157,1166,1188                    
 HGTP                       Dummy  1128     I(4)            4     1     0        ARG,OUT          1188,1189                         
 HGTS                       Dummy  1127     I(4)            4     1     0        ARG,IN           1157                              
 HN                         Local  1148     R(8)            8     3     0                         1157,1160,1161,1167,1168,1188     
 HP                         Dummy  1128     R(8)            8     1     0        ARG,OUT          1188,1189                         
 HS                         Dummy  1127     R(8)            8     1     0        ARG,IN           1157                              
 HSPAN                      Local  1149     R(8)            8           scalar                    1167,1168,1170                    
 HU                         Param  1183     R(8)            8           scalar   PRIV             35,1183,1250                      
 I                          Local  1152     I(4)            4           scalar                                                      
 IHU                        Param  1185     I(4)            4           scalar   PRIV             1185,1252,1531,1532,1533,1552,1559
 ITA                        Local  1152     I(4)            4           scalar                    1190,1191                         
 ITTOT                      Local  1152     I(4)            4           scalar                    1190,1192                         
 K                          Local  1152     I(4)            4           scalar                    1185                              
 LIST_ROUTES                Subr   1182                                                           31,1182,1249                      
 M                          Local  1152     I(4)            4           scalar                    1156,1189                         
 MAX                        Func   1176                                 scalar                    1176,1191,1192                    
 MAXIT                      Dummy  1128     I(4)            4           scalar   ARG,INOUT        1192                              
 MAXITA                     Dummy  1128     I(4)            4           scalar   ARG,INOUT        1191                              
 MAXITB                     Dummy  1128     I(4)            4           scalar   ARG,INOUT        1190                              
 MAXRTS                     Dummy  1128     I(4)            4           scalar   ARG,INOUT        1176                              
 MH                         Dummy  1127     I(4)            4           scalar   ARG,IN           1137,1138,1139,1140,1142,1146,1148
                                                                                                  ,1150,1151,1153,1156,1157,1160,116
                                                                                                  1,1166,1167,1168,1175,1182,1186,11
                                                                                                  88                                
 MODE                       Local  1150     I(4)            4     1     0                         1186,1188,1199                    
 MODEBEST                   Dummy  1128     I(4)            4     1     0        ARG,OUT          1199                              
 NEXT_ROUTE                 Subr   1186                                                           31,1186,1253,1531,1553            
 NH                         Dummy  1127     I(4)            4           scalar   ARG,IN           1134,1135,1157                    
 OFF                        Local  1153     L(4)            4     1     0                         1188,1189                         
 Q                          Local  1147     R(8)            8     1     0                         1190,1201                         
 QBEST                      Dummy  1128     R(8)            8     1     0        ARG,OUT          1201                              
 ROUTE_COUNT                Local  1152     I(4)            4           scalar                    1175,1176,1182                    
 SET_GATES                  Subr   1157                                                           30,1157,1237                      
 SET_POSTS                  Subr   1188                                                           30,1188,1255                      
 SLALOM_TSPLINE             Subr   1189                                                           32,1189                           
 TSPAN                      Local  1149     R(8)            8           scalar                    1166,1170                         

Page 52          Source Listing                  BEST_TSLALOM
2017-04-18 11:09 Symbol Table                    pspl.f90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 YA                         Local  1147     R(8)            8     1     0                         1190,1202                         
 YABEST                     Dummy  1128     R(8)            8     1     0        ARG,OUT          1202                              

Page 53          Source Listing                  BEST_TSLALOM
2017-04-18 11:09                                 pspl.f90

   1206 !==============================================================================
   1207 subroutine best_uslalom(nh,mh,doru,hgts,hs,halfgate,  & !         [best_slalom]
   1208      hgtp,hp,qbest,yabest,enbest,modebest,maxita,maxitb,maxit,maxrts,FF)
   1209 !==============================================================================
   1210 ! Like best_tslalom, except this treats the special limiting case where the
   1211 ! spline tension vanishes
   1212 !==============================================================================
   1213 integer,                 intent(in   ):: nh,mh,doru
   1214 integer, dimension(nh),  intent(in   ):: hgts
   1215 real(dp),dimension(nh),  intent(in   ):: hs
   1216 real(dp),                intent(in   ):: halfgate
   1217 integer, dimension(mh*2),intent(  out):: hgtp
   1218 real(dp),dimension(mh*2),intent(  out):: hp
   1219 real(dp),dimension(mh*2),intent(  out):: qbest
   1220 real(dp),dimension(mh*2),intent(  out):: yabest
   1221 real(dp),                intent(  out):: enbest
   1222 integer,dimension(mh),   intent(  out):: modebest
   1223 integer,                 intent(inout):: maxita,maxitb,maxit,maxrts
   1224 logical,                 intent(  out):: FF
   1225 !-----------------------------------------------------------------------------
   1226 integer, dimension(2,mh)  :: hgtn
   1227 real(dp),dimension(mh*2)  :: q,ya
   1228 real(dp),dimension(2,2,mh):: hn
   1229 real(dp)                  :: en
   1230 integer, dimension(mh)    :: code,mode
   1231 integer, dimension(mh*2)  :: bend
   1232 integer                   :: i,k,m,route_count,ita,ittot
   1233 logical, dimension(mh*2)  :: off
   1234 logical                   :: flag
   1235 !==============================================================================
   1236 m=mh*2
   1237 call set_gates(nh,mh,doru,hgts,hs, hgtn,hn,code,FF)
   1238 if(FF)then
   1239    write(41,*) 'In best_uslalom; failure flag was raised in call to set_gates'
   1240    return
   1241 endif
   1242 call count_routes(mh,code,route_count,FF)
   1243 maxrts=max(maxrts,route_count)
   1244 if(FF)then
   1245    write(41,*)&
   1246         'In best_uslalom; failure flag was raised in call to count_routes'
   1247    return
   1248 endif
   1249 if(route_count>4)call list_routes(mh,code)! Only bother to list them when >4
   1250 enbest=hu
   1251 flag=T
   1252 do k=1,ihu
   1253    call next_route(mh,code,mode,flag)
   1254    if(flag)then; flag=F; exit; endif
   1255    call set_posts(mh,mode,hgtn,hn,bend,hgtp,hp,off)
   1256    call slalom_uspline(m,bend,hgtp,hp,off,halfgate, q,ya,en,ita,maxitb,ittot,FF)
   1257    maxita=max(maxita,ita)
   1258    maxit =max(maxit,ittot)
   1259    if(FF)then
   1260       write(41,*) &
   1261            'In best_uslalom; failure flag was raised in call to slalom_uspline'
   1262       return

Page 54          Source Listing                  BEST_USLALOM
2017-04-18 11:09                                 pspl.f90

   1263    endif
   1264    if(en<enbest)then
   1265       modebest=mode
   1266       enbest  =en
   1267       qbest   =q
   1268       yabest  =ya
   1269    endif
   1270 enddo
   1271 end subroutine best_uslalom


ENTRY POINTS

  Name                             
                                   
 pspl_mp_best_uslalom_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BEND                       Local  1231     I(4)            4     1     0                         1255,1256                         
 BEST_USLALOM               Subr   1207                                          PRIV                                               
 CODE                       Local  1230     I(4)            4     1     0                         1237,1242,1249,1253               
 DORU                       Dummy  1207     I(4)            4           scalar   ARG,IN           1237                              
 EN                         Local  1229     R(8)            8           scalar                    1256,1264,1266                    
 ENBEST                     Dummy  1208     R(8)            8           scalar   ARG,OUT          1250,1264,1266                    
 FF                         Dummy  1208     L(4)            4           scalar   ARG,OUT          1237,1238,1242,1244,1256,1259     
 FLAG                       Local  1234     L(4)            4           scalar                    1251,1253,1254                    
 HALFGATE                   Dummy  1207     R(8)            8           scalar   ARG,IN           1256                              
 HGTN                       Local  1226     I(4)            4     2     0                         1237,1255                         
 HGTP                       Dummy  1208     I(4)            4     1     0        ARG,OUT          1255,1256                         
 HGTS                       Dummy  1207     I(4)            4     1     0        ARG,IN           1237                              
 HN                         Local  1228     R(8)            8     3     0                         1237,1255                         
 HP                         Dummy  1208     R(8)            8     1     0        ARG,OUT          1255,1256                         
 HS                         Dummy  1207     R(8)            8     1     0        ARG,IN           1237                              
 I                          Local  1232     I(4)            4           scalar                                                      
 ITA                        Local  1232     I(4)            4           scalar                    1256,1257                         
 ITTOT                      Local  1232     I(4)            4           scalar                    1256,1258                         
 K                          Local  1232     I(4)            4           scalar                    1252                              
 M                          Local  1232     I(4)            4           scalar                    1236,1256                         
 MAX                        Func   1243                                 scalar                    1243,1257,1258                    
 MAXIT                      Dummy  1208     I(4)            4           scalar   ARG,INOUT        1258                              
 MAXITA                     Dummy  1208     I(4)            4           scalar   ARG,INOUT        1257                              
 MAXITB                     Dummy  1208     I(4)            4           scalar   ARG,INOUT        1256                              
 MAXRTS                     Dummy  1208     I(4)            4           scalar   ARG,INOUT        1243                              
 MH                         Dummy  1207     I(4)            4           scalar   ARG,IN           1217,1218,1219,1220,1222,1226,1228
                                                                                                  ,1230,1231,1233,1236,1237,1242,124
                                                                                                  9,1253,1255                       
 MODE                       Local  1230     I(4)            4     1     0                         1253,1255,1265                    
 MODEBEST                   Dummy  1208     I(4)            4     1     0        ARG,OUT          1265                              
 NH                         Dummy  1207     I(4)            4           scalar   ARG,IN           1214,1215,1237                    
 OFF                        Local  1233     L(4)            4     1     0                         1255,1256                         
 Q                          Local  1227     R(8)            8     1     0                         1256,1267                         
 QBEST                      Dummy  1208     R(8)            8     1     0        ARG,OUT          1267                              
 ROUTE_COUNT                Local  1232     I(4)            4           scalar                    1242,1243,1249                    

Page 55          Source Listing                  BEST_USLALOM
2017-04-18 11:09 Symbol Table                    pspl.f90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 SLALOM_USPLINE             Subr   1256                                                           32,1256                           
 YA                         Local  1227     R(8)            8     1     0                         1256,1268                         
 YABEST                     Dummy  1208     R(8)            8     1     0        ARG,OUT          1268                              

Page 56          Source Listing                  BEST_USLALOM
2017-04-18 11:09                                 pspl.f90

   1272 
   1273 !=============================================================================
   1274 subroutine count_gates(nh,hgts,mh)!                                [count_gates]
   1275 !=============================================================================
   1276 ! Count the number of distinct "time gates" that can accommodate all the data
   1277 ! from the given profile. This gate count is mh.
   1278 !=============================================================================
   1279 integer,              intent(in ):: nh
   1280 integer,dimension(nh),intent(in ):: hgts
   1281 integer,              intent(out):: mh
   1282 !-----------------------------------------------------------------------------
   1283 integer:: hgtp
   1284 integer:: i
   1285 !=============================================================================
   1286 hgtp=hgts(1)-1 ! <- default "time at present" in units of halfgate
   1287 mh=0
   1288 do i=1,nh
   1289    if(hgts(i)<=hgtp)cycle
   1290 ! A new nominal time of observation:
   1291    mh=mh+1
   1292    hgtp=hgts(i)
   1293 enddo
   1294 end subroutine count_gates


ENTRY POINTS

  Name                            
                                  
 pspl_mp_count_gates_             

Page 57          Source Listing                  COUNT_GATES
2017-04-18 11:09 Symbol Table                    pspl.f90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 COUNT_GATES                Subr   1274                                                                                             
 HGTP                       Local  1283     I(4)            4           scalar                    1286,1289,1292                    
 HGTS                       Dummy  1274     I(4)            4     1     0        ARG,IN           1286,1289,1292                    
 I                          Local  1284     I(4)            4           scalar                    1288,1289,1292                    
 MH                         Dummy  1274     I(4)            4           scalar   ARG,OUT          1287,1291                         
 NH                         Dummy  1274     I(4)            4           scalar   ARG,IN           1280,1288                         

Page 58          Source Listing                  COUNT_GATES
2017-04-18 11:09                                 pspl.f90

   1295 
   1296 !=============================================================================
   1297 subroutine set_gates(nh,mh,doru,hgts,hs, hgtn,hn,code,FF)!         [set_gates]
   1298 !=============================================================================
   1299 ! Be sure to precede this routine by a call to "count_gates" to get a
   1300 ! consistent tally of the number of time gates, mh.
   1301 ! Set the locations of the "gateposts" and the routing codes of allowed
   1302 ! trajectories that thread through them.
   1303 ! Halfgate is half the (temporal) gate width (in seconds)
   1304 ! The "inferior" gatepost is at hgts - 1, the "superior" at hgts + 1.
   1305 ! The aggregated data lead to a tally of gates not exceeding the tally of obs.
   1306 ! the gatepost times of the aggregated data are put into array hgtn(:,:) where
   1307 ! hgtn(1,:) hold the inferior, and hgtn(2,:) the superior gatepost times, in
   1308 ! units of halfgate.
   1309 ! In general, it is not known a priori whether the trajectory will end up
   1310 ! ascending or descending though a given gate, so both alternatives are
   1311 ! accounted for, with hn(:,1,:) holding the height corresponding to tn(:,:)
   1312 ! assuming descending passage; hn(:,2:) likewise assuming ascending passage.
   1313 ! A running "attitude code" is maintained, atti between gates i-1 and i, and
   1314 ! the previous attitude code, attim between gates i-2 and i-1, where applicable.
   1315 ! This code is =2 when the later gate is wholly above the earlier, =1, when
   1316 ! later is wholly below the earlier, and remains 0 when altitudes of 
   1317 ! the consecutive gates overlap. When the consecutive attitude codes are
   1318 ! both =2, we force the mode of passage through gate i-1 to be ascending (route
   1319 ! code = 8) if its route code has not already been determined by one of the
   1320 ! overriding contact conditions imposed by temporal contact between gate i-1
   1321 ! and its predecessor. Likewise, if consecutive attitude codes are both =1,
   1322 ! we force the mode of passage through gate i-1 to be descending (route code
   1323 ! 4) unless overridden by a previous temporal contact condition.
   1324 ! Temporal contact conditions between gates i-1 and i force one of three
   1325 ! route codes at gate i: =2 when gate i is wholly above gate i-1; =3 when
   1326 ! gate i is wholly below; =5 when the gate height ranges overlap. 
   1327 !
   1328 ! The purpose of the route code is to specify the possible modes of passage
   1329 ! (descending, ascending, or either of these alternatives) through gate i
   1330 ! when the actual mode of passage through the preceeding gate is known. It is
   1331 ! based on a 2-digit trinary code. The possible modes of passage through
   1332 ! gate i are enumerated by the "option code" whose values are:
   1333 ! 0 when passage may be either descending or ascending (indeterminate);
   1334 ! 1 when passage is definitely descending;
   1335 ! 2 when passage is definitely ascending.
   1336 ! The "units" digit of the trinary expansion of the route code gives the
   1337 ! option code for gate i when passage through gate i-1 is prescribed to be
   1338 ! DESCENDING; the "threes" digit of the trinary expansion of the route code
   1339 ! gives the option code for gate i when passage through gate i-1 is 
   1340 ! prescribed to be ASCENDING. These possibilities for the option code for
   1341 ! gate i are summarized in the table below.
   1342 !
   1343 !    Route        ;   DESCENDING at (i-1)   ;   ASCENDING at (i-1)
   1344 !   Code(i)       ;   ==> Option code(i)    ;   ==> Option Code(i)
   1345 !............................................................................
   1346 !      0                     0                        0
   1347 !      2                     2                        0
   1348 !      3                     0                        1
   1349 !      4                     1                        1
   1350 !      5                     2                        1
   1351 !      8                     2                        2

Page 59          Source Listing                  SET_GATES
2017-04-18 11:09                                 pspl.f90

   1352 !............................................................................. 
   1353 !
   1354 ! The first route code in a chain of gates, ie., code(1), is alway set
   1355 ! to 0, so at the very least, two combinations of routes are always coded
   1356 ! according as whether we choose to initialize the spline solution with
   1357 ! descent through gate 1 or an ascent. If all the gates are temporally 
   1358 ! separated, then then final gate's route_code also has this 0 value
   1359 ! signifying an indeterminate mode of passage.
   1360 ! 
   1361 ! In the special case where mh=1 and the given hs data are not enough to
   1362 ! decide whether this trajectory is descending or ascending, the tie-breaker
   1363 ! code, doru ("down or up") forces the sense of the trajectory as follows:
   1364 ! doru=1 ==> descending
   1365 ! doru=2 ==> ascending
   1366 !=============================================================================
   1367 integer,                   intent(in ):: nh,mh,doru
   1368 integer, dimension(nh),    intent(in ):: hgts
   1369 real(dp),dimension(nh),    intent(in ):: hs
   1370 integer, dimension(2,  mh),intent(out):: hgtn
   1371 real(dp),dimension(2,2,mh),intent(out):: hn
   1372 integer, dimension(    mh),intent(out):: code
   1373 logical,                   intent(out):: FF
   1374 !-----------------------------------------------------------------------------
   1375 real(dp):: hp
   1376 integer :: i,im,i2,i2m,imh,n,atti,attim,codeim,hgtp
   1377 !=============================================================================
   1378 FF=F
   1379 n=nh*2
   1380 hgtp=hgts(1)-1 ! <- default "time at present" in units of halfgate
   1381 imh=0
   1382 do i=1,nh
   1383    i2=i*2
   1384    i2m=i2-1
   1385    hp=hs(i)
   1386    if(hgts(i)>hgtp)then
   1387 ! A new nominal time of observation:
   1388       imh=imh+1
   1389       hgtp=hgts(i)
   1390       hgtn(1,imh)=hgtp-1
   1391       hgtn(2,imh)=hgtp+1
   1392       hn(:,:,imh)=hp
   1393    elseif(hgts(i)<hgtp) then
   1394       FF=T
   1395       write(41,*) 'In set_gates; data are not temporally monotonic'
   1396       return
   1397    else
   1398 ! The same nominal time of observation:      
   1399       hn(1,1,imh)=max(hn(1,1,imh),hp)
   1400       hn(1,2,imh)=min(hn(1,2,imh),hp)
   1401       hn(2,2,imh)=max(hn(2,2,imh),hp)
   1402       hn(2,1,imh)=min(hn(2,1,imh),hp)
   1403    endif
   1404 enddo
   1405 if(imh/=mh)stop 'In set_gates; inconsistent gate tallies, imh and mh'
   1406 ! When consecutive gates' post times overlap, adjust their hn if the height
   1407 ! ranges also overlap:
   1408 if(mh==1)then

Page 60          Source Listing                  SET_GATES
2017-04-18 11:09                                 pspl.f90

   1409    code(1)=4*doru
   1410    return
   1411 endif
   1412 attim=0
   1413 code=0 ! <- Default code implies switchable independently for each i
   1414 codeim=9 ! <- arbitrary nonzero number
   1415 do i=2,mh
   1416    atti=0 ! (default, until we learn anything more definite)
   1417    im=i-1
   1418    if(hgtn(1,i)<=hgtn(2,im))then
   1419 ! No intermission separates these consecutive gates, im and i:
   1420       if(hn(2,2,im)<=hn(1,2,i))then
   1421          atti=2 ! <-ascending attitude at common time
   1422          code(i)=2
   1423          if(attim==2.and.(codeim==0.or.codeim==2))code(im)=8
   1424       elseif(hn(2,1,im)>=hn(1,1,i))then
   1425          atti=1 ! <-descending attitude at common time
   1426          code(i)=3
   1427          if(attim==1.and.(codeim==0.or.codeim==3))code(im)=4
   1428       else
   1429 ! Overlapping, attitude at common time neither ascending nor descending,
   1430 ! but sense of passage through gates must alternate (code=5).
   1431          code(i)=5
   1432          if(hn(2,1,im)<=hn(1,2,i))then; hn(1,2,i) =hn(2,1,im)
   1433                                   else; hn(2,1,im)=hn(1,2,i)
   1434          endif
   1435          if(hn(2,2,im)<=hn(1,1,i))then; hn(2,2,im)=hn(1,1,i)
   1436                                   else; hn(1,1,i) =hn(2,2,im)
   1437          endif
   1438       endif
   1439    else
   1440 ! Gates im and i separated by an intermission:
   1441       if(hn(2,2,im)<=hn(1,2,i))then
   1442          atti=2 ! <-ascending attitude at intermission
   1443          if(attim==2.and.(codeim==0.or.codeim==2))code(im)=8
   1444       elseif(hn(2,1,im)>=hn(1,1,i))then
   1445          atti=1 ! <-descending attitude at intermission
   1446          if(attim==1.and.(codeim==0.or.codeim==3))code(im)=4
   1447       endif
   1448    endif
   1449    attim=atti
   1450    codeim=code(i)
   1451 enddo
   1452 end subroutine set_gates

Page 61          Source Listing                  SET_GATES
2017-04-18 11:09 Entry Points                    pspl.f90



ENTRY POINTS

  Name                          
                                
 pspl_mp_set_gates_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ATTI                       Local  1376     I(4)            4           scalar                    1416,1421,1425,1442,1445,1449     
 ATTIM                      Local  1376     I(4)            4           scalar                    1412,1423,1427,1443,1446,1449     
 CODE                       Dummy  1297     I(4)            4     1     0        ARG,OUT          1409,1413,1422,1423,1426,1427,1431
                                                                                                  ,1443,1446,1450                   
 CODEIM                     Local  1376     I(4)            4           scalar                    1414,1423,1427,1443,1446,1450     
 DORU                       Dummy  1297     I(4)            4           scalar   ARG,IN           1409                              
 FF                         Dummy  1297     L(4)            4           scalar   ARG,OUT          1378,1394                         
 HGTN                       Dummy  1297     I(4)            4     2     0        ARG,OUT          1390,1391,1418                    
 HGTP                       Local  1376     I(4)            4           scalar                    1380,1386,1389,1390,1391,1393     
 HGTS                       Dummy  1297     I(4)            4     1     0        ARG,IN           1380,1386,1389,1393               
 HN                         Dummy  1297     R(8)            8     3     0        ARG,OUT          1392,1399,1400,1401,1402,1420,1424
                                                                                                  ,1432,1433,1435,1436,1441,1444    
 HP                         Local  1375     R(8)            8           scalar                    1385,1392,1399,1400,1401,1402     
 HS                         Dummy  1297     R(8)            8     1     0        ARG,IN           1385                              
 I                          Local  1376     I(4)            4           scalar                    1382,1383,1385,1386,1389,1393,1415
                                                                                                  ,1417,1418,1420,1422,1424,1426,143
                                                                                                  1,1432,1433,1435,1436,1441,1444,14
                                                                                                  50                                
 I2                         Local  1376     I(4)            4           scalar                    1383,1384                         
 I2M                        Local  1376     I(4)            4           scalar                    1384                              
 IM                         Local  1376     I(4)            4           scalar                    1417,1418,1420,1423,1424,1427,1432
                                                                                                  ,1433,1435,1436,1441,1443,1444,144
                                                                                                  6                                 
 IMH                        Local  1376     I(4)            4           scalar                    1381,1388,1390,1391,1392,1399,1400
                                                                                                  ,1401,1402,1405                   
 MAX                        Func   1399                                 scalar                    1399,1401                         
 MH                         Dummy  1297     I(4)            4           scalar   ARG,IN           1370,1371,1372,1405,1408,1415     
 MIN                        Func   1400                                 scalar                    1400,1402                         
 N                          Local  1376     I(4)            4           scalar                    1379                              
 NH                         Dummy  1297     I(4)            4           scalar   ARG,IN           1368,1369,1379,1382               
 SET_GATES                  Subr   1297                                                                                             

Page 62          Source Listing                  SET_GATES
2017-04-18 11:09                                 pspl.f90

   1453 
   1454 !=============================================================================
   1455 subroutine set_posts(mh,mode,hgtn,hn, bend,hgtp,hp,off)!           [set_posts]
   1456 !=============================================================================
   1457 ! Given a set of mh double-gates (both descending and ascending types) and
   1458 ! the array of actual passage modes (i.e., the actual route threading
   1459 ! the sequence of gates), set the array of actual gateposts coordinates,
   1460 ! hgtp and hp, and the corresponding set of signs, bend, by which these
   1461 ! gatepost constraints, when activatived, must alter the principal
   1462 ! changed derivative of the optimal spline taking the prescribed route.
   1463 ! Also, flag (using logical array, "off") those gateposts that, for this
   1464 ! particular route, are redundant owing to existence of duplication of 
   1465 ! consecutive pairs of (hgtp,hp) sometimes occurring when no intermission
   1466 ! separates consecutive gates. All times are in integer units of halfgate.
   1467 !=============================================================================
   1468 integer,                   intent(in ):: mh
   1469 integer, dimension(    mh),intent(in ):: mode
   1470 integer, dimension(2,  mh),intent(in ):: hgtn
   1471 real(dp),dimension(2,2,mh),intent(in ):: hn
   1472 integer, dimension(mh*2),  intent(out):: bend,hgtp
   1473 real(dp),dimension(mh*2),  intent(out):: hp
   1474 logical, dimension(mh*2),  intent(out):: off
   1475 !-----------------------------------------------------------------------------
   1476 real(dp):: hprev
   1477 integer :: i,i2,i2m,i2mm,im,modei,hgtprev
   1478 !=============================================================================
   1479 off=F
   1480 do i=1,mh
   1481    im=i-1
   1482    modei=mode(i)
   1483    i2=i*2; i2m=i2-1; i2mm=i2-2
   1484    hgtp(i2m)=hgtn(1,i)
   1485    hgtp(i2 )=hgtn(2,i)
   1486    hp(i2m)=hn(1,modei,i)
   1487    hp(i2 )=hn(2,modei,i)
   1488 ! Check whether gatepost duplications exist, or one dominates another at same t:
   1489    if(i>1)then
   1490       if(hgtprev==hgtp(i2m))then
   1491          if(hprev==hp(i2m))off(i2m)=T
   1492          if(mode(im)==2.and.modei==1)then
   1493             if(hprev<=hp(i2m))then
   1494                off(i2mm)=T
   1495             else
   1496                off(i2m)=T
   1497             endif
   1498          elseif(mode(im)==1.and.modei==2)then
   1499             if(hprev<=hp(i2m))then
   1500                off(i2m)=T
   1501             else
   1502                off(i2mm)=T
   1503             endif
   1504          endif
   1505       endif
   1506    endif
   1507    bend(i2m)=modei*2-3 ! mode=1 ==> bend=-1; mode=2 ==> bend=+1 
   1508    bend(i2 )=-bend(i2m)! mode=1 ==> bend=+1; mode=2 ==> bend=-1 
   1509    hgtprev=hgtp(i2)

Page 63          Source Listing                  SET_POSTS
2017-04-18 11:09                                 pspl.f90

   1510    hprev  =hp(i2)
   1511 enddo
   1512 end subroutine set_posts


ENTRY POINTS

  Name                          
                                
 pspl_mp_set_posts_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BEND                       Dummy  1455     I(4)            4     1     0        ARG,OUT          1507,1508                         
 HGTN                       Dummy  1455     I(4)            4     2     0        ARG,IN           1484,1485                         
 HGTP                       Dummy  1455     I(4)            4     1     0        ARG,OUT          1484,1485,1490,1509               
 HGTPREV                    Local  1477     I(4)            4           scalar                    1490,1509                         
 HN                         Dummy  1455     R(8)            8     3     0        ARG,IN           1486,1487                         
 HP                         Dummy  1455     R(8)            8     1     0        ARG,OUT          1486,1487,1491,1493,1499,1510     
 HPREV                      Local  1476     R(8)            8           scalar                    1491,1493,1499,1510               
 I                          Local  1477     I(4)            4           scalar                    1480,1481,1482,1483,1484,1485,1486
                                                                                                  ,1487,1489                        
 I2                         Local  1477     I(4)            4           scalar                    1483,1485,1487,1508,1509,1510     
 I2M                        Local  1477     I(4)            4           scalar                    1483,1484,1486,1490,1491,1493,1496
                                                                                                  ,1499,1500,1507,1508              
 I2MM                       Local  1477     I(4)            4           scalar                    1483,1494,1502                    
 IM                         Local  1477     I(4)            4           scalar                    1481,1492,1498                    
 MH                         Dummy  1455     I(4)            4           scalar   ARG,IN           1469,1470,1471,1473,1474,1480     
 MODE                       Dummy  1455     I(4)            4     1     0        ARG,IN           1482,1492,1498                    
 MODEI                      Local  1477     I(4)            4           scalar                    1482,1486,1487,1492,1498,1507     
 OFF                        Dummy  1455     L(4)            4     1     0        ARG,OUT          1479,1491,1494,1496,1500,1502     
 SET_POSTS                  Subr   1455                                                                                             

Page 64          Source Listing                  SET_POSTS
2017-04-18 11:09                                 pspl.f90

   1513 
   1514 !=============================================================================
   1515 subroutine count_routes(n,code,count,FF)!                       [count_routes]
   1516 !=============================================================================
   1517 ! Given the route code array, "code", list all the allowed combinations
   1518 ! of passage modes (descending === 1; ascending === 2) through the sequence
   1519 ! of slalom gates.
   1520 !=============================================================================
   1521 integer,             intent(in ):: n
   1522 integer,dimension(n),intent(in ):: code
   1523 integer,             intent(out):: count
   1524 logical,             intent(out):: FF
   1525 !-----------------------------------------------------------------------------
   1526 integer,dimension(n):: mode
   1527 logical             :: flag
   1528 !============================================================================
   1529 FF=F
   1530 flag=T
   1531 do count=0,ihu; call next_route(n,code,mode,flag); if(flag)return; enddo
   1532 FF=(count>ihu)
   1533 if(FF) write(41,*) 'In count_routes; number of routes exceeds allowance = ',ihu
   1534 end subroutine count_routes


ENTRY POINTS

  Name                             
                                   
 pspl_mp_count_routes_             

Page 65          Source Listing                  COUNT_ROUTES
2017-04-18 11:09 Symbol Table                    pspl.f90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CODE                       Dummy  1515     I(4)            4     1     0        ARG,IN           1531                              
 COUNT                      Dummy  1515     I(4)            4           scalar   ARG,OUT          1531,1532                         
 COUNT_ROUTES               Subr   1515                                                                                             
 FF                         Dummy  1515     L(4)            4           scalar   ARG,OUT          1529,1532,1533                    
 FLAG                       Local  1527     L(4)            4           scalar                    1530,1531                         
 MODE                       Local  1526     I(4)            4     1     0                         1531                              
 N                          Dummy  1515     I(4)            4           scalar   ARG,IN           1522,1526,1531                    

Page 66          Source Listing                  COUNT_ROUTES
2017-04-18 11:09                                 pspl.f90

   1535 
   1536 !=============================================================================
   1537 subroutine list_routes(n,code)!                                  [list_routes]
   1538 !=============================================================================
   1539 ! Given the route code array, "code", list all the allowed combinations
   1540 ! of passage modes (descending === 1; ascending === 2) through the sequence
   1541 ! of slalom gates.
   1542 !=============================================================================
   1543 integer,             intent(in ):: n
   1544 integer,dimension(n),intent(in ):: code
   1545 !-----------------------------------------------------------------------------
   1546 integer,dimension(n):: mode
   1547 integer             :: i
   1548 logical             :: flag
   1549 !============================================================================
   1550 write(41,'("List all route combinations of ",i4," allowed passage modes")'),n
   1551 flag=T
   1552 do i=1,ihu
   1553    call next_route(n,code,mode,flag)
   1554    if(flag)then
   1555       write(41,'(" In list_routes; List of routes complete")'); flag=F; exit
   1556    endif
   1557    write(41,60)i,mode
   1558 enddo
   1559 if(i>ihu) write(41,'("This list is not necessarily complete")')
   1560 60 format(i5,3x,6(2x,5i2))
   1561 end subroutine list_routes


ENTRY POINTS

  Name                            
                                  
 pspl_mp_list_routes_             

Page 67          Source Listing                  LIST_ROUTES
2017-04-18 11:09 Symbol Table                    pspl.f90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 60                         Label  1560                                                           1557                              
 CODE                       Dummy  1537     I(4)            4     1     0        ARG,IN           1553                              
 FLAG                       Local  1548     L(4)            4           scalar                    1551,1553,1554,1555               
 I                          Local  1547     I(4)            4           scalar                    1552,1557,1559                    
 LIST_ROUTES                Subr   1537                                                                                             
 MODE                       Local  1546     I(4)            4     1     0                         1553,1557                         
 N                          Dummy  1537     I(4)            4           scalar   ARG,IN           1544,1546,1550,1553               

Page 68          Source Listing                  LIST_ROUTES
2017-04-18 11:09                                 pspl.f90

   1562 
   1563 !=============================================================================
   1564 subroutine next_route(n,code,mode,flag)!                          [next_route]
   1565 !=============================================================================
   1566 ! Given the combinatoric specification of sequentially-conditional
   1567 ! allowable modes of passage through the n gates encoded in array
   1568 ! codes, and generically given the present sequence, modes, (a series of
   1569 ! 1's and 2's denoting respectively descents and ascents through the gates)
   1570 ! return the next allowed combination defining the updated modes. If instead,
   1571 ! the intent is to initialize the sequence of modes, input the flag to "true" 
   1572 ! and the first route (array of modes) will be returned (and the flag lowered 
   1573 ! to "false").
   1574 ! If there is no "next" route, the sequence having been already exhausted,
   1575 ! the flag is raised to "true" on output and the route encoded in array,
   1576 ! modes, is not meaningful.
   1577 ! When, at gate i, the preceding gate's mode is "modeim" ( = modes(i-1)) 
   1578 ! and the present gate's given route code is code=codes(i), the options
   1579 ! for choosing mode(i) are encoded in the options code, 
   1580 ! option = options(code,
   1581 !=============================================================================
   1582 integer,             intent(in   ):: n
   1583 integer,dimension(n),intent(in   ):: code
   1584 integer,dimension(n),intent(inout):: mode
   1585 logical,             intent(inout):: flag
   1586 !-----------------------------------------------------------------------------
   1587 integer,dimension(0:8,2):: options ! <- evaluates the trinary digit of code
   1588 integer,dimension(0:2)  :: firstmode
   1589 integer                 :: i,im,j,modeim,modejm,option
   1590 data options/0,1,2,0,1,2,0,1,2, 0,0,0,1,1,1,2,2,2/
   1591 data firstmode/1,1,2/
   1592 !=============================================================================
   1593 modeim=1 ! <-arbitrarily set mode of previous gate passage to "descent"
   1594 if(flag)then
   1595 ! Initialize the route sequence and reset the flag:
   1596    do i=1,n
   1597       option=options(code(i),modeim)
   1598       mode(i)=firstmode(option)
   1599       modeim=mode(i)
   1600    enddo
   1601    flag=F
   1602    return
   1603 endif
   1604 
   1605 ! Use the present route (array of "mode" elements), and the route code, 
   1606 ! to find the next allowed route, or return with the flag raised when 
   1607 ! no more allowed routes are to be found:
   1608 do i=n,1,-1
   1609    im=i-1
   1610    if(i>1)then
   1611       modeim=mode(im)
   1612    else
   1613       modeim=1
   1614    endif
   1615    option=options(code(i),modeim)
   1616    if(option>0.or.mode(i)==2)cycle
   1617    mode(i)=2
   1618    modejm=mode(i)

Page 69          Source Listing                  NEXT_ROUTE
2017-04-18 11:09                                 pspl.f90

   1619    do j=i+1,n
   1620       option=options(code(j),modejm)
   1621       mode(j)=firstmode(option)
   1622       modejm=mode(j)
   1623    enddo
   1624    return
   1625 enddo
   1626 flag=T
   1627 end subroutine next_route


ENTRY POINTS

  Name                           
                                 
 pspl_mp_next_route_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CODE                       Dummy  1564     I(4)            4     1     0        ARG,IN           1597,1615,1620                    
 FIRSTMODE                  Local  1588     I(4)            4     1     3                         1591,1598,1621                    
 FLAG                       Dummy  1564     L(4)            4           scalar   ARG,INOUT        1594,1601,1626                    
 I                          Local  1589     I(4)            4           scalar                    1596,1597,1598,1599,1608,1609,1610
                                                                                                  ,1615,1616,1617,1618,1619         
 IM                         Local  1589     I(4)            4           scalar                    1609,1611                         
 J                          Local  1589     I(4)            4           scalar                    1619,1620,1621,1622               
 MODE                       Dummy  1564     I(4)            4     1     0        ARG,INOUT        1598,1599,1611,1616,1617,1618,1621
                                                                                                  ,1622                             
 MODEIM                     Local  1589     I(4)            4           scalar                    1593,1597,1599,1611,1613,1615     
 MODEJM                     Local  1589     I(4)            4           scalar                    1618,1620,1622                    
 N                          Dummy  1564     I(4)            4           scalar   ARG,IN           1583,1584,1596,1608,1619          
 NEXT_ROUTE                 Subr   1564                                                                                             
 OPTION                     Local  1589     I(4)            4           scalar                    1597,1598,1615,1616,1620,1621     
 OPTIONS                    Local  1587     I(4)            4     2     18                        1590,1597,1615,1620               

Page 70          Source Listing                  NEXT_ROUTE
2017-04-18 11:09                                 pspl.f90

   1628 
   1629 !=============================================================================
   1630 subroutine slalom_tspline(n,bend,hgxn,yn,off,bigX, &!         [slalom_tspline]
   1631      q,ya,en,ita,maxitb,ittot,FF)                               
   1632 !=============================================================================
   1633 ! Fit a tensioned spline, characteristic abscissa scale, bigX, between the
   1634 ! "slalom gates" defined by successive pairs of abscissae, integer hgxn, and 
   1635 ! corresponding ordinate values, real yn. Even number n is the total number
   1636 ! of inequality constraints, or twice the number of gates. There is no
   1637 ! assumed conditional monotonicity for the gates, but the sense in which
   1638 ! they are threaded is encoded in the array of signs (-1 or +1), "bend"
   1639 ! which determines, when activated, the sense in which the gatepost constraint
   1640 ! changes the principal non-continuous derivative (generally 3rd derivative)
   1641 ! of the spline. Some gatepost inequality constraints are disabled, as flagged
   1642 ! by logical array, "off", when two consecutive gateposts constraints are
   1643 ! identical.
   1644 ! Subject to the linear inequality constraints, we seek the tensioned
   1645 ! spline with characteristic scale, bigX, whose energy is minimized.
   1646 ! The energy of the tensioned spline in the infinitesimal segment [x,x+dx]
   1647 ! is proportional to half*{ (dy/dx)**2 + (bigT**2)*(ddy/dxx)**2 }*dx.
   1648 ! The problem is therefore of the type: minimize a quadratic functional
   1649 ! subject to finitely many (n) linear inequality constraints.
   1650 !
   1651 ! The problem is first standardized by rescaling hgxn (to real xs=xn/bigX) so 
   1652 ! that the characteristic scale becomes unity. We start with a feasible spline
   1653 ! fitted (equality constraints) to as many of the constraints with distinct
   1654 ! xs as we can. We "A" iterate from one such feasible, conditionally minimum-
   1655 ! energy solution to another with a different set of equality constraints
   1656 ! via an "B" iteration" as follows. The "A" solution generally may have
   1657 ! constraints at the gateposts that are "pushing" when they should be
   1658 ! "pulling" (specifically, the sign of the discontinuity in the spline's
   1659 ! third derivative is the opposite of what it should be at that point). Take
   1660 ! ALL such violations and, first,  simply switch them "off". In general, this
   1661 ! will cause the energy of the spline to fall significantly, but the resulting
   1662 ! spline may no longer thread all the slalom gates, so we will have to ADD
   1663 ! some constraints via what we call the "B-iteration" (whereupon the energy
   1664 ! increases again, but not to point where it was when we released the 
   1665 ! constraints at this last A-iteration). In the spline's state space, the
   1666 ! first of the new cycle of B-iterations back-tracks along the line-segment
   1667 ! joining this new spline-state to the more constrained one we just departed,
   1668 ! to the point on the spline-state-space segment where the solution becomes
   1669 ! once again feasible. This involves adding just one more constraint where the
   1670 ! spine just touches the inside of a slalom gatepost where it did not touch 
   1671 ! before. This new contact is made a new constraint, the spline state is 
   1672 ! recorded as the state reached at the 1st B-iteration, and a new spline
   1673 ! solution is solved for. If, once again, the spline fails to thread the 
   1674 ! gateposts, then in the next B-iteration, we back-track once again along a
   1675 ! line segment in spline-space, but this time towards the state at the previous
   1676 ! B-iteration. Again, we add a new constraint (which adds energy, but still 
   1677 ! not so much that the energy exceeds that of the last A-iteration). We
   1678 ! continue this process until we have added just enough new constraints to
   1679 ! achieve a feasible (slalom-threading) spline. This cycle of B-iterations
   1680 ! is thus complete and, in the generic case, the energy is still smaller
   1681 ! than it was at the last A-iteration. But since the new configuration may
   1682 ! be in violation of a new set of "jump-sign" violations, we must check
   1683 ! whether another A-iteration is required -- and so on. The B-iterations
   1684 ! are nested within the loop of A-iterations. To summarize: the A-iterations

Page 71          Source Listing                  SLALOM_TSPLINE
2017-04-18 11:09                                 pspl.f90

   1685 ! release the gatepost constraints where jump-sign violations occur and the
   1686 ! energy between A-iterations decreases; the B-iterations activate new
   1687 ! gatepost constraints to keep the spline between the gateposts, and the
   1688 ! energy between B iterations increases. The process terminates when the
   1689 ! jump-sign conditions are all satisfied in the generic case. However, we
   1690 ! find that, in extremely rare and special cases of numerical coincidence,
   1691 ! jump-sign condition is close enough to machine-zero to be ambiguous --
   1692 ! and this seems to occur at the very last stage of the A-iterations. To
   1693 ! allow for this very rare occurrence, we now check that the energy between
   1694 ! A-iterations really IS decreasing and, if it is ever found not to be, we
   1695 ! terminate the iteration anyway.
   1696 !
   1697 ! In general, when the constraint of the final solution is not active, the
   1698 ! value y of the spline differs from the yn there; it is therefore convenient
   1699 ! to output what the actual y value of the spline is, which we do in the
   1700 ! array, ya ("y actual").
   1701 !=============================================================================
   1702 integer,                intent(in   ):: n
   1703 integer, dimension(n),  intent(in   ):: bend,hgxn
   1704 real(dp),dimension(n),  intent(in   ):: yn
   1705 logical, dimension(n),  intent(in   ):: off
   1706 real(dp),               intent(in   ):: bigX
   1707 real(dp),dimension(n),  intent(  out):: q
   1708 real(dp),dimension(n),  intent(  out):: ya
   1709 real(dp),               intent(  out):: en
   1710 integer,                intent(  out):: ita,ittot
   1711 integer,                intent(inout):: maxitb
   1712 logical,                intent(  out):: FF
   1713 !-----------------------------------------------------------------------------
   1714 integer,parameter      :: nita=50,nitb=80
   1715 real(dp),dimension(n)  :: xs,jump,qt,yat
   1716 real(dp)               :: sj,sjmin,ena
   1717 integer                :: i,j,k,itb,hgxp
   1718 logical,dimension(n)   :: on
   1719 !=============================================================================
   1720 FF=F
   1721 ! For algebraic convenience, work in terms of rescaled times, xs, of 
   1722 ! the constraints whose given times, hgxn, are in integer units of halfgate
   1723 xs=hgxn/bigX
   1724 
   1725 ! Initialize the "A" iteration by fitting a feasible spline to as many
   1726 ! "gateposts" as is possible with distinct xs. A constraint i is signified
   1727 ! to be activated when logical array element, on(i), is true:
   1728 hgxp=hgxn(1)-1
   1729 do i=1,n
   1730    if(off(i))then; on(i)=F; cycle; endif
   1731    on(i)=(hgxn(i)>hgxp); if(on(i))hgxp=hgxn(i)
   1732 enddo
   1733 ittot=1
   1734 call fit_gtspline(n,xs,yn,on,qt,jump,yat,en,FF)! <- Make the initial fit
   1735 ena=en
   1736 if(FF)then
   1737    write(41,*) 'In slalom_tspline; failure flag raised in call to fit_gtspline'
   1738    write(41,*) 'at initialization of A loop'
   1739    return
   1740 endif
   1741 

Page 72          Source Listing                  SLALOM_TSPLINE
2017-04-18 11:09                                 pspl.f90

   1742 ! loop over steps of iteration "A" to check for jump-sign violations
   1743 do ita=1,nita
   1744    q=qt   ! Copy solution vector q of nodal 1st-derivatives
   1745    ya=yat ! Copy nodal intercepts
   1746 
   1747 ! Determine whether there exists sign-violations in any active "jumps"
   1748 ! of the 3rd derviative and, if so, inactivate (on==F) the constraints
   1749 ! at those points. Also, count the number, j, of such violations.
   1750    j=0
   1751    k=0
   1752    sjmin=0
   1753    do i=1,n
   1754       if(.not.on(i))cycle
   1755       sj=-bend(i)*jump(i)
   1756       if(sj<0)then
   1757          j=i
   1758          on(i)=F
   1759       else
   1760          k=k+1 ! <- new tally of constraints switched "on"
   1761       endif
   1762    enddo
   1763    if(j==0)exit !<-Proper conditions for a solution are met
   1764    if(k==0)on(j)=T ! <- must leave at least one constraint "on"
   1765 
   1766 ! Begin a new "B" iteration that adds as many new constraints as needed
   1767 ! to keep the new conditional minimum energy spline in the feasible region:
   1768    do itb=1,nitb
   1769       call fit_gtspline(n,xs,yn,on,qt,jump,yat,en,FF)
   1770       if(FF)then
   1771          write(41,*)&
   1772               'In slalom_tspline; failure flag raised in call to fit_gtspline'
   1773          write(41,*) 'at B loop, iterations ita,itb = ',ita,itb
   1774          return
   1775       endif
   1776        ittot=ittot+1 ! Increment the running total of calls to fit_tspline
   1777 
   1778 ! Determine whether this "solution" wanders outside any slalom gates at
   1779 ! the unconstrained locations and identify and calibrate the worst violation.
   1780 ! In this case, sjmin, ends up being the under-relaxation coefficient
   1781 ! by which we need to multiply this new increment in order to just stay
   1782 ! within the feasible region of spline space, and constraint j must be
   1783 ! switched "on":
   1784       j=0
   1785       sjmin=u1
   1786       do i=1,n
   1787          if(on(i).or.off(i))cycle
   1788          sj=bend(i)*(yn(i)-yat(i))
   1789          if(sj<0)then
   1790             sj=(yn(i)-ya(i))/(yat(i)-ya(i))
   1791             if(sj<sjmin)then
   1792                j=i
   1793                sjmin=sj
   1794             endif
   1795          endif
   1796       enddo
   1797       if(j==0)exit !<- spline is feasible, exit B loop and adopt solution as A
   1798 

Page 73          Source Listing                  SLALOM_TSPLINE
2017-04-18 11:09                                 pspl.f90

   1799 ! Back off to best feasible solution along this path, which modulates the
   1800 ! change just made by an underrelaxation factor, sjmin, and activate 
   1801 ! constraint j
   1802       ya=ya+sjmin*(yat-ya)
   1803       q=q+sjmin*(qt-q)
   1804       on(j)=T
   1805    enddo ! itb loop
   1806    maxitb=max(maxitb,itb)
   1807    if(itb>nitb) then
   1808       FF=T
   1809       write(41,*) 'In slalom_tspline; exceeding the allocation of B iterations'
   1810       return
   1811    end if
   1812    q=qt
   1813    ya=yat
   1814    if(en>=ena)then
   1815       write(41,*) 'In slalom_tspline; energy failed to decrease'
   1816       exit 
   1817    endif
   1818    ena=en
   1819 enddo ! ita loop
   1820 if(ita>nita)then
   1821    FF=T
   1822    write(41,*) 'In slalom_tspline; exceeding the allocation of A iterations'
   1823    return
   1824 endif
   1825 end subroutine slalom_tspline


ENTRY POINTS

  Name                               
                                     
 pspl_mp_slalom_tspline_             

Page 74          Source Listing                  SLALOM_TSPLINE
2017-04-18 11:09 Symbol Table                    pspl.f90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BEND                       Dummy  1630     I(4)            4     1     0        ARG,IN           1755,1788                         
 BIGX                       Dummy  1630     R(8)            8           scalar   ARG,IN           1723                              
 EN                         Dummy  1631     R(8)            8           scalar   ARG,OUT          1734,1735,1769,1814,1818          
 ENA                        Local  1716     R(8)            8           scalar                    1735,1814,1818                    
 FF                         Dummy  1631     L(4)            4           scalar   ARG,OUT          1720,1734,1736,1769,1770,1808,1821
 HGXN                       Dummy  1630     I(4)            4     1     0        ARG,IN           1723,1728,1731                    
 HGXP                       Local  1717     I(4)            4           scalar                    1728,1731                         
 I                          Local  1717     I(4)            4           scalar                    1729,1730,1731,1753,1754,1755,1757
                                                                                                  ,1758,1786,1787,1788,1790,1792    
 ITA                        Dummy  1631     I(4)            4           scalar   ARG,OUT          1743,1773,1820                    
 ITB                        Local  1717     I(4)            4           scalar                    1768,1773,1806,1807               
 ITTOT                      Dummy  1631     I(4)            4           scalar   ARG,OUT          1733,1776                         
 J                          Local  1717     I(4)            4           scalar                    1750,1757,1763,1764,1784,1792,1797
                                                                                                  ,1804                             
 JUMP                       Local  1715     R(8)            8     1     0                         1734,1755,1769                    
 K                          Local  1717     I(4)            4           scalar                    1751,1760,1764                    
 MAX                        Func   1806                                 scalar                    1806                              
 MAXITB                     Dummy  1631     I(4)            4           scalar   ARG,INOUT        1806                              
 N                          Dummy  1630     I(4)            4           scalar   ARG,IN           1703,1704,1705,1707,1708,1715,1718
                                                                                                  ,1729,1734,1753,1769,1786         
 NITA                       Param  1714     I(4)            4           scalar                    1743,1820                         
 NITB                       Param  1714     I(4)            4           scalar                    1768,1807                         
 OFF                        Dummy  1630     L(4)            4     1     0        ARG,IN           1730,1787                         
 ON                         Local  1718     L(4)            4     1     0                         1730,1731,1734,1754,1758,1764,1769
                                                                                                  ,1787,1804                        
 Q                          Dummy  1631     R(8)            8     1     0        ARG,OUT          1744,1803,1812                    
 QT                         Local  1715     R(8)            8     1     0                         1734,1744,1769,1803,1812          
 SJ                         Local  1716     R(8)            8           scalar                    1755,1756,1788,1789,1790,1791,1793
 SJMIN                      Local  1716     R(8)            8           scalar                    1752,1785,1791,1793,1802,1803     
 SLALOM_TSPLINE             Subr   1630                                                                                             
 XS                         Local  1715     R(8)            8     1     0                         1723,1734,1769                    
 YA                         Dummy  1631     R(8)            8     1     0        ARG,OUT          1745,1790,1802,1813               
 YAT                        Local  1715     R(8)            8     1     0                         1734,1745,1769,1788,1790,1802,1813
 YN                         Dummy  1630     R(8)            8     1     0        ARG,IN           1734,1769,1788,1790               

Page 75          Source Listing                  SLALOM_TSPLINE
2017-04-18 11:09                                 pspl.f90

   1826 
   1827 !=============================================================================
   1828 subroutine slalom_uspline(n,bend,hgxn,yn,off,halfgate,&!      [slalom_uspline]
   1829      q, ya,en,ita,maxitb,ittot,FF)       
   1830 !=============================================================================
   1831 ! Like slalom_tspline, except this treats the special case where the spline
   1832 ! is untensioned, and therefore the characteristic scale in x become infinite,
   1833 ! and the spline becomes piecewise cubic instead of involving hyperbolic
   1834 ! (or exponential) function. In other respects, the logic follows that of
   1835 ! subroutine slalom_tsline.
   1836 !=============================================================================
   1837 integer,                intent(in   ):: n
   1838 integer, dimension(n),  intent(in   ):: bend,hgxn
   1839 real(dp),dimension(n),  intent(in   ):: yn
   1840 logical, dimension(n),  intent(in   ):: off
   1841 real(dp),               intent(in   ):: halfgate
   1842 real(dp),dimension(n),  intent(  out):: q
   1843 real(dp),dimension(n),  intent(  out):: ya
   1844 real(dp),               intent(  out):: en
   1845 integer,                intent(  out):: ita,ittot
   1846 integer,                intent(inout):: maxitb
   1847 logical,                intent(  out):: FF
   1848 !-----------------------------------------------------------------------------
   1849 integer,parameter      :: nita=50,nitb=80
   1850 real(dp),dimension(n)  :: xs,jump,qt,yat
   1851 real(dp)               :: sj,sjmin,ena
   1852 integer                :: i,j,k,itb,hgxp
   1853 logical,dimension(n)   :: on
   1854 !=============================================================================
   1855 ! Initialize the "A" iteration by fitting a feasible spline to as many
   1856 ! "gateposts" as is possible with distinct xn. A constraint i is signified
   1857 ! to be activated when logical array element, on(i), is true:
   1858 FF=F
   1859 xs=hgxn*halfgate
   1860 hgxp=hgxn(1)-1
   1861 do i=1,n
   1862    if(off(i))then
   1863       on(i)=F
   1864       cycle
   1865    endif
   1866    on(i)=(hgxn(i)>hgxp)
   1867    if(on(i))hgxp=hgxn(i)
   1868 enddo
   1869 ittot=1
   1870 call fit_guspline(n,xs,yn,on,qt,jump,yat,en,FF)! <- Make the initial fit
   1871 ena=en
   1872 if(FF)then
   1873    write(41,*) 'In slalom_uspline; failure flag raised in call to fit_guspline'
   1874    write(41,*) 'at initialization of A loop'
   1875    return
   1876 endif
   1877 
   1878 ! loop over steps of iteration "A" to check for jump-sign violations
   1879 do ita=1,nita
   1880    q=qt   ! Copy solution vector q of nodal 1st-derivatives
   1881    ya=yat ! Copy nodal intercepts
   1882 

Page 76          Source Listing                  SLALOM_USPLINE
2017-04-18 11:09                                 pspl.f90

   1883 ! Determine whether there exists sign-violations in any active "jumps"
   1884 ! of the 3rd derviative and, if so, inactivate (on==F) the constraints
   1885 ! at those points. Also, count the number, j, of such violations.
   1886    j=0
   1887    k=0
   1888    sjmin=0
   1889    do i=1,n
   1890       if(.not.on(i))cycle
   1891       sj=-bend(i)*jump(i)
   1892       if(sj<0)then
   1893          j=i
   1894          on(i)=F
   1895       else
   1896          k=k+1 ! <- new tally of constraints switched "on"
   1897       endif
   1898    enddo
   1899    if(j==0)exit !<-Proper conditions for a solution are met
   1900    if(k==0)on(j)=T ! <- must leave at least one constraint "on"
   1901 
   1902 ! Begin a new "B" iteration that adds as many new constraints as needed
   1903 ! to keep the new conditional minimum energy spline in the feasible region:
   1904    do itb=1,nitb
   1905       call fit_guspline(n,xs,yn,on,qt,jump,yat,en,FF)
   1906       if(FF)then
   1907          write(41,*)&
   1908               'In slalom_uspline; failure flag raised in call to fit_guspline'
   1909          write(41,*) 'at B loop, iterations ita,itb = ',ita,itb
   1910          return
   1911       endif
   1912       ittot=ittot+1 ! Increment the running total of calls to fit_uspline
   1913 
   1914 ! Determine whether this "solution" wanders outside any slalom gates at
   1915 ! the unconstrained locations and identify and calibrate the worst violation.
   1916 ! In this case, sjmin, ends up being the under-relaxation coefficient
   1917 ! by which we need to multiply this new increment in order to just stay
   1918 ! within the feasible region of spline space, and constraint j must be
   1919 ! switched "on":
   1920       j=0
   1921       sjmin=u1
   1922       do i=1,n
   1923          if(on(i).or.off(i))cycle
   1924          sj=bend(i)*(yn(i)-yat(i))
   1925          if(sj<0)then
   1926             sj=(yn(i)-ya(i))/(yat(i)-ya(i))
   1927             if(sj<sjmin)then
   1928                j=i
   1929                sjmin=sj
   1930             endif
   1931          endif
   1932       enddo
   1933       if(j==0)exit !<- spline is feasible, exit B loop and adopt solution as A
   1934 
   1935 ! Back off to best feasible solution along this path, which modulates the
   1936 ! change just made by an underrelaxation factor, sjmin, and activate 
   1937 ! constraint j
   1938       ya=ya+sjmin*(yat-ya)
   1939       q=q+sjmin*(qt-q)

Page 77          Source Listing                  SLALOM_USPLINE
2017-04-18 11:09                                 pspl.f90

   1940       on(j)=T
   1941    enddo
   1942    maxitb=max(maxitb,itb)
   1943    if(itb>nitb) then
   1944       FF=T
   1945       write(41,*) 'In slalom_uspline; exceeding the allocation of B iterations'
   1946       return
   1947    end if
   1948    q=qt
   1949    ya=yat
   1950    if(en>=ena)then
   1951       write(41,*) 'In slalom_uspline; energy failed to decrease'
   1952       exit
   1953    endif
   1954    ena=en
   1955 enddo
   1956 if(ita>nita)then
   1957    FF=T
   1958    write(41,*) 'In slalom_uspline; exceeding the allocation of A iterations'
   1959    return
   1960 endif
   1961 end subroutine slalom_uspline


ENTRY POINTS

  Name                               
                                     
 pspl_mp_slalom_uspline_             

Page 78          Source Listing                  SLALOM_USPLINE
2017-04-18 11:09 Symbol Table                    pspl.f90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BEND                       Dummy  1828     I(4)            4     1     0        ARG,IN           1891,1924                         
 EN                         Dummy  1829     R(8)            8           scalar   ARG,OUT          1870,1871,1905,1950,1954          
 ENA                        Local  1851     R(8)            8           scalar                    1871,1950,1954                    
 FF                         Dummy  1829     L(4)            4           scalar   ARG,OUT          1858,1870,1872,1905,1906,1944,1957
 HALFGATE                   Dummy  1828     R(8)            8           scalar   ARG,IN           1859                              
 HGXN                       Dummy  1828     I(4)            4     1     0        ARG,IN           1859,1860,1866,1867               
 HGXP                       Local  1852     I(4)            4           scalar                    1860,1866,1867                    
 I                          Local  1852     I(4)            4           scalar                    1861,1862,1863,1866,1867,1889,1890
                                                                                                  ,1891,1893,1894,1922,1923,1924,192
                                                                                                  6,1928                            
 ITA                        Dummy  1829     I(4)            4           scalar   ARG,OUT          1879,1909,1956                    
 ITB                        Local  1852     I(4)            4           scalar                    1904,1909,1942,1943               
 ITTOT                      Dummy  1829     I(4)            4           scalar   ARG,OUT          1869,1912                         
 J                          Local  1852     I(4)            4           scalar                    1886,1893,1899,1900,1920,1928,1933
                                                                                                  ,1940                             
 JUMP                       Local  1850     R(8)            8     1     0                         1870,1891,1905                    
 K                          Local  1852     I(4)            4           scalar                    1887,1896,1900                    
 MAX                        Func   1942                                 scalar                    1942                              
 MAXITB                     Dummy  1829     I(4)            4           scalar   ARG,INOUT        1942                              
 N                          Dummy  1828     I(4)            4           scalar   ARG,IN           1838,1839,1840,1842,1843,1850,1853
                                                                                                  ,1861,1870,1889,1905,1922         
 NITA                       Param  1849     I(4)            4           scalar                    1879,1956                         
 NITB                       Param  1849     I(4)            4           scalar                    1904,1943                         
 OFF                        Dummy  1828     L(4)            4     1     0        ARG,IN           1862,1923                         
 ON                         Local  1853     L(4)            4     1     0                         1863,1866,1867,1870,1890,1894,1900
                                                                                                  ,1905,1923,1940                   
 Q                          Dummy  1829     R(8)            8     1     0        ARG,OUT          1880,1939,1948                    
 QT                         Local  1850     R(8)            8     1     0                         1870,1880,1905,1939,1948          
 SJ                         Local  1851     R(8)            8           scalar                    1891,1892,1924,1925,1926,1927,1929
 SJMIN                      Local  1851     R(8)            8           scalar                    1888,1921,1927,1929,1938,1939     
 SLALOM_USPLINE             Subr   1828                                                                                             
 XS                         Local  1850     R(8)            8     1     0                         1859,1870,1905                    
 YA                         Dummy  1829     R(8)            8     1     0        ARG,OUT          1881,1926,1938,1949               
 YAT                        Local  1850     R(8)            8     1     0                         1870,1881,1905,1924,1926,1938,1949
 YN                         Dummy  1828     R(8)            8     1     0        ARG,IN           1870,1905,1924,1926               

Page 79          Source Listing                  SLALOM_USPLINE
2017-04-18 11:09                                 pspl.f90

   1962 
   1963 !=============================================================================
   1964 subroutine convertd(n,halfgate,tdata,hdata,phof,&!                  [convertd]
   1965      doru,idx,hgts,hs,descending,FF)
   1966 !=============================================================================
   1967 ! tdata (in single precision real hours) is discretized into bins of size
   1968 ! gate=2*halfgate (in units of seconds) and expressed as even integer units
   1969 ! hgts of halfgate that correspond to the mid-time of each bin. (The two
   1970 ! limits of each time-bin are odd integers in halfgate units.)
   1971 !=============================================================================
   1972 integer,              intent(in ):: n
   1973 real(dp),             intent(in ):: halfgate
   1974 real,    dimension(n),intent(in ):: tdata,hdata
   1975 integer, dimension(n),intent(in ):: phof
   1976 integer,              intent(out):: doru
   1977 integer, dimension(n),intent(out):: idx,hgts
   1978 real(dp),dimension(n),intent(out):: hs
   1979 logical,              intent(out):: descending
   1980 logical,              intent(out):: FF
   1981 !------------------------------------------------------------------------------
   1982 integer,parameter:: hour=3600 ! 1 hour converted to S.I. units
   1983 integer          :: i,j,ii,upsign,hgs
   1984 real(dp)         :: s,gate
   1985 !=============================================================================
   1986 FF=F
   1987 if(size(hdata)/=n)stop 'In convertd; inconsistent dimensions of hdata'
   1988 if(size(tdata)/=n)stop 'In convertd; inconsistent dimensions of tdata'
   1989 if(size(hs)/=n)stop 'In convertd; inconsistent dimensions of hs'
   1990 if(size(hgts)/=n)stop 'In convertd; inconsistent dimensions of hgts'
   1991 hs=hdata
   1992 ! convert to whole number of seconds rounded to the nearest gate=2*halfgate:
   1993 upsign=0
   1994 gate=halfgate*2
   1995 do i=1,n
   1996    hgts(i)=2*nint(tdata(i)*hour/gate)! 
   1997    if(phof(i)==5)upsign=1  ! Ascending flight
   1998    if(phof(i)==6)upsign=-1 ! Descending flight
   1999 enddo
   2000 doru=0
   2001 if (upsign>0) then
   2002    doru=2
   2003 else
   2004    doru=1
   2005 endif
   2006 if(n==1)return
   2007 if(hgts(1)>hgts(n))then ! Reverse the order:
   2008    do i=1,n/2
   2009       j=n+1-i
   2010       hgs=hgts(i); hgts(i)=hgts(j); hgts(j)=hgs ! Swap integer hgts
   2011       s  =hs(i)  ; hs(i)  =hs(j)  ; hs(j)  =s   ! and swap real hs
   2012    enddo
   2013 endif
   2014 if(upsign==1)then
   2015    descending=F
   2016 elseif(upsign==-1)then
   2017    descending=T
   2018 else

Page 80          Source Listing                  CONVERTD
2017-04-18 11:09                                 pspl.f90

   2019    descending=(hs(n)<hs(1))
   2020    if(descending)then; upsign=-1; write(41,'("mainly DESCENDING")')
   2021                  else; upsign=1;  write(41,'("mainly ASCENDING")')
   2022    endif
   2023 endif
   2024 
   2025 ! make sure the order is in time increasing order
   2026 do i=1,n
   2027    idx(i)=i
   2028 end do
   2029 do i=2,n
   2030    do ii=1,i-1
   2031       if (hgts(i)<hgts(ii).or. &
   2032            (hgts(i)==hgts(ii).and.upsign*(hs(i)-hs(ii))<u0)) then  
   2033          hgs=hgts(i);  hgts(i)=hgts(ii);   hgts(ii)=hgs   ! Swap integer hgts
   2034          s  =hs(i);    hs(i)  =hs(ii);     hs(ii)  =s     ! and swap real hs
   2035          j=idx(i);    idx(i)  =idx(ii);   idx(ii)  =j     ! and swap index idx
   2036       end if
   2037    end do
   2038 end do
   2039 do i=2,n
   2040    if(hgts(i)<hgts(i-1)) then
   2041       write(41,*)&
   2042            'In convertd; time sequence not monotonic', i, hgts(i),hgts(i-1)
   2043       FF=T
   2044       return
   2045    end if
   2046 enddo
   2047 do i=2,n
   2048    if(upsign*(hs(i)-hs(i-1))<u0)&
   2049         write(41,*) 'In convertd; height sequence not monotonic'
   2050 enddo
   2051 end subroutine convertd

Page 81          Source Listing                  CONVERTD
2017-04-18 11:09 Entry Points                    pspl.f90



ENTRY POINTS

  Name                         
                               
 pspl_mp_convertd_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CONVERTD                   Subr   1964                                                                                             
 DESCENDING                 Dummy  1965     L(4)            4           scalar   ARG,OUT          2015,2017,2019,2020               
 DORU                       Dummy  1965     I(4)            4           scalar   ARG,OUT          2000,2002,2004                    
 FF                         Dummy  1965     L(4)            4           scalar   ARG,OUT          1986,2043                         
 GATE                       Local  1984     R(8)            8           scalar                    1994,1996                         
 HALFGATE                   Dummy  1964     R(8)            8           scalar   ARG,IN           1994                              
 HDATA                      Dummy  1964     R(4)            4     1     0        ARG,IN           1987,1991                         
 HGS                        Local  1983     I(4)            4           scalar                    2010,2033                         
 HGTS                       Dummy  1965     I(4)            4     1     0        ARG,OUT          1990,1996,2007,2010,2031,2032,2033
                                                                                                  ,2040,2042                        
 HOUR                       Param  1982     I(4)            4           scalar                    1996                              
 HS                         Dummy  1965     R(8)            8     1     0        ARG,OUT          1989,1991,2011,2019,2032,2034,2048
 I                          Local  1983     I(4)            4           scalar                    1995,1996,1997,1998,2008,2009,2010
                                                                                                  ,2011,2026,2027,2029,2030,2031,203
                                                                                                  2,2033,2034,2035,2039,2040,2042,20
                                                                                                  47,2048                           
 IDX                        Dummy  1965     I(4)            4     1     0        ARG,OUT          2027,2035                         
 II                         Local  1983     I(4)            4           scalar                    2030,2031,2032,2033,2034,2035     
 J                          Local  1983     I(4)            4           scalar                    2009,2010,2011,2035               
 N                          Dummy  1964     I(4)            4           scalar   ARG,IN           1974,1975,1977,1978,1987,1988,1989
                                                                                                  ,1990,1995,2006,2007,2008,2009,201
                                                                                                  9,2026,2029,2039,2047             
 NINT                       Func   1996                                 scalar                    1996                              
 PHOF                       Dummy  1964     I(4)            4     1     0        ARG,IN           1997,1998                         
 S                          Local  1984     R(8)            8           scalar                    2011,2034                         
 SIZE                       Func   1987                                 scalar                    1987,1988,1989,1990               
 TDATA                      Dummy  1964     R(4)            4     1     0        ARG,IN           1988,1996                         
 UPSIGN                     Local  1983     I(4)            4           scalar                    1993,1997,1998,2001,2014,2016,2020
                                                                                                  ,2021,2032,2048                   

Page 82          Source Listing                  CONVERTD
2017-04-18 11:09                                 pspl.f90

   2052 
   2053 !=============================================================================
   2054 subroutine convertd_back(n,halfgate,wdata,tdata, &!            [convertd_back]
   2055      ws,hgts,idx,descending)
   2056 !=============================================================================
   2057 integer,              intent(in ):: n
   2058 real(dp),             intent(in ):: halfgate
   2059 integer, dimension(n),intent(in ):: hgts,idx
   2060 real(dp),dimension(n),intent(in ):: ws
   2061 logical,              intent(in ):: descending
   2062 real,dimension(n),    intent(out):: wdata
   2063 real,dimension(n),    intent(out):: tdata
   2064 !------------------------------------------------------------------------------
   2065 integer             :: i,j,ii
   2066 real(dp)            :: s
   2067 real,   dimension(n):: wn
   2068 integer,dimension(n):: hgtn
   2069 !=============================================================================
   2070 if(size(wdata)/=n)stop 'In convertd; inconsistent dimensions of wdata'
   2071 if(size(tdata)/=n)stop 'In convertd; inconsistent dimensions of tdata'
   2072 if(size(ws)/=n)stop 'In convertd; inconsistent dimensions of ws'
   2073 if(size(hgts)/=n)stop 'In convertd; inconsistent dimensions of hgts'
   2074 
   2075 do i = 1, n
   2076    ii = idx(i); hgtn(ii) = hgts(i);  wn(ii) = ws(i)
   2077 end do
   2078 
   2079 wdata=wn; tdata=hgtn*halfgate
   2080 if (descending.or.n==1) return
   2081 do i=1,n/2
   2082    j=n+1-i
   2083    s=tdata(i); tdata(i)=tdata(j); tdata(j)=s ! Swap tdata
   2084    s=wdata(i); wdata(i)=wdata(j); wdata(j)=s ! Swap wdata
   2085 enddo
   2086 end subroutine convertd_back

Page 83          Source Listing                  CONVERTD_BACK
2017-04-18 11:09 Entry Points                    pspl.f90



ENTRY POINTS

  Name                              
                                    
 pspl_mp_convertd_back_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CONVERTD_BACK              Subr   2054                                                                                             
 DESCENDING                 Dummy  2055     L(4)            4           scalar   ARG,IN           2080                              
 HALFGATE                   Dummy  2054     R(8)            8           scalar   ARG,IN           2079                              
 HGTN                       Local  2068     I(4)            4     1     0                         2076,2079                         
 HGTS                       Dummy  2055     I(4)            4     1     0        ARG,IN           2073,2076                         
 I                          Local  2065     I(4)            4           scalar                    2075,2076,2081,2082,2083,2084     
 IDX                        Dummy  2055     I(4)            4     1     0        ARG,IN           2076                              
 II                         Local  2065     I(4)            4           scalar                    2076                              
 J                          Local  2065     I(4)            4           scalar                    2082,2083,2084                    
 N                          Dummy  2054     I(4)            4           scalar   ARG,IN           2059,2060,2062,2063,2067,2068,2070
                                                                                                  ,2071,2072,2073,2075,2080,2081,208
                                                                                                  2                                 
 S                          Local  2066     R(8)            8           scalar                    2083,2084                         
 SIZE                       Func   2070                                 scalar                    2070,2071,2072,2073               
 TDATA                      Dummy  2054     R(4)            4     1     0        ARG,OUT          2071,2079,2083                    
 WDATA                      Dummy  2054     R(4)            4     1     0        ARG,OUT          2070,2079,2084                    
 WN                         Local  2067     R(4)            4     1     0                         2076,2079                         
 WS                         Dummy  2055     R(8)            8     1     0        ARG,IN           2072,2076                         

Page 84          Source Listing                  CONVERTD_BACK
2017-04-18 11:09 Symbol Table                    pspl.f90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BEST_SLALOM                Local  60                                   scalar                    30                                
 BNEWTON                    Local  45                                   scalar                    27                                
 CONVERTD                   Subr   70                                                             32                                
 CONVERTD_BACK              Subr   71                                                             32                                
 COUNT_GATES                Subr   62                                                             30                                
 EPSILON                    Func   36                                   scalar   PRIV             36                                
 EVAL_ITSPLINE              Subr   52                                                             28                                
 EVAL_IUSPLINE              Subr   59                                                             29                                
 HUGE                       Func   35                                   scalar   PRIV             35                                
 INT_TSPLINE                Subr   51                                                             28                                
 INT_USPLINE                Subr   58                                                             29                                
 PIETC                      Module 24                                                             24                                
 PKIND                      Module 23                                                             23                                
 PSPL                       Module 21                                                                                               

Page 85          Source Listing                  CONVERTD_BACK
2017-04-18 11:09                                 pspl.f90

   2087 
   2088 end module pspl

Page 86          Source Listing                  CONVERTD_BACK
2017-04-18 11:09 Subprograms/Common Blocks       pspl.f90



SUBPROGRAMS/COMMON BLOCKS

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BEST_TSLALOM               Subr   1127                                          PRIV                                               
 BEST_USLALOM               Subr   1207                                          PRIV                                               
 CONVERTD                   Subr   1964                                                                                             
 CONVERTD_BACK              Subr   2054                                                                                             
 COSHM                      Func   114      R(8)            8           scalar                                                      
 COSHMM                     Func   144      R(8)            8           scalar                                                      
 COUNT_GATES                Subr   1274                                                                                             
 COUNT_ROUTES               Subr   1515                                                                                             
 ENBASE_T                   Func   178      R(8)            8           scalar                                                      
 EVAL_ITSPLINE              Subr   889                                                                                              
 EVAL_IUSPLINE              Subr   1087                                                                                             
 EVAL_TSPLINE               Subr   714                                                                                              
 EVAL_TSPLINED              Subr   756                                           PRIV             239,356                           
 EVAL_TSPLINEDD             Subr   798                                           PRIV                                               
 EVAL_TSPLINEDDD            Subr   843                                           PRIV                                               
 EVAL_USPLINE               Subr   930                                                                                              
 EVAL_USPLINED              Subr   973                                           PRIV             293,576                           
 EVAL_USPLINEDD             Subr   1010                                          PRIV                                               
 EVAL_USPLINEDDD            Subr   1048                                          PRIV                                               
 EXPM                       Func   76       R(8)            8           scalar                                                      
 EXPMM                      Func   95       R(8)            8           scalar                                                      
 FIT_GTSPLINE               Subr   320                                           PRIV             1734,1769                         
 FIT_GUSPLINE               Subr   540                                           PRIV             1870,1905                         
 FIT_TSPLINE                Subr   363                                                                                              
 FIT_USPLINE                Subr   583                                                                                              
 INT_TSPLINE                Subr   495                                                                                              
 INT_USPLINE                Subr   673                                                                                              
 LIST_ROUTES                Subr   1537                                                                                             
 NEXT_ROUTE                 Subr   1564                                                                                             
 PSPL                       Module 21                                                                                               
 SET_GATES                  Subr   1297                                                                                             
 SET_POSTS                  Subr   1455                                                                                             
 SINHM                      Func   125      R(8)            8           scalar                                                      
 SLALOM_TSPLINE             Subr   1630                                                                                             
 SLALOM_USPLINE             Subr   1828                                                                                             
 TBNEWTON                   Subr   196                                           PRIV                                               
 UBNEWTON                   Subr   266                                           PRIV                                               
 XCMS                       Func   158      R(8)            8           scalar                                                      

COMPILER OPTIONS BEING USED

       -align noall                          -align nonone
       -align nocommons                      -align nodcommons
       -align noqcommons                     -align nozcommons
       -align records                        -align nosequence
       -align norec1byte                     -align norec2byte
       -align norec4byte                     -align norec8byte
       -align norec16byte                    -align norec32byte
       -align norec64byte                    -align noarray8byte
       -align noarray16byte                  -align noarray32byte
       -align noarray64byte                  -align noarray128byte

Page 87          Source Listing                  CONVERTD_BACK
2017-04-18 11:09                                 pspl.f90

       -align noarray256byte                 -altparam
       -assume accuracy_sensitive            -assume nobscc
       -assume nobuffered_io                 -assume nobuffered_stdout
       -assume nobyterecl                    -assume nocc_omp
       -assume nocstring                     -assume nodummy_aliases
       -assume nofpe_summary                 -assume noieee_fpe_flags
       -assume nominus0                      -assume noold_boz
       -assume old_complex_align             -assume old_unit_star
       -assume noold_ldout_format            -assume noold_logical_ldio
       -assume old_maxminloc                 -assume old_xor
       -assume noprotect_allocates           -assume protect_constants
       -assume noprotect_parens              -assume split_common
       -assume source_include                -assume nostd_intent_in
       -assume std_minus0_rounding           -assume nostd_mod_proc_name
       -assume std_value                     -assume norealloc_lhs
       -assume underscore                    -assume no2underscores
  no   -auto                                 -auto_scalar
  no   -bintext                              -ccdefault default
       -check noargs                         -check noarg_temp_created
       -check noassume                       -check nobounds
       -check noformat                       -check nooutput_conversion
       -check nooverflow                     -check nopointers
       -check power                          -check noshape
       -check nostack                        -check nounderflow
       -check nouninitialized                -coarray-num-procs 0
  no   -coarray-config-file                  -convert big_endian
       -cross_reference                      -D __INTEL_COMPILER=1600
       -D __INTEL_COMPILER_UPDATE=3          -D __unix__
       -D __unix                             -D __linux__
       -D __linux                            -D __gnu_linux__
       -D unix                               -D linux
       -D __ELF__                            -D __x86_64
       -D __x86_64__                         -D __amd64
       -D __amd64__                          -D __INTEL_COMPILER_BUILD_DATE=20160415
       -D __INTEL_OFFLOAD                    -D __i686
       -D __i686__                           -D __pentiumpro
       -D __pentiumpro__                     -D __pentium4
       -D __pentium4__                       -D __tune_pentium4__
       -D __SSE2__                           -D __SSE2_MATH__
       -D __SSE__                            -D __SSE_MATH__
       -D __MMX__                            -double_size 64
  no   -d_lines                         no   -Qdyncom
       -error_limit 30                  no   -f66
  no   -f77rtl                          no   -fast
       -fpscomp nofilesfromcmd               -fpscomp nogeneral
       -fpscomp noioformat                   -fpscomp noldio_spacing
       -fpscomp nologicals              no   -fpconstant
       -fpe3                                 -fprm nearest
  no   -ftz                                  -fp_model noprecise
       -fp_model fast                        -fp_model nostrict
       -fp_model nosource                    -fp_model nodouble
       -fp_model noextended                  -fp_model novery_fast
       -fp_model noexcept                    -fp_model nono_except
       -heap_arrays 0                   no   -threadprivate_compat
       -free                                 -g2
       -iface nomixed_str_len_arg            -iface nono_mixed_str_len_arg
       -init noarrays                        -init noinf

Page 88          Source Listing                  CONVERTD_BACK
2017-04-18 11:09                                 pspl.f90

       -init nonan                           -init nosnan
       -init nozero                     no   -intconstant
       -integer_size 32                 no   -mixed_str_len_arg
  no   -module                               -names lowercase
  no   -noinclude                            -offload-build=host
       -O2                              no   -pad_source
       -real_size 32                    no   -recursive
       -reentrancy none                 no   -sharable_localsaves
       -vec=simd                             -show noinclude
       -show map                             -show options
  no   -syntax_only                     no   -threadcom
  no   -U                               no   -vms
       -w noall                              -w nonone
       -w alignments                         -w noargument_checking
       -w nodeclarations                     -w general
       -w noignore_bounds                    -w noignore_loc
       -w nointerfaces                       -w notruncated_source
       -w uncalled                           -w uninitialized
       -w nounused                           -w usage
  no   -wrap-margins

       -includepath : /usrx/local/intel/2016SP3/daal/include/,/usr/include/,.FOR,./.FOR,/usrx/local/intel/2016SP3/ipp/include/.FOR,
           /usrx/local/intel/2016SP3/mkl/include/.FOR,/usrx/local/intel/2016SP3/tbb/include/.FOR,/usrx/local/intel/2016SP3/daal/include/.FOR,
           /gpfs/tp1/usrx/local/intel/2016SP3/compilers_and_libraries_2016.3.210/linux/compiler/include/intel64/.FOR,
           /gpfs/tp1/usrx/local/intel/2016SP3/compilers_and_libraries_2016.3.210/linux/compiler/include/.FOR,/usr/local/include/.FOR,
           /usr/lib/gcc/x86_64-redhat-linux/4.4.7/include/.FOR,/usr/include/.FOR,/usr/include/.FOR,/usr/include/.FOR
       -list filename : pspl.lst
       -o    filename : none

COMPILER: Intel(R) Fortran 16.0-1633
