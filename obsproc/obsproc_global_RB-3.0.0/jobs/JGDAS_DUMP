#!/bin/bash
set -xa
date -u

###################################################################
# Set DEBUG LEVEL - modifies info in execution trace prompt string
###################################################################
export DEBUG_LEVEL=${DEBUG_LEVEL=1}
case $DEBUG_LEVEL in
  1) export PS4='+ ${SECONDS}s + ' ;;       # add seconds (this is typical case)
  0) export PS4='+ ';;                      # don't include seconds (useful if
                                            #  want to diff output from 2 runs)
  2) export PS4='+ ${SECONDS}s:L$LINENO + ';;         # add script line #
  3) export PS4='+ ${SECONDS}s:${0##*/}:L$LINENO + ';;# add script name & line #
  4) export PS4='+ ${0##*/}:L$LINENO + ';;  # script name & line (no seconds)
  *) echo "Unrecognized DEBUG_LEVEL.  Stay with current PS4 setting";;
esac

########################################
# Check that required variables are set
########################################
set +x
echo
echo cyc is ${cyc:?"###FATAL ERROR \"cyc\" is not set"}
echo envir is ${envir:?"###FATAL ERROR \"envir\" is not set"}
echo job is ${job:?"###FATAL ERROR \"job\" is not set"}
echo DATAROOT is ${DATAROOT:?"###FATAL ERROR \"DATAROOT\" is not set"}
echo
set -x

################################
# Print out version information
################################
set +x
echo
echo "####################################################################"
echo
echo "Current OBSPROC_GLOBAL version is ${obsproc_global_ver:-not set}"
echo "OBSPROC_DUMP version used by this job is ${obsproc_dump_ver:-not set}"
echo "OBSPROC_SHARED_BUFR_DUMPLIST version used by this job is" \
       "${obsproc_shared_bufr_dumplist_ver:-not set}"
echo "grib_util module version used by this job is ${grib_util_ver:-not set}"
echo
echo "####################################################################"
echo
set -x

#####################################################################
# List modules loaded for this job
#   On luna/surge may need to initialize the Modules package to find
#   the module command.  Will do so for either system.
#####################################################################
if [ -f /opt/modules/default/init/sh ]; then  # on luna/surge
  . /opt/modules/default/init/sh 2>/dev/null
elif [ -f /usrx/local/Modules/default/init/sh ]; then  # on tide/gyre
  . /usrx/local/Modules/default/init/sh 2>/dev/null
fi
set +x
echo
echo "####################################################################"
echo
      module list
echo
echo "####################################################################"
echo
set -x

######################
# Specify NET and RUN
######################
export NET=${NET:-gfs}
export RUN=${RUN:-gdas}
export RUND=${RUND:-gdas}    # gdas1->gdas transitional variable
# Variable "$RUND" will be used temporarily to set default gdas COM directories.
#  This replaces old variable "$model", which NCO now uses for another purpose.
#  Use of $RUND (rather than $RUN) to set gdas COM directories is intended as a
#  transitional safety measure in case $RUN (used in child scripts to define the
#  leading filename segment) needs to be reverted back to "gdas1".

##############################
# Specify cycle and time-mark
##############################
export cycle=t${cyc}z
export tmmark=tm00

###############################
# Create new working directory
###############################
jobid=${jobid:-${job}.$(hostname -s).$$}
export DATA=${DATA:-$DATAROOT/${jobid}}
rm -rf $DATA
mkdir -p $DATA
cd $DATA
export pgmout=OUTPUT.$$
if [[ "$RUN_ENVIR" != nco ]]; then
  TMPDIR=$DATAROOT  # In the event TMPDIR is reset to a temporary LSF
                    #  directory when batch jobs are submitted, set it to
                    #  $DATAROOT so ensure it remains under the user's control
                    #  (normally needed only if child script dumpjb executed)
fi

######################################
# Set job log file for postmsg output
######################################
jlogfile=${jlogfile:-${DATA}/jlogfile}

#################################################
# SENDCOM      - Copy files to $COMOUT directory
# SENDECF      - Flag Events on ECFLOW
# SENDDBN      - Alert output file to TOC
#################################################
export SENDCOM=${SENDCOM:-YES}
export SENDECF=${SENDECF:-YES}
export SENDDBN=${SENDDBN:-YES}

######################################################
# Phase 1 --> Phase 2 --> Cray  Transitional Settings
######################################################
COMROOTp1=${COMROOTp1:-/com}
COMROOTp2=${COMROOTp2:-/com2}

##########################
# Specify Execution Areas
##########################

# -------------------------------
# Paths for obsproc_network items
# -------------------------------
export HOMEobsproc_network=${HOMEobsproc_network:\
-${NWROOT:?}/obsproc_global.${obsproc_global_ver:?\
"###FATAL ERROR \"obsproc_global_ver\" is not set"}}

export SCRIPTSobsproc_global=${SCRIPTSobsproc_global:\
-$HOMEobsproc_network/scripts}

# ----------------------------
# Paths for obsproc_dump items
# ----------------------------
export HOMEobsproc_dump=${HOMEobsproc_dump:\
-${NWROOT:?}/obsproc_dump.${obsproc_dump_ver:?\
"###FATAL ERROR \"obsproc_dump_ver\" is not set"}}

export USHobsproc_dump=${USHobsproc_dump:-$HOMEobsproc_dump/ush}

# NOTE: path to dump executables defaults to $HOMEobsproc_dump/exec in dumpjb

# directory path to data dump script executed in model script
# -----------------------------------------------------------
export ushscript_dump=${ushscript_dump:-$USHobsproc_dump}

# ---------------------------------------------------------
# Paths for combined obsproc_network and obsproc_dump items
# ---------------------------------------------------------

# directory paths to SSMI dump re-processing executed in bufr_dump_obs
# --------------------------------------------------------------------
export EXECPREP=${EXECPREP:-$HOMEobsproc_dump/exec}
export PARMPREP=${PARMPREP:-$HOMEobsproc_network/parm}
export FIXPREP=${FIXPREP:-$HOMEobsproc_dump/fix}

# directory paths to ERS, QuikSCAT & ASCAT dump re-processing executed in
#  bufr_dump_obs
# -----------------------------------------------------------------------
export EXECWAVE=${EXECWAVE:-$HOMEobsproc_dump/exec}
export PARMWAVE=${PARMWAVE:-$HOMEobsproc_network/parm}
export FIXWAVE=${FIXWAVE:-$HOMEobsproc_dump/fix}

# directory paths to SSMI & WindSAT dump re-processing executed in bufr_dump_obs
# ------------------------------------------------------------------------------
export EXECbufr=${EXECbufr:-$HOMEobsproc_dump/exec}
export PARMbufr=${PARMbufr:-$HOMEobsproc_network/parm}
export FIXbufr=${FIXbufr:-$HOMEobsproc_dump/fix}

# --------------------------------------------
# Paths for obsproc_shared_bufr_dumplist items
# --------------------------------------------
export HOMEobsproc_shared_bufr_dumplist=${HOMEobsproc_shared_bufr_dumplist:\
-${NWROOT:?}/obsproc_shared/bufr_dumplist.${obsproc_shared_bufr_dumplist_ver:?\
"###FATAL ERROR \"obsproc_shared_bufr_dumplist_ver\" is not set"}}

export FIXobsproc_shared_bufr_dumplist=${FIXobsproc_shared_bufr_dumplist:\
-$HOMEobsproc_shared_bufr_dumplist/fix}

# ---------------------------
# Paths for non-obsproc items
# ---------------------------

# TANK is root directory path to observational database used in dumpjb
# --------------------------------------------------------------------
export DCOMROOT=${DCOMROOT:-/dcom}
export TANK=${TANK:-${DCOMROOT}/us007003}

# directory paths to ice, sst & snowdepth grib files used in model script
# -----------------------------------------------------------------------
export COM_ENGICE=${COM_ENGICE:-$COMROOTp2/omb/prod/sice}
export COM_ICE5MIN=${COM_ICE5MIN:-$COMROOTp2/omb/prod/sice}
export COM_SSTOI=${COM_SSTOI:-$COMROOTp1/gfs/prod/sst}
export COM_SSTRTG=${COM_SSTRTG:-$COMROOTp2/gfs/prod/sst}
export TANK_GRIBFLDS=${TANK_GRIBFLDS:-${DCOMROOT}/us007003}

#########################################################################
# Add some prod utilities to working directory
#########################################################################
echo "step ############# break ##############################" > ./break
cp $UTILROOT/ush/err_chk   .; chmod +x err_chk
cp $UTILROOT/ush/err_exit  .; chmod +x err_exit
cp $UTILROOT/ush/prep_step .; chmod +x prep_step
cp $UTILROOT/ush/postmsg   .; chmod +x postmsg
cp $UTILROOT/ush/setpdy.sh .; chmod +x setpdy.sh

##########################################
# Run setpdy and initialize PDY variables
##########################################
./setpdy.sh
. PDY

#########################
# Define COM directories
#########################
export COMIN_ROOT=${COMIN_ROOT:-${COMROOT:-""}}

if [[ "$RUN_ENVIR" == nco ]]; then
  export COMIN=${COMIN_ROOT:?}/${NET}/${envir}/${RUND}.${PDY}
  export COMOUT=${COMROOT:?}/${NET}/${envir}/${RUND}.${PDY}
  mkdir -m 775 -p $COMOUT
else
  export COMIN=${COMIN:-${COMIN_ROOT:?}/${NET}/${envir}/${RUND}.${PDY}}

# COMOUT_ROOT for developers defaults to unique $DATA/com directory as root to
#  prevent job from writing into a non-unique directory that might already have
#  output in it from a previous checkout run for the same cycle
# -----------------------------------------------------------------------------
  export COMOUT_ROOT=${COMOUT_ROOT:-${DATA}/com}
  export COMOUT=${COMOUT:-${COMOUT_ROOT}/${NET}/${envir}/${RUND}.${PDY}}
  mkdir -m 755 -p $COMOUT
fi

############################################
# SETUP GDAS DATA DUMP PROCESSING VARIABLES
############################################

#########################################################
# Specify variables specific to this execution of script
#########################################################
export PROCESS_GRIBFLDS=${PROCESS_GRIBFLDS:-YES}
export PROCESS_DUMP=${PROCESS_DUMP:-YES}
export prepssmi=NO # "spssmi" reprocessed dump no longer generated
                   # since SSM/I instrument on F-13 has failed (11/2009)
export KEEP_NEARDUP_ACFT=${KEEP_NEARDUP_ACFT:-NO} # toss near-dupl. acft rpts

# During the period where both Goodberlet and NN3 SSM/I products are
#  being dumped, switch PREPSSMI_PROD_TYPE will direct the PREPSSMI
#  program to process from SSM/I data dumps that are either all GOODBERLET,
#  all NEURAL_NET3 or some COMBINATION of these two
#   -- rendered meaningless after 11/2009 since prepssmi now set to "no" (above)

export PREPSSMI_PROD_TYPE=COMBINATION

# POE must be set to on if running poe
###export POE=on

# -- or -- BACK must be set to on if running background shells
export BACK=on # "on" is default

env

export NET=gdas
#####################
# Execute the script
#####################
$SCRIPTSobsproc_global/exglobal_dump.sh.ecf
eval err_${RUN}_dump=$?

echo "`hostname`  --  `date -u`" > $COMOUT/where_${cycle}_${RUN}_dump_ran

> $COMOUT/obsproc_version_for_${cycle}_${RUN}_dump_run
[ -n "$obsproc_global_ver" ]  &&  \
 echo "Current OBSPROC_GLOBAL version is $obsproc_global_ver" >> \
 $COMOUT/obsproc_version_for_${cycle}_${RUN}_dump_run
[ -n "$obsproc_dump_ver" ]  &&  \
 echo "OBSPROC_DUMP version used by this job is $obsproc_dump_ver" >> \
 $COMOUT/obsproc_version_for_${cycle}_${RUN}_dump_run
[ -n "$obsproc_shared_bufr_dumplist_ver" ]  &&  \
 echo "OBSPROC_SHARED_BUFR_DUMPLIST version used by this job is \
$obsproc_shared_bufr_dumplist_ver" >> \
 $COMOUT/obsproc_version_for_${cycle}_${RUN}_dump_run
echo "Version of module \"grib_util\" used by this job is $grib_util_ver" \
 >> $COMOUT/obsproc_version_for_${cycle}_${RUN}_dump_run

if [ "$KEEPDATA" != YES ]; then
   cd $DATAROOT
   rm -rf $DATA
fi
date -u

exit
